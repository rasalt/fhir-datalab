// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/stu3/extensions.proto

#ifndef PROTOBUF_INCLUDED_proto_2fstu3_2fextensions_2eproto
#define PROTOBUF_INCLUDED_proto_2fstu3_2fextensions_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/stu3/annotations.pb.h"
#include "proto/stu3/codes.pb.h"
#include "proto/stu3/datatypes.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fstu3_2fextensions_2eproto 

namespace protobuf_proto_2fstu3_2fextensions_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[403];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2fstu3_2fextensions_2eproto
namespace google {
namespace fhir {
namespace stu3 {
namespace proto {
class AddressADUse;
class AddressADUseDefaultTypeInternal;
extern AddressADUseDefaultTypeInternal _AddressADUse_default_instance_;
class AddressADXPAdditionalLocator;
class AddressADXPAdditionalLocatorDefaultTypeInternal;
extern AddressADXPAdditionalLocatorDefaultTypeInternal _AddressADXPAdditionalLocator_default_instance_;
class AddressADXPBuildingNumberSuffix;
class AddressADXPBuildingNumberSuffixDefaultTypeInternal;
extern AddressADXPBuildingNumberSuffixDefaultTypeInternal _AddressADXPBuildingNumberSuffix_default_instance_;
class AddressADXPCareOf;
class AddressADXPCareOfDefaultTypeInternal;
extern AddressADXPCareOfDefaultTypeInternal _AddressADXPCareOf_default_instance_;
class AddressADXPCensusTract;
class AddressADXPCensusTractDefaultTypeInternal;
extern AddressADXPCensusTractDefaultTypeInternal _AddressADXPCensusTract_default_instance_;
class AddressADXPDelimiter;
class AddressADXPDelimiterDefaultTypeInternal;
extern AddressADXPDelimiterDefaultTypeInternal _AddressADXPDelimiter_default_instance_;
class AddressADXPDeliveryAddressLine;
class AddressADXPDeliveryAddressLineDefaultTypeInternal;
extern AddressADXPDeliveryAddressLineDefaultTypeInternal _AddressADXPDeliveryAddressLine_default_instance_;
class AddressADXPDeliveryInstallationArea;
class AddressADXPDeliveryInstallationAreaDefaultTypeInternal;
extern AddressADXPDeliveryInstallationAreaDefaultTypeInternal _AddressADXPDeliveryInstallationArea_default_instance_;
class AddressADXPDeliveryInstallationQualifier;
class AddressADXPDeliveryInstallationQualifierDefaultTypeInternal;
extern AddressADXPDeliveryInstallationQualifierDefaultTypeInternal _AddressADXPDeliveryInstallationQualifier_default_instance_;
class AddressADXPDeliveryInstallationType;
class AddressADXPDeliveryInstallationTypeDefaultTypeInternal;
extern AddressADXPDeliveryInstallationTypeDefaultTypeInternal _AddressADXPDeliveryInstallationType_default_instance_;
class AddressADXPDeliveryMode;
class AddressADXPDeliveryModeDefaultTypeInternal;
extern AddressADXPDeliveryModeDefaultTypeInternal _AddressADXPDeliveryMode_default_instance_;
class AddressADXPDeliveryModeIdentifier;
class AddressADXPDeliveryModeIdentifierDefaultTypeInternal;
extern AddressADXPDeliveryModeIdentifierDefaultTypeInternal _AddressADXPDeliveryModeIdentifier_default_instance_;
class AddressADXPDirection;
class AddressADXPDirectionDefaultTypeInternal;
extern AddressADXPDirectionDefaultTypeInternal _AddressADXPDirection_default_instance_;
class AddressADXPHouseNumber;
class AddressADXPHouseNumberDefaultTypeInternal;
extern AddressADXPHouseNumberDefaultTypeInternal _AddressADXPHouseNumber_default_instance_;
class AddressADXPHouseNumberNumeric;
class AddressADXPHouseNumberNumericDefaultTypeInternal;
extern AddressADXPHouseNumberNumericDefaultTypeInternal _AddressADXPHouseNumberNumeric_default_instance_;
class AddressADXPPostBox;
class AddressADXPPostBoxDefaultTypeInternal;
extern AddressADXPPostBoxDefaultTypeInternal _AddressADXPPostBox_default_instance_;
class AddressADXPPrecinct;
class AddressADXPPrecinctDefaultTypeInternal;
extern AddressADXPPrecinctDefaultTypeInternal _AddressADXPPrecinct_default_instance_;
class AddressADXPStreetAddressLine;
class AddressADXPStreetAddressLineDefaultTypeInternal;
extern AddressADXPStreetAddressLineDefaultTypeInternal _AddressADXPStreetAddressLine_default_instance_;
class AddressADXPStreetName;
class AddressADXPStreetNameDefaultTypeInternal;
extern AddressADXPStreetNameDefaultTypeInternal _AddressADXPStreetName_default_instance_;
class AddressADXPStreetNameBase;
class AddressADXPStreetNameBaseDefaultTypeInternal;
extern AddressADXPStreetNameBaseDefaultTypeInternal _AddressADXPStreetNameBase_default_instance_;
class AddressADXPStreetNameType;
class AddressADXPStreetNameTypeDefaultTypeInternal;
extern AddressADXPStreetNameTypeDefaultTypeInternal _AddressADXPStreetNameType_default_instance_;
class AddressADXPUnitID;
class AddressADXPUnitIDDefaultTypeInternal;
extern AddressADXPUnitIDDefaultTypeInternal _AddressADXPUnitID_default_instance_;
class AddressADXPUnitType;
class AddressADXPUnitTypeDefaultTypeInternal;
extern AddressADXPUnitTypeDefaultTypeInternal _AddressADXPUnitType_default_instance_;
class AddressGeolocation;
class AddressGeolocationDefaultTypeInternal;
extern AddressGeolocationDefaultTypeInternal _AddressGeolocation_default_instance_;
class AllergyIntoleranceAdministration;
class AllergyIntoleranceAdministrationDefaultTypeInternal;
extern AllergyIntoleranceAdministrationDefaultTypeInternal _AllergyIntoleranceAdministration_default_instance_;
class AllergyIntoleranceCareplan;
class AllergyIntoleranceCareplanDefaultTypeInternal;
extern AllergyIntoleranceCareplanDefaultTypeInternal _AllergyIntoleranceCareplan_default_instance_;
class AllergyIntoleranceCertainty;
class AllergyIntoleranceCertaintyDefaultTypeInternal;
extern AllergyIntoleranceCertaintyDefaultTypeInternal _AllergyIntoleranceCertainty_default_instance_;
class AllergyIntoleranceDuration;
class AllergyIntoleranceDurationDefaultTypeInternal;
extern AllergyIntoleranceDurationDefaultTypeInternal _AllergyIntoleranceDuration_default_instance_;
class AllergyIntoleranceExposureDate;
class AllergyIntoleranceExposureDateDefaultTypeInternal;
extern AllergyIntoleranceExposureDateDefaultTypeInternal _AllergyIntoleranceExposureDate_default_instance_;
class AllergyIntoleranceExposureDescription;
class AllergyIntoleranceExposureDescriptionDefaultTypeInternal;
extern AllergyIntoleranceExposureDescriptionDefaultTypeInternal _AllergyIntoleranceExposureDescription_default_instance_;
class AllergyIntoleranceExposureDuration;
class AllergyIntoleranceExposureDurationDefaultTypeInternal;
extern AllergyIntoleranceExposureDurationDefaultTypeInternal _AllergyIntoleranceExposureDuration_default_instance_;
class AllergyIntoleranceLocation;
class AllergyIntoleranceLocationDefaultTypeInternal;
extern AllergyIntoleranceLocationDefaultTypeInternal _AllergyIntoleranceLocation_default_instance_;
class AllergyIntoleranceManagement;
class AllergyIntoleranceManagementDefaultTypeInternal;
extern AllergyIntoleranceManagementDefaultTypeInternal _AllergyIntoleranceManagement_default_instance_;
class AllergyIntoleranceReasonRefuted;
class AllergyIntoleranceReasonRefutedDefaultTypeInternal;
extern AllergyIntoleranceReasonRefutedDefaultTypeInternal _AllergyIntoleranceReasonRefuted_default_instance_;
class AllergyIntoleranceResolutionAge;
class AllergyIntoleranceResolutionAgeDefaultTypeInternal;
extern AllergyIntoleranceResolutionAgeDefaultTypeInternal _AllergyIntoleranceResolutionAge_default_instance_;
class AllergyIntoleranceSubstanceExposureRisk;
class AllergyIntoleranceSubstanceExposureRiskDefaultTypeInternal;
extern AllergyIntoleranceSubstanceExposureRiskDefaultTypeInternal _AllergyIntoleranceSubstanceExposureRisk_default_instance_;
class AllergyIntoleranceTest;
class AllergyIntoleranceTestDefaultTypeInternal;
extern AllergyIntoleranceTestDefaultTypeInternal _AllergyIntoleranceTest_default_instance_;
class AllergyIntoleranceTest_Value;
class AllergyIntoleranceTest_ValueDefaultTypeInternal;
extern AllergyIntoleranceTest_ValueDefaultTypeInternal _AllergyIntoleranceTest_Value_default_instance_;
class AnimalSpecies;
class AnimalSpeciesDefaultTypeInternal;
extern AnimalSpeciesDefaultTypeInternal _AnimalSpecies_default_instance_;
class AnyNullFlavor;
class AnyNullFlavorDefaultTypeInternal;
extern AnyNullFlavorDefaultTypeInternal _AnyNullFlavor_default_instance_;
class AnyPreferred;
class AnyPreferredDefaultTypeInternal;
extern AnyPreferredDefaultTypeInternal _AnyPreferred_default_instance_;
class AnyVerification;
class AnyVerificationDefaultTypeInternal;
extern AnyVerificationDefaultTypeInternal _AnyVerification_default_instance_;
class ApprovalDate;
class ApprovalDateDefaultTypeInternal;
extern ApprovalDateDefaultTypeInternal _ApprovalDate_default_instance_;
class AttachmentCitation;
class AttachmentCitationDefaultTypeInternal;
extern AttachmentCitationDefaultTypeInternal _AttachmentCitation_default_instance_;
class AttachmentQualityOfEvidence;
class AttachmentQualityOfEvidenceDefaultTypeInternal;
extern AttachmentQualityOfEvidenceDefaultTypeInternal _AttachmentQualityOfEvidence_default_instance_;
class AttachmentStrengthOfRecommendation;
class AttachmentStrengthOfRecommendationDefaultTypeInternal;
extern AttachmentStrengthOfRecommendationDefaultTypeInternal _AttachmentStrengthOfRecommendation_default_instance_;
class AuditEventAccession;
class AuditEventAccessionDefaultTypeInternal;
extern AuditEventAccessionDefaultTypeInternal _AuditEventAccession_default_instance_;
class AuditEventAnonymized;
class AuditEventAnonymizedDefaultTypeInternal;
extern AuditEventAnonymizedDefaultTypeInternal _AuditEventAnonymized_default_instance_;
class AuditEventEncrypted;
class AuditEventEncryptedDefaultTypeInternal;
extern AuditEventEncryptedDefaultTypeInternal _AuditEventEncrypted_default_instance_;
class AuditEventInstance;
class AuditEventInstanceDefaultTypeInternal;
extern AuditEventInstanceDefaultTypeInternal _AuditEventInstance_default_instance_;
class AuditEventMPPS;
class AuditEventMPPSDefaultTypeInternal;
extern AuditEventMPPSDefaultTypeInternal _AuditEventMPPS_default_instance_;
class AuditEventNumberOfInstances;
class AuditEventNumberOfInstancesDefaultTypeInternal;
extern AuditEventNumberOfInstancesDefaultTypeInternal _AuditEventNumberOfInstances_default_instance_;
class AuditEventParticipantObjectContainsStudy;
class AuditEventParticipantObjectContainsStudyDefaultTypeInternal;
extern AuditEventParticipantObjectContainsStudyDefaultTypeInternal _AuditEventParticipantObjectContainsStudy_default_instance_;
class AuditEventSOPClass;
class AuditEventSOPClassDefaultTypeInternal;
extern AuditEventSOPClassDefaultTypeInternal _AuditEventSOPClass_default_instance_;
class BallotStatus;
class BallotStatusDefaultTypeInternal;
extern BallotStatusDefaultTypeInternal _BallotStatus_default_instance_;
class BasicEncounterClass;
class BasicEncounterClassDefaultTypeInternal;
extern BasicEncounterClassDefaultTypeInternal _BasicEncounterClass_default_instance_;
class BasicEncounterType;
class BasicEncounterTypeDefaultTypeInternal;
extern BasicEncounterTypeDefaultTypeInternal _BasicEncounterType_default_instance_;
class BasicInitiatingOrganization;
class BasicInitiatingOrganizationDefaultTypeInternal;
extern BasicInitiatingOrganizationDefaultTypeInternal _BasicInitiatingOrganization_default_instance_;
class BasicInitiatingPerson;
class BasicInitiatingPersonDefaultTypeInternal;
extern BasicInitiatingPersonDefaultTypeInternal _BasicInitiatingPerson_default_instance_;
class BasicInitiatingPerson_Value;
class BasicInitiatingPerson_ValueDefaultTypeInternal;
extern BasicInitiatingPerson_ValueDefaultTypeInternal _BasicInitiatingPerson_Value_default_instance_;
class BasicReceivingOrganization;
class BasicReceivingOrganizationDefaultTypeInternal;
extern BasicReceivingOrganizationDefaultTypeInternal _BasicReceivingOrganization_default_instance_;
class BasicReceivingPerson;
class BasicReceivingPersonDefaultTypeInternal;
extern BasicReceivingPersonDefaultTypeInternal _BasicReceivingPerson_default_instance_;
class BasicReceivingPerson_Value;
class BasicReceivingPerson_ValueDefaultTypeInternal;
extern BasicReceivingPerson_ValueDefaultTypeInternal _BasicReceivingPerson_Value_default_instance_;
class BasicRecipientLanguage;
class BasicRecipientLanguageDefaultTypeInternal;
extern BasicRecipientLanguageDefaultTypeInternal _BasicRecipientLanguage_default_instance_;
class BasicRecipientType;
class BasicRecipientTypeDefaultTypeInternal;
extern BasicRecipientTypeDefaultTypeInternal _BasicRecipientType_default_instance_;
class BasicSystemUserLanguage;
class BasicSystemUserLanguageDefaultTypeInternal;
extern BasicSystemUserLanguageDefaultTypeInternal _BasicSystemUserLanguage_default_instance_;
class BasicSystemUserTaskContext;
class BasicSystemUserTaskContextDefaultTypeInternal;
extern BasicSystemUserTaskContextDefaultTypeInternal _BasicSystemUserTaskContext_default_instance_;
class BasicSystemUserType;
class BasicSystemUserTypeDefaultTypeInternal;
extern BasicSystemUserTypeDefaultTypeInternal _BasicSystemUserType_default_instance_;
class BodySiteInstance;
class BodySiteInstanceDefaultTypeInternal;
extern BodySiteInstanceDefaultTypeInternal _BodySiteInstance_default_instance_;
class BundleHttpResponseHeader;
class BundleHttpResponseHeaderDefaultTypeInternal;
extern BundleHttpResponseHeaderDefaultTypeInternal _BundleHttpResponseHeader_default_instance_;
class BundleLocationDistance;
class BundleLocationDistanceDefaultTypeInternal;
extern BundleLocationDistanceDefaultTypeInternal _BundleLocationDistance_default_instance_;
class BundleMatchGrade;
class BundleMatchGradeDefaultTypeInternal;
extern BundleMatchGradeDefaultTypeInternal _BundleMatchGrade_default_instance_;
class CalculatedValue;
class CalculatedValueDefaultTypeInternal;
extern CalculatedValueDefaultTypeInternal _CalculatedValue_default_instance_;
class CapabilityStatementExpectation;
class CapabilityStatementExpectationDefaultTypeInternal;
extern CapabilityStatementExpectationDefaultTypeInternal _CapabilityStatementExpectation_default_instance_;
class CapabilityStatementProhibited;
class CapabilityStatementProhibitedDefaultTypeInternal;
extern CapabilityStatementProhibitedDefaultTypeInternal _CapabilityStatementProhibited_default_instance_;
class CapabilityStatementSearchParameterCombination;
class CapabilityStatementSearchParameterCombinationDefaultTypeInternal;
extern CapabilityStatementSearchParameterCombinationDefaultTypeInternal _CapabilityStatementSearchParameterCombination_default_instance_;
class CapabilityStatementSupportedSystem;
class CapabilityStatementSupportedSystemDefaultTypeInternal;
extern CapabilityStatementSupportedSystemDefaultTypeInternal _CapabilityStatementSupportedSystem_default_instance_;
class CapabilityStatementWebsocket;
class CapabilityStatementWebsocketDefaultTypeInternal;
extern CapabilityStatementWebsocketDefaultTypeInternal _CapabilityStatementWebsocket_default_instance_;
class CarePlanActivityTitle;
class CarePlanActivityTitleDefaultTypeInternal;
extern CarePlanActivityTitleDefaultTypeInternal _CarePlanActivityTitle_default_instance_;
class CodeSystemAuthor;
class CodeSystemAuthorDefaultTypeInternal;
extern CodeSystemAuthorDefaultTypeInternal _CodeSystemAuthor_default_instance_;
class CodeSystemComment;
class CodeSystemCommentDefaultTypeInternal;
extern CodeSystemCommentDefaultTypeInternal _CodeSystemComment_default_instance_;
class CodeSystemComments;
class CodeSystemCommentsDefaultTypeInternal;
extern CodeSystemCommentsDefaultTypeInternal _CodeSystemComments_default_instance_;
class CodeSystemConceptOrder;
class CodeSystemConceptOrderDefaultTypeInternal;
extern CodeSystemConceptOrderDefaultTypeInternal _CodeSystemConceptOrder_default_instance_;
class CodeSystemDeprecated;
class CodeSystemDeprecatedDefaultTypeInternal;
extern CodeSystemDeprecatedDefaultTypeInternal _CodeSystemDeprecated_default_instance_;
class CodeSystemEffectiveDate;
class CodeSystemEffectiveDateDefaultTypeInternal;
extern CodeSystemEffectiveDateDefaultTypeInternal _CodeSystemEffectiveDate_default_instance_;
class CodeSystemExpirationDate;
class CodeSystemExpirationDateDefaultTypeInternal;
extern CodeSystemExpirationDateDefaultTypeInternal _CodeSystemExpirationDate_default_instance_;
class CodeSystemHistory;
class CodeSystemHistoryDefaultTypeInternal;
extern CodeSystemHistoryDefaultTypeInternal _CodeSystemHistory_default_instance_;
class CodeSystemHistory_Revision;
class CodeSystemHistory_RevisionDefaultTypeInternal;
extern CodeSystemHistory_RevisionDefaultTypeInternal _CodeSystemHistory_Revision_default_instance_;
class CodeSystemKeyWord;
class CodeSystemKeyWordDefaultTypeInternal;
extern CodeSystemKeyWordDefaultTypeInternal _CodeSystemKeyWord_default_instance_;
class CodeSystemLabel;
class CodeSystemLabelDefaultTypeInternal;
extern CodeSystemLabelDefaultTypeInternal _CodeSystemLabel_default_instance_;
class CodeSystemMap;
class CodeSystemMapDefaultTypeInternal;
extern CodeSystemMapDefaultTypeInternal _CodeSystemMap_default_instance_;
class CodeSystemOrdinalValue;
class CodeSystemOrdinalValueDefaultTypeInternal;
extern CodeSystemOrdinalValueDefaultTypeInternal _CodeSystemOrdinalValue_default_instance_;
class CodeSystemOtherName;
class CodeSystemOtherNameDefaultTypeInternal;
extern CodeSystemOtherNameDefaultTypeInternal _CodeSystemOtherName_default_instance_;
class CodeSystemReference;
class CodeSystemReferenceDefaultTypeInternal;
extern CodeSystemReferenceDefaultTypeInternal _CodeSystemReference_default_instance_;
class CodeSystemReplacedby;
class CodeSystemReplacedbyDefaultTypeInternal;
extern CodeSystemReplacedbyDefaultTypeInternal _CodeSystemReplacedby_default_instance_;
class CodeSystemSourceReference;
class CodeSystemSourceReferenceDefaultTypeInternal;
extern CodeSystemSourceReferenceDefaultTypeInternal _CodeSystemSourceReference_default_instance_;
class CodeSystemSubsumes;
class CodeSystemSubsumesDefaultTypeInternal;
extern CodeSystemSubsumesDefaultTypeInternal _CodeSystemSubsumes_default_instance_;
class CodeSystemTrustedExpansion;
class CodeSystemTrustedExpansionDefaultTypeInternal;
extern CodeSystemTrustedExpansionDefaultTypeInternal _CodeSystemTrustedExpansion_default_instance_;
class CodeSystemUsage;
class CodeSystemUsageDefaultTypeInternal;
extern CodeSystemUsageDefaultTypeInternal _CodeSystemUsage_default_instance_;
class CodeSystemWarning;
class CodeSystemWarningDefaultTypeInternal;
extern CodeSystemWarningDefaultTypeInternal _CodeSystemWarning_default_instance_;
class CodeSystemWorkflowStatus;
class CodeSystemWorkflowStatusDefaultTypeInternal;
extern CodeSystemWorkflowStatusDefaultTypeInternal _CodeSystemWorkflowStatus_default_instance_;
class CodingCOValue;
class CodingCOValueDefaultTypeInternal;
extern CodingCOValueDefaultTypeInternal _CodingCOValue_default_instance_;
class CodingSctdescid;
class CodingSctdescidDefaultTypeInternal;
extern CodingSctdescidDefaultTypeInternal _CodingSctdescid_default_instance_;
class CodingSourceValueSet;
class CodingSourceValueSetDefaultTypeInternal;
extern CodingSourceValueSetDefaultTypeInternal _CodingSourceValueSet_default_instance_;
class CommunicationMedia;
class CommunicationMediaDefaultTypeInternal;
extern CommunicationMediaDefaultTypeInternal _CommunicationMedia_default_instance_;
class CommunicationReasonNotPerformed;
class CommunicationReasonNotPerformedDefaultTypeInternal;
extern CommunicationReasonNotPerformedDefaultTypeInternal _CommunicationReasonNotPerformed_default_instance_;
class CommunicationRequestDefinition;
class CommunicationRequestDefinitionDefaultTypeInternal;
extern CommunicationRequestDefinitionDefaultTypeInternal _CommunicationRequestDefinition_default_instance_;
class CommunicationRequestDefinition_Value;
class CommunicationRequestDefinition_ValueDefaultTypeInternal;
extern CommunicationRequestDefinition_ValueDefaultTypeInternal _CommunicationRequestDefinition_Value_default_instance_;
class CommunicationRequestOrderedBy;
class CommunicationRequestOrderedByDefaultTypeInternal;
extern CommunicationRequestOrderedByDefaultTypeInternal _CommunicationRequestOrderedBy_default_instance_;
class CommunicationRequestOrderedBy_Value;
class CommunicationRequestOrderedBy_ValueDefaultTypeInternal;
extern CommunicationRequestOrderedBy_ValueDefaultTypeInternal _CommunicationRequestOrderedBy_Value_default_instance_;
class CommunicationRequestReasonRejected;
class CommunicationRequestReasonRejectedDefaultTypeInternal;
extern CommunicationRequestReasonRejectedDefaultTypeInternal _CommunicationRequestReasonRejected_default_instance_;
class CommunicationRequestRelevantHistory;
class CommunicationRequestRelevantHistoryDefaultTypeInternal;
extern CommunicationRequestRelevantHistoryDefaultTypeInternal _CommunicationRequestRelevantHistory_default_instance_;
class CommunicationRequestSupportingInfo;
class CommunicationRequestSupportingInfoDefaultTypeInternal;
extern CommunicationRequestSupportingInfoDefaultTypeInternal _CommunicationRequestSupportingInfo_default_instance_;
class CompositionOtherConfidentiality;
class CompositionOtherConfidentialityDefaultTypeInternal;
extern CompositionOtherConfidentialityDefaultTypeInternal _CompositionOtherConfidentiality_default_instance_;
class ConceptMapBidirectional;
class ConceptMapBidirectionalDefaultTypeInternal;
extern ConceptMapBidirectionalDefaultTypeInternal _ConceptMapBidirectional_default_instance_;
class ConditionBasedOn;
class ConditionBasedOnDefaultTypeInternal;
extern ConditionBasedOnDefaultTypeInternal _ConditionBasedOn_default_instance_;
class ConditionBasedOn_Value;
class ConditionBasedOn_ValueDefaultTypeInternal;
extern ConditionBasedOn_ValueDefaultTypeInternal _ConditionBasedOn_Value_default_instance_;
class ConditionCriticality;
class ConditionCriticalityDefaultTypeInternal;
extern ConditionCriticalityDefaultTypeInternal _ConditionCriticality_default_instance_;
class ConditionDefinition;
class ConditionDefinitionDefaultTypeInternal;
extern ConditionDefinitionDefaultTypeInternal _ConditionDefinition_default_instance_;
class ConditionDueTo;
class ConditionDueToDefaultTypeInternal;
extern ConditionDueToDefaultTypeInternal _ConditionDueTo_default_instance_;
class ConditionDueTo_Value;
class ConditionDueTo_ValueDefaultTypeInternal;
extern ConditionDueTo_ValueDefaultTypeInternal _ConditionDueTo_Value_default_instance_;
class ConditionOccurredFollowing;
class ConditionOccurredFollowingDefaultTypeInternal;
extern ConditionOccurredFollowingDefaultTypeInternal _ConditionOccurredFollowing_default_instance_;
class ConditionOccurredFollowing_Value;
class ConditionOccurredFollowing_ValueDefaultTypeInternal;
extern ConditionOccurredFollowing_ValueDefaultTypeInternal _ConditionOccurredFollowing_Value_default_instance_;
class ConditionOutcome;
class ConditionOutcomeDefaultTypeInternal;
extern ConditionOutcomeDefaultTypeInternal _ConditionOutcome_default_instance_;
class ConditionPartOf;
class ConditionPartOfDefaultTypeInternal;
extern ConditionPartOfDefaultTypeInternal _ConditionPartOf_default_instance_;
class ConditionPartOf_Value;
class ConditionPartOf_ValueDefaultTypeInternal;
extern ConditionPartOf_ValueDefaultTypeInternal _ConditionPartOf_Value_default_instance_;
class ConditionRuledOut;
class ConditionRuledOutDefaultTypeInternal;
extern ConditionRuledOutDefaultTypeInternal _ConditionRuledOut_default_instance_;
class ConditionTargetBodySite;
class ConditionTargetBodySiteDefaultTypeInternal;
extern ConditionTargetBodySiteDefaultTypeInternal _ConditionTargetBodySite_default_instance_;
class ConsentLocation;
class ConsentLocationDefaultTypeInternal;
extern ConsentLocationDefaultTypeInternal _ConsentLocation_default_instance_;
class ConsentNotificationEndpoint;
class ConsentNotificationEndpointDefaultTypeInternal;
extern ConsentNotificationEndpointDefaultTypeInternal _ConsentNotificationEndpoint_default_instance_;
class ConsentWitness;
class ConsentWitnessDefaultTypeInternal;
extern ConsentWitnessDefaultTypeInternal _ConsentWitness_default_instance_;
class ConsentWitness_Value;
class ConsentWitness_ValueDefaultTypeInternal;
extern ConsentWitness_ValueDefaultTypeInternal _ConsentWitness_Value_default_instance_;
class ContactPointTELAddress;
class ContactPointTELAddressDefaultTypeInternal;
extern ContactPointTELAddressDefaultTypeInternal _ContactPointTELAddress_default_instance_;
class CqifCondition;
class CqifConditionDefaultTypeInternal;
extern CqifConditionDefaultTypeInternal _CqifCondition_default_instance_;
class CqifLibrary;
class CqifLibraryDefaultTypeInternal;
extern CqifLibraryDefaultTypeInternal _CqifLibrary_default_instance_;
class CqlExpression;
class CqlExpressionDefaultTypeInternal;
extern CqlExpressionDefaultTypeInternal _CqlExpression_default_instance_;
class DataAbsentReason;
class DataAbsentReasonDefaultTypeInternal;
extern DataAbsentReasonDefaultTypeInternal _DataAbsentReason_default_instance_;
class DataElementAdministrativeStatus;
class DataElementAdministrativeStatusDefaultTypeInternal;
extern DataElementAdministrativeStatusDefaultTypeInternal _DataElementAdministrativeStatus_default_instance_;
class DataElementChangeDescription;
class DataElementChangeDescriptionDefaultTypeInternal;
extern DataElementChangeDescriptionDefaultTypeInternal _DataElementChangeDescription_default_instance_;
class DataElementClassificationOrContext;
class DataElementClassificationOrContextDefaultTypeInternal;
extern DataElementClassificationOrContextDefaultTypeInternal _DataElementClassificationOrContext_default_instance_;
class DataElementContactAddress;
class DataElementContactAddressDefaultTypeInternal;
extern DataElementContactAddressDefaultTypeInternal _DataElementContactAddress_default_instance_;
class DataElementDocumentReference;
class DataElementDocumentReferenceDefaultTypeInternal;
extern DataElementDocumentReferenceDefaultTypeInternal _DataElementDocumentReference_default_instance_;
class DataElementEffectivePeriod;
class DataElementEffectivePeriodDefaultTypeInternal;
extern DataElementEffectivePeriodDefaultTypeInternal _DataElementEffectivePeriod_default_instance_;
class DataElementIsDataElementConcept;
class DataElementIsDataElementConceptDefaultTypeInternal;
extern DataElementIsDataElementConceptDefaultTypeInternal _DataElementIsDataElementConcept_default_instance_;
class DataElementMapSourcePublisher;
class DataElementMapSourcePublisherDefaultTypeInternal;
extern DataElementMapSourcePublisherDefaultTypeInternal _DataElementMapSourcePublisher_default_instance_;
class DataElementRegistryOrg;
class DataElementRegistryOrgDefaultTypeInternal;
extern DataElementRegistryOrgDefaultTypeInternal _DataElementRegistryOrg_default_instance_;
class DataElementSubmitterOrg;
class DataElementSubmitterOrgDefaultTypeInternal;
extern DataElementSubmitterOrgDefaultTypeInternal _DataElementSubmitterOrg_default_instance_;
class DaysOfCycle;
class DaysOfCycleDefaultTypeInternal;
extern DaysOfCycleDefaultTypeInternal _DaysOfCycle_default_instance_;
class Definition;
class DefinitionDefaultTypeInternal;
extern DefinitionDefaultTypeInternal _Definition_default_instance_;
class Definition_Value;
class Definition_ValueDefaultTypeInternal;
extern Definition_ValueDefaultTypeInternal _Definition_Value_default_instance_;
class DeviceDin;
class DeviceDinDefaultTypeInternal;
extern DeviceDinDefaultTypeInternal _DeviceDin_default_instance_;
class DeviceImplantStatus;
class DeviceImplantStatusDefaultTypeInternal;
extern DeviceImplantStatusDefaultTypeInternal _DeviceImplantStatus_default_instance_;
class DeviceRequestPatientInstruction;
class DeviceRequestPatientInstructionDefaultTypeInternal;
extern DeviceRequestPatientInstructionDefaultTypeInternal _DeviceRequestPatientInstruction_default_instance_;
class DeviceRequestReasonRejected;
class DeviceRequestReasonRejectedDefaultTypeInternal;
extern DeviceRequestReasonRejectedDefaultTypeInternal _DeviceRequestReasonRejected_default_instance_;
class DiagnosticReportAddendumOf;
class DiagnosticReportAddendumOfDefaultTypeInternal;
extern DiagnosticReportAddendumOfDefaultTypeInternal _DiagnosticReportAddendumOf_default_instance_;
class DiagnosticReportAlleleDatabase;
class DiagnosticReportAlleleDatabaseDefaultTypeInternal;
extern DiagnosticReportAlleleDatabaseDefaultTypeInternal _DiagnosticReportAlleleDatabase_default_instance_;
class DiagnosticReportAnalysis;
class DiagnosticReportAnalysisDefaultTypeInternal;
extern DiagnosticReportAnalysisDefaultTypeInternal _DiagnosticReportAnalysis_default_instance_;
class DiagnosticReportAssessedCondition;
class DiagnosticReportAssessedConditionDefaultTypeInternal;
extern DiagnosticReportAssessedConditionDefaultTypeInternal _DiagnosticReportAssessedCondition_default_instance_;
class DiagnosticReportExtends;
class DiagnosticReportExtendsDefaultTypeInternal;
extern DiagnosticReportExtendsDefaultTypeInternal _DiagnosticReportExtends_default_instance_;
class DiagnosticReportFamilyMemberHistory;
class DiagnosticReportFamilyMemberHistoryDefaultTypeInternal;
extern DiagnosticReportFamilyMemberHistoryDefaultTypeInternal _DiagnosticReportFamilyMemberHistory_default_instance_;
class DiagnosticReportGlstring;
class DiagnosticReportGlstringDefaultTypeInternal;
extern DiagnosticReportGlstringDefaultTypeInternal _DiagnosticReportGlstring_default_instance_;
class DiagnosticReportHaploid;
class DiagnosticReportHaploidDefaultTypeInternal;
extern DiagnosticReportHaploidDefaultTypeInternal _DiagnosticReportHaploid_default_instance_;
class DiagnosticReportItem;
class DiagnosticReportItemDefaultTypeInternal;
extern DiagnosticReportItemDefaultTypeInternal _DiagnosticReportItem_default_instance_;
class DiagnosticReportLocationPerformed;
class DiagnosticReportLocationPerformedDefaultTypeInternal;
extern DiagnosticReportLocationPerformedDefaultTypeInternal _DiagnosticReportLocationPerformed_default_instance_;
class DiagnosticReportMethod;
class DiagnosticReportMethodDefaultTypeInternal;
extern DiagnosticReportMethodDefaultTypeInternal _DiagnosticReportMethod_default_instance_;
class DiagnosticReportNotDone;
class DiagnosticReportNotDoneDefaultTypeInternal;
extern DiagnosticReportNotDoneDefaultTypeInternal _DiagnosticReportNotDone_default_instance_;
class DiagnosticReportReplaces;
class DiagnosticReportReplacesDefaultTypeInternal;
extern DiagnosticReportReplacesDefaultTypeInternal _DiagnosticReportReplaces_default_instance_;
class DiagnosticReportSummaryOf;
class DiagnosticReportSummaryOfDefaultTypeInternal;
extern DiagnosticReportSummaryOfDefaultTypeInternal _DiagnosticReportSummaryOf_default_instance_;
class DoseType;
class DoseTypeDefaultTypeInternal;
extern DoseTypeDefaultTypeInternal _DoseType_default_instance_;
class EffectivePeriod;
class EffectivePeriodDefaultTypeInternal;
extern EffectivePeriodDefaultTypeInternal _EffectivePeriod_default_instance_;
class ElementDefinitionAllowedUnits;
class ElementDefinitionAllowedUnitsDefaultTypeInternal;
extern ElementDefinitionAllowedUnitsDefaultTypeInternal _ElementDefinitionAllowedUnits_default_instance_;
class ElementDefinitionAllowedUnits_Value;
class ElementDefinitionAllowedUnits_ValueDefaultTypeInternal;
extern ElementDefinitionAllowedUnits_ValueDefaultTypeInternal _ElementDefinitionAllowedUnits_Value_default_instance_;
class ElementDefinitionBestpractice;
class ElementDefinitionBestpracticeDefaultTypeInternal;
extern ElementDefinitionBestpracticeDefaultTypeInternal _ElementDefinitionBestpractice_default_instance_;
class ElementDefinitionBestpractice_Value;
class ElementDefinitionBestpractice_ValueDefaultTypeInternal;
extern ElementDefinitionBestpractice_ValueDefaultTypeInternal _ElementDefinitionBestpractice_Value_default_instance_;
class ElementDefinitionBindingName;
class ElementDefinitionBindingNameDefaultTypeInternal;
extern ElementDefinitionBindingNameDefaultTypeInternal _ElementDefinitionBindingName_default_instance_;
class ElementDefinitionDisplayHint;
class ElementDefinitionDisplayHintDefaultTypeInternal;
extern ElementDefinitionDisplayHintDefaultTypeInternal _ElementDefinitionDisplayHint_default_instance_;
class ElementDefinitionEquivalence;
class ElementDefinitionEquivalenceDefaultTypeInternal;
extern ElementDefinitionEquivalenceDefaultTypeInternal _ElementDefinitionEquivalence_default_instance_;
class ElementDefinitionExplicitTypeName;
class ElementDefinitionExplicitTypeNameDefaultTypeInternal;
extern ElementDefinitionExplicitTypeNameDefaultTypeInternal _ElementDefinitionExplicitTypeName_default_instance_;
class ElementDefinitionIdentifier;
class ElementDefinitionIdentifierDefaultTypeInternal;
extern ElementDefinitionIdentifierDefaultTypeInternal _ElementDefinitionIdentifier_default_instance_;
class ElementDefinitionInheritedExtensibleValueSet;
class ElementDefinitionInheritedExtensibleValueSetDefaultTypeInternal;
extern ElementDefinitionInheritedExtensibleValueSetDefaultTypeInternal _ElementDefinitionInheritedExtensibleValueSet_default_instance_;
class ElementDefinitionInheritedExtensibleValueSet_Value;
class ElementDefinitionInheritedExtensibleValueSet_ValueDefaultTypeInternal;
extern ElementDefinitionInheritedExtensibleValueSet_ValueDefaultTypeInternal _ElementDefinitionInheritedExtensibleValueSet_Value_default_instance_;
class ElementDefinitionIsCommonBinding;
class ElementDefinitionIsCommonBindingDefaultTypeInternal;
extern ElementDefinitionIsCommonBindingDefaultTypeInternal _ElementDefinitionIsCommonBinding_default_instance_;
class ElementDefinitionJsonType;
class ElementDefinitionJsonTypeDefaultTypeInternal;
extern ElementDefinitionJsonTypeDefaultTypeInternal _ElementDefinitionJsonType_default_instance_;
class ElementDefinitionMaxValueSet;
class ElementDefinitionMaxValueSetDefaultTypeInternal;
extern ElementDefinitionMaxValueSetDefaultTypeInternal _ElementDefinitionMaxValueSet_default_instance_;
class ElementDefinitionMaxValueSet_Value;
class ElementDefinitionMaxValueSet_ValueDefaultTypeInternal;
extern ElementDefinitionMaxValueSet_ValueDefaultTypeInternal _ElementDefinitionMaxValueSet_Value_default_instance_;
class ElementDefinitionMinValueSet;
class ElementDefinitionMinValueSetDefaultTypeInternal;
extern ElementDefinitionMinValueSetDefaultTypeInternal _ElementDefinitionMinValueSet_default_instance_;
class ElementDefinitionMinValueSet_Value;
class ElementDefinitionMinValueSet_ValueDefaultTypeInternal;
extern ElementDefinitionMinValueSet_ValueDefaultTypeInternal _ElementDefinitionMinValueSet_Value_default_instance_;
class ElementDefinitionObjectClass;
class ElementDefinitionObjectClassDefaultTypeInternal;
extern ElementDefinitionObjectClassDefaultTypeInternal _ElementDefinitionObjectClass_default_instance_;
class ElementDefinitionObjectClassProperty;
class ElementDefinitionObjectClassPropertyDefaultTypeInternal;
extern ElementDefinitionObjectClassPropertyDefaultTypeInternal _ElementDefinitionObjectClassProperty_default_instance_;
class ElementDefinitionQuestion;
class ElementDefinitionQuestionDefaultTypeInternal;
extern ElementDefinitionQuestionDefaultTypeInternal _ElementDefinitionQuestion_default_instance_;
class ElementDefinitionRdfType;
class ElementDefinitionRdfTypeDefaultTypeInternal;
extern ElementDefinitionRdfTypeDefaultTypeInternal _ElementDefinitionRdfType_default_instance_;
class ElementDefinitionRegex;
class ElementDefinitionRegexDefaultTypeInternal;
extern ElementDefinitionRegexDefaultTypeInternal _ElementDefinitionRegex_default_instance_;
class ElementDefinitionSelector;
class ElementDefinitionSelectorDefaultTypeInternal;
extern ElementDefinitionSelectorDefaultTypeInternal _ElementDefinitionSelector_default_instance_;
class ElementDefinitionTranslatable;
class ElementDefinitionTranslatableDefaultTypeInternal;
extern ElementDefinitionTranslatableDefaultTypeInternal _ElementDefinitionTranslatable_default_instance_;
class ElementDefinitionXmlType;
class ElementDefinitionXmlTypeDefaultTypeInternal;
extern ElementDefinitionXmlTypeDefaultTypeInternal _ElementDefinitionXmlType_default_instance_;
class EncounterAssociatedEncounter;
class EncounterAssociatedEncounterDefaultTypeInternal;
extern EncounterAssociatedEncounterDefaultTypeInternal _EncounterAssociatedEncounter_default_instance_;
class EncounterModeOfArrival;
class EncounterModeOfArrivalDefaultTypeInternal;
extern EncounterModeOfArrivalDefaultTypeInternal _EncounterModeOfArrival_default_instance_;
class EncounterPrimaryDiagnosis;
class EncounterPrimaryDiagnosisDefaultTypeInternal;
extern EncounterPrimaryDiagnosisDefaultTypeInternal _EncounterPrimaryDiagnosis_default_instance_;
class EncounterReasonCancelled;
class EncounterReasonCancelledDefaultTypeInternal;
extern EncounterReasonCancelledDefaultTypeInternal _EncounterReasonCancelled_default_instance_;
class EntryFormat;
class EntryFormatDefaultTypeInternal;
extern EntryFormatDefaultTypeInternal _EntryFormat_default_instance_;
class FamilyMemberHistoryAbatement;
class FamilyMemberHistoryAbatementDefaultTypeInternal;
extern FamilyMemberHistoryAbatementDefaultTypeInternal _FamilyMemberHistoryAbatement_default_instance_;
class FamilyMemberHistoryAbatement_Value;
class FamilyMemberHistoryAbatement_ValueDefaultTypeInternal;
extern FamilyMemberHistoryAbatement_ValueDefaultTypeInternal _FamilyMemberHistoryAbatement_Value_default_instance_;
class FamilyMemberHistoryObservation;
class FamilyMemberHistoryObservationDefaultTypeInternal;
extern FamilyMemberHistoryObservationDefaultTypeInternal _FamilyMemberHistoryObservation_default_instance_;
class FamilyMemberHistoryParent;
class FamilyMemberHistoryParentDefaultTypeInternal;
extern FamilyMemberHistoryParentDefaultTypeInternal _FamilyMemberHistoryParent_default_instance_;
class FamilyMemberHistoryPatientRecord;
class FamilyMemberHistoryPatientRecordDefaultTypeInternal;
extern FamilyMemberHistoryPatientRecordDefaultTypeInternal _FamilyMemberHistoryPatientRecord_default_instance_;
class FamilyMemberHistorySeverity;
class FamilyMemberHistorySeverityDefaultTypeInternal;
extern FamilyMemberHistorySeverityDefaultTypeInternal _FamilyMemberHistorySeverity_default_instance_;
class FamilyMemberHistorySibling;
class FamilyMemberHistorySiblingDefaultTypeInternal;
extern FamilyMemberHistorySiblingDefaultTypeInternal _FamilyMemberHistorySibling_default_instance_;
class FamilyMemberHistoryType;
class FamilyMemberHistoryTypeDefaultTypeInternal;
extern FamilyMemberHistoryTypeDefaultTypeInternal _FamilyMemberHistoryType_default_instance_;
class FhirPathExpression;
class FhirPathExpressionDefaultTypeInternal;
extern FhirPathExpressionDefaultTypeInternal _FhirPathExpression_default_instance_;
class FlagDetail;
class FlagDetailDefaultTypeInternal;
extern FlagDetailDefaultTypeInternal _FlagDetail_default_instance_;
class FlagPriority;
class FlagPriorityDefaultTypeInternal;
extern FlagPriorityDefaultTypeInternal _FlagPriority_default_instance_;
class Fmm;
class FmmDefaultTypeInternal;
extern FmmDefaultTypeInternal _Fmm_default_instance_;
class GoalAcceptance;
class GoalAcceptanceDefaultTypeInternal;
extern GoalAcceptanceDefaultTypeInternal _GoalAcceptance_default_instance_;
class GoalReasonRejected;
class GoalReasonRejectedDefaultTypeInternal;
extern GoalReasonRejectedDefaultTypeInternal _GoalReasonRejected_default_instance_;
class GoalRelationship;
class GoalRelationshipDefaultTypeInternal;
extern GoalRelationshipDefaultTypeInternal _GoalRelationship_default_instance_;
class HumanNameAssemblyOrder;
class HumanNameAssemblyOrderDefaultTypeInternal;
extern HumanNameAssemblyOrderDefaultTypeInternal _HumanNameAssemblyOrder_default_instance_;
class HumanNameENQualifier;
class HumanNameENQualifierDefaultTypeInternal;
extern HumanNameENQualifierDefaultTypeInternal _HumanNameENQualifier_default_instance_;
class HumanNameENRepresentation;
class HumanNameENRepresentationDefaultTypeInternal;
extern HumanNameENRepresentationDefaultTypeInternal _HumanNameENRepresentation_default_instance_;
class HumanNameFathersFamily;
class HumanNameFathersFamilyDefaultTypeInternal;
extern HumanNameFathersFamilyDefaultTypeInternal _HumanNameFathersFamily_default_instance_;
class HumanNameMothersFamily;
class HumanNameMothersFamilyDefaultTypeInternal;
extern HumanNameMothersFamilyDefaultTypeInternal _HumanNameMothersFamily_default_instance_;
class HumanNameOwnName;
class HumanNameOwnNameDefaultTypeInternal;
extern HumanNameOwnNameDefaultTypeInternal _HumanNameOwnName_default_instance_;
class HumanNameOwnPrefix;
class HumanNameOwnPrefixDefaultTypeInternal;
extern HumanNameOwnPrefixDefaultTypeInternal _HumanNameOwnPrefix_default_instance_;
class HumanNamePartnerName;
class HumanNamePartnerNameDefaultTypeInternal;
extern HumanNamePartnerNameDefaultTypeInternal _HumanNamePartnerName_default_instance_;
class HumanNamePartnerPrefix;
class HumanNamePartnerPrefixDefaultTypeInternal;
extern HumanNamePartnerPrefixDefaultTypeInternal _HumanNamePartnerPrefix_default_instance_;
class IdentifierValidDate;
class IdentifierValidDateDefaultTypeInternal;
extern IdentifierValidDateDefaultTypeInternal _IdentifierValidDate_default_instance_;
class ImplementationGuidePage;
class ImplementationGuidePageDefaultTypeInternal;
extern ImplementationGuidePageDefaultTypeInternal _ImplementationGuidePage_default_instance_;
class InfuseOver;
class InfuseOverDefaultTypeInternal;
extern InfuseOverDefaultTypeInternal _InfuseOver_default_instance_;
class InitialValue;
class InitialValueDefaultTypeInternal;
extern InitialValueDefaultTypeInternal _InitialValue_default_instance_;
class LastReviewDate;
class LastReviewDateDefaultTypeInternal;
extern LastReviewDateDefaultTypeInternal _LastReviewDate_default_instance_;
class LocationAlias;
class LocationAliasDefaultTypeInternal;
extern LocationAliasDefaultTypeInternal _LocationAlias_default_instance_;
class MaxDecimalPlaces;
class MaxDecimalPlacesDefaultTypeInternal;
extern MaxDecimalPlacesDefaultTypeInternal _MaxDecimalPlaces_default_instance_;
class MaxDeliveryRate;
class MaxDeliveryRateDefaultTypeInternal;
extern MaxDeliveryRateDefaultTypeInternal _MaxDeliveryRate_default_instance_;
class MaxDeliveryVolume;
class MaxDeliveryVolumeDefaultTypeInternal;
extern MaxDeliveryVolumeDefaultTypeInternal _MaxDeliveryVolume_default_instance_;
class MaxSize;
class MaxSizeDefaultTypeInternal;
extern MaxSizeDefaultTypeInternal _MaxSize_default_instance_;
class MeasureInfo;
class MeasureInfoDefaultTypeInternal;
extern MeasureInfoDefaultTypeInternal _MeasureInfo_default_instance_;
class MedicationDispenseValidityPeriod;
class MedicationDispenseValidityPeriodDefaultTypeInternal;
extern MedicationDispenseValidityPeriodDefaultTypeInternal _MedicationDispenseValidityPeriod_default_instance_;
class MedicationStatementPrescriber;
class MedicationStatementPrescriberDefaultTypeInternal;
extern MedicationStatementPrescriberDefaultTypeInternal _MedicationStatementPrescriber_default_instance_;
class MedicationUsualRoute;
class MedicationUsualRouteDefaultTypeInternal;
extern MedicationUsualRouteDefaultTypeInternal _MedicationUsualRoute_default_instance_;
class MessageHeaderMessageheaderResponseRequest;
class MessageHeaderMessageheaderResponseRequestDefaultTypeInternal;
extern MessageHeaderMessageheaderResponseRequestDefaultTypeInternal _MessageHeaderMessageheaderResponseRequest_default_instance_;
class MimeType;
class MimeTypeDefaultTypeInternal;
extern MimeTypeDefaultTypeInternal _MimeType_default_instance_;
class MinDosePerPeriod;
class MinDosePerPeriodDefaultTypeInternal;
extern MinDosePerPeriodDefaultTypeInternal _MinDosePerPeriod_default_instance_;
class MinLength;
class MinLengthDefaultTypeInternal;
extern MinLengthDefaultTypeInternal _MinLength_default_instance_;
class Namespace;
class NamespaceDefaultTypeInternal;
extern NamespaceDefaultTypeInternal _Namespace_default_instance_;
class ObservationAlleleName;
class ObservationAlleleNameDefaultTypeInternal;
extern ObservationAlleleNameDefaultTypeInternal _ObservationAlleleName_default_instance_;
class ObservationAllelicFrequency;
class ObservationAllelicFrequencyDefaultTypeInternal;
extern ObservationAllelicFrequencyDefaultTypeInternal _ObservationAllelicFrequency_default_instance_;
class ObservationAllelicState;
class ObservationAllelicStateDefaultTypeInternal;
extern ObservationAllelicStateDefaultTypeInternal _ObservationAllelicState_default_instance_;
class ObservationAminoAcidChangeName;
class ObservationAminoAcidChangeNameDefaultTypeInternal;
extern ObservationAminoAcidChangeNameDefaultTypeInternal _ObservationAminoAcidChangeName_default_instance_;
class ObservationAminoAcidChangeType;
class ObservationAminoAcidChangeTypeDefaultTypeInternal;
extern ObservationAminoAcidChangeTypeDefaultTypeInternal _ObservationAminoAcidChangeType_default_instance_;
class ObservationBodyPosition;
class ObservationBodyPositionDefaultTypeInternal;
extern ObservationBodyPositionDefaultTypeInternal _ObservationBodyPosition_default_instance_;
class ObservationCopyNumberEvent;
class ObservationCopyNumberEventDefaultTypeInternal;
extern ObservationCopyNumberEventDefaultTypeInternal _ObservationCopyNumberEvent_default_instance_;
class ObservationDNARegionName;
class ObservationDNARegionNameDefaultTypeInternal;
extern ObservationDNARegionNameDefaultTypeInternal _ObservationDNARegionName_default_instance_;
class ObservationDNASequenceVariantName;
class ObservationDNASequenceVariantNameDefaultTypeInternal;
extern ObservationDNASequenceVariantNameDefaultTypeInternal _ObservationDNASequenceVariantName_default_instance_;
class ObservationDNASequenceVariantType;
class ObservationDNASequenceVariantTypeDefaultTypeInternal;
extern ObservationDNASequenceVariantTypeDefaultTypeInternal _ObservationDNASequenceVariantType_default_instance_;
class ObservationDNAVariantId;
class ObservationDNAVariantIdDefaultTypeInternal;
extern ObservationDNAVariantIdDefaultTypeInternal _ObservationDNAVariantId_default_instance_;
class ObservationDelta;
class ObservationDeltaDefaultTypeInternal;
extern ObservationDeltaDefaultTypeInternal _ObservationDelta_default_instance_;
class ObservationEventTiming;
class ObservationEventTimingDefaultTypeInternal;
extern ObservationEventTimingDefaultTypeInternal _ObservationEventTiming_default_instance_;
class ObservationFocalSubject;
class ObservationFocalSubjectDefaultTypeInternal;
extern ObservationFocalSubjectDefaultTypeInternal _ObservationFocalSubject_default_instance_;
class ObservationGene;
class ObservationGeneDefaultTypeInternal;
extern ObservationGeneDefaultTypeInternal _ObservationGene_default_instance_;
class ObservationGenomicSourceClass;
class ObservationGenomicSourceClassDefaultTypeInternal;
extern ObservationGenomicSourceClassDefaultTypeInternal _ObservationGenomicSourceClass_default_instance_;
class ObservationInterpretation;
class ObservationInterpretationDefaultTypeInternal;
extern ObservationInterpretationDefaultTypeInternal _ObservationInterpretation_default_instance_;
class ObservationPerformerRole;
class ObservationPerformerRoleDefaultTypeInternal;
extern ObservationPerformerRoleDefaultTypeInternal _ObservationPerformerRole_default_instance_;
class ObservationPhaseSet;
class ObservationPhaseSetDefaultTypeInternal;
extern ObservationPhaseSetDefaultTypeInternal _ObservationPhaseSet_default_instance_;
class ObservationSequence;
class ObservationSequenceDefaultTypeInternal;
extern ObservationSequenceDefaultTypeInternal _ObservationSequence_default_instance_;
class ObservationTimeOffset;
class ObservationTimeOffsetDefaultTypeInternal;
extern ObservationTimeOffsetDefaultTypeInternal _ObservationTimeOffset_default_instance_;
class OnBehalfOf;
class OnBehalfOfDefaultTypeInternal;
extern OnBehalfOfDefaultTypeInternal _OnBehalfOf_default_instance_;
class OperationOutcomeAuthority;
class OperationOutcomeAuthorityDefaultTypeInternal;
extern OperationOutcomeAuthorityDefaultTypeInternal _OperationOutcomeAuthority_default_instance_;
class OperationOutcomeDetectedIssue;
class OperationOutcomeDetectedIssueDefaultTypeInternal;
extern OperationOutcomeDetectedIssueDefaultTypeInternal _OperationOutcomeDetectedIssue_default_instance_;
class OperationOutcomeIssueSource;
class OperationOutcomeIssueSourceDefaultTypeInternal;
extern OperationOutcomeIssueSourceDefaultTypeInternal _OperationOutcomeIssueSource_default_instance_;
class OrganizationAlias;
class OrganizationAliasDefaultTypeInternal;
extern OrganizationAliasDefaultTypeInternal _OrganizationAlias_default_instance_;
class OrganizationPeriod;
class OrganizationPeriodDefaultTypeInternal;
extern OrganizationPeriodDefaultTypeInternal _OrganizationPeriod_default_instance_;
class OrganizationPreferredContact;
class OrganizationPreferredContactDefaultTypeInternal;
extern OrganizationPreferredContactDefaultTypeInternal _OrganizationPreferredContact_default_instance_;
class PartOf;
class PartOfDefaultTypeInternal;
extern PartOfDefaultTypeInternal _PartOf_default_instance_;
class PatientAdoptionInfo;
class PatientAdoptionInfoDefaultTypeInternal;
extern PatientAdoptionInfoDefaultTypeInternal _PatientAdoptionInfo_default_instance_;
class PatientBirthPlace;
class PatientBirthPlaceDefaultTypeInternal;
extern PatientBirthPlaceDefaultTypeInternal _PatientBirthPlace_default_instance_;
class PatientBirthTime;
class PatientBirthTimeDefaultTypeInternal;
extern PatientBirthTimeDefaultTypeInternal _PatientBirthTime_default_instance_;
class PatientCadavericDonor;
class PatientCadavericDonorDefaultTypeInternal;
extern PatientCadavericDonorDefaultTypeInternal _PatientCadavericDonor_default_instance_;
class PatientCitizenship;
class PatientCitizenshipDefaultTypeInternal;
extern PatientCitizenshipDefaultTypeInternal _PatientCitizenship_default_instance_;
class PatientClinicalTrial;
class PatientClinicalTrialDefaultTypeInternal;
extern PatientClinicalTrialDefaultTypeInternal _PatientClinicalTrial_default_instance_;
class PatientCongregation;
class PatientCongregationDefaultTypeInternal;
extern PatientCongregationDefaultTypeInternal _PatientCongregation_default_instance_;
class PatientDisability;
class PatientDisabilityDefaultTypeInternal;
extern PatientDisabilityDefaultTypeInternal _PatientDisability_default_instance_;
class PatientImportance;
class PatientImportanceDefaultTypeInternal;
extern PatientImportanceDefaultTypeInternal _PatientImportance_default_instance_;
class PatientInterpreterRequired;
class PatientInterpreterRequiredDefaultTypeInternal;
extern PatientInterpreterRequiredDefaultTypeInternal _PatientInterpreterRequired_default_instance_;
class PatientMothersMaidenName;
class PatientMothersMaidenNameDefaultTypeInternal;
extern PatientMothersMaidenNameDefaultTypeInternal _PatientMothersMaidenName_default_instance_;
class PatientNationality;
class PatientNationalityDefaultTypeInternal;
extern PatientNationalityDefaultTypeInternal _PatientNationality_default_instance_;
class PatientReligion;
class PatientReligionDefaultTypeInternal;
extern PatientReligionDefaultTypeInternal _PatientReligion_default_instance_;
class PermittedValueConceptmap;
class PermittedValueConceptmapDefaultTypeInternal;
extern PermittedValueConceptmapDefaultTypeInternal _PermittedValueConceptmap_default_instance_;
class PermittedValueValueset;
class PermittedValueValuesetDefaultTypeInternal;
extern PermittedValueValuesetDefaultTypeInternal _PermittedValueValueset_default_instance_;
class PractitionerClassification;
class PractitionerClassificationDefaultTypeInternal;
extern PractitionerClassificationDefaultTypeInternal _PractitionerClassification_default_instance_;
class PractitionerRolePrimaryInd;
class PractitionerRolePrimaryIndDefaultTypeInternal;
extern PractitionerRolePrimaryIndDefaultTypeInternal _PractitionerRolePrimaryInd_default_instance_;
class ProcedureApproachBodySite;
class ProcedureApproachBodySiteDefaultTypeInternal;
extern ProcedureApproachBodySiteDefaultTypeInternal _ProcedureApproachBodySite_default_instance_;
class ProcedureCausedBy;
class ProcedureCausedByDefaultTypeInternal;
extern ProcedureCausedByDefaultTypeInternal _ProcedureCausedBy_default_instance_;
class ProcedureCausedBy_Value;
class ProcedureCausedBy_ValueDefaultTypeInternal;
extern ProcedureCausedBy_ValueDefaultTypeInternal _ProcedureCausedBy_Value_default_instance_;
class ProcedureIncisionDateTime;
class ProcedureIncisionDateTimeDefaultTypeInternal;
extern ProcedureIncisionDateTimeDefaultTypeInternal _ProcedureIncisionDateTime_default_instance_;
class ProcedureMethod;
class ProcedureMethodDefaultTypeInternal;
extern ProcedureMethodDefaultTypeInternal _ProcedureMethod_default_instance_;
class ProcedureProgressStatus;
class ProcedureProgressStatusDefaultTypeInternal;
extern ProcedureProgressStatusDefaultTypeInternal _ProcedureProgressStatus_default_instance_;
class ProcedureRequestApproachBodySite;
class ProcedureRequestApproachBodySiteDefaultTypeInternal;
extern ProcedureRequestApproachBodySiteDefaultTypeInternal _ProcedureRequestApproachBodySite_default_instance_;
class ProcedureRequestAuthorizedBy;
class ProcedureRequestAuthorizedByDefaultTypeInternal;
extern ProcedureRequestAuthorizedByDefaultTypeInternal _ProcedureRequestAuthorizedBy_default_instance_;
class ProcedureRequestPrecondition;
class ProcedureRequestPreconditionDefaultTypeInternal;
extern ProcedureRequestPreconditionDefaultTypeInternal _ProcedureRequestPrecondition_default_instance_;
class ProcedureRequestQuestionnaireRequest;
class ProcedureRequestQuestionnaireRequestDefaultTypeInternal;
extern ProcedureRequestQuestionnaireRequestDefaultTypeInternal _ProcedureRequestQuestionnaireRequest_default_instance_;
class ProcedureRequestReasonRefused;
class ProcedureRequestReasonRefusedDefaultTypeInternal;
extern ProcedureRequestReasonRefusedDefaultTypeInternal _ProcedureRequestReasonRefused_default_instance_;
class ProcedureRequestReasonRejected;
class ProcedureRequestReasonRejectedDefaultTypeInternal;
extern ProcedureRequestReasonRejectedDefaultTypeInternal _ProcedureRequestReasonRejected_default_instance_;
class ProcedureRequestTargetBodySite;
class ProcedureRequestTargetBodySiteDefaultTypeInternal;
extern ProcedureRequestTargetBodySiteDefaultTypeInternal _ProcedureRequestTargetBodySite_default_instance_;
class ProcedureSchedule;
class ProcedureScheduleDefaultTypeInternal;
extern ProcedureScheduleDefaultTypeInternal _ProcedureSchedule_default_instance_;
class ProcedureTargetBodySite;
class ProcedureTargetBodySiteDefaultTypeInternal;
extern ProcedureTargetBodySiteDefaultTypeInternal _ProcedureTargetBodySite_default_instance_;
class QuantityUncertainty;
class QuantityUncertaintyDefaultTypeInternal;
extern QuantityUncertaintyDefaultTypeInternal _QuantityUncertainty_default_instance_;
class QuantityUncertaintyType;
class QuantityUncertaintyTypeDefaultTypeInternal;
extern QuantityUncertaintyTypeDefaultTypeInternal _QuantityUncertaintyType_default_instance_;
class QuestionnaireAllowedProfile;
class QuestionnaireAllowedProfileDefaultTypeInternal;
extern QuestionnaireAllowedProfileDefaultTypeInternal _QuestionnaireAllowedProfile_default_instance_;
class QuestionnaireAllowedResource;
class QuestionnaireAllowedResourceDefaultTypeInternal;
extern QuestionnaireAllowedResourceDefaultTypeInternal _QuestionnaireAllowedResource_default_instance_;
class QuestionnaireBaseType;
class QuestionnaireBaseTypeDefaultTypeInternal;
extern QuestionnaireBaseTypeDefaultTypeInternal _QuestionnaireBaseType_default_instance_;
class QuestionnaireChoiceOrientation;
class QuestionnaireChoiceOrientationDefaultTypeInternal;
extern QuestionnaireChoiceOrientationDefaultTypeInternal _QuestionnaireChoiceOrientation_default_instance_;
class QuestionnaireDeMap;
class QuestionnaireDeMapDefaultTypeInternal;
extern QuestionnaireDeMapDefaultTypeInternal _QuestionnaireDeMap_default_instance_;
class QuestionnaireDisplayCategory;
class QuestionnaireDisplayCategoryDefaultTypeInternal;
extern QuestionnaireDisplayCategoryDefaultTypeInternal _QuestionnaireDisplayCategory_default_instance_;
class QuestionnaireFhirType;
class QuestionnaireFhirTypeDefaultTypeInternal;
extern QuestionnaireFhirTypeDefaultTypeInternal _QuestionnaireFhirType_default_instance_;
class QuestionnaireHidden;
class QuestionnaireHiddenDefaultTypeInternal;
extern QuestionnaireHiddenDefaultTypeInternal _QuestionnaireHidden_default_instance_;
class QuestionnaireItemControl;
class QuestionnaireItemControlDefaultTypeInternal;
extern QuestionnaireItemControlDefaultTypeInternal _QuestionnaireItemControl_default_instance_;
class QuestionnaireLookupQuestionnaire;
class QuestionnaireLookupQuestionnaireDefaultTypeInternal;
extern QuestionnaireLookupQuestionnaireDefaultTypeInternal _QuestionnaireLookupQuestionnaire_default_instance_;
class QuestionnaireMaxOccurs;
class QuestionnaireMaxOccursDefaultTypeInternal;
extern QuestionnaireMaxOccursDefaultTypeInternal _QuestionnaireMaxOccurs_default_instance_;
class QuestionnaireMaxValue;
class QuestionnaireMaxValueDefaultTypeInternal;
extern QuestionnaireMaxValueDefaultTypeInternal _QuestionnaireMaxValue_default_instance_;
class QuestionnaireMaxValue_Value;
class QuestionnaireMaxValue_ValueDefaultTypeInternal;
extern QuestionnaireMaxValue_ValueDefaultTypeInternal _QuestionnaireMaxValue_Value_default_instance_;
class QuestionnaireMinOccurs;
class QuestionnaireMinOccursDefaultTypeInternal;
extern QuestionnaireMinOccursDefaultTypeInternal _QuestionnaireMinOccurs_default_instance_;
class QuestionnaireMinValue;
class QuestionnaireMinValueDefaultTypeInternal;
extern QuestionnaireMinValueDefaultTypeInternal _QuestionnaireMinValue_default_instance_;
class QuestionnaireMinValue_Value;
class QuestionnaireMinValue_ValueDefaultTypeInternal;
extern QuestionnaireMinValue_ValueDefaultTypeInternal _QuestionnaireMinValue_Value_default_instance_;
class QuestionnaireOptionCode;
class QuestionnaireOptionCodeDefaultTypeInternal;
extern QuestionnaireOptionCodeDefaultTypeInternal _QuestionnaireOptionCode_default_instance_;
class QuestionnaireOptionExclusive;
class QuestionnaireOptionExclusiveDefaultTypeInternal;
extern QuestionnaireOptionExclusiveDefaultTypeInternal _QuestionnaireOptionExclusive_default_instance_;
class QuestionnaireOptionPrefix;
class QuestionnaireOptionPrefixDefaultTypeInternal;
extern QuestionnaireOptionPrefixDefaultTypeInternal _QuestionnaireOptionPrefix_default_instance_;
class QuestionnaireOrdinalValue;
class QuestionnaireOrdinalValueDefaultTypeInternal;
extern QuestionnaireOrdinalValueDefaultTypeInternal _QuestionnaireOrdinalValue_default_instance_;
class QuestionnaireReferenceFilter;
class QuestionnaireReferenceFilterDefaultTypeInternal;
extern QuestionnaireReferenceFilterDefaultTypeInternal _QuestionnaireReferenceFilter_default_instance_;
class QuestionnaireResponseAuthor;
class QuestionnaireResponseAuthorDefaultTypeInternal;
extern QuestionnaireResponseAuthorDefaultTypeInternal _QuestionnaireResponseAuthor_default_instance_;
class QuestionnaireResponseAuthor_Value;
class QuestionnaireResponseAuthor_ValueDefaultTypeInternal;
extern QuestionnaireResponseAuthor_ValueDefaultTypeInternal _QuestionnaireResponseAuthor_Value_default_instance_;
class QuestionnaireResponseNote;
class QuestionnaireResponseNoteDefaultTypeInternal;
extern QuestionnaireResponseNoteDefaultTypeInternal _QuestionnaireResponseNote_default_instance_;
class QuestionnaireResponseReason;
class QuestionnaireResponseReasonDefaultTypeInternal;
extern QuestionnaireResponseReasonDefaultTypeInternal _QuestionnaireResponseReason_default_instance_;
class QuestionnaireResponseReviewer;
class QuestionnaireResponseReviewerDefaultTypeInternal;
extern QuestionnaireResponseReviewerDefaultTypeInternal _QuestionnaireResponseReviewer_default_instance_;
class QuestionnaireSourceStructureMap;
class QuestionnaireSourceStructureMapDefaultTypeInternal;
extern QuestionnaireSourceStructureMapDefaultTypeInternal _QuestionnaireSourceStructureMap_default_instance_;
class QuestionnaireStudyprotocolIdentifier;
class QuestionnaireStudyprotocolIdentifierDefaultTypeInternal;
extern QuestionnaireStudyprotocolIdentifierDefaultTypeInternal _QuestionnaireStudyprotocolIdentifier_default_instance_;
class QuestionnaireSupportLink;
class QuestionnaireSupportLinkDefaultTypeInternal;
extern QuestionnaireSupportLinkDefaultTypeInternal _QuestionnaireSupportLink_default_instance_;
class QuestionnaireTargetStructureMap;
class QuestionnaireTargetStructureMapDefaultTypeInternal;
extern QuestionnaireTargetStructureMapDefaultTypeInternal _QuestionnaireTargetStructureMap_default_instance_;
class QuestionnaireUnit;
class QuestionnaireUnitDefaultTypeInternal;
extern QuestionnaireUnitDefaultTypeInternal _QuestionnaireUnit_default_instance_;
class QuestionnaireUsageMode;
class QuestionnaireUsageModeDefaultTypeInternal;
extern QuestionnaireUsageModeDefaultTypeInternal _QuestionnaireUsageMode_default_instance_;
class RateGoal;
class RateGoalDefaultTypeInternal;
extern RateGoalDefaultTypeInternal _RateGoal_default_instance_;
class RateIncrement;
class RateIncrementDefaultTypeInternal;
extern RateIncrementDefaultTypeInternal _RateIncrement_default_instance_;
class RateIncrementInterval;
class RateIncrementIntervalDefaultTypeInternal;
extern RateIncrementIntervalDefaultTypeInternal _RateIncrementInterval_default_instance_;
class ReasonCode;
class ReasonCodeDefaultTypeInternal;
extern ReasonCodeDefaultTypeInternal _ReasonCode_default_instance_;
class ReasonReference;
class ReasonReferenceDefaultTypeInternal;
extern ReasonReferenceDefaultTypeInternal _ReasonReference_default_instance_;
class ReasonReference_Value;
class ReasonReference_ValueDefaultTypeInternal;
extern ReasonReference_ValueDefaultTypeInternal _ReasonReference_Value_default_instance_;
class ReferralRequestReasonRefused;
class ReferralRequestReasonRefusedDefaultTypeInternal;
extern ReferralRequestReasonRefusedDefaultTypeInternal _ReferralRequestReasonRefused_default_instance_;
class RefillsRemaining;
class RefillsRemainingDefaultTypeInternal;
extern RefillsRemainingDefaultTypeInternal _RefillsRemaining_default_instance_;
class Regex;
class RegexDefaultTypeInternal;
extern RegexDefaultTypeInternal _Regex_default_instance_;
class RenderedValue;
class RenderedValueDefaultTypeInternal;
extern RenderedValueDefaultTypeInternal _RenderedValue_default_instance_;
class ResourcePertainsToGoal;
class ResourcePertainsToGoalDefaultTypeInternal;
extern ResourcePertainsToGoalDefaultTypeInternal _ResourcePertainsToGoal_default_instance_;
class SpecimenCollectionPriority;
class SpecimenCollectionPriorityDefaultTypeInternal;
extern SpecimenCollectionPriorityDefaultTypeInternal _SpecimenCollectionPriority_default_instance_;
class SpecimenIsDryWeight;
class SpecimenIsDryWeightDefaultTypeInternal;
extern SpecimenIsDryWeightDefaultTypeInternal _SpecimenIsDryWeight_default_instance_;
class SpecimenProcessingTime;
class SpecimenProcessingTimeDefaultTypeInternal;
extern SpecimenProcessingTimeDefaultTypeInternal _SpecimenProcessingTime_default_instance_;
class SpecimenProcessingTime_Value;
class SpecimenProcessingTime_ValueDefaultTypeInternal;
extern SpecimenProcessingTime_ValueDefaultTypeInternal _SpecimenProcessingTime_Value_default_instance_;
class SpecimenSequenceNumber;
class SpecimenSequenceNumberDefaultTypeInternal;
extern SpecimenSequenceNumberDefaultTypeInternal _SpecimenSequenceNumber_default_instance_;
class SpecimenSpecialHandling;
class SpecimenSpecialHandlingDefaultTypeInternal;
extern SpecimenSpecialHandlingDefaultTypeInternal _SpecimenSpecialHandling_default_instance_;
class StringMarkdown;
class StringMarkdownDefaultTypeInternal;
extern StringMarkdownDefaultTypeInternal _StringMarkdown_default_instance_;
class StringSCCoding;
class StringSCCodingDefaultTypeInternal;
extern StringSCCodingDefaultTypeInternal _StringSCCoding_default_instance_;
class StringXhtml;
class StringXhtmlDefaultTypeInternal;
extern StringXhtmlDefaultTypeInternal _StringXhtml_default_instance_;
class StructureDefinitionAncestor;
class StructureDefinitionAncestorDefaultTypeInternal;
extern StructureDefinitionAncestorDefaultTypeInternal _StructureDefinitionAncestor_default_instance_;
class StructureDefinitionAnnotation;
class StructureDefinitionAnnotationDefaultTypeInternal;
extern StructureDefinitionAnnotationDefaultTypeInternal _StructureDefinitionAnnotation_default_instance_;
class StructureDefinitionCategory;
class StructureDefinitionCategoryDefaultTypeInternal;
extern StructureDefinitionCategoryDefaultTypeInternal _StructureDefinitionCategory_default_instance_;
class StructureDefinitionDatadictionary;
class StructureDefinitionDatadictionaryDefaultTypeInternal;
extern StructureDefinitionDatadictionaryDefaultTypeInternal _StructureDefinitionDatadictionary_default_instance_;
class StructureDefinitionFmmNoWarnings;
class StructureDefinitionFmmNoWarningsDefaultTypeInternal;
extern StructureDefinitionFmmNoWarningsDefaultTypeInternal _StructureDefinitionFmmNoWarnings_default_instance_;
class StructureDefinitionSummary;
class StructureDefinitionSummaryDefaultTypeInternal;
extern StructureDefinitionSummaryDefaultTypeInternal _StructureDefinitionSummary_default_instance_;
class StructureDefinitionTableName;
class StructureDefinitionTableNameDefaultTypeInternal;
extern StructureDefinitionTableNameDefaultTypeInternal _StructureDefinitionTableName_default_instance_;
class StructureDefinitionTemplateStatus;
class StructureDefinitionTemplateStatusDefaultTypeInternal;
extern StructureDefinitionTemplateStatusDefaultTypeInternal _StructureDefinitionTemplateStatus_default_instance_;
class Style;
class StyleDefaultTypeInternal;
extern StyleDefaultTypeInternal _Style_default_instance_;
class StyleSensitive;
class StyleSensitiveDefaultTypeInternal;
extern StyleSensitiveDefaultTypeInternal _StyleSensitive_default_instance_;
class TaskCandidateList;
class TaskCandidateListDefaultTypeInternal;
extern TaskCandidateListDefaultTypeInternal _TaskCandidateList_default_instance_;
class TaskCandidateList_Value;
class TaskCandidateList_ValueDefaultTypeInternal;
extern TaskCandidateList_ValueDefaultTypeInternal _TaskCandidateList_Value_default_instance_;
class TaskReplaces;
class TaskReplacesDefaultTypeInternal;
extern TaskReplacesDefaultTypeInternal _TaskReplaces_default_instance_;
class TimingExact;
class TimingExactDefaultTypeInternal;
extern TimingExactDefaultTypeInternal _TimingExact_default_instance_;
class Translation;
class TranslationDefaultTypeInternal;
extern TranslationDefaultTypeInternal _Translation_default_instance_;
class Translation_Content;
class Translation_ContentDefaultTypeInternal;
extern Translation_ContentDefaultTypeInternal _Translation_Content_default_instance_;
class UsageContextGroup;
class UsageContextGroupDefaultTypeInternal;
extern UsageContextGroupDefaultTypeInternal _UsageContextGroup_default_instance_;
class ValueSetAuthor;
class ValueSetAuthorDefaultTypeInternal;
extern ValueSetAuthorDefaultTypeInternal _ValueSetAuthor_default_instance_;
class ValueSetCaseSensitive;
class ValueSetCaseSensitiveDefaultTypeInternal;
extern ValueSetCaseSensitiveDefaultTypeInternal _ValueSetCaseSensitive_default_instance_;
class ValueSetComment;
class ValueSetCommentDefaultTypeInternal;
extern ValueSetCommentDefaultTypeInternal _ValueSetComment_default_instance_;
class ValueSetComments;
class ValueSetCommentsDefaultTypeInternal;
extern ValueSetCommentsDefaultTypeInternal _ValueSetComments_default_instance_;
class ValueSetConceptOrder;
class ValueSetConceptOrderDefaultTypeInternal;
extern ValueSetConceptOrderDefaultTypeInternal _ValueSetConceptOrder_default_instance_;
class ValueSetDefinition;
class ValueSetDefinitionDefaultTypeInternal;
extern ValueSetDefinitionDefaultTypeInternal _ValueSetDefinition_default_instance_;
class ValueSetEffectiveDate;
class ValueSetEffectiveDateDefaultTypeInternal;
extern ValueSetEffectiveDateDefaultTypeInternal _ValueSetEffectiveDate_default_instance_;
class ValueSetExpansionSource;
class ValueSetExpansionSourceDefaultTypeInternal;
extern ValueSetExpansionSourceDefaultTypeInternal _ValueSetExpansionSource_default_instance_;
class ValueSetExpirationDate;
class ValueSetExpirationDateDefaultTypeInternal;
extern ValueSetExpirationDateDefaultTypeInternal _ValueSetExpirationDate_default_instance_;
class ValueSetHistory;
class ValueSetHistoryDefaultTypeInternal;
extern ValueSetHistoryDefaultTypeInternal _ValueSetHistory_default_instance_;
class ValueSetHistory_Revision;
class ValueSetHistory_RevisionDefaultTypeInternal;
extern ValueSetHistory_RevisionDefaultTypeInternal _ValueSetHistory_Revision_default_instance_;
class ValueSetKeyWord;
class ValueSetKeyWordDefaultTypeInternal;
extern ValueSetKeyWordDefaultTypeInternal _ValueSetKeyWord_default_instance_;
class ValueSetLabel;
class ValueSetLabelDefaultTypeInternal;
extern ValueSetLabelDefaultTypeInternal _ValueSetLabel_default_instance_;
class ValueSetMap;
class ValueSetMapDefaultTypeInternal;
extern ValueSetMapDefaultTypeInternal _ValueSetMap_default_instance_;
class ValueSetOrdinalValue;
class ValueSetOrdinalValueDefaultTypeInternal;
extern ValueSetOrdinalValueDefaultTypeInternal _ValueSetOrdinalValue_default_instance_;
class ValueSetOtherName;
class ValueSetOtherNameDefaultTypeInternal;
extern ValueSetOtherNameDefaultTypeInternal _ValueSetOtherName_default_instance_;
class ValueSetReference;
class ValueSetReferenceDefaultTypeInternal;
extern ValueSetReferenceDefaultTypeInternal _ValueSetReference_default_instance_;
class ValueSetSourceReference;
class ValueSetSourceReferenceDefaultTypeInternal;
extern ValueSetSourceReferenceDefaultTypeInternal _ValueSetSourceReference_default_instance_;
class ValueSetSystem;
class ValueSetSystemDefaultTypeInternal;
extern ValueSetSystemDefaultTypeInternal _ValueSetSystem_default_instance_;
class ValueSetSystemName;
class ValueSetSystemNameDefaultTypeInternal;
extern ValueSetSystemNameDefaultTypeInternal _ValueSetSystemName_default_instance_;
class ValueSetSystemRef;
class ValueSetSystemRefDefaultTypeInternal;
extern ValueSetSystemRefDefaultTypeInternal _ValueSetSystemRef_default_instance_;
class ValueSetToocostly;
class ValueSetToocostlyDefaultTypeInternal;
extern ValueSetToocostlyDefaultTypeInternal _ValueSetToocostly_default_instance_;
class ValueSetTrustedExpansion;
class ValueSetTrustedExpansionDefaultTypeInternal;
extern ValueSetTrustedExpansionDefaultTypeInternal _ValueSetTrustedExpansion_default_instance_;
class ValueSetUnclosed;
class ValueSetUnclosedDefaultTypeInternal;
extern ValueSetUnclosedDefaultTypeInternal _ValueSetUnclosed_default_instance_;
class ValueSetUsage;
class ValueSetUsageDefaultTypeInternal;
extern ValueSetUsageDefaultTypeInternal _ValueSetUsage_default_instance_;
class ValueSetWarning;
class ValueSetWarningDefaultTypeInternal;
extern ValueSetWarningDefaultTypeInternal _ValueSetWarning_default_instance_;
class ValueSetWorkflowStatus;
class ValueSetWorkflowStatusDefaultTypeInternal;
extern ValueSetWorkflowStatusDefaultTypeInternal _ValueSetWorkflowStatus_default_instance_;
class Wg;
class WgDefaultTypeInternal;
extern WgDefaultTypeInternal _Wg_default_instance_;
}  // namespace proto
}  // namespace stu3
}  // namespace fhir
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::fhir::stu3::proto::AddressADUse* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADUse>(Arena*);
template<> ::google::fhir::stu3::proto::AddressADXPAdditionalLocator* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADXPAdditionalLocator>(Arena*);
template<> ::google::fhir::stu3::proto::AddressADXPBuildingNumberSuffix* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADXPBuildingNumberSuffix>(Arena*);
template<> ::google::fhir::stu3::proto::AddressADXPCareOf* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADXPCareOf>(Arena*);
template<> ::google::fhir::stu3::proto::AddressADXPCensusTract* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADXPCensusTract>(Arena*);
template<> ::google::fhir::stu3::proto::AddressADXPDelimiter* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADXPDelimiter>(Arena*);
template<> ::google::fhir::stu3::proto::AddressADXPDeliveryAddressLine* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADXPDeliveryAddressLine>(Arena*);
template<> ::google::fhir::stu3::proto::AddressADXPDeliveryInstallationArea* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADXPDeliveryInstallationArea>(Arena*);
template<> ::google::fhir::stu3::proto::AddressADXPDeliveryInstallationQualifier* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADXPDeliveryInstallationQualifier>(Arena*);
template<> ::google::fhir::stu3::proto::AddressADXPDeliveryInstallationType* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADXPDeliveryInstallationType>(Arena*);
template<> ::google::fhir::stu3::proto::AddressADXPDeliveryMode* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADXPDeliveryMode>(Arena*);
template<> ::google::fhir::stu3::proto::AddressADXPDeliveryModeIdentifier* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADXPDeliveryModeIdentifier>(Arena*);
template<> ::google::fhir::stu3::proto::AddressADXPDirection* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADXPDirection>(Arena*);
template<> ::google::fhir::stu3::proto::AddressADXPHouseNumber* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADXPHouseNumber>(Arena*);
template<> ::google::fhir::stu3::proto::AddressADXPHouseNumberNumeric* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADXPHouseNumberNumeric>(Arena*);
template<> ::google::fhir::stu3::proto::AddressADXPPostBox* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADXPPostBox>(Arena*);
template<> ::google::fhir::stu3::proto::AddressADXPPrecinct* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADXPPrecinct>(Arena*);
template<> ::google::fhir::stu3::proto::AddressADXPStreetAddressLine* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADXPStreetAddressLine>(Arena*);
template<> ::google::fhir::stu3::proto::AddressADXPStreetName* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADXPStreetName>(Arena*);
template<> ::google::fhir::stu3::proto::AddressADXPStreetNameBase* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADXPStreetNameBase>(Arena*);
template<> ::google::fhir::stu3::proto::AddressADXPStreetNameType* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADXPStreetNameType>(Arena*);
template<> ::google::fhir::stu3::proto::AddressADXPUnitID* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADXPUnitID>(Arena*);
template<> ::google::fhir::stu3::proto::AddressADXPUnitType* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressADXPUnitType>(Arena*);
template<> ::google::fhir::stu3::proto::AddressGeolocation* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressGeolocation>(Arena*);
template<> ::google::fhir::stu3::proto::AllergyIntoleranceAdministration* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AllergyIntoleranceAdministration>(Arena*);
template<> ::google::fhir::stu3::proto::AllergyIntoleranceCareplan* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AllergyIntoleranceCareplan>(Arena*);
template<> ::google::fhir::stu3::proto::AllergyIntoleranceCertainty* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AllergyIntoleranceCertainty>(Arena*);
template<> ::google::fhir::stu3::proto::AllergyIntoleranceDuration* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AllergyIntoleranceDuration>(Arena*);
template<> ::google::fhir::stu3::proto::AllergyIntoleranceExposureDate* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AllergyIntoleranceExposureDate>(Arena*);
template<> ::google::fhir::stu3::proto::AllergyIntoleranceExposureDescription* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AllergyIntoleranceExposureDescription>(Arena*);
template<> ::google::fhir::stu3::proto::AllergyIntoleranceExposureDuration* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AllergyIntoleranceExposureDuration>(Arena*);
template<> ::google::fhir::stu3::proto::AllergyIntoleranceLocation* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AllergyIntoleranceLocation>(Arena*);
template<> ::google::fhir::stu3::proto::AllergyIntoleranceManagement* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AllergyIntoleranceManagement>(Arena*);
template<> ::google::fhir::stu3::proto::AllergyIntoleranceReasonRefuted* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AllergyIntoleranceReasonRefuted>(Arena*);
template<> ::google::fhir::stu3::proto::AllergyIntoleranceResolutionAge* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AllergyIntoleranceResolutionAge>(Arena*);
template<> ::google::fhir::stu3::proto::AllergyIntoleranceSubstanceExposureRisk* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AllergyIntoleranceSubstanceExposureRisk>(Arena*);
template<> ::google::fhir::stu3::proto::AllergyIntoleranceTest* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AllergyIntoleranceTest>(Arena*);
template<> ::google::fhir::stu3::proto::AllergyIntoleranceTest_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AllergyIntoleranceTest_Value>(Arena*);
template<> ::google::fhir::stu3::proto::AnimalSpecies* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AnimalSpecies>(Arena*);
template<> ::google::fhir::stu3::proto::AnyNullFlavor* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AnyNullFlavor>(Arena*);
template<> ::google::fhir::stu3::proto::AnyPreferred* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AnyPreferred>(Arena*);
template<> ::google::fhir::stu3::proto::AnyVerification* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AnyVerification>(Arena*);
template<> ::google::fhir::stu3::proto::ApprovalDate* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ApprovalDate>(Arena*);
template<> ::google::fhir::stu3::proto::AttachmentCitation* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AttachmentCitation>(Arena*);
template<> ::google::fhir::stu3::proto::AttachmentQualityOfEvidence* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AttachmentQualityOfEvidence>(Arena*);
template<> ::google::fhir::stu3::proto::AttachmentStrengthOfRecommendation* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AttachmentStrengthOfRecommendation>(Arena*);
template<> ::google::fhir::stu3::proto::AuditEventAccession* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AuditEventAccession>(Arena*);
template<> ::google::fhir::stu3::proto::AuditEventAnonymized* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AuditEventAnonymized>(Arena*);
template<> ::google::fhir::stu3::proto::AuditEventEncrypted* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AuditEventEncrypted>(Arena*);
template<> ::google::fhir::stu3::proto::AuditEventInstance* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AuditEventInstance>(Arena*);
template<> ::google::fhir::stu3::proto::AuditEventMPPS* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AuditEventMPPS>(Arena*);
template<> ::google::fhir::stu3::proto::AuditEventNumberOfInstances* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AuditEventNumberOfInstances>(Arena*);
template<> ::google::fhir::stu3::proto::AuditEventParticipantObjectContainsStudy* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AuditEventParticipantObjectContainsStudy>(Arena*);
template<> ::google::fhir::stu3::proto::AuditEventSOPClass* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AuditEventSOPClass>(Arena*);
template<> ::google::fhir::stu3::proto::BallotStatus* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::BallotStatus>(Arena*);
template<> ::google::fhir::stu3::proto::BasicEncounterClass* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::BasicEncounterClass>(Arena*);
template<> ::google::fhir::stu3::proto::BasicEncounterType* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::BasicEncounterType>(Arena*);
template<> ::google::fhir::stu3::proto::BasicInitiatingOrganization* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::BasicInitiatingOrganization>(Arena*);
template<> ::google::fhir::stu3::proto::BasicInitiatingPerson* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::BasicInitiatingPerson>(Arena*);
template<> ::google::fhir::stu3::proto::BasicInitiatingPerson_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::BasicInitiatingPerson_Value>(Arena*);
template<> ::google::fhir::stu3::proto::BasicReceivingOrganization* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::BasicReceivingOrganization>(Arena*);
template<> ::google::fhir::stu3::proto::BasicReceivingPerson* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::BasicReceivingPerson>(Arena*);
template<> ::google::fhir::stu3::proto::BasicReceivingPerson_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::BasicReceivingPerson_Value>(Arena*);
template<> ::google::fhir::stu3::proto::BasicRecipientLanguage* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::BasicRecipientLanguage>(Arena*);
template<> ::google::fhir::stu3::proto::BasicRecipientType* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::BasicRecipientType>(Arena*);
template<> ::google::fhir::stu3::proto::BasicSystemUserLanguage* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::BasicSystemUserLanguage>(Arena*);
template<> ::google::fhir::stu3::proto::BasicSystemUserTaskContext* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::BasicSystemUserTaskContext>(Arena*);
template<> ::google::fhir::stu3::proto::BasicSystemUserType* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::BasicSystemUserType>(Arena*);
template<> ::google::fhir::stu3::proto::BodySiteInstance* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::BodySiteInstance>(Arena*);
template<> ::google::fhir::stu3::proto::BundleHttpResponseHeader* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::BundleHttpResponseHeader>(Arena*);
template<> ::google::fhir::stu3::proto::BundleLocationDistance* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::BundleLocationDistance>(Arena*);
template<> ::google::fhir::stu3::proto::BundleMatchGrade* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::BundleMatchGrade>(Arena*);
template<> ::google::fhir::stu3::proto::CalculatedValue* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CalculatedValue>(Arena*);
template<> ::google::fhir::stu3::proto::CapabilityStatementExpectation* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CapabilityStatementExpectation>(Arena*);
template<> ::google::fhir::stu3::proto::CapabilityStatementProhibited* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CapabilityStatementProhibited>(Arena*);
template<> ::google::fhir::stu3::proto::CapabilityStatementSearchParameterCombination* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CapabilityStatementSearchParameterCombination>(Arena*);
template<> ::google::fhir::stu3::proto::CapabilityStatementSupportedSystem* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CapabilityStatementSupportedSystem>(Arena*);
template<> ::google::fhir::stu3::proto::CapabilityStatementWebsocket* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CapabilityStatementWebsocket>(Arena*);
template<> ::google::fhir::stu3::proto::CarePlanActivityTitle* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CarePlanActivityTitle>(Arena*);
template<> ::google::fhir::stu3::proto::CodeSystemAuthor* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeSystemAuthor>(Arena*);
template<> ::google::fhir::stu3::proto::CodeSystemComment* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeSystemComment>(Arena*);
template<> ::google::fhir::stu3::proto::CodeSystemComments* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeSystemComments>(Arena*);
template<> ::google::fhir::stu3::proto::CodeSystemConceptOrder* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeSystemConceptOrder>(Arena*);
template<> ::google::fhir::stu3::proto::CodeSystemDeprecated* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeSystemDeprecated>(Arena*);
template<> ::google::fhir::stu3::proto::CodeSystemEffectiveDate* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeSystemEffectiveDate>(Arena*);
template<> ::google::fhir::stu3::proto::CodeSystemExpirationDate* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeSystemExpirationDate>(Arena*);
template<> ::google::fhir::stu3::proto::CodeSystemHistory* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeSystemHistory>(Arena*);
template<> ::google::fhir::stu3::proto::CodeSystemHistory_Revision* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeSystemHistory_Revision>(Arena*);
template<> ::google::fhir::stu3::proto::CodeSystemKeyWord* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeSystemKeyWord>(Arena*);
template<> ::google::fhir::stu3::proto::CodeSystemLabel* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeSystemLabel>(Arena*);
template<> ::google::fhir::stu3::proto::CodeSystemMap* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeSystemMap>(Arena*);
template<> ::google::fhir::stu3::proto::CodeSystemOrdinalValue* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeSystemOrdinalValue>(Arena*);
template<> ::google::fhir::stu3::proto::CodeSystemOtherName* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeSystemOtherName>(Arena*);
template<> ::google::fhir::stu3::proto::CodeSystemReference* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeSystemReference>(Arena*);
template<> ::google::fhir::stu3::proto::CodeSystemReplacedby* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeSystemReplacedby>(Arena*);
template<> ::google::fhir::stu3::proto::CodeSystemSourceReference* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeSystemSourceReference>(Arena*);
template<> ::google::fhir::stu3::proto::CodeSystemSubsumes* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeSystemSubsumes>(Arena*);
template<> ::google::fhir::stu3::proto::CodeSystemTrustedExpansion* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeSystemTrustedExpansion>(Arena*);
template<> ::google::fhir::stu3::proto::CodeSystemUsage* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeSystemUsage>(Arena*);
template<> ::google::fhir::stu3::proto::CodeSystemWarning* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeSystemWarning>(Arena*);
template<> ::google::fhir::stu3::proto::CodeSystemWorkflowStatus* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeSystemWorkflowStatus>(Arena*);
template<> ::google::fhir::stu3::proto::CodingCOValue* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodingCOValue>(Arena*);
template<> ::google::fhir::stu3::proto::CodingSctdescid* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodingSctdescid>(Arena*);
template<> ::google::fhir::stu3::proto::CodingSourceValueSet* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodingSourceValueSet>(Arena*);
template<> ::google::fhir::stu3::proto::CommunicationMedia* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CommunicationMedia>(Arena*);
template<> ::google::fhir::stu3::proto::CommunicationReasonNotPerformed* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CommunicationReasonNotPerformed>(Arena*);
template<> ::google::fhir::stu3::proto::CommunicationRequestDefinition* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CommunicationRequestDefinition>(Arena*);
template<> ::google::fhir::stu3::proto::CommunicationRequestDefinition_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CommunicationRequestDefinition_Value>(Arena*);
template<> ::google::fhir::stu3::proto::CommunicationRequestOrderedBy* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CommunicationRequestOrderedBy>(Arena*);
template<> ::google::fhir::stu3::proto::CommunicationRequestOrderedBy_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CommunicationRequestOrderedBy_Value>(Arena*);
template<> ::google::fhir::stu3::proto::CommunicationRequestReasonRejected* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CommunicationRequestReasonRejected>(Arena*);
template<> ::google::fhir::stu3::proto::CommunicationRequestRelevantHistory* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CommunicationRequestRelevantHistory>(Arena*);
template<> ::google::fhir::stu3::proto::CommunicationRequestSupportingInfo* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CommunicationRequestSupportingInfo>(Arena*);
template<> ::google::fhir::stu3::proto::CompositionOtherConfidentiality* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CompositionOtherConfidentiality>(Arena*);
template<> ::google::fhir::stu3::proto::ConceptMapBidirectional* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ConceptMapBidirectional>(Arena*);
template<> ::google::fhir::stu3::proto::ConditionBasedOn* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ConditionBasedOn>(Arena*);
template<> ::google::fhir::stu3::proto::ConditionBasedOn_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ConditionBasedOn_Value>(Arena*);
template<> ::google::fhir::stu3::proto::ConditionCriticality* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ConditionCriticality>(Arena*);
template<> ::google::fhir::stu3::proto::ConditionDefinition* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ConditionDefinition>(Arena*);
template<> ::google::fhir::stu3::proto::ConditionDueTo* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ConditionDueTo>(Arena*);
template<> ::google::fhir::stu3::proto::ConditionDueTo_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ConditionDueTo_Value>(Arena*);
template<> ::google::fhir::stu3::proto::ConditionOccurredFollowing* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ConditionOccurredFollowing>(Arena*);
template<> ::google::fhir::stu3::proto::ConditionOccurredFollowing_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ConditionOccurredFollowing_Value>(Arena*);
template<> ::google::fhir::stu3::proto::ConditionOutcome* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ConditionOutcome>(Arena*);
template<> ::google::fhir::stu3::proto::ConditionPartOf* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ConditionPartOf>(Arena*);
template<> ::google::fhir::stu3::proto::ConditionPartOf_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ConditionPartOf_Value>(Arena*);
template<> ::google::fhir::stu3::proto::ConditionRuledOut* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ConditionRuledOut>(Arena*);
template<> ::google::fhir::stu3::proto::ConditionTargetBodySite* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ConditionTargetBodySite>(Arena*);
template<> ::google::fhir::stu3::proto::ConsentLocation* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ConsentLocation>(Arena*);
template<> ::google::fhir::stu3::proto::ConsentNotificationEndpoint* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ConsentNotificationEndpoint>(Arena*);
template<> ::google::fhir::stu3::proto::ConsentWitness* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ConsentWitness>(Arena*);
template<> ::google::fhir::stu3::proto::ConsentWitness_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ConsentWitness_Value>(Arena*);
template<> ::google::fhir::stu3::proto::ContactPointTELAddress* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ContactPointTELAddress>(Arena*);
template<> ::google::fhir::stu3::proto::CqifCondition* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CqifCondition>(Arena*);
template<> ::google::fhir::stu3::proto::CqifLibrary* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CqifLibrary>(Arena*);
template<> ::google::fhir::stu3::proto::CqlExpression* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CqlExpression>(Arena*);
template<> ::google::fhir::stu3::proto::DataAbsentReason* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DataAbsentReason>(Arena*);
template<> ::google::fhir::stu3::proto::DataElementAdministrativeStatus* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DataElementAdministrativeStatus>(Arena*);
template<> ::google::fhir::stu3::proto::DataElementChangeDescription* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DataElementChangeDescription>(Arena*);
template<> ::google::fhir::stu3::proto::DataElementClassificationOrContext* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DataElementClassificationOrContext>(Arena*);
template<> ::google::fhir::stu3::proto::DataElementContactAddress* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DataElementContactAddress>(Arena*);
template<> ::google::fhir::stu3::proto::DataElementDocumentReference* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DataElementDocumentReference>(Arena*);
template<> ::google::fhir::stu3::proto::DataElementEffectivePeriod* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DataElementEffectivePeriod>(Arena*);
template<> ::google::fhir::stu3::proto::DataElementIsDataElementConcept* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DataElementIsDataElementConcept>(Arena*);
template<> ::google::fhir::stu3::proto::DataElementMapSourcePublisher* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DataElementMapSourcePublisher>(Arena*);
template<> ::google::fhir::stu3::proto::DataElementRegistryOrg* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DataElementRegistryOrg>(Arena*);
template<> ::google::fhir::stu3::proto::DataElementSubmitterOrg* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DataElementSubmitterOrg>(Arena*);
template<> ::google::fhir::stu3::proto::DaysOfCycle* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DaysOfCycle>(Arena*);
template<> ::google::fhir::stu3::proto::Definition* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Definition>(Arena*);
template<> ::google::fhir::stu3::proto::Definition_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Definition_Value>(Arena*);
template<> ::google::fhir::stu3::proto::DeviceDin* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DeviceDin>(Arena*);
template<> ::google::fhir::stu3::proto::DeviceImplantStatus* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DeviceImplantStatus>(Arena*);
template<> ::google::fhir::stu3::proto::DeviceRequestPatientInstruction* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DeviceRequestPatientInstruction>(Arena*);
template<> ::google::fhir::stu3::proto::DeviceRequestReasonRejected* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DeviceRequestReasonRejected>(Arena*);
template<> ::google::fhir::stu3::proto::DiagnosticReportAddendumOf* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DiagnosticReportAddendumOf>(Arena*);
template<> ::google::fhir::stu3::proto::DiagnosticReportAlleleDatabase* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DiagnosticReportAlleleDatabase>(Arena*);
template<> ::google::fhir::stu3::proto::DiagnosticReportAnalysis* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DiagnosticReportAnalysis>(Arena*);
template<> ::google::fhir::stu3::proto::DiagnosticReportAssessedCondition* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DiagnosticReportAssessedCondition>(Arena*);
template<> ::google::fhir::stu3::proto::DiagnosticReportExtends* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DiagnosticReportExtends>(Arena*);
template<> ::google::fhir::stu3::proto::DiagnosticReportFamilyMemberHistory* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DiagnosticReportFamilyMemberHistory>(Arena*);
template<> ::google::fhir::stu3::proto::DiagnosticReportGlstring* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DiagnosticReportGlstring>(Arena*);
template<> ::google::fhir::stu3::proto::DiagnosticReportHaploid* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DiagnosticReportHaploid>(Arena*);
template<> ::google::fhir::stu3::proto::DiagnosticReportItem* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DiagnosticReportItem>(Arena*);
template<> ::google::fhir::stu3::proto::DiagnosticReportLocationPerformed* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DiagnosticReportLocationPerformed>(Arena*);
template<> ::google::fhir::stu3::proto::DiagnosticReportMethod* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DiagnosticReportMethod>(Arena*);
template<> ::google::fhir::stu3::proto::DiagnosticReportNotDone* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DiagnosticReportNotDone>(Arena*);
template<> ::google::fhir::stu3::proto::DiagnosticReportReplaces* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DiagnosticReportReplaces>(Arena*);
template<> ::google::fhir::stu3::proto::DiagnosticReportSummaryOf* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DiagnosticReportSummaryOf>(Arena*);
template<> ::google::fhir::stu3::proto::DoseType* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DoseType>(Arena*);
template<> ::google::fhir::stu3::proto::EffectivePeriod* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::EffectivePeriod>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionAllowedUnits* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionAllowedUnits>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionAllowedUnits_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionAllowedUnits_Value>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionBestpractice* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionBestpractice>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionBestpractice_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionBestpractice_Value>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionBindingName* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionBindingName>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionDisplayHint* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionDisplayHint>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionEquivalence* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionEquivalence>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionExplicitTypeName* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionExplicitTypeName>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionIdentifier* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionIdentifier>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionInheritedExtensibleValueSet* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionInheritedExtensibleValueSet>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionInheritedExtensibleValueSet_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionInheritedExtensibleValueSet_Value>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionIsCommonBinding* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionIsCommonBinding>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionJsonType* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionJsonType>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionMaxValueSet* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionMaxValueSet>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionMaxValueSet_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionMaxValueSet_Value>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionMinValueSet* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionMinValueSet>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionMinValueSet_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionMinValueSet_Value>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionObjectClass* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionObjectClass>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionObjectClassProperty* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionObjectClassProperty>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionQuestion* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionQuestion>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionRdfType* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionRdfType>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionRegex* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionRegex>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionSelector* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionSelector>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionTranslatable* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionTranslatable>(Arena*);
template<> ::google::fhir::stu3::proto::ElementDefinitionXmlType* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionXmlType>(Arena*);
template<> ::google::fhir::stu3::proto::EncounterAssociatedEncounter* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::EncounterAssociatedEncounter>(Arena*);
template<> ::google::fhir::stu3::proto::EncounterModeOfArrival* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::EncounterModeOfArrival>(Arena*);
template<> ::google::fhir::stu3::proto::EncounterPrimaryDiagnosis* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::EncounterPrimaryDiagnosis>(Arena*);
template<> ::google::fhir::stu3::proto::EncounterReasonCancelled* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::EncounterReasonCancelled>(Arena*);
template<> ::google::fhir::stu3::proto::EntryFormat* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::EntryFormat>(Arena*);
template<> ::google::fhir::stu3::proto::FamilyMemberHistoryAbatement* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::FamilyMemberHistoryAbatement>(Arena*);
template<> ::google::fhir::stu3::proto::FamilyMemberHistoryAbatement_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::FamilyMemberHistoryAbatement_Value>(Arena*);
template<> ::google::fhir::stu3::proto::FamilyMemberHistoryObservation* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::FamilyMemberHistoryObservation>(Arena*);
template<> ::google::fhir::stu3::proto::FamilyMemberHistoryParent* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::FamilyMemberHistoryParent>(Arena*);
template<> ::google::fhir::stu3::proto::FamilyMemberHistoryPatientRecord* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::FamilyMemberHistoryPatientRecord>(Arena*);
template<> ::google::fhir::stu3::proto::FamilyMemberHistorySeverity* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::FamilyMemberHistorySeverity>(Arena*);
template<> ::google::fhir::stu3::proto::FamilyMemberHistorySibling* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::FamilyMemberHistorySibling>(Arena*);
template<> ::google::fhir::stu3::proto::FamilyMemberHistoryType* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::FamilyMemberHistoryType>(Arena*);
template<> ::google::fhir::stu3::proto::FhirPathExpression* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::FhirPathExpression>(Arena*);
template<> ::google::fhir::stu3::proto::FlagDetail* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::FlagDetail>(Arena*);
template<> ::google::fhir::stu3::proto::FlagPriority* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::FlagPriority>(Arena*);
template<> ::google::fhir::stu3::proto::Fmm* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Fmm>(Arena*);
template<> ::google::fhir::stu3::proto::GoalAcceptance* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::GoalAcceptance>(Arena*);
template<> ::google::fhir::stu3::proto::GoalReasonRejected* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::GoalReasonRejected>(Arena*);
template<> ::google::fhir::stu3::proto::GoalRelationship* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::GoalRelationship>(Arena*);
template<> ::google::fhir::stu3::proto::HumanNameAssemblyOrder* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::HumanNameAssemblyOrder>(Arena*);
template<> ::google::fhir::stu3::proto::HumanNameENQualifier* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::HumanNameENQualifier>(Arena*);
template<> ::google::fhir::stu3::proto::HumanNameENRepresentation* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::HumanNameENRepresentation>(Arena*);
template<> ::google::fhir::stu3::proto::HumanNameFathersFamily* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::HumanNameFathersFamily>(Arena*);
template<> ::google::fhir::stu3::proto::HumanNameMothersFamily* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::HumanNameMothersFamily>(Arena*);
template<> ::google::fhir::stu3::proto::HumanNameOwnName* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::HumanNameOwnName>(Arena*);
template<> ::google::fhir::stu3::proto::HumanNameOwnPrefix* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::HumanNameOwnPrefix>(Arena*);
template<> ::google::fhir::stu3::proto::HumanNamePartnerName* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::HumanNamePartnerName>(Arena*);
template<> ::google::fhir::stu3::proto::HumanNamePartnerPrefix* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::HumanNamePartnerPrefix>(Arena*);
template<> ::google::fhir::stu3::proto::IdentifierValidDate* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::IdentifierValidDate>(Arena*);
template<> ::google::fhir::stu3::proto::ImplementationGuidePage* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ImplementationGuidePage>(Arena*);
template<> ::google::fhir::stu3::proto::InfuseOver* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::InfuseOver>(Arena*);
template<> ::google::fhir::stu3::proto::InitialValue* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::InitialValue>(Arena*);
template<> ::google::fhir::stu3::proto::LastReviewDate* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::LastReviewDate>(Arena*);
template<> ::google::fhir::stu3::proto::LocationAlias* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::LocationAlias>(Arena*);
template<> ::google::fhir::stu3::proto::MaxDecimalPlaces* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::MaxDecimalPlaces>(Arena*);
template<> ::google::fhir::stu3::proto::MaxDeliveryRate* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::MaxDeliveryRate>(Arena*);
template<> ::google::fhir::stu3::proto::MaxDeliveryVolume* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::MaxDeliveryVolume>(Arena*);
template<> ::google::fhir::stu3::proto::MaxSize* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::MaxSize>(Arena*);
template<> ::google::fhir::stu3::proto::MeasureInfo* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::MeasureInfo>(Arena*);
template<> ::google::fhir::stu3::proto::MedicationDispenseValidityPeriod* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::MedicationDispenseValidityPeriod>(Arena*);
template<> ::google::fhir::stu3::proto::MedicationStatementPrescriber* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::MedicationStatementPrescriber>(Arena*);
template<> ::google::fhir::stu3::proto::MedicationUsualRoute* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::MedicationUsualRoute>(Arena*);
template<> ::google::fhir::stu3::proto::MessageHeaderMessageheaderResponseRequest* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::MessageHeaderMessageheaderResponseRequest>(Arena*);
template<> ::google::fhir::stu3::proto::MimeType* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::MimeType>(Arena*);
template<> ::google::fhir::stu3::proto::MinDosePerPeriod* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::MinDosePerPeriod>(Arena*);
template<> ::google::fhir::stu3::proto::MinLength* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::MinLength>(Arena*);
template<> ::google::fhir::stu3::proto::Namespace* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Namespace>(Arena*);
template<> ::google::fhir::stu3::proto::ObservationAlleleName* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ObservationAlleleName>(Arena*);
template<> ::google::fhir::stu3::proto::ObservationAllelicFrequency* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ObservationAllelicFrequency>(Arena*);
template<> ::google::fhir::stu3::proto::ObservationAllelicState* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ObservationAllelicState>(Arena*);
template<> ::google::fhir::stu3::proto::ObservationAminoAcidChangeName* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ObservationAminoAcidChangeName>(Arena*);
template<> ::google::fhir::stu3::proto::ObservationAminoAcidChangeType* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ObservationAminoAcidChangeType>(Arena*);
template<> ::google::fhir::stu3::proto::ObservationBodyPosition* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ObservationBodyPosition>(Arena*);
template<> ::google::fhir::stu3::proto::ObservationCopyNumberEvent* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ObservationCopyNumberEvent>(Arena*);
template<> ::google::fhir::stu3::proto::ObservationDNARegionName* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ObservationDNARegionName>(Arena*);
template<> ::google::fhir::stu3::proto::ObservationDNASequenceVariantName* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ObservationDNASequenceVariantName>(Arena*);
template<> ::google::fhir::stu3::proto::ObservationDNASequenceVariantType* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ObservationDNASequenceVariantType>(Arena*);
template<> ::google::fhir::stu3::proto::ObservationDNAVariantId* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ObservationDNAVariantId>(Arena*);
template<> ::google::fhir::stu3::proto::ObservationDelta* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ObservationDelta>(Arena*);
template<> ::google::fhir::stu3::proto::ObservationEventTiming* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ObservationEventTiming>(Arena*);
template<> ::google::fhir::stu3::proto::ObservationFocalSubject* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ObservationFocalSubject>(Arena*);
template<> ::google::fhir::stu3::proto::ObservationGene* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ObservationGene>(Arena*);
template<> ::google::fhir::stu3::proto::ObservationGenomicSourceClass* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ObservationGenomicSourceClass>(Arena*);
template<> ::google::fhir::stu3::proto::ObservationInterpretation* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ObservationInterpretation>(Arena*);
template<> ::google::fhir::stu3::proto::ObservationPerformerRole* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ObservationPerformerRole>(Arena*);
template<> ::google::fhir::stu3::proto::ObservationPhaseSet* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ObservationPhaseSet>(Arena*);
template<> ::google::fhir::stu3::proto::ObservationSequence* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ObservationSequence>(Arena*);
template<> ::google::fhir::stu3::proto::ObservationTimeOffset* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ObservationTimeOffset>(Arena*);
template<> ::google::fhir::stu3::proto::OnBehalfOf* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::OnBehalfOf>(Arena*);
template<> ::google::fhir::stu3::proto::OperationOutcomeAuthority* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::OperationOutcomeAuthority>(Arena*);
template<> ::google::fhir::stu3::proto::OperationOutcomeDetectedIssue* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::OperationOutcomeDetectedIssue>(Arena*);
template<> ::google::fhir::stu3::proto::OperationOutcomeIssueSource* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::OperationOutcomeIssueSource>(Arena*);
template<> ::google::fhir::stu3::proto::OrganizationAlias* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::OrganizationAlias>(Arena*);
template<> ::google::fhir::stu3::proto::OrganizationPeriod* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::OrganizationPeriod>(Arena*);
template<> ::google::fhir::stu3::proto::OrganizationPreferredContact* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::OrganizationPreferredContact>(Arena*);
template<> ::google::fhir::stu3::proto::PartOf* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::PartOf>(Arena*);
template<> ::google::fhir::stu3::proto::PatientAdoptionInfo* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::PatientAdoptionInfo>(Arena*);
template<> ::google::fhir::stu3::proto::PatientBirthPlace* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::PatientBirthPlace>(Arena*);
template<> ::google::fhir::stu3::proto::PatientBirthTime* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::PatientBirthTime>(Arena*);
template<> ::google::fhir::stu3::proto::PatientCadavericDonor* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::PatientCadavericDonor>(Arena*);
template<> ::google::fhir::stu3::proto::PatientCitizenship* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::PatientCitizenship>(Arena*);
template<> ::google::fhir::stu3::proto::PatientClinicalTrial* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::PatientClinicalTrial>(Arena*);
template<> ::google::fhir::stu3::proto::PatientCongregation* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::PatientCongregation>(Arena*);
template<> ::google::fhir::stu3::proto::PatientDisability* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::PatientDisability>(Arena*);
template<> ::google::fhir::stu3::proto::PatientImportance* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::PatientImportance>(Arena*);
template<> ::google::fhir::stu3::proto::PatientInterpreterRequired* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::PatientInterpreterRequired>(Arena*);
template<> ::google::fhir::stu3::proto::PatientMothersMaidenName* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::PatientMothersMaidenName>(Arena*);
template<> ::google::fhir::stu3::proto::PatientNationality* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::PatientNationality>(Arena*);
template<> ::google::fhir::stu3::proto::PatientReligion* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::PatientReligion>(Arena*);
template<> ::google::fhir::stu3::proto::PermittedValueConceptmap* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::PermittedValueConceptmap>(Arena*);
template<> ::google::fhir::stu3::proto::PermittedValueValueset* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::PermittedValueValueset>(Arena*);
template<> ::google::fhir::stu3::proto::PractitionerClassification* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::PractitionerClassification>(Arena*);
template<> ::google::fhir::stu3::proto::PractitionerRolePrimaryInd* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::PractitionerRolePrimaryInd>(Arena*);
template<> ::google::fhir::stu3::proto::ProcedureApproachBodySite* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ProcedureApproachBodySite>(Arena*);
template<> ::google::fhir::stu3::proto::ProcedureCausedBy* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ProcedureCausedBy>(Arena*);
template<> ::google::fhir::stu3::proto::ProcedureCausedBy_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ProcedureCausedBy_Value>(Arena*);
template<> ::google::fhir::stu3::proto::ProcedureIncisionDateTime* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ProcedureIncisionDateTime>(Arena*);
template<> ::google::fhir::stu3::proto::ProcedureMethod* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ProcedureMethod>(Arena*);
template<> ::google::fhir::stu3::proto::ProcedureProgressStatus* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ProcedureProgressStatus>(Arena*);
template<> ::google::fhir::stu3::proto::ProcedureRequestApproachBodySite* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ProcedureRequestApproachBodySite>(Arena*);
template<> ::google::fhir::stu3::proto::ProcedureRequestAuthorizedBy* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ProcedureRequestAuthorizedBy>(Arena*);
template<> ::google::fhir::stu3::proto::ProcedureRequestPrecondition* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ProcedureRequestPrecondition>(Arena*);
template<> ::google::fhir::stu3::proto::ProcedureRequestQuestionnaireRequest* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ProcedureRequestQuestionnaireRequest>(Arena*);
template<> ::google::fhir::stu3::proto::ProcedureRequestReasonRefused* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ProcedureRequestReasonRefused>(Arena*);
template<> ::google::fhir::stu3::proto::ProcedureRequestReasonRejected* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ProcedureRequestReasonRejected>(Arena*);
template<> ::google::fhir::stu3::proto::ProcedureRequestTargetBodySite* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ProcedureRequestTargetBodySite>(Arena*);
template<> ::google::fhir::stu3::proto::ProcedureSchedule* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ProcedureSchedule>(Arena*);
template<> ::google::fhir::stu3::proto::ProcedureTargetBodySite* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ProcedureTargetBodySite>(Arena*);
template<> ::google::fhir::stu3::proto::QuantityUncertainty* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuantityUncertainty>(Arena*);
template<> ::google::fhir::stu3::proto::QuantityUncertaintyType* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuantityUncertaintyType>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireAllowedProfile* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireAllowedProfile>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireAllowedResource* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireAllowedResource>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireBaseType* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireBaseType>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireChoiceOrientation* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireChoiceOrientation>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireDeMap* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireDeMap>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireDisplayCategory* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireDisplayCategory>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireFhirType* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireFhirType>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireHidden* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireHidden>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireItemControl* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireItemControl>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireLookupQuestionnaire* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireLookupQuestionnaire>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireMaxOccurs* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireMaxOccurs>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireMaxValue* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireMaxValue>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireMaxValue_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireMaxValue_Value>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireMinOccurs* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireMinOccurs>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireMinValue* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireMinValue>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireMinValue_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireMinValue_Value>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireOptionCode* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireOptionCode>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireOptionExclusive* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireOptionExclusive>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireOptionPrefix* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireOptionPrefix>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireOrdinalValue* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireOrdinalValue>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireReferenceFilter* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireReferenceFilter>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireResponseAuthor* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireResponseAuthor>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireResponseAuthor_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireResponseAuthor_Value>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireResponseNote* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireResponseNote>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireResponseReason* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireResponseReason>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireResponseReviewer* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireResponseReviewer>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireSourceStructureMap* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireSourceStructureMap>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireStudyprotocolIdentifier* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireStudyprotocolIdentifier>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireSupportLink* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireSupportLink>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireTargetStructureMap* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireTargetStructureMap>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireUnit* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireUnit>(Arena*);
template<> ::google::fhir::stu3::proto::QuestionnaireUsageMode* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireUsageMode>(Arena*);
template<> ::google::fhir::stu3::proto::RateGoal* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::RateGoal>(Arena*);
template<> ::google::fhir::stu3::proto::RateIncrement* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::RateIncrement>(Arena*);
template<> ::google::fhir::stu3::proto::RateIncrementInterval* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::RateIncrementInterval>(Arena*);
template<> ::google::fhir::stu3::proto::ReasonCode* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ReasonCode>(Arena*);
template<> ::google::fhir::stu3::proto::ReasonReference* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ReasonReference>(Arena*);
template<> ::google::fhir::stu3::proto::ReasonReference_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ReasonReference_Value>(Arena*);
template<> ::google::fhir::stu3::proto::ReferralRequestReasonRefused* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ReferralRequestReasonRefused>(Arena*);
template<> ::google::fhir::stu3::proto::RefillsRemaining* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::RefillsRemaining>(Arena*);
template<> ::google::fhir::stu3::proto::Regex* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Regex>(Arena*);
template<> ::google::fhir::stu3::proto::RenderedValue* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::RenderedValue>(Arena*);
template<> ::google::fhir::stu3::proto::ResourcePertainsToGoal* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ResourcePertainsToGoal>(Arena*);
template<> ::google::fhir::stu3::proto::SpecimenCollectionPriority* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::SpecimenCollectionPriority>(Arena*);
template<> ::google::fhir::stu3::proto::SpecimenIsDryWeight* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::SpecimenIsDryWeight>(Arena*);
template<> ::google::fhir::stu3::proto::SpecimenProcessingTime* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::SpecimenProcessingTime>(Arena*);
template<> ::google::fhir::stu3::proto::SpecimenProcessingTime_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::SpecimenProcessingTime_Value>(Arena*);
template<> ::google::fhir::stu3::proto::SpecimenSequenceNumber* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::SpecimenSequenceNumber>(Arena*);
template<> ::google::fhir::stu3::proto::SpecimenSpecialHandling* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::SpecimenSpecialHandling>(Arena*);
template<> ::google::fhir::stu3::proto::StringMarkdown* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::StringMarkdown>(Arena*);
template<> ::google::fhir::stu3::proto::StringSCCoding* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::StringSCCoding>(Arena*);
template<> ::google::fhir::stu3::proto::StringXhtml* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::StringXhtml>(Arena*);
template<> ::google::fhir::stu3::proto::StructureDefinitionAncestor* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::StructureDefinitionAncestor>(Arena*);
template<> ::google::fhir::stu3::proto::StructureDefinitionAnnotation* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::StructureDefinitionAnnotation>(Arena*);
template<> ::google::fhir::stu3::proto::StructureDefinitionCategory* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::StructureDefinitionCategory>(Arena*);
template<> ::google::fhir::stu3::proto::StructureDefinitionDatadictionary* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::StructureDefinitionDatadictionary>(Arena*);
template<> ::google::fhir::stu3::proto::StructureDefinitionFmmNoWarnings* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::StructureDefinitionFmmNoWarnings>(Arena*);
template<> ::google::fhir::stu3::proto::StructureDefinitionSummary* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::StructureDefinitionSummary>(Arena*);
template<> ::google::fhir::stu3::proto::StructureDefinitionTableName* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::StructureDefinitionTableName>(Arena*);
template<> ::google::fhir::stu3::proto::StructureDefinitionTemplateStatus* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::StructureDefinitionTemplateStatus>(Arena*);
template<> ::google::fhir::stu3::proto::Style* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Style>(Arena*);
template<> ::google::fhir::stu3::proto::StyleSensitive* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::StyleSensitive>(Arena*);
template<> ::google::fhir::stu3::proto::TaskCandidateList* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::TaskCandidateList>(Arena*);
template<> ::google::fhir::stu3::proto::TaskCandidateList_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::TaskCandidateList_Value>(Arena*);
template<> ::google::fhir::stu3::proto::TaskReplaces* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::TaskReplaces>(Arena*);
template<> ::google::fhir::stu3::proto::TimingExact* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::TimingExact>(Arena*);
template<> ::google::fhir::stu3::proto::Translation* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Translation>(Arena*);
template<> ::google::fhir::stu3::proto::Translation_Content* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Translation_Content>(Arena*);
template<> ::google::fhir::stu3::proto::UsageContextGroup* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::UsageContextGroup>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetAuthor* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetAuthor>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetCaseSensitive* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetCaseSensitive>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetComment* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetComment>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetComments* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetComments>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetConceptOrder* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetConceptOrder>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetDefinition* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetDefinition>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetEffectiveDate* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetEffectiveDate>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetExpansionSource* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetExpansionSource>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetExpirationDate* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetExpirationDate>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetHistory* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetHistory>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetHistory_Revision* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetHistory_Revision>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetKeyWord* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetKeyWord>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetLabel* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetLabel>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetMap* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetMap>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetOrdinalValue* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetOrdinalValue>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetOtherName* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetOtherName>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetReference* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetReference>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetSourceReference* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetSourceReference>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetSystem* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetSystem>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetSystemName* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetSystemName>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetSystemRef* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetSystemRef>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetToocostly* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetToocostly>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetTrustedExpansion* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetTrustedExpansion>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetUnclosed* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetUnclosed>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetUsage* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetUsage>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetWarning* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetWarning>(Arena*);
template<> ::google::fhir::stu3::proto::ValueSetWorkflowStatus* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ValueSetWorkflowStatus>(Arena*);
template<> ::google::fhir::stu3::proto::Wg* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Wg>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace fhir {
namespace stu3 {
namespace proto {

// ===================================================================

class DataElementAdministrativeStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DataElementAdministrativeStatus) */ {
 public:
  DataElementAdministrativeStatus();
  virtual ~DataElementAdministrativeStatus();

  DataElementAdministrativeStatus(const DataElementAdministrativeStatus& from);

  inline DataElementAdministrativeStatus& operator=(const DataElementAdministrativeStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElementAdministrativeStatus(DataElementAdministrativeStatus&& from) noexcept
    : DataElementAdministrativeStatus() {
    *this = ::std::move(from);
  }

  inline DataElementAdministrativeStatus& operator=(DataElementAdministrativeStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataElementAdministrativeStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElementAdministrativeStatus* internal_default_instance() {
    return reinterpret_cast<const DataElementAdministrativeStatus*>(
               &_DataElementAdministrativeStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DataElementAdministrativeStatus* other);
  friend void swap(DataElementAdministrativeStatus& a, DataElementAdministrativeStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElementAdministrativeStatus* New() const final {
    return CreateMaybeMessage<DataElementAdministrativeStatus>(NULL);
  }

  DataElementAdministrativeStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataElementAdministrativeStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataElementAdministrativeStatus& from);
  void MergeFrom(const DataElementAdministrativeStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataElementAdministrativeStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DataElementAdministrativeStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataElementChangeDescription : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DataElementChangeDescription) */ {
 public:
  DataElementChangeDescription();
  virtual ~DataElementChangeDescription();

  DataElementChangeDescription(const DataElementChangeDescription& from);

  inline DataElementChangeDescription& operator=(const DataElementChangeDescription& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElementChangeDescription(DataElementChangeDescription&& from) noexcept
    : DataElementChangeDescription() {
    *this = ::std::move(from);
  }

  inline DataElementChangeDescription& operator=(DataElementChangeDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataElementChangeDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElementChangeDescription* internal_default_instance() {
    return reinterpret_cast<const DataElementChangeDescription*>(
               &_DataElementChangeDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DataElementChangeDescription* other);
  friend void swap(DataElementChangeDescription& a, DataElementChangeDescription& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElementChangeDescription* New() const final {
    return CreateMaybeMessage<DataElementChangeDescription>(NULL);
  }

  DataElementChangeDescription* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataElementChangeDescription>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataElementChangeDescription& from);
  void MergeFrom(const DataElementChangeDescription& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataElementChangeDescription* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DataElementChangeDescription)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataElementClassificationOrContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DataElementClassificationOrContext) */ {
 public:
  DataElementClassificationOrContext();
  virtual ~DataElementClassificationOrContext();

  DataElementClassificationOrContext(const DataElementClassificationOrContext& from);

  inline DataElementClassificationOrContext& operator=(const DataElementClassificationOrContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElementClassificationOrContext(DataElementClassificationOrContext&& from) noexcept
    : DataElementClassificationOrContext() {
    *this = ::std::move(from);
  }

  inline DataElementClassificationOrContext& operator=(DataElementClassificationOrContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataElementClassificationOrContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElementClassificationOrContext* internal_default_instance() {
    return reinterpret_cast<const DataElementClassificationOrContext*>(
               &_DataElementClassificationOrContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DataElementClassificationOrContext* other);
  friend void swap(DataElementClassificationOrContext& a, DataElementClassificationOrContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElementClassificationOrContext* New() const final {
    return CreateMaybeMessage<DataElementClassificationOrContext>(NULL);
  }

  DataElementClassificationOrContext* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataElementClassificationOrContext>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataElementClassificationOrContext& from);
  void MergeFrom(const DataElementClassificationOrContext& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataElementClassificationOrContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.ClassificationOrContextCode value_code = 3;
  bool has_value_code() const;
  void clear_value_code();
  static const int kValueCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::ClassificationOrContextCode& _internal_value_code() const;
  public:
  const ::google::fhir::stu3::proto::ClassificationOrContextCode& value_code() const;
  ::google::fhir::stu3::proto::ClassificationOrContextCode* release_value_code();
  ::google::fhir::stu3::proto::ClassificationOrContextCode* mutable_value_code();
  void set_allocated_value_code(::google::fhir::stu3::proto::ClassificationOrContextCode* value_code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DataElementClassificationOrContext)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::ClassificationOrContextCode* value_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataElementContactAddress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DataElementContactAddress) */ {
 public:
  DataElementContactAddress();
  virtual ~DataElementContactAddress();

  DataElementContactAddress(const DataElementContactAddress& from);

  inline DataElementContactAddress& operator=(const DataElementContactAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElementContactAddress(DataElementContactAddress&& from) noexcept
    : DataElementContactAddress() {
    *this = ::std::move(from);
  }

  inline DataElementContactAddress& operator=(DataElementContactAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataElementContactAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElementContactAddress* internal_default_instance() {
    return reinterpret_cast<const DataElementContactAddress*>(
               &_DataElementContactAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DataElementContactAddress* other);
  friend void swap(DataElementContactAddress& a, DataElementContactAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElementContactAddress* New() const final {
    return CreateMaybeMessage<DataElementContactAddress>(NULL);
  }

  DataElementContactAddress* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataElementContactAddress>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataElementContactAddress& from);
  void MergeFrom(const DataElementContactAddress& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataElementContactAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Address value_address = 3;
  bool has_value_address() const;
  void clear_value_address();
  static const int kValueAddressFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Address& _internal_value_address() const;
  public:
  const ::google::fhir::stu3::proto::Address& value_address() const;
  ::google::fhir::stu3::proto::Address* release_value_address();
  ::google::fhir::stu3::proto::Address* mutable_value_address();
  void set_allocated_value_address(::google::fhir::stu3::proto::Address* value_address);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DataElementContactAddress)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Address* value_address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataElementDocumentReference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DataElementDocumentReference) */ {
 public:
  DataElementDocumentReference();
  virtual ~DataElementDocumentReference();

  DataElementDocumentReference(const DataElementDocumentReference& from);

  inline DataElementDocumentReference& operator=(const DataElementDocumentReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElementDocumentReference(DataElementDocumentReference&& from) noexcept
    : DataElementDocumentReference() {
    *this = ::std::move(from);
  }

  inline DataElementDocumentReference& operator=(DataElementDocumentReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataElementDocumentReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElementDocumentReference* internal_default_instance() {
    return reinterpret_cast<const DataElementDocumentReference*>(
               &_DataElementDocumentReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DataElementDocumentReference* other);
  friend void swap(DataElementDocumentReference& a, DataElementDocumentReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElementDocumentReference* New() const final {
    return CreateMaybeMessage<DataElementDocumentReference>(NULL);
  }

  DataElementDocumentReference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataElementDocumentReference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataElementDocumentReference& from);
  void MergeFrom(const DataElementDocumentReference& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataElementDocumentReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/DocumentReference"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DataElementDocumentReference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataElementEffectivePeriod : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DataElementEffectivePeriod) */ {
 public:
  DataElementEffectivePeriod();
  virtual ~DataElementEffectivePeriod();

  DataElementEffectivePeriod(const DataElementEffectivePeriod& from);

  inline DataElementEffectivePeriod& operator=(const DataElementEffectivePeriod& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElementEffectivePeriod(DataElementEffectivePeriod&& from) noexcept
    : DataElementEffectivePeriod() {
    *this = ::std::move(from);
  }

  inline DataElementEffectivePeriod& operator=(DataElementEffectivePeriod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataElementEffectivePeriod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElementEffectivePeriod* internal_default_instance() {
    return reinterpret_cast<const DataElementEffectivePeriod*>(
               &_DataElementEffectivePeriod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(DataElementEffectivePeriod* other);
  friend void swap(DataElementEffectivePeriod& a, DataElementEffectivePeriod& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElementEffectivePeriod* New() const final {
    return CreateMaybeMessage<DataElementEffectivePeriod>(NULL);
  }

  DataElementEffectivePeriod* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataElementEffectivePeriod>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataElementEffectivePeriod& from);
  void MergeFrom(const DataElementEffectivePeriod& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataElementEffectivePeriod* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Period value_period = 3;
  bool has_value_period() const;
  void clear_value_period();
  static const int kValuePeriodFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Period& _internal_value_period() const;
  public:
  const ::google::fhir::stu3::proto::Period& value_period() const;
  ::google::fhir::stu3::proto::Period* release_value_period();
  ::google::fhir::stu3::proto::Period* mutable_value_period();
  void set_allocated_value_period(::google::fhir::stu3::proto::Period* value_period);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DataElementEffectivePeriod)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Period* value_period_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataElementIsDataElementConcept : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DataElementIsDataElementConcept) */ {
 public:
  DataElementIsDataElementConcept();
  virtual ~DataElementIsDataElementConcept();

  DataElementIsDataElementConcept(const DataElementIsDataElementConcept& from);

  inline DataElementIsDataElementConcept& operator=(const DataElementIsDataElementConcept& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElementIsDataElementConcept(DataElementIsDataElementConcept&& from) noexcept
    : DataElementIsDataElementConcept() {
    *this = ::std::move(from);
  }

  inline DataElementIsDataElementConcept& operator=(DataElementIsDataElementConcept&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataElementIsDataElementConcept& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElementIsDataElementConcept* internal_default_instance() {
    return reinterpret_cast<const DataElementIsDataElementConcept*>(
               &_DataElementIsDataElementConcept_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(DataElementIsDataElementConcept* other);
  friend void swap(DataElementIsDataElementConcept& a, DataElementIsDataElementConcept& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElementIsDataElementConcept* New() const final {
    return CreateMaybeMessage<DataElementIsDataElementConcept>(NULL);
  }

  DataElementIsDataElementConcept* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataElementIsDataElementConcept>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataElementIsDataElementConcept& from);
  void MergeFrom(const DataElementIsDataElementConcept& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataElementIsDataElementConcept* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DataElementIsDataElementConcept)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataElementRegistryOrg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DataElementRegistryOrg) */ {
 public:
  DataElementRegistryOrg();
  virtual ~DataElementRegistryOrg();

  DataElementRegistryOrg(const DataElementRegistryOrg& from);

  inline DataElementRegistryOrg& operator=(const DataElementRegistryOrg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElementRegistryOrg(DataElementRegistryOrg&& from) noexcept
    : DataElementRegistryOrg() {
    *this = ::std::move(from);
  }

  inline DataElementRegistryOrg& operator=(DataElementRegistryOrg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataElementRegistryOrg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElementRegistryOrg* internal_default_instance() {
    return reinterpret_cast<const DataElementRegistryOrg*>(
               &_DataElementRegistryOrg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(DataElementRegistryOrg* other);
  friend void swap(DataElementRegistryOrg& a, DataElementRegistryOrg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElementRegistryOrg* New() const final {
    return CreateMaybeMessage<DataElementRegistryOrg>(NULL);
  }

  DataElementRegistryOrg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataElementRegistryOrg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataElementRegistryOrg& from);
  void MergeFrom(const DataElementRegistryOrg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataElementRegistryOrg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Organization"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DataElementRegistryOrg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataElementSubmitterOrg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DataElementSubmitterOrg) */ {
 public:
  DataElementSubmitterOrg();
  virtual ~DataElementSubmitterOrg();

  DataElementSubmitterOrg(const DataElementSubmitterOrg& from);

  inline DataElementSubmitterOrg& operator=(const DataElementSubmitterOrg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElementSubmitterOrg(DataElementSubmitterOrg&& from) noexcept
    : DataElementSubmitterOrg() {
    *this = ::std::move(from);
  }

  inline DataElementSubmitterOrg& operator=(DataElementSubmitterOrg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataElementSubmitterOrg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElementSubmitterOrg* internal_default_instance() {
    return reinterpret_cast<const DataElementSubmitterOrg*>(
               &_DataElementSubmitterOrg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DataElementSubmitterOrg* other);
  friend void swap(DataElementSubmitterOrg& a, DataElementSubmitterOrg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElementSubmitterOrg* New() const final {
    return CreateMaybeMessage<DataElementSubmitterOrg>(NULL);
  }

  DataElementSubmitterOrg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataElementSubmitterOrg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataElementSubmitterOrg& from);
  void MergeFrom(const DataElementSubmitterOrg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataElementSubmitterOrg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Organization"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DataElementSubmitterOrg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionObjectClass : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionObjectClass) */ {
 public:
  ElementDefinitionObjectClass();
  virtual ~ElementDefinitionObjectClass();

  ElementDefinitionObjectClass(const ElementDefinitionObjectClass& from);

  inline ElementDefinitionObjectClass& operator=(const ElementDefinitionObjectClass& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionObjectClass(ElementDefinitionObjectClass&& from) noexcept
    : ElementDefinitionObjectClass() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionObjectClass& operator=(ElementDefinitionObjectClass&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionObjectClass& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionObjectClass* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionObjectClass*>(
               &_ElementDefinitionObjectClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ElementDefinitionObjectClass* other);
  friend void swap(ElementDefinitionObjectClass& a, ElementDefinitionObjectClass& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionObjectClass* New() const final {
    return CreateMaybeMessage<ElementDefinitionObjectClass>(NULL);
  }

  ElementDefinitionObjectClass* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionObjectClass>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionObjectClass& from);
  void MergeFrom(const ElementDefinitionObjectClass& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionObjectClass* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Coding value_coding = 3;
  bool has_value_coding() const;
  void clear_value_coding();
  static const int kValueCodingFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Coding& _internal_value_coding() const;
  public:
  const ::google::fhir::stu3::proto::Coding& value_coding() const;
  ::google::fhir::stu3::proto::Coding* release_value_coding();
  ::google::fhir::stu3::proto::Coding* mutable_value_coding();
  void set_allocated_value_coding(::google::fhir::stu3::proto::Coding* value_coding);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionObjectClass)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Coding* value_coding_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionObjectClassProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionObjectClassProperty) */ {
 public:
  ElementDefinitionObjectClassProperty();
  virtual ~ElementDefinitionObjectClassProperty();

  ElementDefinitionObjectClassProperty(const ElementDefinitionObjectClassProperty& from);

  inline ElementDefinitionObjectClassProperty& operator=(const ElementDefinitionObjectClassProperty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionObjectClassProperty(ElementDefinitionObjectClassProperty&& from) noexcept
    : ElementDefinitionObjectClassProperty() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionObjectClassProperty& operator=(ElementDefinitionObjectClassProperty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionObjectClassProperty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionObjectClassProperty* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionObjectClassProperty*>(
               &_ElementDefinitionObjectClassProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ElementDefinitionObjectClassProperty* other);
  friend void swap(ElementDefinitionObjectClassProperty& a, ElementDefinitionObjectClassProperty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionObjectClassProperty* New() const final {
    return CreateMaybeMessage<ElementDefinitionObjectClassProperty>(NULL);
  }

  ElementDefinitionObjectClassProperty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionObjectClassProperty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionObjectClassProperty& from);
  void MergeFrom(const ElementDefinitionObjectClassProperty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionObjectClassProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Coding value_coding = 3;
  bool has_value_coding() const;
  void clear_value_coding();
  static const int kValueCodingFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Coding& _internal_value_coding() const;
  public:
  const ::google::fhir::stu3::proto::Coding& value_coding() const;
  ::google::fhir::stu3::proto::Coding* release_value_coding();
  ::google::fhir::stu3::proto::Coding* mutable_value_coding();
  void set_allocated_value_coding(::google::fhir::stu3::proto::Coding* value_coding);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionObjectClassProperty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Coding* value_coding_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PermittedValueConceptmap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.PermittedValueConceptmap) */ {
 public:
  PermittedValueConceptmap();
  virtual ~PermittedValueConceptmap();

  PermittedValueConceptmap(const PermittedValueConceptmap& from);

  inline PermittedValueConceptmap& operator=(const PermittedValueConceptmap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PermittedValueConceptmap(PermittedValueConceptmap&& from) noexcept
    : PermittedValueConceptmap() {
    *this = ::std::move(from);
  }

  inline PermittedValueConceptmap& operator=(PermittedValueConceptmap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PermittedValueConceptmap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PermittedValueConceptmap* internal_default_instance() {
    return reinterpret_cast<const PermittedValueConceptmap*>(
               &_PermittedValueConceptmap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(PermittedValueConceptmap* other);
  friend void swap(PermittedValueConceptmap& a, PermittedValueConceptmap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PermittedValueConceptmap* New() const final {
    return CreateMaybeMessage<PermittedValueConceptmap>(NULL);
  }

  PermittedValueConceptmap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PermittedValueConceptmap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PermittedValueConceptmap& from);
  void MergeFrom(const PermittedValueConceptmap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PermittedValueConceptmap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ConceptMap"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.PermittedValueConceptmap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PermittedValueValueset : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.PermittedValueValueset) */ {
 public:
  PermittedValueValueset();
  virtual ~PermittedValueValueset();

  PermittedValueValueset(const PermittedValueValueset& from);

  inline PermittedValueValueset& operator=(const PermittedValueValueset& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PermittedValueValueset(PermittedValueValueset&& from) noexcept
    : PermittedValueValueset() {
    *this = ::std::move(from);
  }

  inline PermittedValueValueset& operator=(PermittedValueValueset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PermittedValueValueset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PermittedValueValueset* internal_default_instance() {
    return reinterpret_cast<const PermittedValueValueset*>(
               &_PermittedValueValueset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(PermittedValueValueset* other);
  friend void swap(PermittedValueValueset& a, PermittedValueValueset& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PermittedValueValueset* New() const final {
    return CreateMaybeMessage<PermittedValueValueset>(NULL);
  }

  PermittedValueValueset* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PermittedValueValueset>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PermittedValueValueset& from);
  void MergeFrom(const PermittedValueValueset& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PermittedValueValueset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ValueSet"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.PermittedValueValueset)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllergyIntoleranceCertainty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AllergyIntoleranceCertainty) */ {
 public:
  AllergyIntoleranceCertainty();
  virtual ~AllergyIntoleranceCertainty();

  AllergyIntoleranceCertainty(const AllergyIntoleranceCertainty& from);

  inline AllergyIntoleranceCertainty& operator=(const AllergyIntoleranceCertainty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllergyIntoleranceCertainty(AllergyIntoleranceCertainty&& from) noexcept
    : AllergyIntoleranceCertainty() {
    *this = ::std::move(from);
  }

  inline AllergyIntoleranceCertainty& operator=(AllergyIntoleranceCertainty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllergyIntoleranceCertainty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllergyIntoleranceCertainty* internal_default_instance() {
    return reinterpret_cast<const AllergyIntoleranceCertainty*>(
               &_AllergyIntoleranceCertainty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(AllergyIntoleranceCertainty* other);
  friend void swap(AllergyIntoleranceCertainty& a, AllergyIntoleranceCertainty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllergyIntoleranceCertainty* New() const final {
    return CreateMaybeMessage<AllergyIntoleranceCertainty>(NULL);
  }

  AllergyIntoleranceCertainty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllergyIntoleranceCertainty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllergyIntoleranceCertainty& from);
  void MergeFrom(const AllergyIntoleranceCertainty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllergyIntoleranceCertainty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.AllergyIntoleranceCertaintyCode value_code = 3;
  bool has_value_code() const;
  void clear_value_code();
  static const int kValueCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::AllergyIntoleranceCertaintyCode& _internal_value_code() const;
  public:
  const ::google::fhir::stu3::proto::AllergyIntoleranceCertaintyCode& value_code() const;
  ::google::fhir::stu3::proto::AllergyIntoleranceCertaintyCode* release_value_code();
  ::google::fhir::stu3::proto::AllergyIntoleranceCertaintyCode* mutable_value_code();
  void set_allocated_value_code(::google::fhir::stu3::proto::AllergyIntoleranceCertaintyCode* value_code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AllergyIntoleranceCertainty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::AllergyIntoleranceCertaintyCode* value_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllergyIntoleranceDuration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AllergyIntoleranceDuration) */ {
 public:
  AllergyIntoleranceDuration();
  virtual ~AllergyIntoleranceDuration();

  AllergyIntoleranceDuration(const AllergyIntoleranceDuration& from);

  inline AllergyIntoleranceDuration& operator=(const AllergyIntoleranceDuration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllergyIntoleranceDuration(AllergyIntoleranceDuration&& from) noexcept
    : AllergyIntoleranceDuration() {
    *this = ::std::move(from);
  }

  inline AllergyIntoleranceDuration& operator=(AllergyIntoleranceDuration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllergyIntoleranceDuration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllergyIntoleranceDuration* internal_default_instance() {
    return reinterpret_cast<const AllergyIntoleranceDuration*>(
               &_AllergyIntoleranceDuration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(AllergyIntoleranceDuration* other);
  friend void swap(AllergyIntoleranceDuration& a, AllergyIntoleranceDuration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllergyIntoleranceDuration* New() const final {
    return CreateMaybeMessage<AllergyIntoleranceDuration>(NULL);
  }

  AllergyIntoleranceDuration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllergyIntoleranceDuration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllergyIntoleranceDuration& from);
  void MergeFrom(const AllergyIntoleranceDuration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllergyIntoleranceDuration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Duration value_duration = 3;
  bool has_value_duration() const;
  void clear_value_duration();
  static const int kValueDurationFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Duration& _internal_value_duration() const;
  public:
  const ::google::fhir::stu3::proto::Duration& value_duration() const;
  ::google::fhir::stu3::proto::Duration* release_value_duration();
  ::google::fhir::stu3::proto::Duration* mutable_value_duration();
  void set_allocated_value_duration(::google::fhir::stu3::proto::Duration* value_duration);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AllergyIntoleranceDuration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Duration* value_duration_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllergyIntoleranceReasonRefuted : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AllergyIntoleranceReasonRefuted) */ {
 public:
  AllergyIntoleranceReasonRefuted();
  virtual ~AllergyIntoleranceReasonRefuted();

  AllergyIntoleranceReasonRefuted(const AllergyIntoleranceReasonRefuted& from);

  inline AllergyIntoleranceReasonRefuted& operator=(const AllergyIntoleranceReasonRefuted& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllergyIntoleranceReasonRefuted(AllergyIntoleranceReasonRefuted&& from) noexcept
    : AllergyIntoleranceReasonRefuted() {
    *this = ::std::move(from);
  }

  inline AllergyIntoleranceReasonRefuted& operator=(AllergyIntoleranceReasonRefuted&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllergyIntoleranceReasonRefuted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllergyIntoleranceReasonRefuted* internal_default_instance() {
    return reinterpret_cast<const AllergyIntoleranceReasonRefuted*>(
               &_AllergyIntoleranceReasonRefuted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(AllergyIntoleranceReasonRefuted* other);
  friend void swap(AllergyIntoleranceReasonRefuted& a, AllergyIntoleranceReasonRefuted& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllergyIntoleranceReasonRefuted* New() const final {
    return CreateMaybeMessage<AllergyIntoleranceReasonRefuted>(NULL);
  }

  AllergyIntoleranceReasonRefuted* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllergyIntoleranceReasonRefuted>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllergyIntoleranceReasonRefuted& from);
  void MergeFrom(const AllergyIntoleranceReasonRefuted& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllergyIntoleranceReasonRefuted* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AllergyIntoleranceReasonRefuted)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllergyIntoleranceResolutionAge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AllergyIntoleranceResolutionAge) */ {
 public:
  AllergyIntoleranceResolutionAge();
  virtual ~AllergyIntoleranceResolutionAge();

  AllergyIntoleranceResolutionAge(const AllergyIntoleranceResolutionAge& from);

  inline AllergyIntoleranceResolutionAge& operator=(const AllergyIntoleranceResolutionAge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllergyIntoleranceResolutionAge(AllergyIntoleranceResolutionAge&& from) noexcept
    : AllergyIntoleranceResolutionAge() {
    *this = ::std::move(from);
  }

  inline AllergyIntoleranceResolutionAge& operator=(AllergyIntoleranceResolutionAge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllergyIntoleranceResolutionAge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllergyIntoleranceResolutionAge* internal_default_instance() {
    return reinterpret_cast<const AllergyIntoleranceResolutionAge*>(
               &_AllergyIntoleranceResolutionAge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(AllergyIntoleranceResolutionAge* other);
  friend void swap(AllergyIntoleranceResolutionAge& a, AllergyIntoleranceResolutionAge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllergyIntoleranceResolutionAge* New() const final {
    return CreateMaybeMessage<AllergyIntoleranceResolutionAge>(NULL);
  }

  AllergyIntoleranceResolutionAge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllergyIntoleranceResolutionAge>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllergyIntoleranceResolutionAge& from);
  void MergeFrom(const AllergyIntoleranceResolutionAge& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllergyIntoleranceResolutionAge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Age value_age = 3;
  bool has_value_age() const;
  void clear_value_age();
  static const int kValueAgeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Age& _internal_value_age() const;
  public:
  const ::google::fhir::stu3::proto::Age& value_age() const;
  ::google::fhir::stu3::proto::Age* release_value_age();
  ::google::fhir::stu3::proto::Age* mutable_value_age();
  void set_allocated_value_age(::google::fhir::stu3::proto::Age* value_age);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AllergyIntoleranceResolutionAge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Age* value_age_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllergyIntoleranceSubstanceExposureRisk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk) */ {
 public:
  AllergyIntoleranceSubstanceExposureRisk();
  virtual ~AllergyIntoleranceSubstanceExposureRisk();

  AllergyIntoleranceSubstanceExposureRisk(const AllergyIntoleranceSubstanceExposureRisk& from);

  inline AllergyIntoleranceSubstanceExposureRisk& operator=(const AllergyIntoleranceSubstanceExposureRisk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllergyIntoleranceSubstanceExposureRisk(AllergyIntoleranceSubstanceExposureRisk&& from) noexcept
    : AllergyIntoleranceSubstanceExposureRisk() {
    *this = ::std::move(from);
  }

  inline AllergyIntoleranceSubstanceExposureRisk& operator=(AllergyIntoleranceSubstanceExposureRisk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllergyIntoleranceSubstanceExposureRisk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllergyIntoleranceSubstanceExposureRisk* internal_default_instance() {
    return reinterpret_cast<const AllergyIntoleranceSubstanceExposureRisk*>(
               &_AllergyIntoleranceSubstanceExposureRisk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(AllergyIntoleranceSubstanceExposureRisk* other);
  friend void swap(AllergyIntoleranceSubstanceExposureRisk& a, AllergyIntoleranceSubstanceExposureRisk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllergyIntoleranceSubstanceExposureRisk* New() const final {
    return CreateMaybeMessage<AllergyIntoleranceSubstanceExposureRisk>(NULL);
  }

  AllergyIntoleranceSubstanceExposureRisk* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllergyIntoleranceSubstanceExposureRisk>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllergyIntoleranceSubstanceExposureRisk& from);
  void MergeFrom(const AllergyIntoleranceSubstanceExposureRisk& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllergyIntoleranceSubstanceExposureRisk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept substance = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_substance() const;
  void clear_substance();
  static const int kSubstanceFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_substance() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& substance() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_substance();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_substance();
  void set_allocated_substance(::google::fhir::stu3::proto::CodeableConcept* substance);

  // .google.fhir.stu3.proto.CodeableConcept exposure_risk = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_exposure_risk() const;
  void clear_exposure_risk();
  static const int kExposureRiskFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_exposure_risk() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& exposure_risk() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_exposure_risk();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_exposure_risk();
  void set_allocated_exposure_risk(::google::fhir::stu3::proto::CodeableConcept* exposure_risk);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* substance_;
  ::google::fhir::stu3::proto::CodeableConcept* exposure_risk_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuditEventAccession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AuditEventAccession) */ {
 public:
  AuditEventAccession();
  virtual ~AuditEventAccession();

  AuditEventAccession(const AuditEventAccession& from);

  inline AuditEventAccession& operator=(const AuditEventAccession& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuditEventAccession(AuditEventAccession&& from) noexcept
    : AuditEventAccession() {
    *this = ::std::move(from);
  }

  inline AuditEventAccession& operator=(AuditEventAccession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuditEventAccession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuditEventAccession* internal_default_instance() {
    return reinterpret_cast<const AuditEventAccession*>(
               &_AuditEventAccession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(AuditEventAccession* other);
  friend void swap(AuditEventAccession& a, AuditEventAccession& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuditEventAccession* New() const final {
    return CreateMaybeMessage<AuditEventAccession>(NULL);
  }

  AuditEventAccession* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuditEventAccession>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuditEventAccession& from);
  void MergeFrom(const AuditEventAccession& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuditEventAccession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Identifier value_identifier = 3;
  bool has_value_identifier() const;
  void clear_value_identifier();
  static const int kValueIdentifierFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Identifier& _internal_value_identifier() const;
  public:
  const ::google::fhir::stu3::proto::Identifier& value_identifier() const;
  ::google::fhir::stu3::proto::Identifier* release_value_identifier();
  ::google::fhir::stu3::proto::Identifier* mutable_value_identifier();
  void set_allocated_value_identifier(::google::fhir::stu3::proto::Identifier* value_identifier);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AuditEventAccession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Identifier* value_identifier_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuditEventAnonymized : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AuditEventAnonymized) */ {
 public:
  AuditEventAnonymized();
  virtual ~AuditEventAnonymized();

  AuditEventAnonymized(const AuditEventAnonymized& from);

  inline AuditEventAnonymized& operator=(const AuditEventAnonymized& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuditEventAnonymized(AuditEventAnonymized&& from) noexcept
    : AuditEventAnonymized() {
    *this = ::std::move(from);
  }

  inline AuditEventAnonymized& operator=(AuditEventAnonymized&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuditEventAnonymized& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuditEventAnonymized* internal_default_instance() {
    return reinterpret_cast<const AuditEventAnonymized*>(
               &_AuditEventAnonymized_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(AuditEventAnonymized* other);
  friend void swap(AuditEventAnonymized& a, AuditEventAnonymized& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuditEventAnonymized* New() const final {
    return CreateMaybeMessage<AuditEventAnonymized>(NULL);
  }

  AuditEventAnonymized* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuditEventAnonymized>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuditEventAnonymized& from);
  void MergeFrom(const AuditEventAnonymized& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuditEventAnonymized* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AuditEventAnonymized)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuditEventEncrypted : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AuditEventEncrypted) */ {
 public:
  AuditEventEncrypted();
  virtual ~AuditEventEncrypted();

  AuditEventEncrypted(const AuditEventEncrypted& from);

  inline AuditEventEncrypted& operator=(const AuditEventEncrypted& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuditEventEncrypted(AuditEventEncrypted&& from) noexcept
    : AuditEventEncrypted() {
    *this = ::std::move(from);
  }

  inline AuditEventEncrypted& operator=(AuditEventEncrypted&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuditEventEncrypted& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuditEventEncrypted* internal_default_instance() {
    return reinterpret_cast<const AuditEventEncrypted*>(
               &_AuditEventEncrypted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(AuditEventEncrypted* other);
  friend void swap(AuditEventEncrypted& a, AuditEventEncrypted& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuditEventEncrypted* New() const final {
    return CreateMaybeMessage<AuditEventEncrypted>(NULL);
  }

  AuditEventEncrypted* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuditEventEncrypted>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuditEventEncrypted& from);
  void MergeFrom(const AuditEventEncrypted& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuditEventEncrypted* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AuditEventEncrypted)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuditEventInstance : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AuditEventInstance) */ {
 public:
  AuditEventInstance();
  virtual ~AuditEventInstance();

  AuditEventInstance(const AuditEventInstance& from);

  inline AuditEventInstance& operator=(const AuditEventInstance& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuditEventInstance(AuditEventInstance&& from) noexcept
    : AuditEventInstance() {
    *this = ::std::move(from);
  }

  inline AuditEventInstance& operator=(AuditEventInstance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuditEventInstance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuditEventInstance* internal_default_instance() {
    return reinterpret_cast<const AuditEventInstance*>(
               &_AuditEventInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(AuditEventInstance* other);
  friend void swap(AuditEventInstance& a, AuditEventInstance& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuditEventInstance* New() const final {
    return CreateMaybeMessage<AuditEventInstance>(NULL);
  }

  AuditEventInstance* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuditEventInstance>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuditEventInstance& from);
  void MergeFrom(const AuditEventInstance& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuditEventInstance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Identifier value_identifier = 3;
  bool has_value_identifier() const;
  void clear_value_identifier();
  static const int kValueIdentifierFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Identifier& _internal_value_identifier() const;
  public:
  const ::google::fhir::stu3::proto::Identifier& value_identifier() const;
  ::google::fhir::stu3::proto::Identifier* release_value_identifier();
  ::google::fhir::stu3::proto::Identifier* mutable_value_identifier();
  void set_allocated_value_identifier(::google::fhir::stu3::proto::Identifier* value_identifier);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AuditEventInstance)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Identifier* value_identifier_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuditEventMPPS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AuditEventMPPS) */ {
 public:
  AuditEventMPPS();
  virtual ~AuditEventMPPS();

  AuditEventMPPS(const AuditEventMPPS& from);

  inline AuditEventMPPS& operator=(const AuditEventMPPS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuditEventMPPS(AuditEventMPPS&& from) noexcept
    : AuditEventMPPS() {
    *this = ::std::move(from);
  }

  inline AuditEventMPPS& operator=(AuditEventMPPS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuditEventMPPS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuditEventMPPS* internal_default_instance() {
    return reinterpret_cast<const AuditEventMPPS*>(
               &_AuditEventMPPS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(AuditEventMPPS* other);
  friend void swap(AuditEventMPPS& a, AuditEventMPPS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuditEventMPPS* New() const final {
    return CreateMaybeMessage<AuditEventMPPS>(NULL);
  }

  AuditEventMPPS* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuditEventMPPS>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuditEventMPPS& from);
  void MergeFrom(const AuditEventMPPS& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuditEventMPPS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Identifier value_identifier = 3;
  bool has_value_identifier() const;
  void clear_value_identifier();
  static const int kValueIdentifierFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Identifier& _internal_value_identifier() const;
  public:
  const ::google::fhir::stu3::proto::Identifier& value_identifier() const;
  ::google::fhir::stu3::proto::Identifier* release_value_identifier();
  ::google::fhir::stu3::proto::Identifier* mutable_value_identifier();
  void set_allocated_value_identifier(::google::fhir::stu3::proto::Identifier* value_identifier);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AuditEventMPPS)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Identifier* value_identifier_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuditEventNumberOfInstances : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AuditEventNumberOfInstances) */ {
 public:
  AuditEventNumberOfInstances();
  virtual ~AuditEventNumberOfInstances();

  AuditEventNumberOfInstances(const AuditEventNumberOfInstances& from);

  inline AuditEventNumberOfInstances& operator=(const AuditEventNumberOfInstances& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuditEventNumberOfInstances(AuditEventNumberOfInstances&& from) noexcept
    : AuditEventNumberOfInstances() {
    *this = ::std::move(from);
  }

  inline AuditEventNumberOfInstances& operator=(AuditEventNumberOfInstances&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuditEventNumberOfInstances& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuditEventNumberOfInstances* internal_default_instance() {
    return reinterpret_cast<const AuditEventNumberOfInstances*>(
               &_AuditEventNumberOfInstances_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(AuditEventNumberOfInstances* other);
  friend void swap(AuditEventNumberOfInstances& a, AuditEventNumberOfInstances& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuditEventNumberOfInstances* New() const final {
    return CreateMaybeMessage<AuditEventNumberOfInstances>(NULL);
  }

  AuditEventNumberOfInstances* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuditEventNumberOfInstances>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuditEventNumberOfInstances& from);
  void MergeFrom(const AuditEventNumberOfInstances& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuditEventNumberOfInstances* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Integer value_integer = 3;
  bool has_value_integer() const;
  void clear_value_integer();
  static const int kValueIntegerFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Integer& _internal_value_integer() const;
  public:
  const ::google::fhir::stu3::proto::Integer& value_integer() const;
  ::google::fhir::stu3::proto::Integer* release_value_integer();
  ::google::fhir::stu3::proto::Integer* mutable_value_integer();
  void set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AuditEventNumberOfInstances)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Integer* value_integer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuditEventParticipantObjectContainsStudy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AuditEventParticipantObjectContainsStudy) */ {
 public:
  AuditEventParticipantObjectContainsStudy();
  virtual ~AuditEventParticipantObjectContainsStudy();

  AuditEventParticipantObjectContainsStudy(const AuditEventParticipantObjectContainsStudy& from);

  inline AuditEventParticipantObjectContainsStudy& operator=(const AuditEventParticipantObjectContainsStudy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuditEventParticipantObjectContainsStudy(AuditEventParticipantObjectContainsStudy&& from) noexcept
    : AuditEventParticipantObjectContainsStudy() {
    *this = ::std::move(from);
  }

  inline AuditEventParticipantObjectContainsStudy& operator=(AuditEventParticipantObjectContainsStudy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuditEventParticipantObjectContainsStudy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuditEventParticipantObjectContainsStudy* internal_default_instance() {
    return reinterpret_cast<const AuditEventParticipantObjectContainsStudy*>(
               &_AuditEventParticipantObjectContainsStudy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(AuditEventParticipantObjectContainsStudy* other);
  friend void swap(AuditEventParticipantObjectContainsStudy& a, AuditEventParticipantObjectContainsStudy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuditEventParticipantObjectContainsStudy* New() const final {
    return CreateMaybeMessage<AuditEventParticipantObjectContainsStudy>(NULL);
  }

  AuditEventParticipantObjectContainsStudy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuditEventParticipantObjectContainsStudy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuditEventParticipantObjectContainsStudy& from);
  void MergeFrom(const AuditEventParticipantObjectContainsStudy& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuditEventParticipantObjectContainsStudy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Identifier value_identifier = 3;
  bool has_value_identifier() const;
  void clear_value_identifier();
  static const int kValueIdentifierFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Identifier& _internal_value_identifier() const;
  public:
  const ::google::fhir::stu3::proto::Identifier& value_identifier() const;
  ::google::fhir::stu3::proto::Identifier* release_value_identifier();
  ::google::fhir::stu3::proto::Identifier* mutable_value_identifier();
  void set_allocated_value_identifier(::google::fhir::stu3::proto::Identifier* value_identifier);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AuditEventParticipantObjectContainsStudy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Identifier* value_identifier_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuditEventSOPClass : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AuditEventSOPClass) */ {
 public:
  AuditEventSOPClass();
  virtual ~AuditEventSOPClass();

  AuditEventSOPClass(const AuditEventSOPClass& from);

  inline AuditEventSOPClass& operator=(const AuditEventSOPClass& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuditEventSOPClass(AuditEventSOPClass&& from) noexcept
    : AuditEventSOPClass() {
    *this = ::std::move(from);
  }

  inline AuditEventSOPClass& operator=(AuditEventSOPClass&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuditEventSOPClass& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuditEventSOPClass* internal_default_instance() {
    return reinterpret_cast<const AuditEventSOPClass*>(
               &_AuditEventSOPClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(AuditEventSOPClass* other);
  friend void swap(AuditEventSOPClass& a, AuditEventSOPClass& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuditEventSOPClass* New() const final {
    return CreateMaybeMessage<AuditEventSOPClass>(NULL);
  }

  AuditEventSOPClass* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuditEventSOPClass>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuditEventSOPClass& from);
  void MergeFrom(const AuditEventSOPClass& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuditEventSOPClass* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ImagingStudy"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AuditEventSOPClass)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PatientBirthPlace : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.PatientBirthPlace) */ {
 public:
  PatientBirthPlace();
  virtual ~PatientBirthPlace();

  PatientBirthPlace(const PatientBirthPlace& from);

  inline PatientBirthPlace& operator=(const PatientBirthPlace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PatientBirthPlace(PatientBirthPlace&& from) noexcept
    : PatientBirthPlace() {
    *this = ::std::move(from);
  }

  inline PatientBirthPlace& operator=(PatientBirthPlace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PatientBirthPlace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatientBirthPlace* internal_default_instance() {
    return reinterpret_cast<const PatientBirthPlace*>(
               &_PatientBirthPlace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(PatientBirthPlace* other);
  friend void swap(PatientBirthPlace& a, PatientBirthPlace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PatientBirthPlace* New() const final {
    return CreateMaybeMessage<PatientBirthPlace>(NULL);
  }

  PatientBirthPlace* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PatientBirthPlace>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PatientBirthPlace& from);
  void MergeFrom(const PatientBirthPlace& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientBirthPlace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Address value_address = 3;
  bool has_value_address() const;
  void clear_value_address();
  static const int kValueAddressFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Address& _internal_value_address() const;
  public:
  const ::google::fhir::stu3::proto::Address& value_address() const;
  ::google::fhir::stu3::proto::Address* release_value_address();
  ::google::fhir::stu3::proto::Address* mutable_value_address();
  void set_allocated_value_address(::google::fhir::stu3::proto::Address* value_address);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.PatientBirthPlace)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Address* value_address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BodySiteInstance : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.BodySiteInstance) */ {
 public:
  BodySiteInstance();
  virtual ~BodySiteInstance();

  BodySiteInstance(const BodySiteInstance& from);

  inline BodySiteInstance& operator=(const BodySiteInstance& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BodySiteInstance(BodySiteInstance&& from) noexcept
    : BodySiteInstance() {
    *this = ::std::move(from);
  }

  inline BodySiteInstance& operator=(BodySiteInstance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BodySiteInstance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BodySiteInstance* internal_default_instance() {
    return reinterpret_cast<const BodySiteInstance*>(
               &_BodySiteInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(BodySiteInstance* other);
  friend void swap(BodySiteInstance& a, BodySiteInstance& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BodySiteInstance* New() const final {
    return CreateMaybeMessage<BodySiteInstance>(NULL);
  }

  BodySiteInstance* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BodySiteInstance>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BodySiteInstance& from);
  void MergeFrom(const BodySiteInstance& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BodySiteInstance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/BodySite"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.BodySiteInstance)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CapabilityStatementExpectation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CapabilityStatementExpectation) */ {
 public:
  CapabilityStatementExpectation();
  virtual ~CapabilityStatementExpectation();

  CapabilityStatementExpectation(const CapabilityStatementExpectation& from);

  inline CapabilityStatementExpectation& operator=(const CapabilityStatementExpectation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CapabilityStatementExpectation(CapabilityStatementExpectation&& from) noexcept
    : CapabilityStatementExpectation() {
    *this = ::std::move(from);
  }

  inline CapabilityStatementExpectation& operator=(CapabilityStatementExpectation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CapabilityStatementExpectation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CapabilityStatementExpectation* internal_default_instance() {
    return reinterpret_cast<const CapabilityStatementExpectation*>(
               &_CapabilityStatementExpectation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(CapabilityStatementExpectation* other);
  friend void swap(CapabilityStatementExpectation& a, CapabilityStatementExpectation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CapabilityStatementExpectation* New() const final {
    return CreateMaybeMessage<CapabilityStatementExpectation>(NULL);
  }

  CapabilityStatementExpectation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CapabilityStatementExpectation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CapabilityStatementExpectation& from);
  void MergeFrom(const CapabilityStatementExpectation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapabilityStatementExpectation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.ConformanceExpectationCode value_code = 3;
  bool has_value_code() const;
  void clear_value_code();
  static const int kValueCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::ConformanceExpectationCode& _internal_value_code() const;
  public:
  const ::google::fhir::stu3::proto::ConformanceExpectationCode& value_code() const;
  ::google::fhir::stu3::proto::ConformanceExpectationCode* release_value_code();
  ::google::fhir::stu3::proto::ConformanceExpectationCode* mutable_value_code();
  void set_allocated_value_code(::google::fhir::stu3::proto::ConformanceExpectationCode* value_code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CapabilityStatementExpectation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::ConformanceExpectationCode* value_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CapabilityStatementProhibited : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CapabilityStatementProhibited) */ {
 public:
  CapabilityStatementProhibited();
  virtual ~CapabilityStatementProhibited();

  CapabilityStatementProhibited(const CapabilityStatementProhibited& from);

  inline CapabilityStatementProhibited& operator=(const CapabilityStatementProhibited& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CapabilityStatementProhibited(CapabilityStatementProhibited&& from) noexcept
    : CapabilityStatementProhibited() {
    *this = ::std::move(from);
  }

  inline CapabilityStatementProhibited& operator=(CapabilityStatementProhibited&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CapabilityStatementProhibited& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CapabilityStatementProhibited* internal_default_instance() {
    return reinterpret_cast<const CapabilityStatementProhibited*>(
               &_CapabilityStatementProhibited_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(CapabilityStatementProhibited* other);
  friend void swap(CapabilityStatementProhibited& a, CapabilityStatementProhibited& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CapabilityStatementProhibited* New() const final {
    return CreateMaybeMessage<CapabilityStatementProhibited>(NULL);
  }

  CapabilityStatementProhibited* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CapabilityStatementProhibited>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CapabilityStatementProhibited& from);
  void MergeFrom(const CapabilityStatementProhibited& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapabilityStatementProhibited* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CapabilityStatementProhibited)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CapabilityStatementSearchParameterCombination : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination) */ {
 public:
  CapabilityStatementSearchParameterCombination();
  virtual ~CapabilityStatementSearchParameterCombination();

  CapabilityStatementSearchParameterCombination(const CapabilityStatementSearchParameterCombination& from);

  inline CapabilityStatementSearchParameterCombination& operator=(const CapabilityStatementSearchParameterCombination& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CapabilityStatementSearchParameterCombination(CapabilityStatementSearchParameterCombination&& from) noexcept
    : CapabilityStatementSearchParameterCombination() {
    *this = ::std::move(from);
  }

  inline CapabilityStatementSearchParameterCombination& operator=(CapabilityStatementSearchParameterCombination&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CapabilityStatementSearchParameterCombination& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CapabilityStatementSearchParameterCombination* internal_default_instance() {
    return reinterpret_cast<const CapabilityStatementSearchParameterCombination*>(
               &_CapabilityStatementSearchParameterCombination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(CapabilityStatementSearchParameterCombination* other);
  friend void swap(CapabilityStatementSearchParameterCombination& a, CapabilityStatementSearchParameterCombination& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CapabilityStatementSearchParameterCombination* New() const final {
    return CreateMaybeMessage<CapabilityStatementSearchParameterCombination>(NULL);
  }

  CapabilityStatementSearchParameterCombination* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CapabilityStatementSearchParameterCombination>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CapabilityStatementSearchParameterCombination& from);
  void MergeFrom(const CapabilityStatementSearchParameterCombination& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapabilityStatementSearchParameterCombination* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // repeated .google.fhir.stu3.proto.String required = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  int required_size() const;
  void clear_required();
  static const int kRequiredFieldNumber = 4;
  ::google::fhir::stu3::proto::String* mutable_required(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >*
      mutable_required();
  const ::google::fhir::stu3::proto::String& required(int index) const;
  ::google::fhir::stu3::proto::String* add_required();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >&
      required() const;

  // repeated .google.fhir.stu3.proto.String optional = 5;
  int optional_size() const;
  void clear_optional();
  static const int kOptionalFieldNumber = 5;
  ::google::fhir::stu3::proto::String* mutable_optional(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >*
      mutable_optional();
  const ::google::fhir::stu3::proto::String& optional(int index) const;
  ::google::fhir::stu3::proto::String* add_optional();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >&
      optional() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String > required_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String > optional_;
  ::google::fhir::stu3::proto::String* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CapabilityStatementSupportedSystem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CapabilityStatementSupportedSystem) */ {
 public:
  CapabilityStatementSupportedSystem();
  virtual ~CapabilityStatementSupportedSystem();

  CapabilityStatementSupportedSystem(const CapabilityStatementSupportedSystem& from);

  inline CapabilityStatementSupportedSystem& operator=(const CapabilityStatementSupportedSystem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CapabilityStatementSupportedSystem(CapabilityStatementSupportedSystem&& from) noexcept
    : CapabilityStatementSupportedSystem() {
    *this = ::std::move(from);
  }

  inline CapabilityStatementSupportedSystem& operator=(CapabilityStatementSupportedSystem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CapabilityStatementSupportedSystem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CapabilityStatementSupportedSystem* internal_default_instance() {
    return reinterpret_cast<const CapabilityStatementSupportedSystem*>(
               &_CapabilityStatementSupportedSystem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(CapabilityStatementSupportedSystem* other);
  friend void swap(CapabilityStatementSupportedSystem& a, CapabilityStatementSupportedSystem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CapabilityStatementSupportedSystem* New() const final {
    return CreateMaybeMessage<CapabilityStatementSupportedSystem>(NULL);
  }

  CapabilityStatementSupportedSystem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CapabilityStatementSupportedSystem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CapabilityStatementSupportedSystem& from);
  void MergeFrom(const CapabilityStatementSupportedSystem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapabilityStatementSupportedSystem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri value_uri = 3;
  bool has_value_uri() const;
  void clear_value_uri();
  static const int kValueUriFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_value_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& value_uri() const;
  ::google::fhir::stu3::proto::Uri* release_value_uri();
  ::google::fhir::stu3::proto::Uri* mutable_value_uri();
  void set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CapabilityStatementSupportedSystem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* value_uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CapabilityStatementWebsocket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CapabilityStatementWebsocket) */ {
 public:
  CapabilityStatementWebsocket();
  virtual ~CapabilityStatementWebsocket();

  CapabilityStatementWebsocket(const CapabilityStatementWebsocket& from);

  inline CapabilityStatementWebsocket& operator=(const CapabilityStatementWebsocket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CapabilityStatementWebsocket(CapabilityStatementWebsocket&& from) noexcept
    : CapabilityStatementWebsocket() {
    *this = ::std::move(from);
  }

  inline CapabilityStatementWebsocket& operator=(CapabilityStatementWebsocket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CapabilityStatementWebsocket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CapabilityStatementWebsocket* internal_default_instance() {
    return reinterpret_cast<const CapabilityStatementWebsocket*>(
               &_CapabilityStatementWebsocket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(CapabilityStatementWebsocket* other);
  friend void swap(CapabilityStatementWebsocket& a, CapabilityStatementWebsocket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CapabilityStatementWebsocket* New() const final {
    return CreateMaybeMessage<CapabilityStatementWebsocket>(NULL);
  }

  CapabilityStatementWebsocket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CapabilityStatementWebsocket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CapabilityStatementWebsocket& from);
  void MergeFrom(const CapabilityStatementWebsocket& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CapabilityStatementWebsocket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri value_uri = 3;
  bool has_value_uri() const;
  void clear_value_uri();
  static const int kValueUriFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_value_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& value_uri() const;
  ::google::fhir::stu3::proto::Uri* release_value_uri();
  ::google::fhir::stu3::proto::Uri* mutable_value_uri();
  void set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CapabilityStatementWebsocket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* value_uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CarePlanActivityTitle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CarePlanActivityTitle) */ {
 public:
  CarePlanActivityTitle();
  virtual ~CarePlanActivityTitle();

  CarePlanActivityTitle(const CarePlanActivityTitle& from);

  inline CarePlanActivityTitle& operator=(const CarePlanActivityTitle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CarePlanActivityTitle(CarePlanActivityTitle&& from) noexcept
    : CarePlanActivityTitle() {
    *this = ::std::move(from);
  }

  inline CarePlanActivityTitle& operator=(CarePlanActivityTitle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CarePlanActivityTitle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CarePlanActivityTitle* internal_default_instance() {
    return reinterpret_cast<const CarePlanActivityTitle*>(
               &_CarePlanActivityTitle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(CarePlanActivityTitle* other);
  friend void swap(CarePlanActivityTitle& a, CarePlanActivityTitle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CarePlanActivityTitle* New() const final {
    return CreateMaybeMessage<CarePlanActivityTitle>(NULL);
  }

  CarePlanActivityTitle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CarePlanActivityTitle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CarePlanActivityTitle& from);
  void MergeFrom(const CarePlanActivityTitle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarePlanActivityTitle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CarePlanActivityTitle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeSystemAuthor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeSystemAuthor) */ {
 public:
  CodeSystemAuthor();
  virtual ~CodeSystemAuthor();

  CodeSystemAuthor(const CodeSystemAuthor& from);

  inline CodeSystemAuthor& operator=(const CodeSystemAuthor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeSystemAuthor(CodeSystemAuthor&& from) noexcept
    : CodeSystemAuthor() {
    *this = ::std::move(from);
  }

  inline CodeSystemAuthor& operator=(CodeSystemAuthor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeSystemAuthor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeSystemAuthor* internal_default_instance() {
    return reinterpret_cast<const CodeSystemAuthor*>(
               &_CodeSystemAuthor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(CodeSystemAuthor* other);
  friend void swap(CodeSystemAuthor& a, CodeSystemAuthor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeSystemAuthor* New() const final {
    return CreateMaybeMessage<CodeSystemAuthor>(NULL);
  }

  CodeSystemAuthor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeSystemAuthor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeSystemAuthor& from);
  void MergeFrom(const CodeSystemAuthor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSystemAuthor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeSystemAuthor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeSystemComment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeSystemComment) */ {
 public:
  CodeSystemComment();
  virtual ~CodeSystemComment();

  CodeSystemComment(const CodeSystemComment& from);

  inline CodeSystemComment& operator=(const CodeSystemComment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeSystemComment(CodeSystemComment&& from) noexcept
    : CodeSystemComment() {
    *this = ::std::move(from);
  }

  inline CodeSystemComment& operator=(CodeSystemComment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeSystemComment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeSystemComment* internal_default_instance() {
    return reinterpret_cast<const CodeSystemComment*>(
               &_CodeSystemComment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(CodeSystemComment* other);
  friend void swap(CodeSystemComment& a, CodeSystemComment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeSystemComment* New() const final {
    return CreateMaybeMessage<CodeSystemComment>(NULL);
  }

  CodeSystemComment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeSystemComment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeSystemComment& from);
  void MergeFrom(const CodeSystemComment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSystemComment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String content = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::String& _internal_content() const;
  public:
  const ::google::fhir::stu3::proto::String& content() const;
  ::google::fhir::stu3::proto::String* release_content();
  ::google::fhir::stu3::proto::String* mutable_content();
  void set_allocated_content(::google::fhir::stu3::proto::String* content);

  // .google.fhir.stu3.proto.Instant timestamp = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Instant& _internal_timestamp() const;
  public:
  const ::google::fhir::stu3::proto::Instant& timestamp() const;
  ::google::fhir::stu3::proto::Instant* release_timestamp();
  ::google::fhir::stu3::proto::Instant* mutable_timestamp();
  void set_allocated_timestamp(::google::fhir::stu3::proto::Instant* timestamp);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeSystemComment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* content_;
  ::google::fhir::stu3::proto::Instant* timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeSystemComments : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeSystemComments) */ {
 public:
  CodeSystemComments();
  virtual ~CodeSystemComments();

  CodeSystemComments(const CodeSystemComments& from);

  inline CodeSystemComments& operator=(const CodeSystemComments& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeSystemComments(CodeSystemComments&& from) noexcept
    : CodeSystemComments() {
    *this = ::std::move(from);
  }

  inline CodeSystemComments& operator=(CodeSystemComments&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeSystemComments& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeSystemComments* internal_default_instance() {
    return reinterpret_cast<const CodeSystemComments*>(
               &_CodeSystemComments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(CodeSystemComments* other);
  friend void swap(CodeSystemComments& a, CodeSystemComments& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeSystemComments* New() const final {
    return CreateMaybeMessage<CodeSystemComments>(NULL);
  }

  CodeSystemComments* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeSystemComments>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeSystemComments& from);
  void MergeFrom(const CodeSystemComments& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSystemComments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeSystemComments)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeSystemConceptOrder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeSystemConceptOrder) */ {
 public:
  CodeSystemConceptOrder();
  virtual ~CodeSystemConceptOrder();

  CodeSystemConceptOrder(const CodeSystemConceptOrder& from);

  inline CodeSystemConceptOrder& operator=(const CodeSystemConceptOrder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeSystemConceptOrder(CodeSystemConceptOrder&& from) noexcept
    : CodeSystemConceptOrder() {
    *this = ::std::move(from);
  }

  inline CodeSystemConceptOrder& operator=(CodeSystemConceptOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeSystemConceptOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeSystemConceptOrder* internal_default_instance() {
    return reinterpret_cast<const CodeSystemConceptOrder*>(
               &_CodeSystemConceptOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(CodeSystemConceptOrder* other);
  friend void swap(CodeSystemConceptOrder& a, CodeSystemConceptOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeSystemConceptOrder* New() const final {
    return CreateMaybeMessage<CodeSystemConceptOrder>(NULL);
  }

  CodeSystemConceptOrder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeSystemConceptOrder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeSystemConceptOrder& from);
  void MergeFrom(const CodeSystemConceptOrder& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSystemConceptOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Integer value_integer = 3;
  bool has_value_integer() const;
  void clear_value_integer();
  static const int kValueIntegerFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Integer& _internal_value_integer() const;
  public:
  const ::google::fhir::stu3::proto::Integer& value_integer() const;
  ::google::fhir::stu3::proto::Integer* release_value_integer();
  ::google::fhir::stu3::proto::Integer* mutable_value_integer();
  void set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeSystemConceptOrder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Integer* value_integer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeSystemDeprecated : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeSystemDeprecated) */ {
 public:
  CodeSystemDeprecated();
  virtual ~CodeSystemDeprecated();

  CodeSystemDeprecated(const CodeSystemDeprecated& from);

  inline CodeSystemDeprecated& operator=(const CodeSystemDeprecated& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeSystemDeprecated(CodeSystemDeprecated&& from) noexcept
    : CodeSystemDeprecated() {
    *this = ::std::move(from);
  }

  inline CodeSystemDeprecated& operator=(CodeSystemDeprecated&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeSystemDeprecated& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeSystemDeprecated* internal_default_instance() {
    return reinterpret_cast<const CodeSystemDeprecated*>(
               &_CodeSystemDeprecated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(CodeSystemDeprecated* other);
  friend void swap(CodeSystemDeprecated& a, CodeSystemDeprecated& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeSystemDeprecated* New() const final {
    return CreateMaybeMessage<CodeSystemDeprecated>(NULL);
  }

  CodeSystemDeprecated* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeSystemDeprecated>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeSystemDeprecated& from);
  void MergeFrom(const CodeSystemDeprecated& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSystemDeprecated* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeSystemDeprecated)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeSystemEffectiveDate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeSystemEffectiveDate) */ {
 public:
  CodeSystemEffectiveDate();
  virtual ~CodeSystemEffectiveDate();

  CodeSystemEffectiveDate(const CodeSystemEffectiveDate& from);

  inline CodeSystemEffectiveDate& operator=(const CodeSystemEffectiveDate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeSystemEffectiveDate(CodeSystemEffectiveDate&& from) noexcept
    : CodeSystemEffectiveDate() {
    *this = ::std::move(from);
  }

  inline CodeSystemEffectiveDate& operator=(CodeSystemEffectiveDate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeSystemEffectiveDate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeSystemEffectiveDate* internal_default_instance() {
    return reinterpret_cast<const CodeSystemEffectiveDate*>(
               &_CodeSystemEffectiveDate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(CodeSystemEffectiveDate* other);
  friend void swap(CodeSystemEffectiveDate& a, CodeSystemEffectiveDate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeSystemEffectiveDate* New() const final {
    return CreateMaybeMessage<CodeSystemEffectiveDate>(NULL);
  }

  CodeSystemEffectiveDate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeSystemEffectiveDate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeSystemEffectiveDate& from);
  void MergeFrom(const CodeSystemEffectiveDate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSystemEffectiveDate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Date value_date = 3;
  bool has_value_date() const;
  void clear_value_date();
  static const int kValueDateFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Date& _internal_value_date() const;
  public:
  const ::google::fhir::stu3::proto::Date& value_date() const;
  ::google::fhir::stu3::proto::Date* release_value_date();
  ::google::fhir::stu3::proto::Date* mutable_value_date();
  void set_allocated_value_date(::google::fhir::stu3::proto::Date* value_date);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeSystemEffectiveDate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Date* value_date_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeSystemExpirationDate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeSystemExpirationDate) */ {
 public:
  CodeSystemExpirationDate();
  virtual ~CodeSystemExpirationDate();

  CodeSystemExpirationDate(const CodeSystemExpirationDate& from);

  inline CodeSystemExpirationDate& operator=(const CodeSystemExpirationDate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeSystemExpirationDate(CodeSystemExpirationDate&& from) noexcept
    : CodeSystemExpirationDate() {
    *this = ::std::move(from);
  }

  inline CodeSystemExpirationDate& operator=(CodeSystemExpirationDate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeSystemExpirationDate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeSystemExpirationDate* internal_default_instance() {
    return reinterpret_cast<const CodeSystemExpirationDate*>(
               &_CodeSystemExpirationDate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(CodeSystemExpirationDate* other);
  friend void swap(CodeSystemExpirationDate& a, CodeSystemExpirationDate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeSystemExpirationDate* New() const final {
    return CreateMaybeMessage<CodeSystemExpirationDate>(NULL);
  }

  CodeSystemExpirationDate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeSystemExpirationDate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeSystemExpirationDate& from);
  void MergeFrom(const CodeSystemExpirationDate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSystemExpirationDate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Date value_date = 3;
  bool has_value_date() const;
  void clear_value_date();
  static const int kValueDateFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Date& _internal_value_date() const;
  public:
  const ::google::fhir::stu3::proto::Date& value_date() const;
  ::google::fhir::stu3::proto::Date* release_value_date();
  ::google::fhir::stu3::proto::Date* mutable_value_date();
  void set_allocated_value_date(::google::fhir::stu3::proto::Date* value_date);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeSystemExpirationDate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Date* value_date_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeSystemHistory_Revision : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeSystemHistory.Revision) */ {
 public:
  CodeSystemHistory_Revision();
  virtual ~CodeSystemHistory_Revision();

  CodeSystemHistory_Revision(const CodeSystemHistory_Revision& from);

  inline CodeSystemHistory_Revision& operator=(const CodeSystemHistory_Revision& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeSystemHistory_Revision(CodeSystemHistory_Revision&& from) noexcept
    : CodeSystemHistory_Revision() {
    *this = ::std::move(from);
  }

  inline CodeSystemHistory_Revision& operator=(CodeSystemHistory_Revision&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeSystemHistory_Revision& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeSystemHistory_Revision* internal_default_instance() {
    return reinterpret_cast<const CodeSystemHistory_Revision*>(
               &_CodeSystemHistory_Revision_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(CodeSystemHistory_Revision* other);
  friend void swap(CodeSystemHistory_Revision& a, CodeSystemHistory_Revision& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeSystemHistory_Revision* New() const final {
    return CreateMaybeMessage<CodeSystemHistory_Revision>(NULL);
  }

  CodeSystemHistory_Revision* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeSystemHistory_Revision>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeSystemHistory_Revision& from);
  void MergeFrom(const CodeSystemHistory_Revision& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSystemHistory_Revision* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.DateTime date = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::DateTime& _internal_date() const;
  public:
  const ::google::fhir::stu3::proto::DateTime& date() const;
  ::google::fhir::stu3::proto::DateTime* release_date();
  ::google::fhir::stu3::proto::DateTime* mutable_date();
  void set_allocated_date(::google::fhir::stu3::proto::DateTime* date);

  // .google.fhir.stu3.proto.String id_slice = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.fhir_inlined_extension_url) = "id"];
  bool has_id_slice() const;
  void clear_id_slice();
  static const int kIdSliceFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id_slice() const;
  public:
  const ::google::fhir::stu3::proto::String& id_slice() const;
  ::google::fhir::stu3::proto::String* release_id_slice();
  ::google::fhir::stu3::proto::String* mutable_id_slice();
  void set_allocated_id_slice(::google::fhir::stu3::proto::String* id_slice);

  // .google.fhir.stu3.proto.String author = 6 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_author() const;
  void clear_author();
  static const int kAuthorFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::String& _internal_author() const;
  public:
  const ::google::fhir::stu3::proto::String& author() const;
  ::google::fhir::stu3::proto::String* release_author();
  ::google::fhir::stu3::proto::String* mutable_author();
  void set_allocated_author(::google::fhir::stu3::proto::String* author);

  // .google.fhir.stu3.proto.String notes = 7;
  bool has_notes() const;
  void clear_notes();
  static const int kNotesFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::String& _internal_notes() const;
  public:
  const ::google::fhir::stu3::proto::String& notes() const;
  ::google::fhir::stu3::proto::String* release_notes();
  ::google::fhir::stu3::proto::String* mutable_notes();
  void set_allocated_notes(::google::fhir::stu3::proto::String* notes);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeSystemHistory.Revision)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::DateTime* date_;
  ::google::fhir::stu3::proto::String* id_slice_;
  ::google::fhir::stu3::proto::String* author_;
  ::google::fhir::stu3::proto::String* notes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeSystemHistory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeSystemHistory) */ {
 public:
  CodeSystemHistory();
  virtual ~CodeSystemHistory();

  CodeSystemHistory(const CodeSystemHistory& from);

  inline CodeSystemHistory& operator=(const CodeSystemHistory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeSystemHistory(CodeSystemHistory&& from) noexcept
    : CodeSystemHistory() {
    *this = ::std::move(from);
  }

  inline CodeSystemHistory& operator=(CodeSystemHistory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeSystemHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeSystemHistory* internal_default_instance() {
    return reinterpret_cast<const CodeSystemHistory*>(
               &_CodeSystemHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(CodeSystemHistory* other);
  friend void swap(CodeSystemHistory& a, CodeSystemHistory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeSystemHistory* New() const final {
    return CreateMaybeMessage<CodeSystemHistory>(NULL);
  }

  CodeSystemHistory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeSystemHistory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeSystemHistory& from);
  void MergeFrom(const CodeSystemHistory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSystemHistory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CodeSystemHistory_Revision Revision;

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // repeated .google.fhir.stu3.proto.CodeSystemHistory.Revision revision = 5;
  int revision_size() const;
  void clear_revision();
  static const int kRevisionFieldNumber = 5;
  ::google::fhir::stu3::proto::CodeSystemHistory_Revision* mutable_revision(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::CodeSystemHistory_Revision >*
      mutable_revision();
  const ::google::fhir::stu3::proto::CodeSystemHistory_Revision& revision(int index) const;
  ::google::fhir::stu3::proto::CodeSystemHistory_Revision* add_revision();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::CodeSystemHistory_Revision >&
      revision() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::String& _internal_name() const;
  public:
  const ::google::fhir::stu3::proto::String& name() const;
  ::google::fhir::stu3::proto::String* release_name();
  ::google::fhir::stu3::proto::String* mutable_name();
  void set_allocated_name(::google::fhir::stu3::proto::String* name);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeSystemHistory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::CodeSystemHistory_Revision > revision_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeSystemKeyWord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeSystemKeyWord) */ {
 public:
  CodeSystemKeyWord();
  virtual ~CodeSystemKeyWord();

  CodeSystemKeyWord(const CodeSystemKeyWord& from);

  inline CodeSystemKeyWord& operator=(const CodeSystemKeyWord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeSystemKeyWord(CodeSystemKeyWord&& from) noexcept
    : CodeSystemKeyWord() {
    *this = ::std::move(from);
  }

  inline CodeSystemKeyWord& operator=(CodeSystemKeyWord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeSystemKeyWord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeSystemKeyWord* internal_default_instance() {
    return reinterpret_cast<const CodeSystemKeyWord*>(
               &_CodeSystemKeyWord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(CodeSystemKeyWord* other);
  friend void swap(CodeSystemKeyWord& a, CodeSystemKeyWord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeSystemKeyWord* New() const final {
    return CreateMaybeMessage<CodeSystemKeyWord>(NULL);
  }

  CodeSystemKeyWord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeSystemKeyWord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeSystemKeyWord& from);
  void MergeFrom(const CodeSystemKeyWord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSystemKeyWord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeSystemKeyWord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeSystemLabel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeSystemLabel) */ {
 public:
  CodeSystemLabel();
  virtual ~CodeSystemLabel();

  CodeSystemLabel(const CodeSystemLabel& from);

  inline CodeSystemLabel& operator=(const CodeSystemLabel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeSystemLabel(CodeSystemLabel&& from) noexcept
    : CodeSystemLabel() {
    *this = ::std::move(from);
  }

  inline CodeSystemLabel& operator=(CodeSystemLabel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeSystemLabel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeSystemLabel* internal_default_instance() {
    return reinterpret_cast<const CodeSystemLabel*>(
               &_CodeSystemLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(CodeSystemLabel* other);
  friend void swap(CodeSystemLabel& a, CodeSystemLabel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeSystemLabel* New() const final {
    return CreateMaybeMessage<CodeSystemLabel>(NULL);
  }

  CodeSystemLabel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeSystemLabel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeSystemLabel& from);
  void MergeFrom(const CodeSystemLabel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSystemLabel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeSystemLabel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeSystemMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeSystemMap) */ {
 public:
  CodeSystemMap();
  virtual ~CodeSystemMap();

  CodeSystemMap(const CodeSystemMap& from);

  inline CodeSystemMap& operator=(const CodeSystemMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeSystemMap(CodeSystemMap&& from) noexcept
    : CodeSystemMap() {
    *this = ::std::move(from);
  }

  inline CodeSystemMap& operator=(CodeSystemMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeSystemMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeSystemMap* internal_default_instance() {
    return reinterpret_cast<const CodeSystemMap*>(
               &_CodeSystemMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(CodeSystemMap* other);
  friend void swap(CodeSystemMap& a, CodeSystemMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeSystemMap* New() const final {
    return CreateMaybeMessage<CodeSystemMap>(NULL);
  }

  CodeSystemMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeSystemMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeSystemMap& from);
  void MergeFrom(const CodeSystemMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSystemMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ConceptMap"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeSystemMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeSystemOrdinalValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeSystemOrdinalValue) */ {
 public:
  CodeSystemOrdinalValue();
  virtual ~CodeSystemOrdinalValue();

  CodeSystemOrdinalValue(const CodeSystemOrdinalValue& from);

  inline CodeSystemOrdinalValue& operator=(const CodeSystemOrdinalValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeSystemOrdinalValue(CodeSystemOrdinalValue&& from) noexcept
    : CodeSystemOrdinalValue() {
    *this = ::std::move(from);
  }

  inline CodeSystemOrdinalValue& operator=(CodeSystemOrdinalValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeSystemOrdinalValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeSystemOrdinalValue* internal_default_instance() {
    return reinterpret_cast<const CodeSystemOrdinalValue*>(
               &_CodeSystemOrdinalValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(CodeSystemOrdinalValue* other);
  friend void swap(CodeSystemOrdinalValue& a, CodeSystemOrdinalValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeSystemOrdinalValue* New() const final {
    return CreateMaybeMessage<CodeSystemOrdinalValue>(NULL);
  }

  CodeSystemOrdinalValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeSystemOrdinalValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeSystemOrdinalValue& from);
  void MergeFrom(const CodeSystemOrdinalValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSystemOrdinalValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Decimal value_decimal = 3;
  bool has_value_decimal() const;
  void clear_value_decimal();
  static const int kValueDecimalFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_value_decimal() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& value_decimal() const;
  ::google::fhir::stu3::proto::Decimal* release_value_decimal();
  ::google::fhir::stu3::proto::Decimal* mutable_value_decimal();
  void set_allocated_value_decimal(::google::fhir::stu3::proto::Decimal* value_decimal);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeSystemOrdinalValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Decimal* value_decimal_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeSystemOtherName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeSystemOtherName) */ {
 public:
  CodeSystemOtherName();
  virtual ~CodeSystemOtherName();

  CodeSystemOtherName(const CodeSystemOtherName& from);

  inline CodeSystemOtherName& operator=(const CodeSystemOtherName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeSystemOtherName(CodeSystemOtherName&& from) noexcept
    : CodeSystemOtherName() {
    *this = ::std::move(from);
  }

  inline CodeSystemOtherName& operator=(CodeSystemOtherName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeSystemOtherName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeSystemOtherName* internal_default_instance() {
    return reinterpret_cast<const CodeSystemOtherName*>(
               &_CodeSystemOtherName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(CodeSystemOtherName* other);
  friend void swap(CodeSystemOtherName& a, CodeSystemOtherName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeSystemOtherName* New() const final {
    return CreateMaybeMessage<CodeSystemOtherName>(NULL);
  }

  CodeSystemOtherName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeSystemOtherName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeSystemOtherName& from);
  void MergeFrom(const CodeSystemOtherName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSystemOtherName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String name = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::String& _internal_name() const;
  public:
  const ::google::fhir::stu3::proto::String& name() const;
  ::google::fhir::stu3::proto::String* release_name();
  ::google::fhir::stu3::proto::String* mutable_name();
  void set_allocated_name(::google::fhir::stu3::proto::String* name);

  // .google.fhir.stu3.proto.Boolean preferred = 5;
  bool has_preferred() const;
  void clear_preferred();
  static const int kPreferredFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_preferred() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& preferred() const;
  ::google::fhir::stu3::proto::Boolean* release_preferred();
  ::google::fhir::stu3::proto::Boolean* mutable_preferred();
  void set_allocated_preferred(::google::fhir::stu3::proto::Boolean* preferred);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeSystemOtherName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* name_;
  ::google::fhir::stu3::proto::Boolean* preferred_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeSystemReference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeSystemReference) */ {
 public:
  CodeSystemReference();
  virtual ~CodeSystemReference();

  CodeSystemReference(const CodeSystemReference& from);

  inline CodeSystemReference& operator=(const CodeSystemReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeSystemReference(CodeSystemReference&& from) noexcept
    : CodeSystemReference() {
    *this = ::std::move(from);
  }

  inline CodeSystemReference& operator=(CodeSystemReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeSystemReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeSystemReference* internal_default_instance() {
    return reinterpret_cast<const CodeSystemReference*>(
               &_CodeSystemReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(CodeSystemReference* other);
  friend void swap(CodeSystemReference& a, CodeSystemReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeSystemReference* New() const final {
    return CreateMaybeMessage<CodeSystemReference>(NULL);
  }

  CodeSystemReference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeSystemReference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeSystemReference& from);
  void MergeFrom(const CodeSystemReference& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSystemReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri value_uri = 3;
  bool has_value_uri() const;
  void clear_value_uri();
  static const int kValueUriFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_value_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& value_uri() const;
  ::google::fhir::stu3::proto::Uri* release_value_uri();
  ::google::fhir::stu3::proto::Uri* mutable_value_uri();
  void set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeSystemReference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* value_uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeSystemReplacedby : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeSystemReplacedby) */ {
 public:
  CodeSystemReplacedby();
  virtual ~CodeSystemReplacedby();

  CodeSystemReplacedby(const CodeSystemReplacedby& from);

  inline CodeSystemReplacedby& operator=(const CodeSystemReplacedby& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeSystemReplacedby(CodeSystemReplacedby&& from) noexcept
    : CodeSystemReplacedby() {
    *this = ::std::move(from);
  }

  inline CodeSystemReplacedby& operator=(CodeSystemReplacedby&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeSystemReplacedby& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeSystemReplacedby* internal_default_instance() {
    return reinterpret_cast<const CodeSystemReplacedby*>(
               &_CodeSystemReplacedby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(CodeSystemReplacedby* other);
  friend void swap(CodeSystemReplacedby& a, CodeSystemReplacedby& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeSystemReplacedby* New() const final {
    return CreateMaybeMessage<CodeSystemReplacedby>(NULL);
  }

  CodeSystemReplacedby* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeSystemReplacedby>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeSystemReplacedby& from);
  void MergeFrom(const CodeSystemReplacedby& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSystemReplacedby* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Coding value_coding = 3;
  bool has_value_coding() const;
  void clear_value_coding();
  static const int kValueCodingFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Coding& _internal_value_coding() const;
  public:
  const ::google::fhir::stu3::proto::Coding& value_coding() const;
  ::google::fhir::stu3::proto::Coding* release_value_coding();
  ::google::fhir::stu3::proto::Coding* mutable_value_coding();
  void set_allocated_value_coding(::google::fhir::stu3::proto::Coding* value_coding);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeSystemReplacedby)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Coding* value_coding_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeSystemSourceReference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeSystemSourceReference) */ {
 public:
  CodeSystemSourceReference();
  virtual ~CodeSystemSourceReference();

  CodeSystemSourceReference(const CodeSystemSourceReference& from);

  inline CodeSystemSourceReference& operator=(const CodeSystemSourceReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeSystemSourceReference(CodeSystemSourceReference&& from) noexcept
    : CodeSystemSourceReference() {
    *this = ::std::move(from);
  }

  inline CodeSystemSourceReference& operator=(CodeSystemSourceReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeSystemSourceReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeSystemSourceReference* internal_default_instance() {
    return reinterpret_cast<const CodeSystemSourceReference*>(
               &_CodeSystemSourceReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(CodeSystemSourceReference* other);
  friend void swap(CodeSystemSourceReference& a, CodeSystemSourceReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeSystemSourceReference* New() const final {
    return CreateMaybeMessage<CodeSystemSourceReference>(NULL);
  }

  CodeSystemSourceReference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeSystemSourceReference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeSystemSourceReference& from);
  void MergeFrom(const CodeSystemSourceReference& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSystemSourceReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri value_uri = 3;
  bool has_value_uri() const;
  void clear_value_uri();
  static const int kValueUriFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_value_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& value_uri() const;
  ::google::fhir::stu3::proto::Uri* release_value_uri();
  ::google::fhir::stu3::proto::Uri* mutable_value_uri();
  void set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeSystemSourceReference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* value_uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeSystemSubsumes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeSystemSubsumes) */ {
 public:
  CodeSystemSubsumes();
  virtual ~CodeSystemSubsumes();

  CodeSystemSubsumes(const CodeSystemSubsumes& from);

  inline CodeSystemSubsumes& operator=(const CodeSystemSubsumes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeSystemSubsumes(CodeSystemSubsumes&& from) noexcept
    : CodeSystemSubsumes() {
    *this = ::std::move(from);
  }

  inline CodeSystemSubsumes& operator=(CodeSystemSubsumes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeSystemSubsumes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeSystemSubsumes* internal_default_instance() {
    return reinterpret_cast<const CodeSystemSubsumes*>(
               &_CodeSystemSubsumes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(CodeSystemSubsumes* other);
  friend void swap(CodeSystemSubsumes& a, CodeSystemSubsumes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeSystemSubsumes* New() const final {
    return CreateMaybeMessage<CodeSystemSubsumes>(NULL);
  }

  CodeSystemSubsumes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeSystemSubsumes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeSystemSubsumes& from);
  void MergeFrom(const CodeSystemSubsumes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSystemSubsumes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Code value_code = 3;
  bool has_value_code() const;
  void clear_value_code();
  static const int kValueCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Code& _internal_value_code() const;
  public:
  const ::google::fhir::stu3::proto::Code& value_code() const;
  ::google::fhir::stu3::proto::Code* release_value_code();
  ::google::fhir::stu3::proto::Code* mutable_value_code();
  void set_allocated_value_code(::google::fhir::stu3::proto::Code* value_code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeSystemSubsumes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Code* value_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeSystemTrustedExpansion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeSystemTrustedExpansion) */ {
 public:
  CodeSystemTrustedExpansion();
  virtual ~CodeSystemTrustedExpansion();

  CodeSystemTrustedExpansion(const CodeSystemTrustedExpansion& from);

  inline CodeSystemTrustedExpansion& operator=(const CodeSystemTrustedExpansion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeSystemTrustedExpansion(CodeSystemTrustedExpansion&& from) noexcept
    : CodeSystemTrustedExpansion() {
    *this = ::std::move(from);
  }

  inline CodeSystemTrustedExpansion& operator=(CodeSystemTrustedExpansion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeSystemTrustedExpansion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeSystemTrustedExpansion* internal_default_instance() {
    return reinterpret_cast<const CodeSystemTrustedExpansion*>(
               &_CodeSystemTrustedExpansion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(CodeSystemTrustedExpansion* other);
  friend void swap(CodeSystemTrustedExpansion& a, CodeSystemTrustedExpansion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeSystemTrustedExpansion* New() const final {
    return CreateMaybeMessage<CodeSystemTrustedExpansion>(NULL);
  }

  CodeSystemTrustedExpansion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeSystemTrustedExpansion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeSystemTrustedExpansion& from);
  void MergeFrom(const CodeSystemTrustedExpansion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSystemTrustedExpansion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri value_uri = 3;
  bool has_value_uri() const;
  void clear_value_uri();
  static const int kValueUriFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_value_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& value_uri() const;
  ::google::fhir::stu3::proto::Uri* release_value_uri();
  ::google::fhir::stu3::proto::Uri* mutable_value_uri();
  void set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeSystemTrustedExpansion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* value_uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeSystemUsage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeSystemUsage) */ {
 public:
  CodeSystemUsage();
  virtual ~CodeSystemUsage();

  CodeSystemUsage(const CodeSystemUsage& from);

  inline CodeSystemUsage& operator=(const CodeSystemUsage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeSystemUsage(CodeSystemUsage&& from) noexcept
    : CodeSystemUsage() {
    *this = ::std::move(from);
  }

  inline CodeSystemUsage& operator=(CodeSystemUsage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeSystemUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeSystemUsage* internal_default_instance() {
    return reinterpret_cast<const CodeSystemUsage*>(
               &_CodeSystemUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(CodeSystemUsage* other);
  friend void swap(CodeSystemUsage& a, CodeSystemUsage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeSystemUsage* New() const final {
    return CreateMaybeMessage<CodeSystemUsage>(NULL);
  }

  CodeSystemUsage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeSystemUsage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeSystemUsage& from);
  void MergeFrom(const CodeSystemUsage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSystemUsage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String user = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::String& _internal_user() const;
  public:
  const ::google::fhir::stu3::proto::String& user() const;
  ::google::fhir::stu3::proto::String* release_user();
  ::google::fhir::stu3::proto::String* mutable_user();
  void set_allocated_user(::google::fhir::stu3::proto::String* user);

  // .google.fhir.stu3.proto.String use = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_use() const;
  void clear_use();
  static const int kUseFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::String& _internal_use() const;
  public:
  const ::google::fhir::stu3::proto::String& use() const;
  ::google::fhir::stu3::proto::String* release_use();
  ::google::fhir::stu3::proto::String* mutable_use();
  void set_allocated_use(::google::fhir::stu3::proto::String* use);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeSystemUsage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* user_;
  ::google::fhir::stu3::proto::String* use_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeSystemWarning : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeSystemWarning) */ {
 public:
  CodeSystemWarning();
  virtual ~CodeSystemWarning();

  CodeSystemWarning(const CodeSystemWarning& from);

  inline CodeSystemWarning& operator=(const CodeSystemWarning& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeSystemWarning(CodeSystemWarning&& from) noexcept
    : CodeSystemWarning() {
    *this = ::std::move(from);
  }

  inline CodeSystemWarning& operator=(CodeSystemWarning&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeSystemWarning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeSystemWarning* internal_default_instance() {
    return reinterpret_cast<const CodeSystemWarning*>(
               &_CodeSystemWarning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(CodeSystemWarning* other);
  friend void swap(CodeSystemWarning& a, CodeSystemWarning& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeSystemWarning* New() const final {
    return CreateMaybeMessage<CodeSystemWarning>(NULL);
  }

  CodeSystemWarning* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeSystemWarning>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeSystemWarning& from);
  void MergeFrom(const CodeSystemWarning& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSystemWarning* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Markdown value_markdown = 3;
  bool has_value_markdown() const;
  void clear_value_markdown();
  static const int kValueMarkdownFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Markdown& _internal_value_markdown() const;
  public:
  const ::google::fhir::stu3::proto::Markdown& value_markdown() const;
  ::google::fhir::stu3::proto::Markdown* release_value_markdown();
  ::google::fhir::stu3::proto::Markdown* mutable_value_markdown();
  void set_allocated_value_markdown(::google::fhir::stu3::proto::Markdown* value_markdown);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeSystemWarning)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Markdown* value_markdown_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeSystemWorkflowStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeSystemWorkflowStatus) */ {
 public:
  CodeSystemWorkflowStatus();
  virtual ~CodeSystemWorkflowStatus();

  CodeSystemWorkflowStatus(const CodeSystemWorkflowStatus& from);

  inline CodeSystemWorkflowStatus& operator=(const CodeSystemWorkflowStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeSystemWorkflowStatus(CodeSystemWorkflowStatus&& from) noexcept
    : CodeSystemWorkflowStatus() {
    *this = ::std::move(from);
  }

  inline CodeSystemWorkflowStatus& operator=(CodeSystemWorkflowStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeSystemWorkflowStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeSystemWorkflowStatus* internal_default_instance() {
    return reinterpret_cast<const CodeSystemWorkflowStatus*>(
               &_CodeSystemWorkflowStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void Swap(CodeSystemWorkflowStatus* other);
  friend void swap(CodeSystemWorkflowStatus& a, CodeSystemWorkflowStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeSystemWorkflowStatus* New() const final {
    return CreateMaybeMessage<CodeSystemWorkflowStatus>(NULL);
  }

  CodeSystemWorkflowStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeSystemWorkflowStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeSystemWorkflowStatus& from);
  void MergeFrom(const CodeSystemWorkflowStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeSystemWorkflowStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeSystemWorkflowStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodingSctdescid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodingSctdescid) */ {
 public:
  CodingSctdescid();
  virtual ~CodingSctdescid();

  CodingSctdescid(const CodingSctdescid& from);

  inline CodingSctdescid& operator=(const CodingSctdescid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodingSctdescid(CodingSctdescid&& from) noexcept
    : CodingSctdescid() {
    *this = ::std::move(from);
  }

  inline CodingSctdescid& operator=(CodingSctdescid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodingSctdescid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodingSctdescid* internal_default_instance() {
    return reinterpret_cast<const CodingSctdescid*>(
               &_CodingSctdescid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void Swap(CodingSctdescid* other);
  friend void swap(CodingSctdescid& a, CodingSctdescid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodingSctdescid* New() const final {
    return CreateMaybeMessage<CodingSctdescid>(NULL);
  }

  CodingSctdescid* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodingSctdescid>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodingSctdescid& from);
  void MergeFrom(const CodingSctdescid& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodingSctdescid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Id value_id = 3;
  bool has_value_id() const;
  void clear_value_id();
  static const int kValueIdFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Id& _internal_value_id() const;
  public:
  const ::google::fhir::stu3::proto::Id& value_id() const;
  ::google::fhir::stu3::proto::Id* release_value_id();
  ::google::fhir::stu3::proto::Id* mutable_value_id();
  void set_allocated_value_id(::google::fhir::stu3::proto::Id* value_id);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodingSctdescid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Id* value_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommunicationMedia : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CommunicationMedia) */ {
 public:
  CommunicationMedia();
  virtual ~CommunicationMedia();

  CommunicationMedia(const CommunicationMedia& from);

  inline CommunicationMedia& operator=(const CommunicationMedia& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommunicationMedia(CommunicationMedia&& from) noexcept
    : CommunicationMedia() {
    *this = ::std::move(from);
  }

  inline CommunicationMedia& operator=(CommunicationMedia&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommunicationMedia& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommunicationMedia* internal_default_instance() {
    return reinterpret_cast<const CommunicationMedia*>(
               &_CommunicationMedia_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void Swap(CommunicationMedia* other);
  friend void swap(CommunicationMedia& a, CommunicationMedia& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommunicationMedia* New() const final {
    return CreateMaybeMessage<CommunicationMedia>(NULL);
  }

  CommunicationMedia* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommunicationMedia>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommunicationMedia& from);
  void MergeFrom(const CommunicationMedia& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationMedia* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Attachment value_attachment = 3;
  bool has_value_attachment() const;
  void clear_value_attachment();
  static const int kValueAttachmentFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Attachment& _internal_value_attachment() const;
  public:
  const ::google::fhir::stu3::proto::Attachment& value_attachment() const;
  ::google::fhir::stu3::proto::Attachment* release_value_attachment();
  ::google::fhir::stu3::proto::Attachment* mutable_value_attachment();
  void set_allocated_value_attachment(::google::fhir::stu3::proto::Attachment* value_attachment);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CommunicationMedia)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Attachment* value_attachment_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommunicationReasonNotPerformed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CommunicationReasonNotPerformed) */ {
 public:
  CommunicationReasonNotPerformed();
  virtual ~CommunicationReasonNotPerformed();

  CommunicationReasonNotPerformed(const CommunicationReasonNotPerformed& from);

  inline CommunicationReasonNotPerformed& operator=(const CommunicationReasonNotPerformed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommunicationReasonNotPerformed(CommunicationReasonNotPerformed&& from) noexcept
    : CommunicationReasonNotPerformed() {
    *this = ::std::move(from);
  }

  inline CommunicationReasonNotPerformed& operator=(CommunicationReasonNotPerformed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommunicationReasonNotPerformed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommunicationReasonNotPerformed* internal_default_instance() {
    return reinterpret_cast<const CommunicationReasonNotPerformed*>(
               &_CommunicationReasonNotPerformed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void Swap(CommunicationReasonNotPerformed* other);
  friend void swap(CommunicationReasonNotPerformed& a, CommunicationReasonNotPerformed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommunicationReasonNotPerformed* New() const final {
    return CreateMaybeMessage<CommunicationReasonNotPerformed>(NULL);
  }

  CommunicationReasonNotPerformed* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommunicationReasonNotPerformed>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommunicationReasonNotPerformed& from);
  void MergeFrom(const CommunicationReasonNotPerformed& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationReasonNotPerformed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CommunicationReasonNotPerformed)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommunicationRequestDefinition_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CommunicationRequestDefinition.Value) */ {
 public:
  CommunicationRequestDefinition_Value();
  virtual ~CommunicationRequestDefinition_Value();

  CommunicationRequestDefinition_Value(const CommunicationRequestDefinition_Value& from);

  inline CommunicationRequestDefinition_Value& operator=(const CommunicationRequestDefinition_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommunicationRequestDefinition_Value(CommunicationRequestDefinition_Value&& from) noexcept
    : CommunicationRequestDefinition_Value() {
    *this = ::std::move(from);
  }

  inline CommunicationRequestDefinition_Value& operator=(CommunicationRequestDefinition_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommunicationRequestDefinition_Value& default_instance();

  enum ValueCase {
    kReference = 1,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommunicationRequestDefinition_Value* internal_default_instance() {
    return reinterpret_cast<const CommunicationRequestDefinition_Value*>(
               &_CommunicationRequestDefinition_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  void Swap(CommunicationRequestDefinition_Value* other);
  friend void swap(CommunicationRequestDefinition_Value& a, CommunicationRequestDefinition_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommunicationRequestDefinition_Value* New() const final {
    return CreateMaybeMessage<CommunicationRequestDefinition_Value>(NULL);
  }

  CommunicationRequestDefinition_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommunicationRequestDefinition_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommunicationRequestDefinition_Value& from);
  void MergeFrom(const CommunicationRequestDefinition_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationRequestDefinition_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/PlanDefinition", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ActivityDefinition"];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CommunicationRequestDefinition.Value)
 private:
  void set_has_reference();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::Reference* reference_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommunicationRequestDefinition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CommunicationRequestDefinition) */ {
 public:
  CommunicationRequestDefinition();
  virtual ~CommunicationRequestDefinition();

  CommunicationRequestDefinition(const CommunicationRequestDefinition& from);

  inline CommunicationRequestDefinition& operator=(const CommunicationRequestDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommunicationRequestDefinition(CommunicationRequestDefinition&& from) noexcept
    : CommunicationRequestDefinition() {
    *this = ::std::move(from);
  }

  inline CommunicationRequestDefinition& operator=(CommunicationRequestDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommunicationRequestDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommunicationRequestDefinition* internal_default_instance() {
    return reinterpret_cast<const CommunicationRequestDefinition*>(
               &_CommunicationRequestDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  void Swap(CommunicationRequestDefinition* other);
  friend void swap(CommunicationRequestDefinition& a, CommunicationRequestDefinition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommunicationRequestDefinition* New() const final {
    return CreateMaybeMessage<CommunicationRequestDefinition>(NULL);
  }

  CommunicationRequestDefinition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommunicationRequestDefinition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommunicationRequestDefinition& from);
  void MergeFrom(const CommunicationRequestDefinition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationRequestDefinition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommunicationRequestDefinition_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CommunicationRequestDefinition.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CommunicationRequestDefinition_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::CommunicationRequestDefinition_Value& value() const;
  ::google::fhir::stu3::proto::CommunicationRequestDefinition_Value* release_value();
  ::google::fhir::stu3::proto::CommunicationRequestDefinition_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::CommunicationRequestDefinition_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CommunicationRequestDefinition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CommunicationRequestDefinition_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommunicationRequestOrderedBy_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CommunicationRequestOrderedBy.Value) */ {
 public:
  CommunicationRequestOrderedBy_Value();
  virtual ~CommunicationRequestOrderedBy_Value();

  CommunicationRequestOrderedBy_Value(const CommunicationRequestOrderedBy_Value& from);

  inline CommunicationRequestOrderedBy_Value& operator=(const CommunicationRequestOrderedBy_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommunicationRequestOrderedBy_Value(CommunicationRequestOrderedBy_Value&& from) noexcept
    : CommunicationRequestOrderedBy_Value() {
    *this = ::std::move(from);
  }

  inline CommunicationRequestOrderedBy_Value& operator=(CommunicationRequestOrderedBy_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommunicationRequestOrderedBy_Value& default_instance();

  enum ValueCase {
    kReference = 1,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommunicationRequestOrderedBy_Value* internal_default_instance() {
    return reinterpret_cast<const CommunicationRequestOrderedBy_Value*>(
               &_CommunicationRequestOrderedBy_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  void Swap(CommunicationRequestOrderedBy_Value* other);
  friend void swap(CommunicationRequestOrderedBy_Value& a, CommunicationRequestOrderedBy_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommunicationRequestOrderedBy_Value* New() const final {
    return CreateMaybeMessage<CommunicationRequestOrderedBy_Value>(NULL);
  }

  CommunicationRequestOrderedBy_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommunicationRequestOrderedBy_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommunicationRequestOrderedBy_Value& from);
  void MergeFrom(const CommunicationRequestOrderedBy_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationRequestOrderedBy_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Organization", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Device", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Patient"];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CommunicationRequestOrderedBy.Value)
 private:
  void set_has_reference();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::Reference* reference_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommunicationRequestOrderedBy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CommunicationRequestOrderedBy) */ {
 public:
  CommunicationRequestOrderedBy();
  virtual ~CommunicationRequestOrderedBy();

  CommunicationRequestOrderedBy(const CommunicationRequestOrderedBy& from);

  inline CommunicationRequestOrderedBy& operator=(const CommunicationRequestOrderedBy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommunicationRequestOrderedBy(CommunicationRequestOrderedBy&& from) noexcept
    : CommunicationRequestOrderedBy() {
    *this = ::std::move(from);
  }

  inline CommunicationRequestOrderedBy& operator=(CommunicationRequestOrderedBy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommunicationRequestOrderedBy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommunicationRequestOrderedBy* internal_default_instance() {
    return reinterpret_cast<const CommunicationRequestOrderedBy*>(
               &_CommunicationRequestOrderedBy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  void Swap(CommunicationRequestOrderedBy* other);
  friend void swap(CommunicationRequestOrderedBy& a, CommunicationRequestOrderedBy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommunicationRequestOrderedBy* New() const final {
    return CreateMaybeMessage<CommunicationRequestOrderedBy>(NULL);
  }

  CommunicationRequestOrderedBy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommunicationRequestOrderedBy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommunicationRequestOrderedBy& from);
  void MergeFrom(const CommunicationRequestOrderedBy& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationRequestOrderedBy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommunicationRequestOrderedBy_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CommunicationRequestOrderedBy.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CommunicationRequestOrderedBy_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::CommunicationRequestOrderedBy_Value& value() const;
  ::google::fhir::stu3::proto::CommunicationRequestOrderedBy_Value* release_value();
  ::google::fhir::stu3::proto::CommunicationRequestOrderedBy_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::CommunicationRequestOrderedBy_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CommunicationRequestOrderedBy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CommunicationRequestOrderedBy_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommunicationRequestReasonRejected : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CommunicationRequestReasonRejected) */ {
 public:
  CommunicationRequestReasonRejected();
  virtual ~CommunicationRequestReasonRejected();

  CommunicationRequestReasonRejected(const CommunicationRequestReasonRejected& from);

  inline CommunicationRequestReasonRejected& operator=(const CommunicationRequestReasonRejected& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommunicationRequestReasonRejected(CommunicationRequestReasonRejected&& from) noexcept
    : CommunicationRequestReasonRejected() {
    *this = ::std::move(from);
  }

  inline CommunicationRequestReasonRejected& operator=(CommunicationRequestReasonRejected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommunicationRequestReasonRejected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommunicationRequestReasonRejected* internal_default_instance() {
    return reinterpret_cast<const CommunicationRequestReasonRejected*>(
               &_CommunicationRequestReasonRejected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  void Swap(CommunicationRequestReasonRejected* other);
  friend void swap(CommunicationRequestReasonRejected& a, CommunicationRequestReasonRejected& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommunicationRequestReasonRejected* New() const final {
    return CreateMaybeMessage<CommunicationRequestReasonRejected>(NULL);
  }

  CommunicationRequestReasonRejected* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommunicationRequestReasonRejected>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommunicationRequestReasonRejected& from);
  void MergeFrom(const CommunicationRequestReasonRejected& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationRequestReasonRejected* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CommunicationRequestReasonRejected)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommunicationRequestRelevantHistory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CommunicationRequestRelevantHistory) */ {
 public:
  CommunicationRequestRelevantHistory();
  virtual ~CommunicationRequestRelevantHistory();

  CommunicationRequestRelevantHistory(const CommunicationRequestRelevantHistory& from);

  inline CommunicationRequestRelevantHistory& operator=(const CommunicationRequestRelevantHistory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommunicationRequestRelevantHistory(CommunicationRequestRelevantHistory&& from) noexcept
    : CommunicationRequestRelevantHistory() {
    *this = ::std::move(from);
  }

  inline CommunicationRequestRelevantHistory& operator=(CommunicationRequestRelevantHistory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommunicationRequestRelevantHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommunicationRequestRelevantHistory* internal_default_instance() {
    return reinterpret_cast<const CommunicationRequestRelevantHistory*>(
               &_CommunicationRequestRelevantHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  void Swap(CommunicationRequestRelevantHistory* other);
  friend void swap(CommunicationRequestRelevantHistory& a, CommunicationRequestRelevantHistory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommunicationRequestRelevantHistory* New() const final {
    return CreateMaybeMessage<CommunicationRequestRelevantHistory>(NULL);
  }

  CommunicationRequestRelevantHistory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommunicationRequestRelevantHistory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommunicationRequestRelevantHistory& from);
  void MergeFrom(const CommunicationRequestRelevantHistory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationRequestRelevantHistory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Provenance"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CommunicationRequestRelevantHistory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CommunicationRequestSupportingInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CommunicationRequestSupportingInfo) */ {
 public:
  CommunicationRequestSupportingInfo();
  virtual ~CommunicationRequestSupportingInfo();

  CommunicationRequestSupportingInfo(const CommunicationRequestSupportingInfo& from);

  inline CommunicationRequestSupportingInfo& operator=(const CommunicationRequestSupportingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommunicationRequestSupportingInfo(CommunicationRequestSupportingInfo&& from) noexcept
    : CommunicationRequestSupportingInfo() {
    *this = ::std::move(from);
  }

  inline CommunicationRequestSupportingInfo& operator=(CommunicationRequestSupportingInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommunicationRequestSupportingInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommunicationRequestSupportingInfo* internal_default_instance() {
    return reinterpret_cast<const CommunicationRequestSupportingInfo*>(
               &_CommunicationRequestSupportingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  void Swap(CommunicationRequestSupportingInfo* other);
  friend void swap(CommunicationRequestSupportingInfo& a, CommunicationRequestSupportingInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommunicationRequestSupportingInfo* New() const final {
    return CreateMaybeMessage<CommunicationRequestSupportingInfo>(NULL);
  }

  CommunicationRequestSupportingInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CommunicationRequestSupportingInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CommunicationRequestSupportingInfo& from);
  void MergeFrom(const CommunicationRequestSupportingInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunicationRequestSupportingInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Resource"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CommunicationRequestSupportingInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CompositionOtherConfidentiality : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CompositionOtherConfidentiality) */ {
 public:
  CompositionOtherConfidentiality();
  virtual ~CompositionOtherConfidentiality();

  CompositionOtherConfidentiality(const CompositionOtherConfidentiality& from);

  inline CompositionOtherConfidentiality& operator=(const CompositionOtherConfidentiality& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompositionOtherConfidentiality(CompositionOtherConfidentiality&& from) noexcept
    : CompositionOtherConfidentiality() {
    *this = ::std::move(from);
  }

  inline CompositionOtherConfidentiality& operator=(CompositionOtherConfidentiality&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompositionOtherConfidentiality& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompositionOtherConfidentiality* internal_default_instance() {
    return reinterpret_cast<const CompositionOtherConfidentiality*>(
               &_CompositionOtherConfidentiality_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  void Swap(CompositionOtherConfidentiality* other);
  friend void swap(CompositionOtherConfidentiality& a, CompositionOtherConfidentiality& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompositionOtherConfidentiality* New() const final {
    return CreateMaybeMessage<CompositionOtherConfidentiality>(NULL);
  }

  CompositionOtherConfidentiality* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CompositionOtherConfidentiality>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CompositionOtherConfidentiality& from);
  void MergeFrom(const CompositionOtherConfidentiality& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompositionOtherConfidentiality* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Coding value_coding = 3;
  bool has_value_coding() const;
  void clear_value_coding();
  static const int kValueCodingFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Coding& _internal_value_coding() const;
  public:
  const ::google::fhir::stu3::proto::Coding& value_coding() const;
  ::google::fhir::stu3::proto::Coding* release_value_coding();
  ::google::fhir::stu3::proto::Coding* mutable_value_coding();
  void set_allocated_value_coding(::google::fhir::stu3::proto::Coding* value_coding);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CompositionOtherConfidentiality)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Coding* value_coding_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConceptMapBidirectional : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ConceptMapBidirectional) */ {
 public:
  ConceptMapBidirectional();
  virtual ~ConceptMapBidirectional();

  ConceptMapBidirectional(const ConceptMapBidirectional& from);

  inline ConceptMapBidirectional& operator=(const ConceptMapBidirectional& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConceptMapBidirectional(ConceptMapBidirectional&& from) noexcept
    : ConceptMapBidirectional() {
    *this = ::std::move(from);
  }

  inline ConceptMapBidirectional& operator=(ConceptMapBidirectional&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConceptMapBidirectional& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConceptMapBidirectional* internal_default_instance() {
    return reinterpret_cast<const ConceptMapBidirectional*>(
               &_ConceptMapBidirectional_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  void Swap(ConceptMapBidirectional* other);
  friend void swap(ConceptMapBidirectional& a, ConceptMapBidirectional& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConceptMapBidirectional* New() const final {
    return CreateMaybeMessage<ConceptMapBidirectional>(NULL);
  }

  ConceptMapBidirectional* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConceptMapBidirectional>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConceptMapBidirectional& from);
  void MergeFrom(const ConceptMapBidirectional& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConceptMapBidirectional* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ConceptMapBidirectional)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConditionBasedOn_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ConditionBasedOn.Value) */ {
 public:
  ConditionBasedOn_Value();
  virtual ~ConditionBasedOn_Value();

  ConditionBasedOn_Value(const ConditionBasedOn_Value& from);

  inline ConditionBasedOn_Value& operator=(const ConditionBasedOn_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConditionBasedOn_Value(ConditionBasedOn_Value&& from) noexcept
    : ConditionBasedOn_Value() {
    *this = ::std::move(from);
  }

  inline ConditionBasedOn_Value& operator=(ConditionBasedOn_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConditionBasedOn_Value& default_instance();

  enum ValueCase {
    kReference = 1,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConditionBasedOn_Value* internal_default_instance() {
    return reinterpret_cast<const ConditionBasedOn_Value*>(
               &_ConditionBasedOn_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  void Swap(ConditionBasedOn_Value* other);
  friend void swap(ConditionBasedOn_Value& a, ConditionBasedOn_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConditionBasedOn_Value* New() const final {
    return CreateMaybeMessage<ConditionBasedOn_Value>(NULL);
  }

  ConditionBasedOn_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConditionBasedOn_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConditionBasedOn_Value& from);
  void MergeFrom(const ConditionBasedOn_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionBasedOn_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ReferralRequest", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ProcedureRequest", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/CarePlan"];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ConditionBasedOn.Value)
 private:
  void set_has_reference();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::Reference* reference_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConditionBasedOn : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ConditionBasedOn) */ {
 public:
  ConditionBasedOn();
  virtual ~ConditionBasedOn();

  ConditionBasedOn(const ConditionBasedOn& from);

  inline ConditionBasedOn& operator=(const ConditionBasedOn& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConditionBasedOn(ConditionBasedOn&& from) noexcept
    : ConditionBasedOn() {
    *this = ::std::move(from);
  }

  inline ConditionBasedOn& operator=(ConditionBasedOn&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConditionBasedOn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConditionBasedOn* internal_default_instance() {
    return reinterpret_cast<const ConditionBasedOn*>(
               &_ConditionBasedOn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  void Swap(ConditionBasedOn* other);
  friend void swap(ConditionBasedOn& a, ConditionBasedOn& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConditionBasedOn* New() const final {
    return CreateMaybeMessage<ConditionBasedOn>(NULL);
  }

  ConditionBasedOn* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConditionBasedOn>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConditionBasedOn& from);
  void MergeFrom(const ConditionBasedOn& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionBasedOn* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConditionBasedOn_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.ConditionBasedOn.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::ConditionBasedOn_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::ConditionBasedOn_Value& value() const;
  ::google::fhir::stu3::proto::ConditionBasedOn_Value* release_value();
  ::google::fhir::stu3::proto::ConditionBasedOn_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::ConditionBasedOn_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ConditionBasedOn)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::ConditionBasedOn_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConditionCriticality : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ConditionCriticality) */ {
 public:
  ConditionCriticality();
  virtual ~ConditionCriticality();

  ConditionCriticality(const ConditionCriticality& from);

  inline ConditionCriticality& operator=(const ConditionCriticality& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConditionCriticality(ConditionCriticality&& from) noexcept
    : ConditionCriticality() {
    *this = ::std::move(from);
  }

  inline ConditionCriticality& operator=(ConditionCriticality&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConditionCriticality& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConditionCriticality* internal_default_instance() {
    return reinterpret_cast<const ConditionCriticality*>(
               &_ConditionCriticality_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  void Swap(ConditionCriticality* other);
  friend void swap(ConditionCriticality& a, ConditionCriticality& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConditionCriticality* New() const final {
    return CreateMaybeMessage<ConditionCriticality>(NULL);
  }

  ConditionCriticality* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConditionCriticality>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConditionCriticality& from);
  void MergeFrom(const ConditionCriticality& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionCriticality* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ConditionCriticality)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConditionDefinition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ConditionDefinition) */ {
 public:
  ConditionDefinition();
  virtual ~ConditionDefinition();

  ConditionDefinition(const ConditionDefinition& from);

  inline ConditionDefinition& operator=(const ConditionDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConditionDefinition(ConditionDefinition&& from) noexcept
    : ConditionDefinition() {
    *this = ::std::move(from);
  }

  inline ConditionDefinition& operator=(ConditionDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConditionDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConditionDefinition* internal_default_instance() {
    return reinterpret_cast<const ConditionDefinition*>(
               &_ConditionDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  void Swap(ConditionDefinition* other);
  friend void swap(ConditionDefinition& a, ConditionDefinition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConditionDefinition* New() const final {
    return CreateMaybeMessage<ConditionDefinition>(NULL);
  }

  ConditionDefinition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConditionDefinition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConditionDefinition& from);
  void MergeFrom(const ConditionDefinition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionDefinition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/PlanDefinition"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ConditionDefinition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConditionDueTo_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ConditionDueTo.Value) */ {
 public:
  ConditionDueTo_Value();
  virtual ~ConditionDueTo_Value();

  ConditionDueTo_Value(const ConditionDueTo_Value& from);

  inline ConditionDueTo_Value& operator=(const ConditionDueTo_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConditionDueTo_Value(ConditionDueTo_Value&& from) noexcept
    : ConditionDueTo_Value() {
    *this = ::std::move(from);
  }

  inline ConditionDueTo_Value& operator=(ConditionDueTo_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConditionDueTo_Value& default_instance();

  enum ValueCase {
    kCodeableConcept = 1,
    kReference = 2,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConditionDueTo_Value* internal_default_instance() {
    return reinterpret_cast<const ConditionDueTo_Value*>(
               &_ConditionDueTo_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  void Swap(ConditionDueTo_Value* other);
  friend void swap(ConditionDueTo_Value& a, ConditionDueTo_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConditionDueTo_Value* New() const final {
    return CreateMaybeMessage<ConditionDueTo_Value>(NULL);
  }

  ConditionDueTo_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConditionDueTo_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConditionDueTo_Value& from);
  void MergeFrom(const ConditionDueTo_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionDueTo_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.CodeableConcept codeable_concept = 1;
  bool has_codeable_concept() const;
  void clear_codeable_concept();
  static const int kCodeableConceptFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_codeable_concept();
  void set_allocated_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* codeable_concept);

  // .google.fhir.stu3.proto.Reference reference = 2 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Condition", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Procedure", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/MedicationAdministration", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Immunization", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/MedicationStatement"];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ConditionDueTo.Value)
 private:
  void set_has_codeable_concept();
  void set_has_reference();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::CodeableConcept* codeable_concept_;
    ::google::fhir::stu3::proto::Reference* reference_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConditionDueTo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ConditionDueTo) */ {
 public:
  ConditionDueTo();
  virtual ~ConditionDueTo();

  ConditionDueTo(const ConditionDueTo& from);

  inline ConditionDueTo& operator=(const ConditionDueTo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConditionDueTo(ConditionDueTo&& from) noexcept
    : ConditionDueTo() {
    *this = ::std::move(from);
  }

  inline ConditionDueTo& operator=(ConditionDueTo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConditionDueTo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConditionDueTo* internal_default_instance() {
    return reinterpret_cast<const ConditionDueTo*>(
               &_ConditionDueTo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  void Swap(ConditionDueTo* other);
  friend void swap(ConditionDueTo& a, ConditionDueTo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConditionDueTo* New() const final {
    return CreateMaybeMessage<ConditionDueTo>(NULL);
  }

  ConditionDueTo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConditionDueTo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConditionDueTo& from);
  void MergeFrom(const ConditionDueTo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionDueTo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConditionDueTo_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.ConditionDueTo.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::ConditionDueTo_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::ConditionDueTo_Value& value() const;
  ::google::fhir::stu3::proto::ConditionDueTo_Value* release_value();
  ::google::fhir::stu3::proto::ConditionDueTo_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::ConditionDueTo_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ConditionDueTo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::ConditionDueTo_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConditionOccurredFollowing_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ConditionOccurredFollowing.Value) */ {
 public:
  ConditionOccurredFollowing_Value();
  virtual ~ConditionOccurredFollowing_Value();

  ConditionOccurredFollowing_Value(const ConditionOccurredFollowing_Value& from);

  inline ConditionOccurredFollowing_Value& operator=(const ConditionOccurredFollowing_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConditionOccurredFollowing_Value(ConditionOccurredFollowing_Value&& from) noexcept
    : ConditionOccurredFollowing_Value() {
    *this = ::std::move(from);
  }

  inline ConditionOccurredFollowing_Value& operator=(ConditionOccurredFollowing_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConditionOccurredFollowing_Value& default_instance();

  enum ValueCase {
    kCodeableConcept = 1,
    kReference = 2,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConditionOccurredFollowing_Value* internal_default_instance() {
    return reinterpret_cast<const ConditionOccurredFollowing_Value*>(
               &_ConditionOccurredFollowing_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  void Swap(ConditionOccurredFollowing_Value* other);
  friend void swap(ConditionOccurredFollowing_Value& a, ConditionOccurredFollowing_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConditionOccurredFollowing_Value* New() const final {
    return CreateMaybeMessage<ConditionOccurredFollowing_Value>(NULL);
  }

  ConditionOccurredFollowing_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConditionOccurredFollowing_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConditionOccurredFollowing_Value& from);
  void MergeFrom(const ConditionOccurredFollowing_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionOccurredFollowing_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.CodeableConcept codeable_concept = 1;
  bool has_codeable_concept() const;
  void clear_codeable_concept();
  static const int kCodeableConceptFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_codeable_concept();
  void set_allocated_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* codeable_concept);

  // .google.fhir.stu3.proto.Reference reference = 2 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Condition", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Procedure", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/MedicationAdministration", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Immunization", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/MedicationStatement"];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ConditionOccurredFollowing.Value)
 private:
  void set_has_codeable_concept();
  void set_has_reference();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::CodeableConcept* codeable_concept_;
    ::google::fhir::stu3::proto::Reference* reference_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConditionOccurredFollowing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ConditionOccurredFollowing) */ {
 public:
  ConditionOccurredFollowing();
  virtual ~ConditionOccurredFollowing();

  ConditionOccurredFollowing(const ConditionOccurredFollowing& from);

  inline ConditionOccurredFollowing& operator=(const ConditionOccurredFollowing& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConditionOccurredFollowing(ConditionOccurredFollowing&& from) noexcept
    : ConditionOccurredFollowing() {
    *this = ::std::move(from);
  }

  inline ConditionOccurredFollowing& operator=(ConditionOccurredFollowing&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConditionOccurredFollowing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConditionOccurredFollowing* internal_default_instance() {
    return reinterpret_cast<const ConditionOccurredFollowing*>(
               &_ConditionOccurredFollowing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  void Swap(ConditionOccurredFollowing* other);
  friend void swap(ConditionOccurredFollowing& a, ConditionOccurredFollowing& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConditionOccurredFollowing* New() const final {
    return CreateMaybeMessage<ConditionOccurredFollowing>(NULL);
  }

  ConditionOccurredFollowing* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConditionOccurredFollowing>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConditionOccurredFollowing& from);
  void MergeFrom(const ConditionOccurredFollowing& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionOccurredFollowing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConditionOccurredFollowing_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.ConditionOccurredFollowing.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::ConditionOccurredFollowing_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::ConditionOccurredFollowing_Value& value() const;
  ::google::fhir::stu3::proto::ConditionOccurredFollowing_Value* release_value();
  ::google::fhir::stu3::proto::ConditionOccurredFollowing_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::ConditionOccurredFollowing_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ConditionOccurredFollowing)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::ConditionOccurredFollowing_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConditionOutcome : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ConditionOutcome) */ {
 public:
  ConditionOutcome();
  virtual ~ConditionOutcome();

  ConditionOutcome(const ConditionOutcome& from);

  inline ConditionOutcome& operator=(const ConditionOutcome& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConditionOutcome(ConditionOutcome&& from) noexcept
    : ConditionOutcome() {
    *this = ::std::move(from);
  }

  inline ConditionOutcome& operator=(ConditionOutcome&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConditionOutcome& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConditionOutcome* internal_default_instance() {
    return reinterpret_cast<const ConditionOutcome*>(
               &_ConditionOutcome_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  void Swap(ConditionOutcome* other);
  friend void swap(ConditionOutcome& a, ConditionOutcome& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConditionOutcome* New() const final {
    return CreateMaybeMessage<ConditionOutcome>(NULL);
  }

  ConditionOutcome* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConditionOutcome>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConditionOutcome& from);
  void MergeFrom(const ConditionOutcome& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionOutcome* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ConditionOutcome)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConditionPartOf_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ConditionPartOf.Value) */ {
 public:
  ConditionPartOf_Value();
  virtual ~ConditionPartOf_Value();

  ConditionPartOf_Value(const ConditionPartOf_Value& from);

  inline ConditionPartOf_Value& operator=(const ConditionPartOf_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConditionPartOf_Value(ConditionPartOf_Value&& from) noexcept
    : ConditionPartOf_Value() {
    *this = ::std::move(from);
  }

  inline ConditionPartOf_Value& operator=(ConditionPartOf_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConditionPartOf_Value& default_instance();

  enum ValueCase {
    kReference = 1,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConditionPartOf_Value* internal_default_instance() {
    return reinterpret_cast<const ConditionPartOf_Value*>(
               &_ConditionPartOf_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  void Swap(ConditionPartOf_Value* other);
  friend void swap(ConditionPartOf_Value& a, ConditionPartOf_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConditionPartOf_Value* New() const final {
    return CreateMaybeMessage<ConditionPartOf_Value>(NULL);
  }

  ConditionPartOf_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConditionPartOf_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConditionPartOf_Value& from);
  void MergeFrom(const ConditionPartOf_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionPartOf_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Observation", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Procedure", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Condition"];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ConditionPartOf.Value)
 private:
  void set_has_reference();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::Reference* reference_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConditionPartOf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ConditionPartOf) */ {
 public:
  ConditionPartOf();
  virtual ~ConditionPartOf();

  ConditionPartOf(const ConditionPartOf& from);

  inline ConditionPartOf& operator=(const ConditionPartOf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConditionPartOf(ConditionPartOf&& from) noexcept
    : ConditionPartOf() {
    *this = ::std::move(from);
  }

  inline ConditionPartOf& operator=(ConditionPartOf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConditionPartOf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConditionPartOf* internal_default_instance() {
    return reinterpret_cast<const ConditionPartOf*>(
               &_ConditionPartOf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  void Swap(ConditionPartOf* other);
  friend void swap(ConditionPartOf& a, ConditionPartOf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConditionPartOf* New() const final {
    return CreateMaybeMessage<ConditionPartOf>(NULL);
  }

  ConditionPartOf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConditionPartOf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConditionPartOf& from);
  void MergeFrom(const ConditionPartOf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionPartOf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConditionPartOf_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.ConditionPartOf.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::ConditionPartOf_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::ConditionPartOf_Value& value() const;
  ::google::fhir::stu3::proto::ConditionPartOf_Value* release_value();
  ::google::fhir::stu3::proto::ConditionPartOf_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::ConditionPartOf_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ConditionPartOf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::ConditionPartOf_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConditionRuledOut : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ConditionRuledOut) */ {
 public:
  ConditionRuledOut();
  virtual ~ConditionRuledOut();

  ConditionRuledOut(const ConditionRuledOut& from);

  inline ConditionRuledOut& operator=(const ConditionRuledOut& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConditionRuledOut(ConditionRuledOut&& from) noexcept
    : ConditionRuledOut() {
    *this = ::std::move(from);
  }

  inline ConditionRuledOut& operator=(ConditionRuledOut&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConditionRuledOut& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConditionRuledOut* internal_default_instance() {
    return reinterpret_cast<const ConditionRuledOut*>(
               &_ConditionRuledOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  void Swap(ConditionRuledOut* other);
  friend void swap(ConditionRuledOut& a, ConditionRuledOut& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConditionRuledOut* New() const final {
    return CreateMaybeMessage<ConditionRuledOut>(NULL);
  }

  ConditionRuledOut* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConditionRuledOut>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConditionRuledOut& from);
  void MergeFrom(const ConditionRuledOut& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionRuledOut* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Condition"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ConditionRuledOut)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConditionTargetBodySite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ConditionTargetBodySite) */ {
 public:
  ConditionTargetBodySite();
  virtual ~ConditionTargetBodySite();

  ConditionTargetBodySite(const ConditionTargetBodySite& from);

  inline ConditionTargetBodySite& operator=(const ConditionTargetBodySite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConditionTargetBodySite(ConditionTargetBodySite&& from) noexcept
    : ConditionTargetBodySite() {
    *this = ::std::move(from);
  }

  inline ConditionTargetBodySite& operator=(ConditionTargetBodySite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConditionTargetBodySite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConditionTargetBodySite* internal_default_instance() {
    return reinterpret_cast<const ConditionTargetBodySite*>(
               &_ConditionTargetBodySite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  void Swap(ConditionTargetBodySite* other);
  friend void swap(ConditionTargetBodySite& a, ConditionTargetBodySite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConditionTargetBodySite* New() const final {
    return CreateMaybeMessage<ConditionTargetBodySite>(NULL);
  }

  ConditionTargetBodySite* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConditionTargetBodySite>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConditionTargetBodySite& from);
  void MergeFrom(const ConditionTargetBodySite& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConditionTargetBodySite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/BodySite"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ConditionTargetBodySite)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConsentLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ConsentLocation) */ {
 public:
  ConsentLocation();
  virtual ~ConsentLocation();

  ConsentLocation(const ConsentLocation& from);

  inline ConsentLocation& operator=(const ConsentLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConsentLocation(ConsentLocation&& from) noexcept
    : ConsentLocation() {
    *this = ::std::move(from);
  }

  inline ConsentLocation& operator=(ConsentLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsentLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsentLocation* internal_default_instance() {
    return reinterpret_cast<const ConsentLocation*>(
               &_ConsentLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  void Swap(ConsentLocation* other);
  friend void swap(ConsentLocation& a, ConsentLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsentLocation* New() const final {
    return CreateMaybeMessage<ConsentLocation>(NULL);
  }

  ConsentLocation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConsentLocation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConsentLocation& from);
  void MergeFrom(const ConsentLocation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsentLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Location"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ConsentLocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConsentNotificationEndpoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ConsentNotificationEndpoint) */ {
 public:
  ConsentNotificationEndpoint();
  virtual ~ConsentNotificationEndpoint();

  ConsentNotificationEndpoint(const ConsentNotificationEndpoint& from);

  inline ConsentNotificationEndpoint& operator=(const ConsentNotificationEndpoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConsentNotificationEndpoint(ConsentNotificationEndpoint&& from) noexcept
    : ConsentNotificationEndpoint() {
    *this = ::std::move(from);
  }

  inline ConsentNotificationEndpoint& operator=(ConsentNotificationEndpoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsentNotificationEndpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsentNotificationEndpoint* internal_default_instance() {
    return reinterpret_cast<const ConsentNotificationEndpoint*>(
               &_ConsentNotificationEndpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  void Swap(ConsentNotificationEndpoint* other);
  friend void swap(ConsentNotificationEndpoint& a, ConsentNotificationEndpoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsentNotificationEndpoint* New() const final {
    return CreateMaybeMessage<ConsentNotificationEndpoint>(NULL);
  }

  ConsentNotificationEndpoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConsentNotificationEndpoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConsentNotificationEndpoint& from);
  void MergeFrom(const ConsentNotificationEndpoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsentNotificationEndpoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri value_uri = 3;
  bool has_value_uri() const;
  void clear_value_uri();
  static const int kValueUriFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_value_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& value_uri() const;
  ::google::fhir::stu3::proto::Uri* release_value_uri();
  ::google::fhir::stu3::proto::Uri* mutable_value_uri();
  void set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ConsentNotificationEndpoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* value_uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConsentWitness_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ConsentWitness.Value) */ {
 public:
  ConsentWitness_Value();
  virtual ~ConsentWitness_Value();

  ConsentWitness_Value(const ConsentWitness_Value& from);

  inline ConsentWitness_Value& operator=(const ConsentWitness_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConsentWitness_Value(ConsentWitness_Value&& from) noexcept
    : ConsentWitness_Value() {
    *this = ::std::move(from);
  }

  inline ConsentWitness_Value& operator=(ConsentWitness_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsentWitness_Value& default_instance();

  enum ValueCase {
    kReference = 1,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsentWitness_Value* internal_default_instance() {
    return reinterpret_cast<const ConsentWitness_Value*>(
               &_ConsentWitness_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  void Swap(ConsentWitness_Value* other);
  friend void swap(ConsentWitness_Value& a, ConsentWitness_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsentWitness_Value* New() const final {
    return CreateMaybeMessage<ConsentWitness_Value>(NULL);
  }

  ConsentWitness_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConsentWitness_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConsentWitness_Value& from);
  void MergeFrom(const ConsentWitness_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsentWitness_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Organization", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Patient", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/RelatedPerson"];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ConsentWitness.Value)
 private:
  void set_has_reference();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::Reference* reference_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConsentWitness : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ConsentWitness) */ {
 public:
  ConsentWitness();
  virtual ~ConsentWitness();

  ConsentWitness(const ConsentWitness& from);

  inline ConsentWitness& operator=(const ConsentWitness& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConsentWitness(ConsentWitness&& from) noexcept
    : ConsentWitness() {
    *this = ::std::move(from);
  }

  inline ConsentWitness& operator=(ConsentWitness&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConsentWitness& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConsentWitness* internal_default_instance() {
    return reinterpret_cast<const ConsentWitness*>(
               &_ConsentWitness_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  void Swap(ConsentWitness* other);
  friend void swap(ConsentWitness& a, ConsentWitness& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConsentWitness* New() const final {
    return CreateMaybeMessage<ConsentWitness>(NULL);
  }

  ConsentWitness* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConsentWitness>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConsentWitness& from);
  void MergeFrom(const ConsentWitness& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsentWitness* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConsentWitness_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.ConsentWitness.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::ConsentWitness_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::ConsentWitness_Value& value() const;
  ::google::fhir::stu3::proto::ConsentWitness_Value* release_value();
  ::google::fhir::stu3::proto::ConsentWitness_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::ConsentWitness_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ConsentWitness)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::ConsentWitness_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CalculatedValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CalculatedValue) */ {
 public:
  CalculatedValue();
  virtual ~CalculatedValue();

  CalculatedValue(const CalculatedValue& from);

  inline CalculatedValue& operator=(const CalculatedValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CalculatedValue(CalculatedValue&& from) noexcept
    : CalculatedValue() {
    *this = ::std::move(from);
  }

  inline CalculatedValue& operator=(CalculatedValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CalculatedValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CalculatedValue* internal_default_instance() {
    return reinterpret_cast<const CalculatedValue*>(
               &_CalculatedValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  void Swap(CalculatedValue* other);
  friend void swap(CalculatedValue& a, CalculatedValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CalculatedValue* New() const final {
    return CreateMaybeMessage<CalculatedValue>(NULL);
  }

  CalculatedValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CalculatedValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CalculatedValue& from);
  void MergeFrom(const CalculatedValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalculatedValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CalculatedValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AttachmentCitation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AttachmentCitation) */ {
 public:
  AttachmentCitation();
  virtual ~AttachmentCitation();

  AttachmentCitation(const AttachmentCitation& from);

  inline AttachmentCitation& operator=(const AttachmentCitation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AttachmentCitation(AttachmentCitation&& from) noexcept
    : AttachmentCitation() {
    *this = ::std::move(from);
  }

  inline AttachmentCitation& operator=(AttachmentCitation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttachmentCitation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttachmentCitation* internal_default_instance() {
    return reinterpret_cast<const AttachmentCitation*>(
               &_AttachmentCitation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  void Swap(AttachmentCitation* other);
  friend void swap(AttachmentCitation& a, AttachmentCitation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AttachmentCitation* New() const final {
    return CreateMaybeMessage<AttachmentCitation>(NULL);
  }

  AttachmentCitation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AttachmentCitation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AttachmentCitation& from);
  void MergeFrom(const AttachmentCitation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttachmentCitation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AttachmentCitation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CqifCondition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CqifCondition) */ {
 public:
  CqifCondition();
  virtual ~CqifCondition();

  CqifCondition(const CqifCondition& from);

  inline CqifCondition& operator=(const CqifCondition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CqifCondition(CqifCondition&& from) noexcept
    : CqifCondition() {
    *this = ::std::move(from);
  }

  inline CqifCondition& operator=(CqifCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CqifCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CqifCondition* internal_default_instance() {
    return reinterpret_cast<const CqifCondition*>(
               &_CqifCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  void Swap(CqifCondition* other);
  friend void swap(CqifCondition& a, CqifCondition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CqifCondition* New() const final {
    return CreateMaybeMessage<CqifCondition>(NULL);
  }

  CqifCondition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CqifCondition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CqifCondition& from);
  void MergeFrom(const CqifCondition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CqifCondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CqifCondition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CqlExpression : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CqlExpression) */ {
 public:
  CqlExpression();
  virtual ~CqlExpression();

  CqlExpression(const CqlExpression& from);

  inline CqlExpression& operator=(const CqlExpression& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CqlExpression(CqlExpression&& from) noexcept
    : CqlExpression() {
    *this = ::std::move(from);
  }

  inline CqlExpression& operator=(CqlExpression&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CqlExpression& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CqlExpression* internal_default_instance() {
    return reinterpret_cast<const CqlExpression*>(
               &_CqlExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  void Swap(CqlExpression* other);
  friend void swap(CqlExpression& a, CqlExpression& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CqlExpression* New() const final {
    return CreateMaybeMessage<CqlExpression>(NULL);
  }

  CqlExpression* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CqlExpression>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CqlExpression& from);
  void MergeFrom(const CqlExpression& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CqlExpression* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CqlExpression)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FhirPathExpression : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.FhirPathExpression) */ {
 public:
  FhirPathExpression();
  virtual ~FhirPathExpression();

  FhirPathExpression(const FhirPathExpression& from);

  inline FhirPathExpression& operator=(const FhirPathExpression& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FhirPathExpression(FhirPathExpression&& from) noexcept
    : FhirPathExpression() {
    *this = ::std::move(from);
  }

  inline FhirPathExpression& operator=(FhirPathExpression&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FhirPathExpression& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FhirPathExpression* internal_default_instance() {
    return reinterpret_cast<const FhirPathExpression*>(
               &_FhirPathExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  void Swap(FhirPathExpression* other);
  friend void swap(FhirPathExpression& a, FhirPathExpression& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FhirPathExpression* New() const final {
    return CreateMaybeMessage<FhirPathExpression>(NULL);
  }

  FhirPathExpression* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FhirPathExpression>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FhirPathExpression& from);
  void MergeFrom(const FhirPathExpression& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FhirPathExpression* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.FhirPathExpression)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BasicEncounterClass : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.BasicEncounterClass) */ {
 public:
  BasicEncounterClass();
  virtual ~BasicEncounterClass();

  BasicEncounterClass(const BasicEncounterClass& from);

  inline BasicEncounterClass& operator=(const BasicEncounterClass& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasicEncounterClass(BasicEncounterClass&& from) noexcept
    : BasicEncounterClass() {
    *this = ::std::move(from);
  }

  inline BasicEncounterClass& operator=(BasicEncounterClass&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicEncounterClass& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicEncounterClass* internal_default_instance() {
    return reinterpret_cast<const BasicEncounterClass*>(
               &_BasicEncounterClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  void Swap(BasicEncounterClass* other);
  friend void swap(BasicEncounterClass& a, BasicEncounterClass& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasicEncounterClass* New() const final {
    return CreateMaybeMessage<BasicEncounterClass>(NULL);
  }

  BasicEncounterClass* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BasicEncounterClass>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BasicEncounterClass& from);
  void MergeFrom(const BasicEncounterClass& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicEncounterClass* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.BasicEncounterClass)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BasicEncounterType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.BasicEncounterType) */ {
 public:
  BasicEncounterType();
  virtual ~BasicEncounterType();

  BasicEncounterType(const BasicEncounterType& from);

  inline BasicEncounterType& operator=(const BasicEncounterType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasicEncounterType(BasicEncounterType&& from) noexcept
    : BasicEncounterType() {
    *this = ::std::move(from);
  }

  inline BasicEncounterType& operator=(BasicEncounterType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicEncounterType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicEncounterType* internal_default_instance() {
    return reinterpret_cast<const BasicEncounterType*>(
               &_BasicEncounterType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  void Swap(BasicEncounterType* other);
  friend void swap(BasicEncounterType& a, BasicEncounterType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasicEncounterType* New() const final {
    return CreateMaybeMessage<BasicEncounterType>(NULL);
  }

  BasicEncounterType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BasicEncounterType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BasicEncounterType& from);
  void MergeFrom(const BasicEncounterType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicEncounterType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.BasicEncounterType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BasicInitiatingOrganization : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.BasicInitiatingOrganization) */ {
 public:
  BasicInitiatingOrganization();
  virtual ~BasicInitiatingOrganization();

  BasicInitiatingOrganization(const BasicInitiatingOrganization& from);

  inline BasicInitiatingOrganization& operator=(const BasicInitiatingOrganization& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasicInitiatingOrganization(BasicInitiatingOrganization&& from) noexcept
    : BasicInitiatingOrganization() {
    *this = ::std::move(from);
  }

  inline BasicInitiatingOrganization& operator=(BasicInitiatingOrganization&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicInitiatingOrganization& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicInitiatingOrganization* internal_default_instance() {
    return reinterpret_cast<const BasicInitiatingOrganization*>(
               &_BasicInitiatingOrganization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  void Swap(BasicInitiatingOrganization* other);
  friend void swap(BasicInitiatingOrganization& a, BasicInitiatingOrganization& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasicInitiatingOrganization* New() const final {
    return CreateMaybeMessage<BasicInitiatingOrganization>(NULL);
  }

  BasicInitiatingOrganization* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BasicInitiatingOrganization>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BasicInitiatingOrganization& from);
  void MergeFrom(const BasicInitiatingOrganization& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicInitiatingOrganization* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Organization"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.BasicInitiatingOrganization)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BasicInitiatingPerson_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.BasicInitiatingPerson.Value) */ {
 public:
  BasicInitiatingPerson_Value();
  virtual ~BasicInitiatingPerson_Value();

  BasicInitiatingPerson_Value(const BasicInitiatingPerson_Value& from);

  inline BasicInitiatingPerson_Value& operator=(const BasicInitiatingPerson_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasicInitiatingPerson_Value(BasicInitiatingPerson_Value&& from) noexcept
    : BasicInitiatingPerson_Value() {
    *this = ::std::move(from);
  }

  inline BasicInitiatingPerson_Value& operator=(BasicInitiatingPerson_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicInitiatingPerson_Value& default_instance();

  enum ValueCase {
    kReference = 1,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicInitiatingPerson_Value* internal_default_instance() {
    return reinterpret_cast<const BasicInitiatingPerson_Value*>(
               &_BasicInitiatingPerson_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  void Swap(BasicInitiatingPerson_Value* other);
  friend void swap(BasicInitiatingPerson_Value& a, BasicInitiatingPerson_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasicInitiatingPerson_Value* New() const final {
    return CreateMaybeMessage<BasicInitiatingPerson_Value>(NULL);
  }

  BasicInitiatingPerson_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BasicInitiatingPerson_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BasicInitiatingPerson_Value& from);
  void MergeFrom(const BasicInitiatingPerson_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicInitiatingPerson_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Person", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Patient", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/RelatedPerson"];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.BasicInitiatingPerson.Value)
 private:
  void set_has_reference();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::Reference* reference_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BasicInitiatingPerson : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.BasicInitiatingPerson) */ {
 public:
  BasicInitiatingPerson();
  virtual ~BasicInitiatingPerson();

  BasicInitiatingPerson(const BasicInitiatingPerson& from);

  inline BasicInitiatingPerson& operator=(const BasicInitiatingPerson& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasicInitiatingPerson(BasicInitiatingPerson&& from) noexcept
    : BasicInitiatingPerson() {
    *this = ::std::move(from);
  }

  inline BasicInitiatingPerson& operator=(BasicInitiatingPerson&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicInitiatingPerson& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicInitiatingPerson* internal_default_instance() {
    return reinterpret_cast<const BasicInitiatingPerson*>(
               &_BasicInitiatingPerson_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  void Swap(BasicInitiatingPerson* other);
  friend void swap(BasicInitiatingPerson& a, BasicInitiatingPerson& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasicInitiatingPerson* New() const final {
    return CreateMaybeMessage<BasicInitiatingPerson>(NULL);
  }

  BasicInitiatingPerson* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BasicInitiatingPerson>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BasicInitiatingPerson& from);
  void MergeFrom(const BasicInitiatingPerson& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicInitiatingPerson* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BasicInitiatingPerson_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.BasicInitiatingPerson.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::BasicInitiatingPerson_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::BasicInitiatingPerson_Value& value() const;
  ::google::fhir::stu3::proto::BasicInitiatingPerson_Value* release_value();
  ::google::fhir::stu3::proto::BasicInitiatingPerson_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::BasicInitiatingPerson_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.BasicInitiatingPerson)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::BasicInitiatingPerson_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BasicReceivingOrganization : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.BasicReceivingOrganization) */ {
 public:
  BasicReceivingOrganization();
  virtual ~BasicReceivingOrganization();

  BasicReceivingOrganization(const BasicReceivingOrganization& from);

  inline BasicReceivingOrganization& operator=(const BasicReceivingOrganization& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasicReceivingOrganization(BasicReceivingOrganization&& from) noexcept
    : BasicReceivingOrganization() {
    *this = ::std::move(from);
  }

  inline BasicReceivingOrganization& operator=(BasicReceivingOrganization&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicReceivingOrganization& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicReceivingOrganization* internal_default_instance() {
    return reinterpret_cast<const BasicReceivingOrganization*>(
               &_BasicReceivingOrganization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  void Swap(BasicReceivingOrganization* other);
  friend void swap(BasicReceivingOrganization& a, BasicReceivingOrganization& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasicReceivingOrganization* New() const final {
    return CreateMaybeMessage<BasicReceivingOrganization>(NULL);
  }

  BasicReceivingOrganization* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BasicReceivingOrganization>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BasicReceivingOrganization& from);
  void MergeFrom(const BasicReceivingOrganization& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicReceivingOrganization* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Organization"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.BasicReceivingOrganization)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BasicReceivingPerson_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.BasicReceivingPerson.Value) */ {
 public:
  BasicReceivingPerson_Value();
  virtual ~BasicReceivingPerson_Value();

  BasicReceivingPerson_Value(const BasicReceivingPerson_Value& from);

  inline BasicReceivingPerson_Value& operator=(const BasicReceivingPerson_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasicReceivingPerson_Value(BasicReceivingPerson_Value&& from) noexcept
    : BasicReceivingPerson_Value() {
    *this = ::std::move(from);
  }

  inline BasicReceivingPerson_Value& operator=(BasicReceivingPerson_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicReceivingPerson_Value& default_instance();

  enum ValueCase {
    kReference = 1,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicReceivingPerson_Value* internal_default_instance() {
    return reinterpret_cast<const BasicReceivingPerson_Value*>(
               &_BasicReceivingPerson_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  void Swap(BasicReceivingPerson_Value* other);
  friend void swap(BasicReceivingPerson_Value& a, BasicReceivingPerson_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasicReceivingPerson_Value* New() const final {
    return CreateMaybeMessage<BasicReceivingPerson_Value>(NULL);
  }

  BasicReceivingPerson_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BasicReceivingPerson_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BasicReceivingPerson_Value& from);
  void MergeFrom(const BasicReceivingPerson_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicReceivingPerson_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Person", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Patient", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/RelatedPerson"];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.BasicReceivingPerson.Value)
 private:
  void set_has_reference();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::Reference* reference_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BasicReceivingPerson : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.BasicReceivingPerson) */ {
 public:
  BasicReceivingPerson();
  virtual ~BasicReceivingPerson();

  BasicReceivingPerson(const BasicReceivingPerson& from);

  inline BasicReceivingPerson& operator=(const BasicReceivingPerson& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasicReceivingPerson(BasicReceivingPerson&& from) noexcept
    : BasicReceivingPerson() {
    *this = ::std::move(from);
  }

  inline BasicReceivingPerson& operator=(BasicReceivingPerson&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicReceivingPerson& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicReceivingPerson* internal_default_instance() {
    return reinterpret_cast<const BasicReceivingPerson*>(
               &_BasicReceivingPerson_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  void Swap(BasicReceivingPerson* other);
  friend void swap(BasicReceivingPerson& a, BasicReceivingPerson& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasicReceivingPerson* New() const final {
    return CreateMaybeMessage<BasicReceivingPerson>(NULL);
  }

  BasicReceivingPerson* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BasicReceivingPerson>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BasicReceivingPerson& from);
  void MergeFrom(const BasicReceivingPerson& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicReceivingPerson* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BasicReceivingPerson_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.BasicReceivingPerson.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::BasicReceivingPerson_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::BasicReceivingPerson_Value& value() const;
  ::google::fhir::stu3::proto::BasicReceivingPerson_Value* release_value();
  ::google::fhir::stu3::proto::BasicReceivingPerson_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::BasicReceivingPerson_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.BasicReceivingPerson)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::BasicReceivingPerson_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BasicRecipientLanguage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.BasicRecipientLanguage) */ {
 public:
  BasicRecipientLanguage();
  virtual ~BasicRecipientLanguage();

  BasicRecipientLanguage(const BasicRecipientLanguage& from);

  inline BasicRecipientLanguage& operator=(const BasicRecipientLanguage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasicRecipientLanguage(BasicRecipientLanguage&& from) noexcept
    : BasicRecipientLanguage() {
    *this = ::std::move(from);
  }

  inline BasicRecipientLanguage& operator=(BasicRecipientLanguage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicRecipientLanguage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicRecipientLanguage* internal_default_instance() {
    return reinterpret_cast<const BasicRecipientLanguage*>(
               &_BasicRecipientLanguage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  void Swap(BasicRecipientLanguage* other);
  friend void swap(BasicRecipientLanguage& a, BasicRecipientLanguage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasicRecipientLanguage* New() const final {
    return CreateMaybeMessage<BasicRecipientLanguage>(NULL);
  }

  BasicRecipientLanguage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BasicRecipientLanguage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BasicRecipientLanguage& from);
  void MergeFrom(const BasicRecipientLanguage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicRecipientLanguage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.BasicRecipientLanguage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BasicRecipientType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.BasicRecipientType) */ {
 public:
  BasicRecipientType();
  virtual ~BasicRecipientType();

  BasicRecipientType(const BasicRecipientType& from);

  inline BasicRecipientType& operator=(const BasicRecipientType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasicRecipientType(BasicRecipientType&& from) noexcept
    : BasicRecipientType() {
    *this = ::std::move(from);
  }

  inline BasicRecipientType& operator=(BasicRecipientType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicRecipientType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicRecipientType* internal_default_instance() {
    return reinterpret_cast<const BasicRecipientType*>(
               &_BasicRecipientType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  void Swap(BasicRecipientType* other);
  friend void swap(BasicRecipientType& a, BasicRecipientType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasicRecipientType* New() const final {
    return CreateMaybeMessage<BasicRecipientType>(NULL);
  }

  BasicRecipientType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BasicRecipientType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BasicRecipientType& from);
  void MergeFrom(const BasicRecipientType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicRecipientType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.BasicRecipientType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BasicSystemUserLanguage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.BasicSystemUserLanguage) */ {
 public:
  BasicSystemUserLanguage();
  virtual ~BasicSystemUserLanguage();

  BasicSystemUserLanguage(const BasicSystemUserLanguage& from);

  inline BasicSystemUserLanguage& operator=(const BasicSystemUserLanguage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasicSystemUserLanguage(BasicSystemUserLanguage&& from) noexcept
    : BasicSystemUserLanguage() {
    *this = ::std::move(from);
  }

  inline BasicSystemUserLanguage& operator=(BasicSystemUserLanguage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicSystemUserLanguage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicSystemUserLanguage* internal_default_instance() {
    return reinterpret_cast<const BasicSystemUserLanguage*>(
               &_BasicSystemUserLanguage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  void Swap(BasicSystemUserLanguage* other);
  friend void swap(BasicSystemUserLanguage& a, BasicSystemUserLanguage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasicSystemUserLanguage* New() const final {
    return CreateMaybeMessage<BasicSystemUserLanguage>(NULL);
  }

  BasicSystemUserLanguage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BasicSystemUserLanguage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BasicSystemUserLanguage& from);
  void MergeFrom(const BasicSystemUserLanguage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicSystemUserLanguage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.BasicSystemUserLanguage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BasicSystemUserTaskContext : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.BasicSystemUserTaskContext) */ {
 public:
  BasicSystemUserTaskContext();
  virtual ~BasicSystemUserTaskContext();

  BasicSystemUserTaskContext(const BasicSystemUserTaskContext& from);

  inline BasicSystemUserTaskContext& operator=(const BasicSystemUserTaskContext& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasicSystemUserTaskContext(BasicSystemUserTaskContext&& from) noexcept
    : BasicSystemUserTaskContext() {
    *this = ::std::move(from);
  }

  inline BasicSystemUserTaskContext& operator=(BasicSystemUserTaskContext&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicSystemUserTaskContext& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicSystemUserTaskContext* internal_default_instance() {
    return reinterpret_cast<const BasicSystemUserTaskContext*>(
               &_BasicSystemUserTaskContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  void Swap(BasicSystemUserTaskContext* other);
  friend void swap(BasicSystemUserTaskContext& a, BasicSystemUserTaskContext& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasicSystemUserTaskContext* New() const final {
    return CreateMaybeMessage<BasicSystemUserTaskContext>(NULL);
  }

  BasicSystemUserTaskContext* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BasicSystemUserTaskContext>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BasicSystemUserTaskContext& from);
  void MergeFrom(const BasicSystemUserTaskContext& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicSystemUserTaskContext* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.BasicSystemUserTaskContext)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BasicSystemUserType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.BasicSystemUserType) */ {
 public:
  BasicSystemUserType();
  virtual ~BasicSystemUserType();

  BasicSystemUserType(const BasicSystemUserType& from);

  inline BasicSystemUserType& operator=(const BasicSystemUserType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BasicSystemUserType(BasicSystemUserType&& from) noexcept
    : BasicSystemUserType() {
    *this = ::std::move(from);
  }

  inline BasicSystemUserType& operator=(BasicSystemUserType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BasicSystemUserType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicSystemUserType* internal_default_instance() {
    return reinterpret_cast<const BasicSystemUserType*>(
               &_BasicSystemUserType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  void Swap(BasicSystemUserType* other);
  friend void swap(BasicSystemUserType& a, BasicSystemUserType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BasicSystemUserType* New() const final {
    return CreateMaybeMessage<BasicSystemUserType>(NULL);
  }

  BasicSystemUserType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BasicSystemUserType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BasicSystemUserType& from);
  void MergeFrom(const BasicSystemUserType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicSystemUserType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.BasicSystemUserType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InitialValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.InitialValue) */ {
 public:
  InitialValue();
  virtual ~InitialValue();

  InitialValue(const InitialValue& from);

  inline InitialValue& operator=(const InitialValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InitialValue(InitialValue&& from) noexcept
    : InitialValue() {
    *this = ::std::move(from);
  }

  inline InitialValue& operator=(InitialValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InitialValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitialValue* internal_default_instance() {
    return reinterpret_cast<const InitialValue*>(
               &_InitialValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  void Swap(InitialValue* other);
  friend void swap(InitialValue& a, InitialValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InitialValue* New() const final {
    return CreateMaybeMessage<InitialValue>(NULL);
  }

  InitialValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InitialValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InitialValue& from);
  void MergeFrom(const InitialValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitialValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.InitialValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CqifLibrary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CqifLibrary) */ {
 public:
  CqifLibrary();
  virtual ~CqifLibrary();

  CqifLibrary(const CqifLibrary& from);

  inline CqifLibrary& operator=(const CqifLibrary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CqifLibrary(CqifLibrary&& from) noexcept
    : CqifLibrary() {
    *this = ::std::move(from);
  }

  inline CqifLibrary& operator=(CqifLibrary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CqifLibrary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CqifLibrary* internal_default_instance() {
    return reinterpret_cast<const CqifLibrary*>(
               &_CqifLibrary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  void Swap(CqifLibrary* other);
  friend void swap(CqifLibrary& a, CqifLibrary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CqifLibrary* New() const final {
    return CreateMaybeMessage<CqifLibrary>(NULL);
  }

  CqifLibrary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CqifLibrary>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CqifLibrary& from);
  void MergeFrom(const CqifLibrary& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CqifLibrary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Library"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CqifLibrary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MeasureInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.MeasureInfo) */ {
 public:
  MeasureInfo();
  virtual ~MeasureInfo();

  MeasureInfo(const MeasureInfo& from);

  inline MeasureInfo& operator=(const MeasureInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MeasureInfo(MeasureInfo&& from) noexcept
    : MeasureInfo() {
    *this = ::std::move(from);
  }

  inline MeasureInfo& operator=(MeasureInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MeasureInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeasureInfo* internal_default_instance() {
    return reinterpret_cast<const MeasureInfo*>(
               &_MeasureInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  void Swap(MeasureInfo* other);
  friend void swap(MeasureInfo& a, MeasureInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MeasureInfo* New() const final {
    return CreateMaybeMessage<MeasureInfo>(NULL);
  }

  MeasureInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MeasureInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MeasureInfo& from);
  void MergeFrom(const MeasureInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeasureInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference measure = 4;
  bool has_measure() const;
  void clear_measure();
  static const int kMeasureFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_measure() const;
  public:
  const ::google::fhir::stu3::proto::Reference& measure() const;
  ::google::fhir::stu3::proto::Reference* release_measure();
  ::google::fhir::stu3::proto::Reference* mutable_measure();
  void set_allocated_measure(::google::fhir::stu3::proto::Reference* measure);

  // .google.fhir.stu3.proto.Identifier group_identifier = 5;
  bool has_group_identifier() const;
  void clear_group_identifier();
  static const int kGroupIdentifierFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Identifier& _internal_group_identifier() const;
  public:
  const ::google::fhir::stu3::proto::Identifier& group_identifier() const;
  ::google::fhir::stu3::proto::Identifier* release_group_identifier();
  ::google::fhir::stu3::proto::Identifier* mutable_group_identifier();
  void set_allocated_group_identifier(::google::fhir::stu3::proto::Identifier* group_identifier);

  // .google.fhir.stu3.proto.Identifier population_identifier = 6;
  bool has_population_identifier() const;
  void clear_population_identifier();
  static const int kPopulationIdentifierFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::Identifier& _internal_population_identifier() const;
  public:
  const ::google::fhir::stu3::proto::Identifier& population_identifier() const;
  ::google::fhir::stu3::proto::Identifier* release_population_identifier();
  ::google::fhir::stu3::proto::Identifier* mutable_population_identifier();
  void set_allocated_population_identifier(::google::fhir::stu3::proto::Identifier* population_identifier);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.MeasureInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* measure_;
  ::google::fhir::stu3::proto::Identifier* group_identifier_;
  ::google::fhir::stu3::proto::Identifier* population_identifier_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireOptionCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireOptionCode) */ {
 public:
  QuestionnaireOptionCode();
  virtual ~QuestionnaireOptionCode();

  QuestionnaireOptionCode(const QuestionnaireOptionCode& from);

  inline QuestionnaireOptionCode& operator=(const QuestionnaireOptionCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireOptionCode(QuestionnaireOptionCode&& from) noexcept
    : QuestionnaireOptionCode() {
    *this = ::std::move(from);
  }

  inline QuestionnaireOptionCode& operator=(QuestionnaireOptionCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireOptionCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireOptionCode* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireOptionCode*>(
               &_QuestionnaireOptionCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  void Swap(QuestionnaireOptionCode* other);
  friend void swap(QuestionnaireOptionCode& a, QuestionnaireOptionCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireOptionCode* New() const final {
    return CreateMaybeMessage<QuestionnaireOptionCode>(NULL);
  }

  QuestionnaireOptionCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireOptionCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireOptionCode& from);
  void MergeFrom(const QuestionnaireOptionCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireOptionCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireOptionCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AttachmentQualityOfEvidence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AttachmentQualityOfEvidence) */ {
 public:
  AttachmentQualityOfEvidence();
  virtual ~AttachmentQualityOfEvidence();

  AttachmentQualityOfEvidence(const AttachmentQualityOfEvidence& from);

  inline AttachmentQualityOfEvidence& operator=(const AttachmentQualityOfEvidence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AttachmentQualityOfEvidence(AttachmentQualityOfEvidence&& from) noexcept
    : AttachmentQualityOfEvidence() {
    *this = ::std::move(from);
  }

  inline AttachmentQualityOfEvidence& operator=(AttachmentQualityOfEvidence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttachmentQualityOfEvidence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttachmentQualityOfEvidence* internal_default_instance() {
    return reinterpret_cast<const AttachmentQualityOfEvidence*>(
               &_AttachmentQualityOfEvidence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  void Swap(AttachmentQualityOfEvidence* other);
  friend void swap(AttachmentQualityOfEvidence& a, AttachmentQualityOfEvidence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AttachmentQualityOfEvidence* New() const final {
    return CreateMaybeMessage<AttachmentQualityOfEvidence>(NULL);
  }

  AttachmentQualityOfEvidence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AttachmentQualityOfEvidence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AttachmentQualityOfEvidence& from);
  void MergeFrom(const AttachmentQualityOfEvidence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttachmentQualityOfEvidence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AttachmentQualityOfEvidence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodingSourceValueSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodingSourceValueSet) */ {
 public:
  CodingSourceValueSet();
  virtual ~CodingSourceValueSet();

  CodingSourceValueSet(const CodingSourceValueSet& from);

  inline CodingSourceValueSet& operator=(const CodingSourceValueSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodingSourceValueSet(CodingSourceValueSet&& from) noexcept
    : CodingSourceValueSet() {
    *this = ::std::move(from);
  }

  inline CodingSourceValueSet& operator=(CodingSourceValueSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodingSourceValueSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodingSourceValueSet* internal_default_instance() {
    return reinterpret_cast<const CodingSourceValueSet*>(
               &_CodingSourceValueSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  void Swap(CodingSourceValueSet* other);
  friend void swap(CodingSourceValueSet& a, CodingSourceValueSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodingSourceValueSet* New() const final {
    return CreateMaybeMessage<CodingSourceValueSet>(NULL);
  }

  CodingSourceValueSet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodingSourceValueSet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodingSourceValueSet& from);
  void MergeFrom(const CodingSourceValueSet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodingSourceValueSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri value_uri = 3;
  bool has_value_uri() const;
  void clear_value_uri();
  static const int kValueUriFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_value_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& value_uri() const;
  ::google::fhir::stu3::proto::Uri* release_value_uri();
  ::google::fhir::stu3::proto::Uri* mutable_value_uri();
  void set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodingSourceValueSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* value_uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AttachmentStrengthOfRecommendation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AttachmentStrengthOfRecommendation) */ {
 public:
  AttachmentStrengthOfRecommendation();
  virtual ~AttachmentStrengthOfRecommendation();

  AttachmentStrengthOfRecommendation(const AttachmentStrengthOfRecommendation& from);

  inline AttachmentStrengthOfRecommendation& operator=(const AttachmentStrengthOfRecommendation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AttachmentStrengthOfRecommendation(AttachmentStrengthOfRecommendation&& from) noexcept
    : AttachmentStrengthOfRecommendation() {
    *this = ::std::move(from);
  }

  inline AttachmentStrengthOfRecommendation& operator=(AttachmentStrengthOfRecommendation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttachmentStrengthOfRecommendation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttachmentStrengthOfRecommendation* internal_default_instance() {
    return reinterpret_cast<const AttachmentStrengthOfRecommendation*>(
               &_AttachmentStrengthOfRecommendation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  void Swap(AttachmentStrengthOfRecommendation* other);
  friend void swap(AttachmentStrengthOfRecommendation& a, AttachmentStrengthOfRecommendation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AttachmentStrengthOfRecommendation* New() const final {
    return CreateMaybeMessage<AttachmentStrengthOfRecommendation>(NULL);
  }

  AttachmentStrengthOfRecommendation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AttachmentStrengthOfRecommendation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AttachmentStrengthOfRecommendation& from);
  void MergeFrom(const AttachmentStrengthOfRecommendation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttachmentStrengthOfRecommendation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AttachmentStrengthOfRecommendation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataAbsentReason : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DataAbsentReason) */ {
 public:
  DataAbsentReason();
  virtual ~DataAbsentReason();

  DataAbsentReason(const DataAbsentReason& from);

  inline DataAbsentReason& operator=(const DataAbsentReason& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataAbsentReason(DataAbsentReason&& from) noexcept
    : DataAbsentReason() {
    *this = ::std::move(from);
  }

  inline DataAbsentReason& operator=(DataAbsentReason&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataAbsentReason& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataAbsentReason* internal_default_instance() {
    return reinterpret_cast<const DataAbsentReason*>(
               &_DataAbsentReason_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  void Swap(DataAbsentReason* other);
  friend void swap(DataAbsentReason& a, DataAbsentReason& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataAbsentReason* New() const final {
    return CreateMaybeMessage<DataAbsentReason>(NULL);
  }

  DataAbsentReason* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataAbsentReason>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataAbsentReason& from);
  void MergeFrom(const DataAbsentReason& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataAbsentReason* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.DataAbsentReasonCode value_code = 3;
  bool has_value_code() const;
  void clear_value_code();
  static const int kValueCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::DataAbsentReasonCode& _internal_value_code() const;
  public:
  const ::google::fhir::stu3::proto::DataAbsentReasonCode& value_code() const;
  ::google::fhir::stu3::proto::DataAbsentReasonCode* release_value_code();
  ::google::fhir::stu3::proto::DataAbsentReasonCode* mutable_value_code();
  void set_allocated_value_code(::google::fhir::stu3::proto::DataAbsentReasonCode* value_code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DataAbsentReason)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::DataAbsentReasonCode* value_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StructureDefinitionDatadictionary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.StructureDefinitionDatadictionary) */ {
 public:
  StructureDefinitionDatadictionary();
  virtual ~StructureDefinitionDatadictionary();

  StructureDefinitionDatadictionary(const StructureDefinitionDatadictionary& from);

  inline StructureDefinitionDatadictionary& operator=(const StructureDefinitionDatadictionary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StructureDefinitionDatadictionary(StructureDefinitionDatadictionary&& from) noexcept
    : StructureDefinitionDatadictionary() {
    *this = ::std::move(from);
  }

  inline StructureDefinitionDatadictionary& operator=(StructureDefinitionDatadictionary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StructureDefinitionDatadictionary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StructureDefinitionDatadictionary* internal_default_instance() {
    return reinterpret_cast<const StructureDefinitionDatadictionary*>(
               &_StructureDefinitionDatadictionary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  void Swap(StructureDefinitionDatadictionary* other);
  friend void swap(StructureDefinitionDatadictionary& a, StructureDefinitionDatadictionary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StructureDefinitionDatadictionary* New() const final {
    return CreateMaybeMessage<StructureDefinitionDatadictionary>(NULL);
  }

  StructureDefinitionDatadictionary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StructureDefinitionDatadictionary>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StructureDefinitionDatadictionary& from);
  void MergeFrom(const StructureDefinitionDatadictionary& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructureDefinitionDatadictionary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.StructureDefinitionDatadictionary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceDin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DeviceDin) */ {
 public:
  DeviceDin();
  virtual ~DeviceDin();

  DeviceDin(const DeviceDin& from);

  inline DeviceDin& operator=(const DeviceDin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceDin(DeviceDin&& from) noexcept
    : DeviceDin() {
    *this = ::std::move(from);
  }

  inline DeviceDin& operator=(DeviceDin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceDin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceDin* internal_default_instance() {
    return reinterpret_cast<const DeviceDin*>(
               &_DeviceDin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  void Swap(DeviceDin* other);
  friend void swap(DeviceDin& a, DeviceDin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceDin* New() const final {
    return CreateMaybeMessage<DeviceDin>(NULL);
  }

  DeviceDin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceDin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceDin& from);
  void MergeFrom(const DeviceDin& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceDin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Identifier value_identifier = 3;
  bool has_value_identifier() const;
  void clear_value_identifier();
  static const int kValueIdentifierFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Identifier& _internal_value_identifier() const;
  public:
  const ::google::fhir::stu3::proto::Identifier& value_identifier() const;
  ::google::fhir::stu3::proto::Identifier* release_value_identifier();
  ::google::fhir::stu3::proto::Identifier* mutable_value_identifier();
  void set_allocated_value_identifier(::google::fhir::stu3::proto::Identifier* value_identifier);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DeviceDin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Identifier* value_identifier_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceImplantStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DeviceImplantStatus) */ {
 public:
  DeviceImplantStatus();
  virtual ~DeviceImplantStatus();

  DeviceImplantStatus(const DeviceImplantStatus& from);

  inline DeviceImplantStatus& operator=(const DeviceImplantStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceImplantStatus(DeviceImplantStatus&& from) noexcept
    : DeviceImplantStatus() {
    *this = ::std::move(from);
  }

  inline DeviceImplantStatus& operator=(DeviceImplantStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceImplantStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceImplantStatus* internal_default_instance() {
    return reinterpret_cast<const DeviceImplantStatus*>(
               &_DeviceImplantStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  void Swap(DeviceImplantStatus* other);
  friend void swap(DeviceImplantStatus& a, DeviceImplantStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceImplantStatus* New() const final {
    return CreateMaybeMessage<DeviceImplantStatus>(NULL);
  }

  DeviceImplantStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceImplantStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceImplantStatus& from);
  void MergeFrom(const DeviceImplantStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceImplantStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.ImplantStatusCode value_code = 3;
  bool has_value_code() const;
  void clear_value_code();
  static const int kValueCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::ImplantStatusCode& _internal_value_code() const;
  public:
  const ::google::fhir::stu3::proto::ImplantStatusCode& value_code() const;
  ::google::fhir::stu3::proto::ImplantStatusCode* release_value_code();
  ::google::fhir::stu3::proto::ImplantStatusCode* mutable_value_code();
  void set_allocated_value_code(::google::fhir::stu3::proto::ImplantStatusCode* value_code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DeviceImplantStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::ImplantStatusCode* value_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceRequestPatientInstruction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DeviceRequestPatientInstruction) */ {
 public:
  DeviceRequestPatientInstruction();
  virtual ~DeviceRequestPatientInstruction();

  DeviceRequestPatientInstruction(const DeviceRequestPatientInstruction& from);

  inline DeviceRequestPatientInstruction& operator=(const DeviceRequestPatientInstruction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceRequestPatientInstruction(DeviceRequestPatientInstruction&& from) noexcept
    : DeviceRequestPatientInstruction() {
    *this = ::std::move(from);
  }

  inline DeviceRequestPatientInstruction& operator=(DeviceRequestPatientInstruction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceRequestPatientInstruction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceRequestPatientInstruction* internal_default_instance() {
    return reinterpret_cast<const DeviceRequestPatientInstruction*>(
               &_DeviceRequestPatientInstruction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  void Swap(DeviceRequestPatientInstruction* other);
  friend void swap(DeviceRequestPatientInstruction& a, DeviceRequestPatientInstruction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceRequestPatientInstruction* New() const final {
    return CreateMaybeMessage<DeviceRequestPatientInstruction>(NULL);
  }

  DeviceRequestPatientInstruction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceRequestPatientInstruction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceRequestPatientInstruction& from);
  void MergeFrom(const DeviceRequestPatientInstruction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceRequestPatientInstruction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.LanguageCode lang = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_lang() const;
  void clear_lang();
  static const int kLangFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::LanguageCode& _internal_lang() const;
  public:
  const ::google::fhir::stu3::proto::LanguageCode& lang() const;
  ::google::fhir::stu3::proto::LanguageCode* release_lang();
  ::google::fhir::stu3::proto::LanguageCode* mutable_lang();
  void set_allocated_lang(::google::fhir::stu3::proto::LanguageCode* lang);

  // .google.fhir.stu3.proto.String content = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::String& _internal_content() const;
  public:
  const ::google::fhir::stu3::proto::String& content() const;
  ::google::fhir::stu3::proto::String* release_content();
  ::google::fhir::stu3::proto::String* mutable_content();
  void set_allocated_content(::google::fhir::stu3::proto::String* content);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DeviceRequestPatientInstruction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::LanguageCode* lang_;
  ::google::fhir::stu3::proto::String* content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceRequestReasonRejected : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DeviceRequestReasonRejected) */ {
 public:
  DeviceRequestReasonRejected();
  virtual ~DeviceRequestReasonRejected();

  DeviceRequestReasonRejected(const DeviceRequestReasonRejected& from);

  inline DeviceRequestReasonRejected& operator=(const DeviceRequestReasonRejected& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceRequestReasonRejected(DeviceRequestReasonRejected&& from) noexcept
    : DeviceRequestReasonRejected() {
    *this = ::std::move(from);
  }

  inline DeviceRequestReasonRejected& operator=(DeviceRequestReasonRejected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceRequestReasonRejected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceRequestReasonRejected* internal_default_instance() {
    return reinterpret_cast<const DeviceRequestReasonRejected*>(
               &_DeviceRequestReasonRejected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  void Swap(DeviceRequestReasonRejected* other);
  friend void swap(DeviceRequestReasonRejected& a, DeviceRequestReasonRejected& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceRequestReasonRejected* New() const final {
    return CreateMaybeMessage<DeviceRequestReasonRejected>(NULL);
  }

  DeviceRequestReasonRejected* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceRequestReasonRejected>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeviceRequestReasonRejected& from);
  void MergeFrom(const DeviceRequestReasonRejected& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceRequestReasonRejected* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DeviceRequestReasonRejected)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiagnosticReportAddendumOf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DiagnosticReportAddendumOf) */ {
 public:
  DiagnosticReportAddendumOf();
  virtual ~DiagnosticReportAddendumOf();

  DiagnosticReportAddendumOf(const DiagnosticReportAddendumOf& from);

  inline DiagnosticReportAddendumOf& operator=(const DiagnosticReportAddendumOf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiagnosticReportAddendumOf(DiagnosticReportAddendumOf&& from) noexcept
    : DiagnosticReportAddendumOf() {
    *this = ::std::move(from);
  }

  inline DiagnosticReportAddendumOf& operator=(DiagnosticReportAddendumOf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiagnosticReportAddendumOf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosticReportAddendumOf* internal_default_instance() {
    return reinterpret_cast<const DiagnosticReportAddendumOf*>(
               &_DiagnosticReportAddendumOf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  void Swap(DiagnosticReportAddendumOf* other);
  friend void swap(DiagnosticReportAddendumOf& a, DiagnosticReportAddendumOf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosticReportAddendumOf* New() const final {
    return CreateMaybeMessage<DiagnosticReportAddendumOf>(NULL);
  }

  DiagnosticReportAddendumOf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosticReportAddendumOf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiagnosticReportAddendumOf& from);
  void MergeFrom(const DiagnosticReportAddendumOf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosticReportAddendumOf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/DiagnosticReport"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DiagnosticReportAddendumOf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiagnosticReportExtends : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DiagnosticReportExtends) */ {
 public:
  DiagnosticReportExtends();
  virtual ~DiagnosticReportExtends();

  DiagnosticReportExtends(const DiagnosticReportExtends& from);

  inline DiagnosticReportExtends& operator=(const DiagnosticReportExtends& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiagnosticReportExtends(DiagnosticReportExtends&& from) noexcept
    : DiagnosticReportExtends() {
    *this = ::std::move(from);
  }

  inline DiagnosticReportExtends& operator=(DiagnosticReportExtends&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiagnosticReportExtends& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosticReportExtends* internal_default_instance() {
    return reinterpret_cast<const DiagnosticReportExtends*>(
               &_DiagnosticReportExtends_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  void Swap(DiagnosticReportExtends* other);
  friend void swap(DiagnosticReportExtends& a, DiagnosticReportExtends& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosticReportExtends* New() const final {
    return CreateMaybeMessage<DiagnosticReportExtends>(NULL);
  }

  DiagnosticReportExtends* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosticReportExtends>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiagnosticReportExtends& from);
  void MergeFrom(const DiagnosticReportExtends& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosticReportExtends* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/DiagnosticReport"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DiagnosticReportExtends)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiagnosticReportAnalysis : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DiagnosticReportAnalysis) */ {
 public:
  DiagnosticReportAnalysis();
  virtual ~DiagnosticReportAnalysis();

  DiagnosticReportAnalysis(const DiagnosticReportAnalysis& from);

  inline DiagnosticReportAnalysis& operator=(const DiagnosticReportAnalysis& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiagnosticReportAnalysis(DiagnosticReportAnalysis&& from) noexcept
    : DiagnosticReportAnalysis() {
    *this = ::std::move(from);
  }

  inline DiagnosticReportAnalysis& operator=(DiagnosticReportAnalysis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiagnosticReportAnalysis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosticReportAnalysis* internal_default_instance() {
    return reinterpret_cast<const DiagnosticReportAnalysis*>(
               &_DiagnosticReportAnalysis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  void Swap(DiagnosticReportAnalysis* other);
  friend void swap(DiagnosticReportAnalysis& a, DiagnosticReportAnalysis& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosticReportAnalysis* New() const final {
    return CreateMaybeMessage<DiagnosticReportAnalysis>(NULL);
  }

  DiagnosticReportAnalysis* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosticReportAnalysis>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiagnosticReportAnalysis& from);
  void MergeFrom(const DiagnosticReportAnalysis& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosticReportAnalysis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept type = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_type() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& type() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_type();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_type();
  void set_allocated_type(::google::fhir::stu3::proto::CodeableConcept* type);

  // .google.fhir.stu3.proto.CodeableConcept interpretation = 5;
  bool has_interpretation() const;
  void clear_interpretation();
  static const int kInterpretationFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_interpretation() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& interpretation() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_interpretation();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_interpretation();
  void set_allocated_interpretation(::google::fhir::stu3::proto::CodeableConcept* interpretation);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DiagnosticReportAnalysis)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* type_;
  ::google::fhir::stu3::proto::CodeableConcept* interpretation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiagnosticReportAssessedCondition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DiagnosticReportAssessedCondition) */ {
 public:
  DiagnosticReportAssessedCondition();
  virtual ~DiagnosticReportAssessedCondition();

  DiagnosticReportAssessedCondition(const DiagnosticReportAssessedCondition& from);

  inline DiagnosticReportAssessedCondition& operator=(const DiagnosticReportAssessedCondition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiagnosticReportAssessedCondition(DiagnosticReportAssessedCondition&& from) noexcept
    : DiagnosticReportAssessedCondition() {
    *this = ::std::move(from);
  }

  inline DiagnosticReportAssessedCondition& operator=(DiagnosticReportAssessedCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiagnosticReportAssessedCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosticReportAssessedCondition* internal_default_instance() {
    return reinterpret_cast<const DiagnosticReportAssessedCondition*>(
               &_DiagnosticReportAssessedCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  void Swap(DiagnosticReportAssessedCondition* other);
  friend void swap(DiagnosticReportAssessedCondition& a, DiagnosticReportAssessedCondition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosticReportAssessedCondition* New() const final {
    return CreateMaybeMessage<DiagnosticReportAssessedCondition>(NULL);
  }

  DiagnosticReportAssessedCondition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosticReportAssessedCondition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiagnosticReportAssessedCondition& from);
  void MergeFrom(const DiagnosticReportAssessedCondition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosticReportAssessedCondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Condition"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DiagnosticReportAssessedCondition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiagnosticReportFamilyMemberHistory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DiagnosticReportFamilyMemberHistory) */ {
 public:
  DiagnosticReportFamilyMemberHistory();
  virtual ~DiagnosticReportFamilyMemberHistory();

  DiagnosticReportFamilyMemberHistory(const DiagnosticReportFamilyMemberHistory& from);

  inline DiagnosticReportFamilyMemberHistory& operator=(const DiagnosticReportFamilyMemberHistory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiagnosticReportFamilyMemberHistory(DiagnosticReportFamilyMemberHistory&& from) noexcept
    : DiagnosticReportFamilyMemberHistory() {
    *this = ::std::move(from);
  }

  inline DiagnosticReportFamilyMemberHistory& operator=(DiagnosticReportFamilyMemberHistory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiagnosticReportFamilyMemberHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosticReportFamilyMemberHistory* internal_default_instance() {
    return reinterpret_cast<const DiagnosticReportFamilyMemberHistory*>(
               &_DiagnosticReportFamilyMemberHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  void Swap(DiagnosticReportFamilyMemberHistory* other);
  friend void swap(DiagnosticReportFamilyMemberHistory& a, DiagnosticReportFamilyMemberHistory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosticReportFamilyMemberHistory* New() const final {
    return CreateMaybeMessage<DiagnosticReportFamilyMemberHistory>(NULL);
  }

  DiagnosticReportFamilyMemberHistory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosticReportFamilyMemberHistory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiagnosticReportFamilyMemberHistory& from);
  void MergeFrom(const DiagnosticReportFamilyMemberHistory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosticReportFamilyMemberHistory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/FamilyMemberHistory"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DiagnosticReportFamilyMemberHistory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiagnosticReportLocationPerformed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DiagnosticReportLocationPerformed) */ {
 public:
  DiagnosticReportLocationPerformed();
  virtual ~DiagnosticReportLocationPerformed();

  DiagnosticReportLocationPerformed(const DiagnosticReportLocationPerformed& from);

  inline DiagnosticReportLocationPerformed& operator=(const DiagnosticReportLocationPerformed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiagnosticReportLocationPerformed(DiagnosticReportLocationPerformed&& from) noexcept
    : DiagnosticReportLocationPerformed() {
    *this = ::std::move(from);
  }

  inline DiagnosticReportLocationPerformed& operator=(DiagnosticReportLocationPerformed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiagnosticReportLocationPerformed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosticReportLocationPerformed* internal_default_instance() {
    return reinterpret_cast<const DiagnosticReportLocationPerformed*>(
               &_DiagnosticReportLocationPerformed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  void Swap(DiagnosticReportLocationPerformed* other);
  friend void swap(DiagnosticReportLocationPerformed& a, DiagnosticReportLocationPerformed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosticReportLocationPerformed* New() const final {
    return CreateMaybeMessage<DiagnosticReportLocationPerformed>(NULL);
  }

  DiagnosticReportLocationPerformed* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosticReportLocationPerformed>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiagnosticReportLocationPerformed& from);
  void MergeFrom(const DiagnosticReportLocationPerformed& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosticReportLocationPerformed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Location"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DiagnosticReportLocationPerformed)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiagnosticReportReplaces : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DiagnosticReportReplaces) */ {
 public:
  DiagnosticReportReplaces();
  virtual ~DiagnosticReportReplaces();

  DiagnosticReportReplaces(const DiagnosticReportReplaces& from);

  inline DiagnosticReportReplaces& operator=(const DiagnosticReportReplaces& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiagnosticReportReplaces(DiagnosticReportReplaces&& from) noexcept
    : DiagnosticReportReplaces() {
    *this = ::std::move(from);
  }

  inline DiagnosticReportReplaces& operator=(DiagnosticReportReplaces&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiagnosticReportReplaces& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosticReportReplaces* internal_default_instance() {
    return reinterpret_cast<const DiagnosticReportReplaces*>(
               &_DiagnosticReportReplaces_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  void Swap(DiagnosticReportReplaces* other);
  friend void swap(DiagnosticReportReplaces& a, DiagnosticReportReplaces& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosticReportReplaces* New() const final {
    return CreateMaybeMessage<DiagnosticReportReplaces>(NULL);
  }

  DiagnosticReportReplaces* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosticReportReplaces>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiagnosticReportReplaces& from);
  void MergeFrom(const DiagnosticReportReplaces& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosticReportReplaces* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/DiagnosticReport"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DiagnosticReportReplaces)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiagnosticReportSummaryOf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DiagnosticReportSummaryOf) */ {
 public:
  DiagnosticReportSummaryOf();
  virtual ~DiagnosticReportSummaryOf();

  DiagnosticReportSummaryOf(const DiagnosticReportSummaryOf& from);

  inline DiagnosticReportSummaryOf& operator=(const DiagnosticReportSummaryOf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiagnosticReportSummaryOf(DiagnosticReportSummaryOf&& from) noexcept
    : DiagnosticReportSummaryOf() {
    *this = ::std::move(from);
  }

  inline DiagnosticReportSummaryOf& operator=(DiagnosticReportSummaryOf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiagnosticReportSummaryOf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosticReportSummaryOf* internal_default_instance() {
    return reinterpret_cast<const DiagnosticReportSummaryOf*>(
               &_DiagnosticReportSummaryOf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  void Swap(DiagnosticReportSummaryOf* other);
  friend void swap(DiagnosticReportSummaryOf& a, DiagnosticReportSummaryOf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosticReportSummaryOf* New() const final {
    return CreateMaybeMessage<DiagnosticReportSummaryOf>(NULL);
  }

  DiagnosticReportSummaryOf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosticReportSummaryOf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiagnosticReportSummaryOf& from);
  void MergeFrom(const DiagnosticReportSummaryOf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosticReportSummaryOf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/DiagnosticReport"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DiagnosticReportSummaryOf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionAllowedUnits_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionAllowedUnits.Value) */ {
 public:
  ElementDefinitionAllowedUnits_Value();
  virtual ~ElementDefinitionAllowedUnits_Value();

  ElementDefinitionAllowedUnits_Value(const ElementDefinitionAllowedUnits_Value& from);

  inline ElementDefinitionAllowedUnits_Value& operator=(const ElementDefinitionAllowedUnits_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionAllowedUnits_Value(ElementDefinitionAllowedUnits_Value&& from) noexcept
    : ElementDefinitionAllowedUnits_Value() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionAllowedUnits_Value& operator=(ElementDefinitionAllowedUnits_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionAllowedUnits_Value& default_instance();

  enum ValueCase {
    kCodeableConcept = 1,
    kReference = 2,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionAllowedUnits_Value* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionAllowedUnits_Value*>(
               &_ElementDefinitionAllowedUnits_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  void Swap(ElementDefinitionAllowedUnits_Value* other);
  friend void swap(ElementDefinitionAllowedUnits_Value& a, ElementDefinitionAllowedUnits_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionAllowedUnits_Value* New() const final {
    return CreateMaybeMessage<ElementDefinitionAllowedUnits_Value>(NULL);
  }

  ElementDefinitionAllowedUnits_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionAllowedUnits_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionAllowedUnits_Value& from);
  void MergeFrom(const ElementDefinitionAllowedUnits_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionAllowedUnits_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.CodeableConcept codeable_concept = 1;
  bool has_codeable_concept() const;
  void clear_codeable_concept();
  static const int kCodeableConceptFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_codeable_concept();
  void set_allocated_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* codeable_concept);

  // .google.fhir.stu3.proto.Reference reference = 2 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ValueSet"];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionAllowedUnits.Value)
 private:
  void set_has_codeable_concept();
  void set_has_reference();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::CodeableConcept* codeable_concept_;
    ::google::fhir::stu3::proto::Reference* reference_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionAllowedUnits : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionAllowedUnits) */ {
 public:
  ElementDefinitionAllowedUnits();
  virtual ~ElementDefinitionAllowedUnits();

  ElementDefinitionAllowedUnits(const ElementDefinitionAllowedUnits& from);

  inline ElementDefinitionAllowedUnits& operator=(const ElementDefinitionAllowedUnits& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionAllowedUnits(ElementDefinitionAllowedUnits&& from) noexcept
    : ElementDefinitionAllowedUnits() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionAllowedUnits& operator=(ElementDefinitionAllowedUnits&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionAllowedUnits& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionAllowedUnits* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionAllowedUnits*>(
               &_ElementDefinitionAllowedUnits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  void Swap(ElementDefinitionAllowedUnits* other);
  friend void swap(ElementDefinitionAllowedUnits& a, ElementDefinitionAllowedUnits& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionAllowedUnits* New() const final {
    return CreateMaybeMessage<ElementDefinitionAllowedUnits>(NULL);
  }

  ElementDefinitionAllowedUnits* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionAllowedUnits>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionAllowedUnits& from);
  void MergeFrom(const ElementDefinitionAllowedUnits& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionAllowedUnits* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ElementDefinitionAllowedUnits_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.ElementDefinitionAllowedUnits.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::ElementDefinitionAllowedUnits_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::ElementDefinitionAllowedUnits_Value& value() const;
  ::google::fhir::stu3::proto::ElementDefinitionAllowedUnits_Value* release_value();
  ::google::fhir::stu3::proto::ElementDefinitionAllowedUnits_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::ElementDefinitionAllowedUnits_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionAllowedUnits)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::ElementDefinitionAllowedUnits_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionBestpractice_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionBestpractice.Value) */ {
 public:
  ElementDefinitionBestpractice_Value();
  virtual ~ElementDefinitionBestpractice_Value();

  ElementDefinitionBestpractice_Value(const ElementDefinitionBestpractice_Value& from);

  inline ElementDefinitionBestpractice_Value& operator=(const ElementDefinitionBestpractice_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionBestpractice_Value(ElementDefinitionBestpractice_Value&& from) noexcept
    : ElementDefinitionBestpractice_Value() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionBestpractice_Value& operator=(ElementDefinitionBestpractice_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionBestpractice_Value& default_instance();

  enum ValueCase {
    kBoolean = 1,
    kCodeableConcept = 2,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionBestpractice_Value* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionBestpractice_Value*>(
               &_ElementDefinitionBestpractice_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  void Swap(ElementDefinitionBestpractice_Value* other);
  friend void swap(ElementDefinitionBestpractice_Value& a, ElementDefinitionBestpractice_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionBestpractice_Value* New() const final {
    return CreateMaybeMessage<ElementDefinitionBestpractice_Value>(NULL);
  }

  ElementDefinitionBestpractice_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionBestpractice_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionBestpractice_Value& from);
  void MergeFrom(const ElementDefinitionBestpractice_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionBestpractice_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Boolean boolean = 1;
  bool has_boolean() const;
  void clear_boolean();
  static const int kBooleanFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_boolean();
  void set_allocated_boolean(::google::fhir::stu3::proto::Boolean* boolean);

  // .google.fhir.stu3.proto.CodeableConcept codeable_concept = 2;
  bool has_codeable_concept() const;
  void clear_codeable_concept();
  static const int kCodeableConceptFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_codeable_concept();
  void set_allocated_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* codeable_concept);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionBestpractice.Value)
 private:
  void set_has_boolean();
  void set_has_codeable_concept();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::Boolean* boolean_;
    ::google::fhir::stu3::proto::CodeableConcept* codeable_concept_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionBestpractice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionBestpractice) */ {
 public:
  ElementDefinitionBestpractice();
  virtual ~ElementDefinitionBestpractice();

  ElementDefinitionBestpractice(const ElementDefinitionBestpractice& from);

  inline ElementDefinitionBestpractice& operator=(const ElementDefinitionBestpractice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionBestpractice(ElementDefinitionBestpractice&& from) noexcept
    : ElementDefinitionBestpractice() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionBestpractice& operator=(ElementDefinitionBestpractice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionBestpractice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionBestpractice* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionBestpractice*>(
               &_ElementDefinitionBestpractice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  void Swap(ElementDefinitionBestpractice* other);
  friend void swap(ElementDefinitionBestpractice& a, ElementDefinitionBestpractice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionBestpractice* New() const final {
    return CreateMaybeMessage<ElementDefinitionBestpractice>(NULL);
  }

  ElementDefinitionBestpractice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionBestpractice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionBestpractice& from);
  void MergeFrom(const ElementDefinitionBestpractice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionBestpractice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ElementDefinitionBestpractice_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.ElementDefinitionBestpractice.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::ElementDefinitionBestpractice_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::ElementDefinitionBestpractice_Value& value() const;
  ::google::fhir::stu3::proto::ElementDefinitionBestpractice_Value* release_value();
  ::google::fhir::stu3::proto::ElementDefinitionBestpractice_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::ElementDefinitionBestpractice_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionBestpractice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::ElementDefinitionBestpractice_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionBindingName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionBindingName) */ {
 public:
  ElementDefinitionBindingName();
  virtual ~ElementDefinitionBindingName();

  ElementDefinitionBindingName(const ElementDefinitionBindingName& from);

  inline ElementDefinitionBindingName& operator=(const ElementDefinitionBindingName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionBindingName(ElementDefinitionBindingName&& from) noexcept
    : ElementDefinitionBindingName() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionBindingName& operator=(ElementDefinitionBindingName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionBindingName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionBindingName* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionBindingName*>(
               &_ElementDefinitionBindingName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  void Swap(ElementDefinitionBindingName* other);
  friend void swap(ElementDefinitionBindingName& a, ElementDefinitionBindingName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionBindingName* New() const final {
    return CreateMaybeMessage<ElementDefinitionBindingName>(NULL);
  }

  ElementDefinitionBindingName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionBindingName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionBindingName& from);
  void MergeFrom(const ElementDefinitionBindingName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionBindingName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionBindingName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionEquivalence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionEquivalence) */ {
 public:
  ElementDefinitionEquivalence();
  virtual ~ElementDefinitionEquivalence();

  ElementDefinitionEquivalence(const ElementDefinitionEquivalence& from);

  inline ElementDefinitionEquivalence& operator=(const ElementDefinitionEquivalence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionEquivalence(ElementDefinitionEquivalence&& from) noexcept
    : ElementDefinitionEquivalence() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionEquivalence& operator=(ElementDefinitionEquivalence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionEquivalence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionEquivalence* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionEquivalence*>(
               &_ElementDefinitionEquivalence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  void Swap(ElementDefinitionEquivalence* other);
  friend void swap(ElementDefinitionEquivalence& a, ElementDefinitionEquivalence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionEquivalence* New() const final {
    return CreateMaybeMessage<ElementDefinitionEquivalence>(NULL);
  }

  ElementDefinitionEquivalence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionEquivalence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionEquivalence& from);
  void MergeFrom(const ElementDefinitionEquivalence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionEquivalence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.ConceptMapEquivalenceCode value_code = 3;
  bool has_value_code() const;
  void clear_value_code();
  static const int kValueCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::ConceptMapEquivalenceCode& _internal_value_code() const;
  public:
  const ::google::fhir::stu3::proto::ConceptMapEquivalenceCode& value_code() const;
  ::google::fhir::stu3::proto::ConceptMapEquivalenceCode* release_value_code();
  ::google::fhir::stu3::proto::ConceptMapEquivalenceCode* mutable_value_code();
  void set_allocated_value_code(::google::fhir::stu3::proto::ConceptMapEquivalenceCode* value_code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionEquivalence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::ConceptMapEquivalenceCode* value_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionIdentifier : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionIdentifier) */ {
 public:
  ElementDefinitionIdentifier();
  virtual ~ElementDefinitionIdentifier();

  ElementDefinitionIdentifier(const ElementDefinitionIdentifier& from);

  inline ElementDefinitionIdentifier& operator=(const ElementDefinitionIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionIdentifier(ElementDefinitionIdentifier&& from) noexcept
    : ElementDefinitionIdentifier() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionIdentifier& operator=(ElementDefinitionIdentifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionIdentifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionIdentifier* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionIdentifier*>(
               &_ElementDefinitionIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  void Swap(ElementDefinitionIdentifier* other);
  friend void swap(ElementDefinitionIdentifier& a, ElementDefinitionIdentifier& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionIdentifier* New() const final {
    return CreateMaybeMessage<ElementDefinitionIdentifier>(NULL);
  }

  ElementDefinitionIdentifier* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionIdentifier>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionIdentifier& from);
  void MergeFrom(const ElementDefinitionIdentifier& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionIdentifier* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Identifier value_identifier = 3;
  bool has_value_identifier() const;
  void clear_value_identifier();
  static const int kValueIdentifierFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Identifier& _internal_value_identifier() const;
  public:
  const ::google::fhir::stu3::proto::Identifier& value_identifier() const;
  ::google::fhir::stu3::proto::Identifier* release_value_identifier();
  ::google::fhir::stu3::proto::Identifier* mutable_value_identifier();
  void set_allocated_value_identifier(::google::fhir::stu3::proto::Identifier* value_identifier);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionIdentifier)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Identifier* value_identifier_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionInheritedExtensibleValueSet_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.Value) */ {
 public:
  ElementDefinitionInheritedExtensibleValueSet_Value();
  virtual ~ElementDefinitionInheritedExtensibleValueSet_Value();

  ElementDefinitionInheritedExtensibleValueSet_Value(const ElementDefinitionInheritedExtensibleValueSet_Value& from);

  inline ElementDefinitionInheritedExtensibleValueSet_Value& operator=(const ElementDefinitionInheritedExtensibleValueSet_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionInheritedExtensibleValueSet_Value(ElementDefinitionInheritedExtensibleValueSet_Value&& from) noexcept
    : ElementDefinitionInheritedExtensibleValueSet_Value() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionInheritedExtensibleValueSet_Value& operator=(ElementDefinitionInheritedExtensibleValueSet_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionInheritedExtensibleValueSet_Value& default_instance();

  enum ValueCase {
    kUri = 1,
    kReference = 2,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionInheritedExtensibleValueSet_Value* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionInheritedExtensibleValueSet_Value*>(
               &_ElementDefinitionInheritedExtensibleValueSet_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  void Swap(ElementDefinitionInheritedExtensibleValueSet_Value* other);
  friend void swap(ElementDefinitionInheritedExtensibleValueSet_Value& a, ElementDefinitionInheritedExtensibleValueSet_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionInheritedExtensibleValueSet_Value* New() const final {
    return CreateMaybeMessage<ElementDefinitionInheritedExtensibleValueSet_Value>(NULL);
  }

  ElementDefinitionInheritedExtensibleValueSet_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionInheritedExtensibleValueSet_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionInheritedExtensibleValueSet_Value& from);
  void MergeFrom(const ElementDefinitionInheritedExtensibleValueSet_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionInheritedExtensibleValueSet_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Uri uri = 1;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& uri() const;
  ::google::fhir::stu3::proto::Uri* release_uri();
  ::google::fhir::stu3::proto::Uri* mutable_uri();
  void set_allocated_uri(::google::fhir::stu3::proto::Uri* uri);

  // .google.fhir.stu3.proto.Reference reference = 2 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ValueSet"];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.Value)
 private:
  void set_has_uri();
  void set_has_reference();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::Uri* uri_;
    ::google::fhir::stu3::proto::Reference* reference_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionInheritedExtensibleValueSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet) */ {
 public:
  ElementDefinitionInheritedExtensibleValueSet();
  virtual ~ElementDefinitionInheritedExtensibleValueSet();

  ElementDefinitionInheritedExtensibleValueSet(const ElementDefinitionInheritedExtensibleValueSet& from);

  inline ElementDefinitionInheritedExtensibleValueSet& operator=(const ElementDefinitionInheritedExtensibleValueSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionInheritedExtensibleValueSet(ElementDefinitionInheritedExtensibleValueSet&& from) noexcept
    : ElementDefinitionInheritedExtensibleValueSet() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionInheritedExtensibleValueSet& operator=(ElementDefinitionInheritedExtensibleValueSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionInheritedExtensibleValueSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionInheritedExtensibleValueSet* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionInheritedExtensibleValueSet*>(
               &_ElementDefinitionInheritedExtensibleValueSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  void Swap(ElementDefinitionInheritedExtensibleValueSet* other);
  friend void swap(ElementDefinitionInheritedExtensibleValueSet& a, ElementDefinitionInheritedExtensibleValueSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionInheritedExtensibleValueSet* New() const final {
    return CreateMaybeMessage<ElementDefinitionInheritedExtensibleValueSet>(NULL);
  }

  ElementDefinitionInheritedExtensibleValueSet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionInheritedExtensibleValueSet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionInheritedExtensibleValueSet& from);
  void MergeFrom(const ElementDefinitionInheritedExtensibleValueSet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionInheritedExtensibleValueSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ElementDefinitionInheritedExtensibleValueSet_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::ElementDefinitionInheritedExtensibleValueSet_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::ElementDefinitionInheritedExtensibleValueSet_Value& value() const;
  ::google::fhir::stu3::proto::ElementDefinitionInheritedExtensibleValueSet_Value* release_value();
  ::google::fhir::stu3::proto::ElementDefinitionInheritedExtensibleValueSet_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::ElementDefinitionInheritedExtensibleValueSet_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::ElementDefinitionInheritedExtensibleValueSet_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionIsCommonBinding : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionIsCommonBinding) */ {
 public:
  ElementDefinitionIsCommonBinding();
  virtual ~ElementDefinitionIsCommonBinding();

  ElementDefinitionIsCommonBinding(const ElementDefinitionIsCommonBinding& from);

  inline ElementDefinitionIsCommonBinding& operator=(const ElementDefinitionIsCommonBinding& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionIsCommonBinding(ElementDefinitionIsCommonBinding&& from) noexcept
    : ElementDefinitionIsCommonBinding() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionIsCommonBinding& operator=(ElementDefinitionIsCommonBinding&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionIsCommonBinding& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionIsCommonBinding* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionIsCommonBinding*>(
               &_ElementDefinitionIsCommonBinding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  void Swap(ElementDefinitionIsCommonBinding* other);
  friend void swap(ElementDefinitionIsCommonBinding& a, ElementDefinitionIsCommonBinding& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionIsCommonBinding* New() const final {
    return CreateMaybeMessage<ElementDefinitionIsCommonBinding>(NULL);
  }

  ElementDefinitionIsCommonBinding* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionIsCommonBinding>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionIsCommonBinding& from);
  void MergeFrom(const ElementDefinitionIsCommonBinding& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionIsCommonBinding* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionIsCommonBinding)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionMaxValueSet_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionMaxValueSet.Value) */ {
 public:
  ElementDefinitionMaxValueSet_Value();
  virtual ~ElementDefinitionMaxValueSet_Value();

  ElementDefinitionMaxValueSet_Value(const ElementDefinitionMaxValueSet_Value& from);

  inline ElementDefinitionMaxValueSet_Value& operator=(const ElementDefinitionMaxValueSet_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionMaxValueSet_Value(ElementDefinitionMaxValueSet_Value&& from) noexcept
    : ElementDefinitionMaxValueSet_Value() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionMaxValueSet_Value& operator=(ElementDefinitionMaxValueSet_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionMaxValueSet_Value& default_instance();

  enum ValueCase {
    kUri = 1,
    kReference = 2,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionMaxValueSet_Value* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionMaxValueSet_Value*>(
               &_ElementDefinitionMaxValueSet_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  void Swap(ElementDefinitionMaxValueSet_Value* other);
  friend void swap(ElementDefinitionMaxValueSet_Value& a, ElementDefinitionMaxValueSet_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionMaxValueSet_Value* New() const final {
    return CreateMaybeMessage<ElementDefinitionMaxValueSet_Value>(NULL);
  }

  ElementDefinitionMaxValueSet_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionMaxValueSet_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionMaxValueSet_Value& from);
  void MergeFrom(const ElementDefinitionMaxValueSet_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionMaxValueSet_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Uri uri = 1;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& uri() const;
  ::google::fhir::stu3::proto::Uri* release_uri();
  ::google::fhir::stu3::proto::Uri* mutable_uri();
  void set_allocated_uri(::google::fhir::stu3::proto::Uri* uri);

  // .google.fhir.stu3.proto.Reference reference = 2 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ValueSet"];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionMaxValueSet.Value)
 private:
  void set_has_uri();
  void set_has_reference();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::Uri* uri_;
    ::google::fhir::stu3::proto::Reference* reference_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionMaxValueSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionMaxValueSet) */ {
 public:
  ElementDefinitionMaxValueSet();
  virtual ~ElementDefinitionMaxValueSet();

  ElementDefinitionMaxValueSet(const ElementDefinitionMaxValueSet& from);

  inline ElementDefinitionMaxValueSet& operator=(const ElementDefinitionMaxValueSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionMaxValueSet(ElementDefinitionMaxValueSet&& from) noexcept
    : ElementDefinitionMaxValueSet() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionMaxValueSet& operator=(ElementDefinitionMaxValueSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionMaxValueSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionMaxValueSet* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionMaxValueSet*>(
               &_ElementDefinitionMaxValueSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  void Swap(ElementDefinitionMaxValueSet* other);
  friend void swap(ElementDefinitionMaxValueSet& a, ElementDefinitionMaxValueSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionMaxValueSet* New() const final {
    return CreateMaybeMessage<ElementDefinitionMaxValueSet>(NULL);
  }

  ElementDefinitionMaxValueSet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionMaxValueSet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionMaxValueSet& from);
  void MergeFrom(const ElementDefinitionMaxValueSet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionMaxValueSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ElementDefinitionMaxValueSet_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.ElementDefinitionMaxValueSet.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::ElementDefinitionMaxValueSet_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::ElementDefinitionMaxValueSet_Value& value() const;
  ::google::fhir::stu3::proto::ElementDefinitionMaxValueSet_Value* release_value();
  ::google::fhir::stu3::proto::ElementDefinitionMaxValueSet_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::ElementDefinitionMaxValueSet_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionMaxValueSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::ElementDefinitionMaxValueSet_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionMinValueSet_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionMinValueSet.Value) */ {
 public:
  ElementDefinitionMinValueSet_Value();
  virtual ~ElementDefinitionMinValueSet_Value();

  ElementDefinitionMinValueSet_Value(const ElementDefinitionMinValueSet_Value& from);

  inline ElementDefinitionMinValueSet_Value& operator=(const ElementDefinitionMinValueSet_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionMinValueSet_Value(ElementDefinitionMinValueSet_Value&& from) noexcept
    : ElementDefinitionMinValueSet_Value() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionMinValueSet_Value& operator=(ElementDefinitionMinValueSet_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionMinValueSet_Value& default_instance();

  enum ValueCase {
    kUri = 1,
    kReference = 2,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionMinValueSet_Value* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionMinValueSet_Value*>(
               &_ElementDefinitionMinValueSet_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  void Swap(ElementDefinitionMinValueSet_Value* other);
  friend void swap(ElementDefinitionMinValueSet_Value& a, ElementDefinitionMinValueSet_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionMinValueSet_Value* New() const final {
    return CreateMaybeMessage<ElementDefinitionMinValueSet_Value>(NULL);
  }

  ElementDefinitionMinValueSet_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionMinValueSet_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionMinValueSet_Value& from);
  void MergeFrom(const ElementDefinitionMinValueSet_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionMinValueSet_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Uri uri = 1;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& uri() const;
  ::google::fhir::stu3::proto::Uri* release_uri();
  ::google::fhir::stu3::proto::Uri* mutable_uri();
  void set_allocated_uri(::google::fhir::stu3::proto::Uri* uri);

  // .google.fhir.stu3.proto.Reference reference = 2 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ValueSet"];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionMinValueSet.Value)
 private:
  void set_has_uri();
  void set_has_reference();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::Uri* uri_;
    ::google::fhir::stu3::proto::Reference* reference_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionMinValueSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionMinValueSet) */ {
 public:
  ElementDefinitionMinValueSet();
  virtual ~ElementDefinitionMinValueSet();

  ElementDefinitionMinValueSet(const ElementDefinitionMinValueSet& from);

  inline ElementDefinitionMinValueSet& operator=(const ElementDefinitionMinValueSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionMinValueSet(ElementDefinitionMinValueSet&& from) noexcept
    : ElementDefinitionMinValueSet() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionMinValueSet& operator=(ElementDefinitionMinValueSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionMinValueSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionMinValueSet* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionMinValueSet*>(
               &_ElementDefinitionMinValueSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  void Swap(ElementDefinitionMinValueSet* other);
  friend void swap(ElementDefinitionMinValueSet& a, ElementDefinitionMinValueSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionMinValueSet* New() const final {
    return CreateMaybeMessage<ElementDefinitionMinValueSet>(NULL);
  }

  ElementDefinitionMinValueSet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionMinValueSet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionMinValueSet& from);
  void MergeFrom(const ElementDefinitionMinValueSet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionMinValueSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ElementDefinitionMinValueSet_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.ElementDefinitionMinValueSet.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::ElementDefinitionMinValueSet_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::ElementDefinitionMinValueSet_Value& value() const;
  ::google::fhir::stu3::proto::ElementDefinitionMinValueSet_Value* release_value();
  ::google::fhir::stu3::proto::ElementDefinitionMinValueSet_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::ElementDefinitionMinValueSet_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionMinValueSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::ElementDefinitionMinValueSet_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Namespace : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Namespace) */ {
 public:
  Namespace();
  virtual ~Namespace();

  Namespace(const Namespace& from);

  inline Namespace& operator=(const Namespace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Namespace(Namespace&& from) noexcept
    : Namespace() {
    *this = ::std::move(from);
  }

  inline Namespace& operator=(Namespace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Namespace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Namespace* internal_default_instance() {
    return reinterpret_cast<const Namespace*>(
               &_Namespace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  void Swap(Namespace* other);
  friend void swap(Namespace& a, Namespace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Namespace* New() const final {
    return CreateMaybeMessage<Namespace>(NULL);
  }

  Namespace* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Namespace>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Namespace& from);
  void MergeFrom(const Namespace& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Namespace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri value_uri = 3;
  bool has_value_uri() const;
  void clear_value_uri();
  static const int kValueUriFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_value_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& value_uri() const;
  ::google::fhir::stu3::proto::Uri* release_value_uri();
  ::google::fhir::stu3::proto::Uri* mutable_value_uri();
  void set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Namespace)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* value_uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionQuestion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionQuestion) */ {
 public:
  ElementDefinitionQuestion();
  virtual ~ElementDefinitionQuestion();

  ElementDefinitionQuestion(const ElementDefinitionQuestion& from);

  inline ElementDefinitionQuestion& operator=(const ElementDefinitionQuestion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionQuestion(ElementDefinitionQuestion&& from) noexcept
    : ElementDefinitionQuestion() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionQuestion& operator=(ElementDefinitionQuestion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionQuestion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionQuestion* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionQuestion*>(
               &_ElementDefinitionQuestion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  void Swap(ElementDefinitionQuestion* other);
  friend void swap(ElementDefinitionQuestion& a, ElementDefinitionQuestion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionQuestion* New() const final {
    return CreateMaybeMessage<ElementDefinitionQuestion>(NULL);
  }

  ElementDefinitionQuestion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionQuestion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionQuestion& from);
  void MergeFrom(const ElementDefinitionQuestion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionQuestion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionQuestion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionSelector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionSelector) */ {
 public:
  ElementDefinitionSelector();
  virtual ~ElementDefinitionSelector();

  ElementDefinitionSelector(const ElementDefinitionSelector& from);

  inline ElementDefinitionSelector& operator=(const ElementDefinitionSelector& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionSelector(ElementDefinitionSelector&& from) noexcept
    : ElementDefinitionSelector() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionSelector& operator=(ElementDefinitionSelector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionSelector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionSelector* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionSelector*>(
               &_ElementDefinitionSelector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  void Swap(ElementDefinitionSelector* other);
  friend void swap(ElementDefinitionSelector& a, ElementDefinitionSelector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionSelector* New() const final {
    return CreateMaybeMessage<ElementDefinitionSelector>(NULL);
  }

  ElementDefinitionSelector* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionSelector>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionSelector& from);
  void MergeFrom(const ElementDefinitionSelector& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionSelector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionSelector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionTranslatable : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionTranslatable) */ {
 public:
  ElementDefinitionTranslatable();
  virtual ~ElementDefinitionTranslatable();

  ElementDefinitionTranslatable(const ElementDefinitionTranslatable& from);

  inline ElementDefinitionTranslatable& operator=(const ElementDefinitionTranslatable& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionTranslatable(ElementDefinitionTranslatable&& from) noexcept
    : ElementDefinitionTranslatable() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionTranslatable& operator=(ElementDefinitionTranslatable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionTranslatable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionTranslatable* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionTranslatable*>(
               &_ElementDefinitionTranslatable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  void Swap(ElementDefinitionTranslatable* other);
  friend void swap(ElementDefinitionTranslatable& a, ElementDefinitionTranslatable& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionTranslatable* New() const final {
    return CreateMaybeMessage<ElementDefinitionTranslatable>(NULL);
  }

  ElementDefinitionTranslatable* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionTranslatable>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionTranslatable& from);
  void MergeFrom(const ElementDefinitionTranslatable& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionTranslatable* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionTranslatable)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EncounterAssociatedEncounter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.EncounterAssociatedEncounter) */ {
 public:
  EncounterAssociatedEncounter();
  virtual ~EncounterAssociatedEncounter();

  EncounterAssociatedEncounter(const EncounterAssociatedEncounter& from);

  inline EncounterAssociatedEncounter& operator=(const EncounterAssociatedEncounter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EncounterAssociatedEncounter(EncounterAssociatedEncounter&& from) noexcept
    : EncounterAssociatedEncounter() {
    *this = ::std::move(from);
  }

  inline EncounterAssociatedEncounter& operator=(EncounterAssociatedEncounter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EncounterAssociatedEncounter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncounterAssociatedEncounter* internal_default_instance() {
    return reinterpret_cast<const EncounterAssociatedEncounter*>(
               &_EncounterAssociatedEncounter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  void Swap(EncounterAssociatedEncounter* other);
  friend void swap(EncounterAssociatedEncounter& a, EncounterAssociatedEncounter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EncounterAssociatedEncounter* New() const final {
    return CreateMaybeMessage<EncounterAssociatedEncounter>(NULL);
  }

  EncounterAssociatedEncounter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EncounterAssociatedEncounter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EncounterAssociatedEncounter& from);
  void MergeFrom(const EncounterAssociatedEncounter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncounterAssociatedEncounter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Encounter"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.EncounterAssociatedEncounter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EncounterModeOfArrival : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.EncounterModeOfArrival) */ {
 public:
  EncounterModeOfArrival();
  virtual ~EncounterModeOfArrival();

  EncounterModeOfArrival(const EncounterModeOfArrival& from);

  inline EncounterModeOfArrival& operator=(const EncounterModeOfArrival& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EncounterModeOfArrival(EncounterModeOfArrival&& from) noexcept
    : EncounterModeOfArrival() {
    *this = ::std::move(from);
  }

  inline EncounterModeOfArrival& operator=(EncounterModeOfArrival&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EncounterModeOfArrival& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncounterModeOfArrival* internal_default_instance() {
    return reinterpret_cast<const EncounterModeOfArrival*>(
               &_EncounterModeOfArrival_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  void Swap(EncounterModeOfArrival* other);
  friend void swap(EncounterModeOfArrival& a, EncounterModeOfArrival& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EncounterModeOfArrival* New() const final {
    return CreateMaybeMessage<EncounterModeOfArrival>(NULL);
  }

  EncounterModeOfArrival* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EncounterModeOfArrival>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EncounterModeOfArrival& from);
  void MergeFrom(const EncounterModeOfArrival& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncounterModeOfArrival* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Coding value_coding = 3;
  bool has_value_coding() const;
  void clear_value_coding();
  static const int kValueCodingFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Coding& _internal_value_coding() const;
  public:
  const ::google::fhir::stu3::proto::Coding& value_coding() const;
  ::google::fhir::stu3::proto::Coding* release_value_coding();
  ::google::fhir::stu3::proto::Coding* mutable_value_coding();
  void set_allocated_value_coding(::google::fhir::stu3::proto::Coding* value_coding);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.EncounterModeOfArrival)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Coding* value_coding_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EncounterPrimaryDiagnosis : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.EncounterPrimaryDiagnosis) */ {
 public:
  EncounterPrimaryDiagnosis();
  virtual ~EncounterPrimaryDiagnosis();

  EncounterPrimaryDiagnosis(const EncounterPrimaryDiagnosis& from);

  inline EncounterPrimaryDiagnosis& operator=(const EncounterPrimaryDiagnosis& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EncounterPrimaryDiagnosis(EncounterPrimaryDiagnosis&& from) noexcept
    : EncounterPrimaryDiagnosis() {
    *this = ::std::move(from);
  }

  inline EncounterPrimaryDiagnosis& operator=(EncounterPrimaryDiagnosis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EncounterPrimaryDiagnosis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncounterPrimaryDiagnosis* internal_default_instance() {
    return reinterpret_cast<const EncounterPrimaryDiagnosis*>(
               &_EncounterPrimaryDiagnosis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  void Swap(EncounterPrimaryDiagnosis* other);
  friend void swap(EncounterPrimaryDiagnosis& a, EncounterPrimaryDiagnosis& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EncounterPrimaryDiagnosis* New() const final {
    return CreateMaybeMessage<EncounterPrimaryDiagnosis>(NULL);
  }

  EncounterPrimaryDiagnosis* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EncounterPrimaryDiagnosis>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EncounterPrimaryDiagnosis& from);
  void MergeFrom(const EncounterPrimaryDiagnosis& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncounterPrimaryDiagnosis* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.PositiveInt value_positive_int = 3;
  bool has_value_positive_int() const;
  void clear_value_positive_int();
  static const int kValuePositiveIntFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::PositiveInt& _internal_value_positive_int() const;
  public:
  const ::google::fhir::stu3::proto::PositiveInt& value_positive_int() const;
  ::google::fhir::stu3::proto::PositiveInt* release_value_positive_int();
  ::google::fhir::stu3::proto::PositiveInt* mutable_value_positive_int();
  void set_allocated_value_positive_int(::google::fhir::stu3::proto::PositiveInt* value_positive_int);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.EncounterPrimaryDiagnosis)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::PositiveInt* value_positive_int_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EncounterReasonCancelled : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.EncounterReasonCancelled) */ {
 public:
  EncounterReasonCancelled();
  virtual ~EncounterReasonCancelled();

  EncounterReasonCancelled(const EncounterReasonCancelled& from);

  inline EncounterReasonCancelled& operator=(const EncounterReasonCancelled& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EncounterReasonCancelled(EncounterReasonCancelled&& from) noexcept
    : EncounterReasonCancelled() {
    *this = ::std::move(from);
  }

  inline EncounterReasonCancelled& operator=(EncounterReasonCancelled&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EncounterReasonCancelled& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncounterReasonCancelled* internal_default_instance() {
    return reinterpret_cast<const EncounterReasonCancelled*>(
               &_EncounterReasonCancelled_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  void Swap(EncounterReasonCancelled* other);
  friend void swap(EncounterReasonCancelled& a, EncounterReasonCancelled& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EncounterReasonCancelled* New() const final {
    return CreateMaybeMessage<EncounterReasonCancelled>(NULL);
  }

  EncounterReasonCancelled* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EncounterReasonCancelled>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EncounterReasonCancelled& from);
  void MergeFrom(const EncounterReasonCancelled& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncounterReasonCancelled* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.EncounterReasonCancelled)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EntryFormat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.EntryFormat) */ {
 public:
  EntryFormat();
  virtual ~EntryFormat();

  EntryFormat(const EntryFormat& from);

  inline EntryFormat& operator=(const EntryFormat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntryFormat(EntryFormat&& from) noexcept
    : EntryFormat() {
    *this = ::std::move(from);
  }

  inline EntryFormat& operator=(EntryFormat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntryFormat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntryFormat* internal_default_instance() {
    return reinterpret_cast<const EntryFormat*>(
               &_EntryFormat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  void Swap(EntryFormat* other);
  friend void swap(EntryFormat& a, EntryFormat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntryFormat* New() const final {
    return CreateMaybeMessage<EntryFormat>(NULL);
  }

  EntryFormat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EntryFormat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EntryFormat& from);
  void MergeFrom(const EntryFormat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntryFormat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.EntryFormat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Definition_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Definition.Value) */ {
 public:
  Definition_Value();
  virtual ~Definition_Value();

  Definition_Value(const Definition_Value& from);

  inline Definition_Value& operator=(const Definition_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Definition_Value(Definition_Value&& from) noexcept
    : Definition_Value() {
    *this = ::std::move(from);
  }

  inline Definition_Value& operator=(Definition_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Definition_Value& default_instance();

  enum ValueCase {
    kReference = 1,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Definition_Value* internal_default_instance() {
    return reinterpret_cast<const Definition_Value*>(
               &_Definition_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  void Swap(Definition_Value* other);
  friend void swap(Definition_Value& a, Definition_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Definition_Value* New() const final {
    return CreateMaybeMessage<Definition_Value>(NULL);
  }

  Definition_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Definition_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Definition_Value& from);
  void MergeFrom(const Definition_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Definition_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ActivityDefinition", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/PlanDefinition"];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Definition.Value)
 private:
  void set_has_reference();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::Reference* reference_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Definition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Definition) */ {
 public:
  Definition();
  virtual ~Definition();

  Definition(const Definition& from);

  inline Definition& operator=(const Definition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Definition(Definition&& from) noexcept
    : Definition() {
    *this = ::std::move(from);
  }

  inline Definition& operator=(Definition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Definition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Definition* internal_default_instance() {
    return reinterpret_cast<const Definition*>(
               &_Definition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  void Swap(Definition* other);
  friend void swap(Definition& a, Definition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Definition* New() const final {
    return CreateMaybeMessage<Definition>(NULL);
  }

  Definition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Definition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Definition& from);
  void MergeFrom(const Definition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Definition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Definition_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Definition.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Definition_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::Definition_Value& value() const;
  ::google::fhir::stu3::proto::Definition_Value* release_value();
  ::google::fhir::stu3::proto::Definition_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::Definition_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Definition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Definition_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiagnosticReportNotDone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DiagnosticReportNotDone) */ {
 public:
  DiagnosticReportNotDone();
  virtual ~DiagnosticReportNotDone();

  DiagnosticReportNotDone(const DiagnosticReportNotDone& from);

  inline DiagnosticReportNotDone& operator=(const DiagnosticReportNotDone& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiagnosticReportNotDone(DiagnosticReportNotDone&& from) noexcept
    : DiagnosticReportNotDone() {
    *this = ::std::move(from);
  }

  inline DiagnosticReportNotDone& operator=(DiagnosticReportNotDone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiagnosticReportNotDone& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosticReportNotDone* internal_default_instance() {
    return reinterpret_cast<const DiagnosticReportNotDone*>(
               &_DiagnosticReportNotDone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  void Swap(DiagnosticReportNotDone* other);
  friend void swap(DiagnosticReportNotDone& a, DiagnosticReportNotDone& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosticReportNotDone* New() const final {
    return CreateMaybeMessage<DiagnosticReportNotDone>(NULL);
  }

  DiagnosticReportNotDone* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosticReportNotDone>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiagnosticReportNotDone& from);
  void MergeFrom(const DiagnosticReportNotDone& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosticReportNotDone* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DiagnosticReportNotDone)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OnBehalfOf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.OnBehalfOf) */ {
 public:
  OnBehalfOf();
  virtual ~OnBehalfOf();

  OnBehalfOf(const OnBehalfOf& from);

  inline OnBehalfOf& operator=(const OnBehalfOf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OnBehalfOf(OnBehalfOf&& from) noexcept
    : OnBehalfOf() {
    *this = ::std::move(from);
  }

  inline OnBehalfOf& operator=(OnBehalfOf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OnBehalfOf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnBehalfOf* internal_default_instance() {
    return reinterpret_cast<const OnBehalfOf*>(
               &_OnBehalfOf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  void Swap(OnBehalfOf* other);
  friend void swap(OnBehalfOf& a, OnBehalfOf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OnBehalfOf* New() const final {
    return CreateMaybeMessage<OnBehalfOf>(NULL);
  }

  OnBehalfOf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OnBehalfOf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OnBehalfOf& from);
  void MergeFrom(const OnBehalfOf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnBehalfOf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Organization"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.OnBehalfOf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PartOf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.PartOf) */ {
 public:
  PartOf();
  virtual ~PartOf();

  PartOf(const PartOf& from);

  inline PartOf& operator=(const PartOf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PartOf(PartOf&& from) noexcept
    : PartOf() {
    *this = ::std::move(from);
  }

  inline PartOf& operator=(PartOf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PartOf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PartOf* internal_default_instance() {
    return reinterpret_cast<const PartOf*>(
               &_PartOf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  void Swap(PartOf* other);
  friend void swap(PartOf& a, PartOf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PartOf* New() const final {
    return CreateMaybeMessage<PartOf>(NULL);
  }

  PartOf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PartOf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PartOf& from);
  void MergeFrom(const PartOf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartOf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Resource"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.PartOf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObservationPerformerRole : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ObservationPerformerRole) */ {
 public:
  ObservationPerformerRole();
  virtual ~ObservationPerformerRole();

  ObservationPerformerRole(const ObservationPerformerRole& from);

  inline ObservationPerformerRole& operator=(const ObservationPerformerRole& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObservationPerformerRole(ObservationPerformerRole&& from) noexcept
    : ObservationPerformerRole() {
    *this = ::std::move(from);
  }

  inline ObservationPerformerRole& operator=(ObservationPerformerRole&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservationPerformerRole& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservationPerformerRole* internal_default_instance() {
    return reinterpret_cast<const ObservationPerformerRole*>(
               &_ObservationPerformerRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  void Swap(ObservationPerformerRole* other);
  friend void swap(ObservationPerformerRole& a, ObservationPerformerRole& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObservationPerformerRole* New() const final {
    return CreateMaybeMessage<ObservationPerformerRole>(NULL);
  }

  ObservationPerformerRole* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObservationPerformerRole>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObservationPerformerRole& from);
  void MergeFrom(const ObservationPerformerRole& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationPerformerRole* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ObservationPerformerRole)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReasonCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ReasonCode) */ {
 public:
  ReasonCode();
  virtual ~ReasonCode();

  ReasonCode(const ReasonCode& from);

  inline ReasonCode& operator=(const ReasonCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReasonCode(ReasonCode&& from) noexcept
    : ReasonCode() {
    *this = ::std::move(from);
  }

  inline ReasonCode& operator=(ReasonCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReasonCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReasonCode* internal_default_instance() {
    return reinterpret_cast<const ReasonCode*>(
               &_ReasonCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  void Swap(ReasonCode* other);
  friend void swap(ReasonCode& a, ReasonCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReasonCode* New() const final {
    return CreateMaybeMessage<ReasonCode>(NULL);
  }

  ReasonCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReasonCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReasonCode& from);
  void MergeFrom(const ReasonCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReasonCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ReasonCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReasonReference_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ReasonReference.Value) */ {
 public:
  ReasonReference_Value();
  virtual ~ReasonReference_Value();

  ReasonReference_Value(const ReasonReference_Value& from);

  inline ReasonReference_Value& operator=(const ReasonReference_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReasonReference_Value(ReasonReference_Value&& from) noexcept
    : ReasonReference_Value() {
    *this = ::std::move(from);
  }

  inline ReasonReference_Value& operator=(ReasonReference_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReasonReference_Value& default_instance();

  enum ValueCase {
    kReference = 1,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReasonReference_Value* internal_default_instance() {
    return reinterpret_cast<const ReasonReference_Value*>(
               &_ReasonReference_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  void Swap(ReasonReference_Value* other);
  friend void swap(ReasonReference_Value& a, ReasonReference_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReasonReference_Value* New() const final {
    return CreateMaybeMessage<ReasonReference_Value>(NULL);
  }

  ReasonReference_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReasonReference_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReasonReference_Value& from);
  void MergeFrom(const ReasonReference_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReasonReference_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Condition", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Observation"];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ReasonReference.Value)
 private:
  void set_has_reference();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::Reference* reference_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReasonReference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ReasonReference) */ {
 public:
  ReasonReference();
  virtual ~ReasonReference();

  ReasonReference(const ReasonReference& from);

  inline ReasonReference& operator=(const ReasonReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReasonReference(ReasonReference&& from) noexcept
    : ReasonReference() {
    *this = ::std::move(from);
  }

  inline ReasonReference& operator=(ReasonReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReasonReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReasonReference* internal_default_instance() {
    return reinterpret_cast<const ReasonReference*>(
               &_ReasonReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  void Swap(ReasonReference* other);
  friend void swap(ReasonReference& a, ReasonReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReasonReference* New() const final {
    return CreateMaybeMessage<ReasonReference>(NULL);
  }

  ReasonReference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReasonReference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReasonReference& from);
  void MergeFrom(const ReasonReference& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReasonReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReasonReference_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.ReasonReference.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::ReasonReference_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::ReasonReference_Value& value() const;
  ::google::fhir::stu3::proto::ReasonReference_Value* release_value();
  ::google::fhir::stu3::proto::ReasonReference_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::ReasonReference_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ReasonReference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::ReasonReference_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FamilyMemberHistoryObservation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.FamilyMemberHistoryObservation) */ {
 public:
  FamilyMemberHistoryObservation();
  virtual ~FamilyMemberHistoryObservation();

  FamilyMemberHistoryObservation(const FamilyMemberHistoryObservation& from);

  inline FamilyMemberHistoryObservation& operator=(const FamilyMemberHistoryObservation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FamilyMemberHistoryObservation(FamilyMemberHistoryObservation&& from) noexcept
    : FamilyMemberHistoryObservation() {
    *this = ::std::move(from);
  }

  inline FamilyMemberHistoryObservation& operator=(FamilyMemberHistoryObservation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FamilyMemberHistoryObservation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FamilyMemberHistoryObservation* internal_default_instance() {
    return reinterpret_cast<const FamilyMemberHistoryObservation*>(
               &_FamilyMemberHistoryObservation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  void Swap(FamilyMemberHistoryObservation* other);
  friend void swap(FamilyMemberHistoryObservation& a, FamilyMemberHistoryObservation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FamilyMemberHistoryObservation* New() const final {
    return CreateMaybeMessage<FamilyMemberHistoryObservation>(NULL);
  }

  FamilyMemberHistoryObservation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FamilyMemberHistoryObservation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FamilyMemberHistoryObservation& from);
  void MergeFrom(const FamilyMemberHistoryObservation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FamilyMemberHistoryObservation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Observation"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.FamilyMemberHistoryObservation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FamilyMemberHistoryParent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.FamilyMemberHistoryParent) */ {
 public:
  FamilyMemberHistoryParent();
  virtual ~FamilyMemberHistoryParent();

  FamilyMemberHistoryParent(const FamilyMemberHistoryParent& from);

  inline FamilyMemberHistoryParent& operator=(const FamilyMemberHistoryParent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FamilyMemberHistoryParent(FamilyMemberHistoryParent&& from) noexcept
    : FamilyMemberHistoryParent() {
    *this = ::std::move(from);
  }

  inline FamilyMemberHistoryParent& operator=(FamilyMemberHistoryParent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FamilyMemberHistoryParent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FamilyMemberHistoryParent* internal_default_instance() {
    return reinterpret_cast<const FamilyMemberHistoryParent*>(
               &_FamilyMemberHistoryParent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  void Swap(FamilyMemberHistoryParent* other);
  friend void swap(FamilyMemberHistoryParent& a, FamilyMemberHistoryParent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FamilyMemberHistoryParent* New() const final {
    return CreateMaybeMessage<FamilyMemberHistoryParent>(NULL);
  }

  FamilyMemberHistoryParent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FamilyMemberHistoryParent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FamilyMemberHistoryParent& from);
  void MergeFrom(const FamilyMemberHistoryParent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FamilyMemberHistoryParent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept type = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_type() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& type() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_type();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_type();
  void set_allocated_type(::google::fhir::stu3::proto::CodeableConcept* type);

  // .google.fhir.stu3.proto.Reference reference = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.FamilyMemberHistoryParent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* type_;
  ::google::fhir::stu3::proto::Reference* reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FamilyMemberHistorySibling : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.FamilyMemberHistorySibling) */ {
 public:
  FamilyMemberHistorySibling();
  virtual ~FamilyMemberHistorySibling();

  FamilyMemberHistorySibling(const FamilyMemberHistorySibling& from);

  inline FamilyMemberHistorySibling& operator=(const FamilyMemberHistorySibling& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FamilyMemberHistorySibling(FamilyMemberHistorySibling&& from) noexcept
    : FamilyMemberHistorySibling() {
    *this = ::std::move(from);
  }

  inline FamilyMemberHistorySibling& operator=(FamilyMemberHistorySibling&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FamilyMemberHistorySibling& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FamilyMemberHistorySibling* internal_default_instance() {
    return reinterpret_cast<const FamilyMemberHistorySibling*>(
               &_FamilyMemberHistorySibling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  void Swap(FamilyMemberHistorySibling* other);
  friend void swap(FamilyMemberHistorySibling& a, FamilyMemberHistorySibling& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FamilyMemberHistorySibling* New() const final {
    return CreateMaybeMessage<FamilyMemberHistorySibling>(NULL);
  }

  FamilyMemberHistorySibling* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FamilyMemberHistorySibling>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FamilyMemberHistorySibling& from);
  void MergeFrom(const FamilyMemberHistorySibling& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FamilyMemberHistorySibling* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept type = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_type() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& type() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_type();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_type();
  void set_allocated_type(::google::fhir::stu3::proto::CodeableConcept* type);

  // .google.fhir.stu3.proto.Reference reference = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.FamilyMemberHistorySibling)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* type_;
  ::google::fhir::stu3::proto::Reference* reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FamilyMemberHistoryAbatement_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.FamilyMemberHistoryAbatement.Value) */ {
 public:
  FamilyMemberHistoryAbatement_Value();
  virtual ~FamilyMemberHistoryAbatement_Value();

  FamilyMemberHistoryAbatement_Value(const FamilyMemberHistoryAbatement_Value& from);

  inline FamilyMemberHistoryAbatement_Value& operator=(const FamilyMemberHistoryAbatement_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FamilyMemberHistoryAbatement_Value(FamilyMemberHistoryAbatement_Value&& from) noexcept
    : FamilyMemberHistoryAbatement_Value() {
    *this = ::std::move(from);
  }

  inline FamilyMemberHistoryAbatement_Value& operator=(FamilyMemberHistoryAbatement_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FamilyMemberHistoryAbatement_Value& default_instance();

  enum ValueCase {
    kDate = 1,
    kAge = 2,
    kBoolean = 3,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FamilyMemberHistoryAbatement_Value* internal_default_instance() {
    return reinterpret_cast<const FamilyMemberHistoryAbatement_Value*>(
               &_FamilyMemberHistoryAbatement_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  void Swap(FamilyMemberHistoryAbatement_Value* other);
  friend void swap(FamilyMemberHistoryAbatement_Value& a, FamilyMemberHistoryAbatement_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FamilyMemberHistoryAbatement_Value* New() const final {
    return CreateMaybeMessage<FamilyMemberHistoryAbatement_Value>(NULL);
  }

  FamilyMemberHistoryAbatement_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FamilyMemberHistoryAbatement_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FamilyMemberHistoryAbatement_Value& from);
  void MergeFrom(const FamilyMemberHistoryAbatement_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FamilyMemberHistoryAbatement_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Date date = 1;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Date& _internal_date() const;
  public:
  const ::google::fhir::stu3::proto::Date& date() const;
  ::google::fhir::stu3::proto::Date* release_date();
  ::google::fhir::stu3::proto::Date* mutable_date();
  void set_allocated_date(::google::fhir::stu3::proto::Date* date);

  // .google.fhir.stu3.proto.Age age = 2;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::Age& _internal_age() const;
  public:
  const ::google::fhir::stu3::proto::Age& age() const;
  ::google::fhir::stu3::proto::Age* release_age();
  ::google::fhir::stu3::proto::Age* mutable_age();
  void set_allocated_age(::google::fhir::stu3::proto::Age* age);

  // .google.fhir.stu3.proto.Boolean boolean = 3;
  bool has_boolean() const;
  void clear_boolean();
  static const int kBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_boolean();
  void set_allocated_boolean(::google::fhir::stu3::proto::Boolean* boolean);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.FamilyMemberHistoryAbatement.Value)
 private:
  void set_has_date();
  void set_has_age();
  void set_has_boolean();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::Date* date_;
    ::google::fhir::stu3::proto::Age* age_;
    ::google::fhir::stu3::proto::Boolean* boolean_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FamilyMemberHistoryAbatement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.FamilyMemberHistoryAbatement) */ {
 public:
  FamilyMemberHistoryAbatement();
  virtual ~FamilyMemberHistoryAbatement();

  FamilyMemberHistoryAbatement(const FamilyMemberHistoryAbatement& from);

  inline FamilyMemberHistoryAbatement& operator=(const FamilyMemberHistoryAbatement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FamilyMemberHistoryAbatement(FamilyMemberHistoryAbatement&& from) noexcept
    : FamilyMemberHistoryAbatement() {
    *this = ::std::move(from);
  }

  inline FamilyMemberHistoryAbatement& operator=(FamilyMemberHistoryAbatement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FamilyMemberHistoryAbatement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FamilyMemberHistoryAbatement* internal_default_instance() {
    return reinterpret_cast<const FamilyMemberHistoryAbatement*>(
               &_FamilyMemberHistoryAbatement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  void Swap(FamilyMemberHistoryAbatement* other);
  friend void swap(FamilyMemberHistoryAbatement& a, FamilyMemberHistoryAbatement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FamilyMemberHistoryAbatement* New() const final {
    return CreateMaybeMessage<FamilyMemberHistoryAbatement>(NULL);
  }

  FamilyMemberHistoryAbatement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FamilyMemberHistoryAbatement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FamilyMemberHistoryAbatement& from);
  void MergeFrom(const FamilyMemberHistoryAbatement& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FamilyMemberHistoryAbatement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FamilyMemberHistoryAbatement_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.FamilyMemberHistoryAbatement.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::FamilyMemberHistoryAbatement_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::FamilyMemberHistoryAbatement_Value& value() const;
  ::google::fhir::stu3::proto::FamilyMemberHistoryAbatement_Value* release_value();
  ::google::fhir::stu3::proto::FamilyMemberHistoryAbatement_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::FamilyMemberHistoryAbatement_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.FamilyMemberHistoryAbatement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::FamilyMemberHistoryAbatement_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FamilyMemberHistoryPatientRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.FamilyMemberHistoryPatientRecord) */ {
 public:
  FamilyMemberHistoryPatientRecord();
  virtual ~FamilyMemberHistoryPatientRecord();

  FamilyMemberHistoryPatientRecord(const FamilyMemberHistoryPatientRecord& from);

  inline FamilyMemberHistoryPatientRecord& operator=(const FamilyMemberHistoryPatientRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FamilyMemberHistoryPatientRecord(FamilyMemberHistoryPatientRecord&& from) noexcept
    : FamilyMemberHistoryPatientRecord() {
    *this = ::std::move(from);
  }

  inline FamilyMemberHistoryPatientRecord& operator=(FamilyMemberHistoryPatientRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FamilyMemberHistoryPatientRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FamilyMemberHistoryPatientRecord* internal_default_instance() {
    return reinterpret_cast<const FamilyMemberHistoryPatientRecord*>(
               &_FamilyMemberHistoryPatientRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  void Swap(FamilyMemberHistoryPatientRecord* other);
  friend void swap(FamilyMemberHistoryPatientRecord& a, FamilyMemberHistoryPatientRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FamilyMemberHistoryPatientRecord* New() const final {
    return CreateMaybeMessage<FamilyMemberHistoryPatientRecord>(NULL);
  }

  FamilyMemberHistoryPatientRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FamilyMemberHistoryPatientRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FamilyMemberHistoryPatientRecord& from);
  void MergeFrom(const FamilyMemberHistoryPatientRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FamilyMemberHistoryPatientRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Patient"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.FamilyMemberHistoryPatientRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FamilyMemberHistorySeverity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.FamilyMemberHistorySeverity) */ {
 public:
  FamilyMemberHistorySeverity();
  virtual ~FamilyMemberHistorySeverity();

  FamilyMemberHistorySeverity(const FamilyMemberHistorySeverity& from);

  inline FamilyMemberHistorySeverity& operator=(const FamilyMemberHistorySeverity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FamilyMemberHistorySeverity(FamilyMemberHistorySeverity&& from) noexcept
    : FamilyMemberHistorySeverity() {
    *this = ::std::move(from);
  }

  inline FamilyMemberHistorySeverity& operator=(FamilyMemberHistorySeverity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FamilyMemberHistorySeverity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FamilyMemberHistorySeverity* internal_default_instance() {
    return reinterpret_cast<const FamilyMemberHistorySeverity*>(
               &_FamilyMemberHistorySeverity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  void Swap(FamilyMemberHistorySeverity* other);
  friend void swap(FamilyMemberHistorySeverity& a, FamilyMemberHistorySeverity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FamilyMemberHistorySeverity* New() const final {
    return CreateMaybeMessage<FamilyMemberHistorySeverity>(NULL);
  }

  FamilyMemberHistorySeverity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FamilyMemberHistorySeverity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FamilyMemberHistorySeverity& from);
  void MergeFrom(const FamilyMemberHistorySeverity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FamilyMemberHistorySeverity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.FamilyMemberHistorySeverity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FamilyMemberHistoryType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.FamilyMemberHistoryType) */ {
 public:
  FamilyMemberHistoryType();
  virtual ~FamilyMemberHistoryType();

  FamilyMemberHistoryType(const FamilyMemberHistoryType& from);

  inline FamilyMemberHistoryType& operator=(const FamilyMemberHistoryType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FamilyMemberHistoryType(FamilyMemberHistoryType&& from) noexcept
    : FamilyMemberHistoryType() {
    *this = ::std::move(from);
  }

  inline FamilyMemberHistoryType& operator=(FamilyMemberHistoryType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FamilyMemberHistoryType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FamilyMemberHistoryType* internal_default_instance() {
    return reinterpret_cast<const FamilyMemberHistoryType*>(
               &_FamilyMemberHistoryType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  void Swap(FamilyMemberHistoryType* other);
  friend void swap(FamilyMemberHistoryType& a, FamilyMemberHistoryType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FamilyMemberHistoryType* New() const final {
    return CreateMaybeMessage<FamilyMemberHistoryType>(NULL);
  }

  FamilyMemberHistoryType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FamilyMemberHistoryType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FamilyMemberHistoryType& from);
  void MergeFrom(const FamilyMemberHistoryType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FamilyMemberHistoryType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.FamilyMemberHistoryType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FlagDetail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.FlagDetail) */ {
 public:
  FlagDetail();
  virtual ~FlagDetail();

  FlagDetail(const FlagDetail& from);

  inline FlagDetail& operator=(const FlagDetail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlagDetail(FlagDetail&& from) noexcept
    : FlagDetail() {
    *this = ::std::move(from);
  }

  inline FlagDetail& operator=(FlagDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlagDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlagDetail* internal_default_instance() {
    return reinterpret_cast<const FlagDetail*>(
               &_FlagDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  void Swap(FlagDetail* other);
  friend void swap(FlagDetail& a, FlagDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlagDetail* New() const final {
    return CreateMaybeMessage<FlagDetail>(NULL);
  }

  FlagDetail* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FlagDetail>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FlagDetail& from);
  void MergeFrom(const FlagDetail& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlagDetail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Resource"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.FlagDetail)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FlagPriority : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.FlagPriority) */ {
 public:
  FlagPriority();
  virtual ~FlagPriority();

  FlagPriority(const FlagPriority& from);

  inline FlagPriority& operator=(const FlagPriority& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlagPriority(FlagPriority&& from) noexcept
    : FlagPriority() {
    *this = ::std::move(from);
  }

  inline FlagPriority& operator=(FlagPriority&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FlagPriority& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlagPriority* internal_default_instance() {
    return reinterpret_cast<const FlagPriority*>(
               &_FlagPriority_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    165;

  void Swap(FlagPriority* other);
  friend void swap(FlagPriority& a, FlagPriority& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlagPriority* New() const final {
    return CreateMaybeMessage<FlagPriority>(NULL);
  }

  FlagPriority* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FlagPriority>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FlagPriority& from);
  void MergeFrom(const FlagPriority& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlagPriority* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.FlagPriority)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressGeolocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressGeolocation) */ {
 public:
  AddressGeolocation();
  virtual ~AddressGeolocation();

  AddressGeolocation(const AddressGeolocation& from);

  inline AddressGeolocation& operator=(const AddressGeolocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressGeolocation(AddressGeolocation&& from) noexcept
    : AddressGeolocation() {
    *this = ::std::move(from);
  }

  inline AddressGeolocation& operator=(AddressGeolocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressGeolocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressGeolocation* internal_default_instance() {
    return reinterpret_cast<const AddressGeolocation*>(
               &_AddressGeolocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    166;

  void Swap(AddressGeolocation* other);
  friend void swap(AddressGeolocation& a, AddressGeolocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressGeolocation* New() const final {
    return CreateMaybeMessage<AddressGeolocation>(NULL);
  }

  AddressGeolocation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressGeolocation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressGeolocation& from);
  void MergeFrom(const AddressGeolocation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressGeolocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Decimal latitude = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_latitude() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& latitude() const;
  ::google::fhir::stu3::proto::Decimal* release_latitude();
  ::google::fhir::stu3::proto::Decimal* mutable_latitude();
  void set_allocated_latitude(::google::fhir::stu3::proto::Decimal* latitude);

  // .google.fhir.stu3.proto.Decimal longitude = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_longitude() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& longitude() const;
  ::google::fhir::stu3::proto::Decimal* release_longitude();
  ::google::fhir::stu3::proto::Decimal* mutable_longitude();
  void set_allocated_longitude(::google::fhir::stu3::proto::Decimal* longitude);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressGeolocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Decimal* latitude_;
  ::google::fhir::stu3::proto::Decimal* longitude_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GoalAcceptance : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.GoalAcceptance) */ {
 public:
  GoalAcceptance();
  virtual ~GoalAcceptance();

  GoalAcceptance(const GoalAcceptance& from);

  inline GoalAcceptance& operator=(const GoalAcceptance& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GoalAcceptance(GoalAcceptance&& from) noexcept
    : GoalAcceptance() {
    *this = ::std::move(from);
  }

  inline GoalAcceptance& operator=(GoalAcceptance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GoalAcceptance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GoalAcceptance* internal_default_instance() {
    return reinterpret_cast<const GoalAcceptance*>(
               &_GoalAcceptance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    167;

  void Swap(GoalAcceptance* other);
  friend void swap(GoalAcceptance& a, GoalAcceptance& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GoalAcceptance* New() const final {
    return CreateMaybeMessage<GoalAcceptance>(NULL);
  }

  GoalAcceptance* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GoalAcceptance>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GoalAcceptance& from);
  void MergeFrom(const GoalAcceptance& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoalAcceptance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference individual = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_individual() const;
  void clear_individual();
  static const int kIndividualFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_individual() const;
  public:
  const ::google::fhir::stu3::proto::Reference& individual() const;
  ::google::fhir::stu3::proto::Reference* release_individual();
  ::google::fhir::stu3::proto::Reference* mutable_individual();
  void set_allocated_individual(::google::fhir::stu3::proto::Reference* individual);

  // .google.fhir.stu3.proto.GoalAcceptanceStatusCode status = 5;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::GoalAcceptanceStatusCode& _internal_status() const;
  public:
  const ::google::fhir::stu3::proto::GoalAcceptanceStatusCode& status() const;
  ::google::fhir::stu3::proto::GoalAcceptanceStatusCode* release_status();
  ::google::fhir::stu3::proto::GoalAcceptanceStatusCode* mutable_status();
  void set_allocated_status(::google::fhir::stu3::proto::GoalAcceptanceStatusCode* status);

  // .google.fhir.stu3.proto.CodeableConcept priority = 6;
  bool has_priority() const;
  void clear_priority();
  static const int kPriorityFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_priority() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& priority() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_priority();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_priority();
  void set_allocated_priority(::google::fhir::stu3::proto::CodeableConcept* priority);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.GoalAcceptance)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* individual_;
  ::google::fhir::stu3::proto::GoalAcceptanceStatusCode* status_;
  ::google::fhir::stu3::proto::CodeableConcept* priority_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResourcePertainsToGoal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ResourcePertainsToGoal) */ {
 public:
  ResourcePertainsToGoal();
  virtual ~ResourcePertainsToGoal();

  ResourcePertainsToGoal(const ResourcePertainsToGoal& from);

  inline ResourcePertainsToGoal& operator=(const ResourcePertainsToGoal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResourcePertainsToGoal(ResourcePertainsToGoal&& from) noexcept
    : ResourcePertainsToGoal() {
    *this = ::std::move(from);
  }

  inline ResourcePertainsToGoal& operator=(ResourcePertainsToGoal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourcePertainsToGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourcePertainsToGoal* internal_default_instance() {
    return reinterpret_cast<const ResourcePertainsToGoal*>(
               &_ResourcePertainsToGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    168;

  void Swap(ResourcePertainsToGoal* other);
  friend void swap(ResourcePertainsToGoal& a, ResourcePertainsToGoal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResourcePertainsToGoal* New() const final {
    return CreateMaybeMessage<ResourcePertainsToGoal>(NULL);
  }

  ResourcePertainsToGoal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResourcePertainsToGoal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResourcePertainsToGoal& from);
  void MergeFrom(const ResourcePertainsToGoal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourcePertainsToGoal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Goal"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ResourcePertainsToGoal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GoalReasonRejected : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.GoalReasonRejected) */ {
 public:
  GoalReasonRejected();
  virtual ~GoalReasonRejected();

  GoalReasonRejected(const GoalReasonRejected& from);

  inline GoalReasonRejected& operator=(const GoalReasonRejected& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GoalReasonRejected(GoalReasonRejected&& from) noexcept
    : GoalReasonRejected() {
    *this = ::std::move(from);
  }

  inline GoalReasonRejected& operator=(GoalReasonRejected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GoalReasonRejected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GoalReasonRejected* internal_default_instance() {
    return reinterpret_cast<const GoalReasonRejected*>(
               &_GoalReasonRejected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    169;

  void Swap(GoalReasonRejected* other);
  friend void swap(GoalReasonRejected& a, GoalReasonRejected& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GoalReasonRejected* New() const final {
    return CreateMaybeMessage<GoalReasonRejected>(NULL);
  }

  GoalReasonRejected* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GoalReasonRejected>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GoalReasonRejected& from);
  void MergeFrom(const GoalReasonRejected& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoalReasonRejected* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.GoalReasonRejected)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GoalRelationship : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.GoalRelationship) */ {
 public:
  GoalRelationship();
  virtual ~GoalRelationship();

  GoalRelationship(const GoalRelationship& from);

  inline GoalRelationship& operator=(const GoalRelationship& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GoalRelationship(GoalRelationship&& from) noexcept
    : GoalRelationship() {
    *this = ::std::move(from);
  }

  inline GoalRelationship& operator=(GoalRelationship&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GoalRelationship& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GoalRelationship* internal_default_instance() {
    return reinterpret_cast<const GoalRelationship*>(
               &_GoalRelationship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    170;

  void Swap(GoalRelationship* other);
  friend void swap(GoalRelationship& a, GoalRelationship& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GoalRelationship* New() const final {
    return CreateMaybeMessage<GoalRelationship>(NULL);
  }

  GoalRelationship* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GoalRelationship>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GoalRelationship& from);
  void MergeFrom(const GoalRelationship& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoalRelationship* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept type = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_type() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& type() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_type();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_type();
  void set_allocated_type(::google::fhir::stu3::proto::CodeableConcept* type);

  // .google.fhir.stu3.proto.Reference target = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_target() const;
  public:
  const ::google::fhir::stu3::proto::Reference& target() const;
  ::google::fhir::stu3::proto::Reference* release_target();
  ::google::fhir::stu3::proto::Reference* mutable_target();
  void set_allocated_target(::google::fhir::stu3::proto::Reference* target);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.GoalRelationship)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* type_;
  ::google::fhir::stu3::proto::Reference* target_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiagnosticReportAlleleDatabase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DiagnosticReportAlleleDatabase) */ {
 public:
  DiagnosticReportAlleleDatabase();
  virtual ~DiagnosticReportAlleleDatabase();

  DiagnosticReportAlleleDatabase(const DiagnosticReportAlleleDatabase& from);

  inline DiagnosticReportAlleleDatabase& operator=(const DiagnosticReportAlleleDatabase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiagnosticReportAlleleDatabase(DiagnosticReportAlleleDatabase&& from) noexcept
    : DiagnosticReportAlleleDatabase() {
    *this = ::std::move(from);
  }

  inline DiagnosticReportAlleleDatabase& operator=(DiagnosticReportAlleleDatabase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiagnosticReportAlleleDatabase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosticReportAlleleDatabase* internal_default_instance() {
    return reinterpret_cast<const DiagnosticReportAlleleDatabase*>(
               &_DiagnosticReportAlleleDatabase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    171;

  void Swap(DiagnosticReportAlleleDatabase* other);
  friend void swap(DiagnosticReportAlleleDatabase& a, DiagnosticReportAlleleDatabase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosticReportAlleleDatabase* New() const final {
    return CreateMaybeMessage<DiagnosticReportAlleleDatabase>(NULL);
  }

  DiagnosticReportAlleleDatabase* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosticReportAlleleDatabase>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiagnosticReportAlleleDatabase& from);
  void MergeFrom(const DiagnosticReportAlleleDatabase& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosticReportAlleleDatabase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DiagnosticReportAlleleDatabase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiagnosticReportGlstring : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DiagnosticReportGlstring) */ {
 public:
  DiagnosticReportGlstring();
  virtual ~DiagnosticReportGlstring();

  DiagnosticReportGlstring(const DiagnosticReportGlstring& from);

  inline DiagnosticReportGlstring& operator=(const DiagnosticReportGlstring& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiagnosticReportGlstring(DiagnosticReportGlstring&& from) noexcept
    : DiagnosticReportGlstring() {
    *this = ::std::move(from);
  }

  inline DiagnosticReportGlstring& operator=(DiagnosticReportGlstring&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiagnosticReportGlstring& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosticReportGlstring* internal_default_instance() {
    return reinterpret_cast<const DiagnosticReportGlstring*>(
               &_DiagnosticReportGlstring_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    172;

  void Swap(DiagnosticReportGlstring* other);
  friend void swap(DiagnosticReportGlstring& a, DiagnosticReportGlstring& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosticReportGlstring* New() const final {
    return CreateMaybeMessage<DiagnosticReportGlstring>(NULL);
  }

  DiagnosticReportGlstring* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosticReportGlstring>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiagnosticReportGlstring& from);
  void MergeFrom(const DiagnosticReportGlstring& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosticReportGlstring* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri url = 4;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_url() const;
  public:
  const ::google::fhir::stu3::proto::Uri& url() const;
  ::google::fhir::stu3::proto::Uri* release_url();
  ::google::fhir::stu3::proto::Uri* mutable_url();
  void set_allocated_url(::google::fhir::stu3::proto::Uri* url);

  // .google.fhir.stu3.proto.String text = 5;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::String& _internal_text() const;
  public:
  const ::google::fhir::stu3::proto::String& text() const;
  ::google::fhir::stu3::proto::String* release_text();
  ::google::fhir::stu3::proto::String* mutable_text();
  void set_allocated_text(::google::fhir::stu3::proto::String* text);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DiagnosticReportGlstring)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* url_;
  ::google::fhir::stu3::proto::String* text_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiagnosticReportHaploid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DiagnosticReportHaploid) */ {
 public:
  DiagnosticReportHaploid();
  virtual ~DiagnosticReportHaploid();

  DiagnosticReportHaploid(const DiagnosticReportHaploid& from);

  inline DiagnosticReportHaploid& operator=(const DiagnosticReportHaploid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiagnosticReportHaploid(DiagnosticReportHaploid&& from) noexcept
    : DiagnosticReportHaploid() {
    *this = ::std::move(from);
  }

  inline DiagnosticReportHaploid& operator=(DiagnosticReportHaploid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiagnosticReportHaploid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosticReportHaploid* internal_default_instance() {
    return reinterpret_cast<const DiagnosticReportHaploid*>(
               &_DiagnosticReportHaploid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    173;

  void Swap(DiagnosticReportHaploid* other);
  friend void swap(DiagnosticReportHaploid& a, DiagnosticReportHaploid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosticReportHaploid* New() const final {
    return CreateMaybeMessage<DiagnosticReportHaploid>(NULL);
  }

  DiagnosticReportHaploid* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosticReportHaploid>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiagnosticReportHaploid& from);
  void MergeFrom(const DiagnosticReportHaploid& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosticReportHaploid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept locus = 4;
  bool has_locus() const;
  void clear_locus();
  static const int kLocusFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_locus() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& locus() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_locus();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_locus();
  void set_allocated_locus(::google::fhir::stu3::proto::CodeableConcept* locus);

  // .google.fhir.stu3.proto.CodeableConcept type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_type() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& type() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_type();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_type();
  void set_allocated_type(::google::fhir::stu3::proto::CodeableConcept* type);

  // .google.fhir.stu3.proto.CodeableConcept method = 6;
  bool has_method() const;
  void clear_method();
  static const int kMethodFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_method() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& method() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_method();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_method();
  void set_allocated_method(::google::fhir::stu3::proto::CodeableConcept* method);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DiagnosticReportHaploid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* locus_;
  ::google::fhir::stu3::proto::CodeableConcept* type_;
  ::google::fhir::stu3::proto::CodeableConcept* method_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiagnosticReportMethod : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DiagnosticReportMethod) */ {
 public:
  DiagnosticReportMethod();
  virtual ~DiagnosticReportMethod();

  DiagnosticReportMethod(const DiagnosticReportMethod& from);

  inline DiagnosticReportMethod& operator=(const DiagnosticReportMethod& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiagnosticReportMethod(DiagnosticReportMethod&& from) noexcept
    : DiagnosticReportMethod() {
    *this = ::std::move(from);
  }

  inline DiagnosticReportMethod& operator=(DiagnosticReportMethod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiagnosticReportMethod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosticReportMethod* internal_default_instance() {
    return reinterpret_cast<const DiagnosticReportMethod*>(
               &_DiagnosticReportMethod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    174;

  void Swap(DiagnosticReportMethod* other);
  friend void swap(DiagnosticReportMethod& a, DiagnosticReportMethod& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosticReportMethod* New() const final {
    return CreateMaybeMessage<DiagnosticReportMethod>(NULL);
  }

  DiagnosticReportMethod* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosticReportMethod>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiagnosticReportMethod& from);
  void MergeFrom(const DiagnosticReportMethod& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosticReportMethod* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DiagnosticReportMethod)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BundleHttpResponseHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.BundleHttpResponseHeader) */ {
 public:
  BundleHttpResponseHeader();
  virtual ~BundleHttpResponseHeader();

  BundleHttpResponseHeader(const BundleHttpResponseHeader& from);

  inline BundleHttpResponseHeader& operator=(const BundleHttpResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BundleHttpResponseHeader(BundleHttpResponseHeader&& from) noexcept
    : BundleHttpResponseHeader() {
    *this = ::std::move(from);
  }

  inline BundleHttpResponseHeader& operator=(BundleHttpResponseHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BundleHttpResponseHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BundleHttpResponseHeader* internal_default_instance() {
    return reinterpret_cast<const BundleHttpResponseHeader*>(
               &_BundleHttpResponseHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    175;

  void Swap(BundleHttpResponseHeader* other);
  friend void swap(BundleHttpResponseHeader& a, BundleHttpResponseHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BundleHttpResponseHeader* New() const final {
    return CreateMaybeMessage<BundleHttpResponseHeader>(NULL);
  }

  BundleHttpResponseHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BundleHttpResponseHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BundleHttpResponseHeader& from);
  void MergeFrom(const BundleHttpResponseHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BundleHttpResponseHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.BundleHttpResponseHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HumanNameAssemblyOrder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.HumanNameAssemblyOrder) */ {
 public:
  HumanNameAssemblyOrder();
  virtual ~HumanNameAssemblyOrder();

  HumanNameAssemblyOrder(const HumanNameAssemblyOrder& from);

  inline HumanNameAssemblyOrder& operator=(const HumanNameAssemblyOrder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HumanNameAssemblyOrder(HumanNameAssemblyOrder&& from) noexcept
    : HumanNameAssemblyOrder() {
    *this = ::std::move(from);
  }

  inline HumanNameAssemblyOrder& operator=(HumanNameAssemblyOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HumanNameAssemblyOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HumanNameAssemblyOrder* internal_default_instance() {
    return reinterpret_cast<const HumanNameAssemblyOrder*>(
               &_HumanNameAssemblyOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    176;

  void Swap(HumanNameAssemblyOrder* other);
  friend void swap(HumanNameAssemblyOrder& a, HumanNameAssemblyOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HumanNameAssemblyOrder* New() const final {
    return CreateMaybeMessage<HumanNameAssemblyOrder>(NULL);
  }

  HumanNameAssemblyOrder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HumanNameAssemblyOrder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HumanNameAssemblyOrder& from);
  void MergeFrom(const HumanNameAssemblyOrder& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HumanNameAssemblyOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.HumanNameAssemblyOrderCode value_code = 3;
  bool has_value_code() const;
  void clear_value_code();
  static const int kValueCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::HumanNameAssemblyOrderCode& _internal_value_code() const;
  public:
  const ::google::fhir::stu3::proto::HumanNameAssemblyOrderCode& value_code() const;
  ::google::fhir::stu3::proto::HumanNameAssemblyOrderCode* release_value_code();
  ::google::fhir::stu3::proto::HumanNameAssemblyOrderCode* mutable_value_code();
  void set_allocated_value_code(::google::fhir::stu3::proto::HumanNameAssemblyOrderCode* value_code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.HumanNameAssemblyOrder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::HumanNameAssemblyOrderCode* value_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HumanNameFathersFamily : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.HumanNameFathersFamily) */ {
 public:
  HumanNameFathersFamily();
  virtual ~HumanNameFathersFamily();

  HumanNameFathersFamily(const HumanNameFathersFamily& from);

  inline HumanNameFathersFamily& operator=(const HumanNameFathersFamily& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HumanNameFathersFamily(HumanNameFathersFamily&& from) noexcept
    : HumanNameFathersFamily() {
    *this = ::std::move(from);
  }

  inline HumanNameFathersFamily& operator=(HumanNameFathersFamily&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HumanNameFathersFamily& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HumanNameFathersFamily* internal_default_instance() {
    return reinterpret_cast<const HumanNameFathersFamily*>(
               &_HumanNameFathersFamily_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    177;

  void Swap(HumanNameFathersFamily* other);
  friend void swap(HumanNameFathersFamily& a, HumanNameFathersFamily& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HumanNameFathersFamily* New() const final {
    return CreateMaybeMessage<HumanNameFathersFamily>(NULL);
  }

  HumanNameFathersFamily* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HumanNameFathersFamily>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HumanNameFathersFamily& from);
  void MergeFrom(const HumanNameFathersFamily& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HumanNameFathersFamily* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.HumanNameFathersFamily)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HumanNameMothersFamily : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.HumanNameMothersFamily) */ {
 public:
  HumanNameMothersFamily();
  virtual ~HumanNameMothersFamily();

  HumanNameMothersFamily(const HumanNameMothersFamily& from);

  inline HumanNameMothersFamily& operator=(const HumanNameMothersFamily& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HumanNameMothersFamily(HumanNameMothersFamily&& from) noexcept
    : HumanNameMothersFamily() {
    *this = ::std::move(from);
  }

  inline HumanNameMothersFamily& operator=(HumanNameMothersFamily&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HumanNameMothersFamily& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HumanNameMothersFamily* internal_default_instance() {
    return reinterpret_cast<const HumanNameMothersFamily*>(
               &_HumanNameMothersFamily_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    178;

  void Swap(HumanNameMothersFamily* other);
  friend void swap(HumanNameMothersFamily& a, HumanNameMothersFamily& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HumanNameMothersFamily* New() const final {
    return CreateMaybeMessage<HumanNameMothersFamily>(NULL);
  }

  HumanNameMothersFamily* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HumanNameMothersFamily>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HumanNameMothersFamily& from);
  void MergeFrom(const HumanNameMothersFamily& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HumanNameMothersFamily* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.HumanNameMothersFamily)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HumanNameOwnName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.HumanNameOwnName) */ {
 public:
  HumanNameOwnName();
  virtual ~HumanNameOwnName();

  HumanNameOwnName(const HumanNameOwnName& from);

  inline HumanNameOwnName& operator=(const HumanNameOwnName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HumanNameOwnName(HumanNameOwnName&& from) noexcept
    : HumanNameOwnName() {
    *this = ::std::move(from);
  }

  inline HumanNameOwnName& operator=(HumanNameOwnName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HumanNameOwnName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HumanNameOwnName* internal_default_instance() {
    return reinterpret_cast<const HumanNameOwnName*>(
               &_HumanNameOwnName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    179;

  void Swap(HumanNameOwnName* other);
  friend void swap(HumanNameOwnName& a, HumanNameOwnName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HumanNameOwnName* New() const final {
    return CreateMaybeMessage<HumanNameOwnName>(NULL);
  }

  HumanNameOwnName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HumanNameOwnName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HumanNameOwnName& from);
  void MergeFrom(const HumanNameOwnName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HumanNameOwnName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.HumanNameOwnName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HumanNameOwnPrefix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.HumanNameOwnPrefix) */ {
 public:
  HumanNameOwnPrefix();
  virtual ~HumanNameOwnPrefix();

  HumanNameOwnPrefix(const HumanNameOwnPrefix& from);

  inline HumanNameOwnPrefix& operator=(const HumanNameOwnPrefix& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HumanNameOwnPrefix(HumanNameOwnPrefix&& from) noexcept
    : HumanNameOwnPrefix() {
    *this = ::std::move(from);
  }

  inline HumanNameOwnPrefix& operator=(HumanNameOwnPrefix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HumanNameOwnPrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HumanNameOwnPrefix* internal_default_instance() {
    return reinterpret_cast<const HumanNameOwnPrefix*>(
               &_HumanNameOwnPrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    180;

  void Swap(HumanNameOwnPrefix* other);
  friend void swap(HumanNameOwnPrefix& a, HumanNameOwnPrefix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HumanNameOwnPrefix* New() const final {
    return CreateMaybeMessage<HumanNameOwnPrefix>(NULL);
  }

  HumanNameOwnPrefix* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HumanNameOwnPrefix>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HumanNameOwnPrefix& from);
  void MergeFrom(const HumanNameOwnPrefix& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HumanNameOwnPrefix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.HumanNameOwnPrefix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HumanNamePartnerName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.HumanNamePartnerName) */ {
 public:
  HumanNamePartnerName();
  virtual ~HumanNamePartnerName();

  HumanNamePartnerName(const HumanNamePartnerName& from);

  inline HumanNamePartnerName& operator=(const HumanNamePartnerName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HumanNamePartnerName(HumanNamePartnerName&& from) noexcept
    : HumanNamePartnerName() {
    *this = ::std::move(from);
  }

  inline HumanNamePartnerName& operator=(HumanNamePartnerName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HumanNamePartnerName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HumanNamePartnerName* internal_default_instance() {
    return reinterpret_cast<const HumanNamePartnerName*>(
               &_HumanNamePartnerName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    181;

  void Swap(HumanNamePartnerName* other);
  friend void swap(HumanNamePartnerName& a, HumanNamePartnerName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HumanNamePartnerName* New() const final {
    return CreateMaybeMessage<HumanNamePartnerName>(NULL);
  }

  HumanNamePartnerName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HumanNamePartnerName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HumanNamePartnerName& from);
  void MergeFrom(const HumanNamePartnerName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HumanNamePartnerName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.HumanNamePartnerName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HumanNamePartnerPrefix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.HumanNamePartnerPrefix) */ {
 public:
  HumanNamePartnerPrefix();
  virtual ~HumanNamePartnerPrefix();

  HumanNamePartnerPrefix(const HumanNamePartnerPrefix& from);

  inline HumanNamePartnerPrefix& operator=(const HumanNamePartnerPrefix& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HumanNamePartnerPrefix(HumanNamePartnerPrefix&& from) noexcept
    : HumanNamePartnerPrefix() {
    *this = ::std::move(from);
  }

  inline HumanNamePartnerPrefix& operator=(HumanNamePartnerPrefix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HumanNamePartnerPrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HumanNamePartnerPrefix* internal_default_instance() {
    return reinterpret_cast<const HumanNamePartnerPrefix*>(
               &_HumanNamePartnerPrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    182;

  void Swap(HumanNamePartnerPrefix* other);
  friend void swap(HumanNamePartnerPrefix& a, HumanNamePartnerPrefix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HumanNamePartnerPrefix* New() const final {
    return CreateMaybeMessage<HumanNamePartnerPrefix>(NULL);
  }

  HumanNamePartnerPrefix* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HumanNamePartnerPrefix>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HumanNamePartnerPrefix& from);
  void MergeFrom(const HumanNamePartnerPrefix& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HumanNamePartnerPrefix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.HumanNamePartnerPrefix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IdentifierValidDate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.IdentifierValidDate) */ {
 public:
  IdentifierValidDate();
  virtual ~IdentifierValidDate();

  IdentifierValidDate(const IdentifierValidDate& from);

  inline IdentifierValidDate& operator=(const IdentifierValidDate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IdentifierValidDate(IdentifierValidDate&& from) noexcept
    : IdentifierValidDate() {
    *this = ::std::move(from);
  }

  inline IdentifierValidDate& operator=(IdentifierValidDate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IdentifierValidDate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IdentifierValidDate* internal_default_instance() {
    return reinterpret_cast<const IdentifierValidDate*>(
               &_IdentifierValidDate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    183;

  void Swap(IdentifierValidDate* other);
  friend void swap(IdentifierValidDate& a, IdentifierValidDate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IdentifierValidDate* New() const final {
    return CreateMaybeMessage<IdentifierValidDate>(NULL);
  }

  IdentifierValidDate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IdentifierValidDate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IdentifierValidDate& from);
  void MergeFrom(const IdentifierValidDate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdentifierValidDate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.DateTime value_date_time = 3;
  bool has_value_date_time() const;
  void clear_value_date_time();
  static const int kValueDateTimeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::DateTime& _internal_value_date_time() const;
  public:
  const ::google::fhir::stu3::proto::DateTime& value_date_time() const;
  ::google::fhir::stu3::proto::DateTime* release_value_date_time();
  ::google::fhir::stu3::proto::DateTime* mutable_value_date_time();
  void set_allocated_value_date_time(::google::fhir::stu3::proto::DateTime* value_date_time);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.IdentifierValidDate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::DateTime* value_date_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImplementationGuidePage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ImplementationGuidePage) */ {
 public:
  ImplementationGuidePage();
  virtual ~ImplementationGuidePage();

  ImplementationGuidePage(const ImplementationGuidePage& from);

  inline ImplementationGuidePage& operator=(const ImplementationGuidePage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImplementationGuidePage(ImplementationGuidePage&& from) noexcept
    : ImplementationGuidePage() {
    *this = ::std::move(from);
  }

  inline ImplementationGuidePage& operator=(ImplementationGuidePage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ImplementationGuidePage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImplementationGuidePage* internal_default_instance() {
    return reinterpret_cast<const ImplementationGuidePage*>(
               &_ImplementationGuidePage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    184;

  void Swap(ImplementationGuidePage* other);
  friend void swap(ImplementationGuidePage& a, ImplementationGuidePage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImplementationGuidePage* New() const final {
    return CreateMaybeMessage<ImplementationGuidePage>(NULL);
  }

  ImplementationGuidePage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImplementationGuidePage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImplementationGuidePage& from);
  void MergeFrom(const ImplementationGuidePage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImplementationGuidePage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri value_uri = 3;
  bool has_value_uri() const;
  void clear_value_uri();
  static const int kValueUriFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_value_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& value_uri() const;
  ::google::fhir::stu3::proto::Uri* release_value_uri();
  ::google::fhir::stu3::proto::Uri* mutable_value_uri();
  void set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ImplementationGuidePage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* value_uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADUse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADUse) */ {
 public:
  AddressADUse();
  virtual ~AddressADUse();

  AddressADUse(const AddressADUse& from);

  inline AddressADUse& operator=(const AddressADUse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADUse(AddressADUse&& from) noexcept
    : AddressADUse() {
    *this = ::std::move(from);
  }

  inline AddressADUse& operator=(AddressADUse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADUse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADUse* internal_default_instance() {
    return reinterpret_cast<const AddressADUse*>(
               &_AddressADUse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    185;

  void Swap(AddressADUse* other);
  friend void swap(AddressADUse& a, AddressADUse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADUse* New() const final {
    return CreateMaybeMessage<AddressADUse>(NULL);
  }

  AddressADUse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADUse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADUse& from);
  void MergeFrom(const AddressADUse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADUse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.PostalAddressUseTypeCode value_code = 3;
  bool has_value_code() const;
  void clear_value_code();
  static const int kValueCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::PostalAddressUseTypeCode& _internal_value_code() const;
  public:
  const ::google::fhir::stu3::proto::PostalAddressUseTypeCode& value_code() const;
  ::google::fhir::stu3::proto::PostalAddressUseTypeCode* release_value_code();
  ::google::fhir::stu3::proto::PostalAddressUseTypeCode* mutable_value_code();
  void set_allocated_value_code(::google::fhir::stu3::proto::PostalAddressUseTypeCode* value_code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADUse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::PostalAddressUseTypeCode* value_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADXPAdditionalLocator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADXPAdditionalLocator) */ {
 public:
  AddressADXPAdditionalLocator();
  virtual ~AddressADXPAdditionalLocator();

  AddressADXPAdditionalLocator(const AddressADXPAdditionalLocator& from);

  inline AddressADXPAdditionalLocator& operator=(const AddressADXPAdditionalLocator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADXPAdditionalLocator(AddressADXPAdditionalLocator&& from) noexcept
    : AddressADXPAdditionalLocator() {
    *this = ::std::move(from);
  }

  inline AddressADXPAdditionalLocator& operator=(AddressADXPAdditionalLocator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADXPAdditionalLocator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADXPAdditionalLocator* internal_default_instance() {
    return reinterpret_cast<const AddressADXPAdditionalLocator*>(
               &_AddressADXPAdditionalLocator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    186;

  void Swap(AddressADXPAdditionalLocator* other);
  friend void swap(AddressADXPAdditionalLocator& a, AddressADXPAdditionalLocator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADXPAdditionalLocator* New() const final {
    return CreateMaybeMessage<AddressADXPAdditionalLocator>(NULL);
  }

  AddressADXPAdditionalLocator* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADXPAdditionalLocator>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADXPAdditionalLocator& from);
  void MergeFrom(const AddressADXPAdditionalLocator& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADXPAdditionalLocator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADXPAdditionalLocator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADXPBuildingNumberSuffix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADXPBuildingNumberSuffix) */ {
 public:
  AddressADXPBuildingNumberSuffix();
  virtual ~AddressADXPBuildingNumberSuffix();

  AddressADXPBuildingNumberSuffix(const AddressADXPBuildingNumberSuffix& from);

  inline AddressADXPBuildingNumberSuffix& operator=(const AddressADXPBuildingNumberSuffix& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADXPBuildingNumberSuffix(AddressADXPBuildingNumberSuffix&& from) noexcept
    : AddressADXPBuildingNumberSuffix() {
    *this = ::std::move(from);
  }

  inline AddressADXPBuildingNumberSuffix& operator=(AddressADXPBuildingNumberSuffix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADXPBuildingNumberSuffix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADXPBuildingNumberSuffix* internal_default_instance() {
    return reinterpret_cast<const AddressADXPBuildingNumberSuffix*>(
               &_AddressADXPBuildingNumberSuffix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    187;

  void Swap(AddressADXPBuildingNumberSuffix* other);
  friend void swap(AddressADXPBuildingNumberSuffix& a, AddressADXPBuildingNumberSuffix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADXPBuildingNumberSuffix* New() const final {
    return CreateMaybeMessage<AddressADXPBuildingNumberSuffix>(NULL);
  }

  AddressADXPBuildingNumberSuffix* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADXPBuildingNumberSuffix>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADXPBuildingNumberSuffix& from);
  void MergeFrom(const AddressADXPBuildingNumberSuffix& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADXPBuildingNumberSuffix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADXPBuildingNumberSuffix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADXPCareOf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADXPCareOf) */ {
 public:
  AddressADXPCareOf();
  virtual ~AddressADXPCareOf();

  AddressADXPCareOf(const AddressADXPCareOf& from);

  inline AddressADXPCareOf& operator=(const AddressADXPCareOf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADXPCareOf(AddressADXPCareOf&& from) noexcept
    : AddressADXPCareOf() {
    *this = ::std::move(from);
  }

  inline AddressADXPCareOf& operator=(AddressADXPCareOf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADXPCareOf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADXPCareOf* internal_default_instance() {
    return reinterpret_cast<const AddressADXPCareOf*>(
               &_AddressADXPCareOf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    188;

  void Swap(AddressADXPCareOf* other);
  friend void swap(AddressADXPCareOf& a, AddressADXPCareOf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADXPCareOf* New() const final {
    return CreateMaybeMessage<AddressADXPCareOf>(NULL);
  }

  AddressADXPCareOf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADXPCareOf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADXPCareOf& from);
  void MergeFrom(const AddressADXPCareOf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADXPCareOf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADXPCareOf)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADXPCensusTract : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADXPCensusTract) */ {
 public:
  AddressADXPCensusTract();
  virtual ~AddressADXPCensusTract();

  AddressADXPCensusTract(const AddressADXPCensusTract& from);

  inline AddressADXPCensusTract& operator=(const AddressADXPCensusTract& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADXPCensusTract(AddressADXPCensusTract&& from) noexcept
    : AddressADXPCensusTract() {
    *this = ::std::move(from);
  }

  inline AddressADXPCensusTract& operator=(AddressADXPCensusTract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADXPCensusTract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADXPCensusTract* internal_default_instance() {
    return reinterpret_cast<const AddressADXPCensusTract*>(
               &_AddressADXPCensusTract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    189;

  void Swap(AddressADXPCensusTract* other);
  friend void swap(AddressADXPCensusTract& a, AddressADXPCensusTract& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADXPCensusTract* New() const final {
    return CreateMaybeMessage<AddressADXPCensusTract>(NULL);
  }

  AddressADXPCensusTract* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADXPCensusTract>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADXPCensusTract& from);
  void MergeFrom(const AddressADXPCensusTract& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADXPCensusTract* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADXPCensusTract)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADXPDelimiter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADXPDelimiter) */ {
 public:
  AddressADXPDelimiter();
  virtual ~AddressADXPDelimiter();

  AddressADXPDelimiter(const AddressADXPDelimiter& from);

  inline AddressADXPDelimiter& operator=(const AddressADXPDelimiter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADXPDelimiter(AddressADXPDelimiter&& from) noexcept
    : AddressADXPDelimiter() {
    *this = ::std::move(from);
  }

  inline AddressADXPDelimiter& operator=(AddressADXPDelimiter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADXPDelimiter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADXPDelimiter* internal_default_instance() {
    return reinterpret_cast<const AddressADXPDelimiter*>(
               &_AddressADXPDelimiter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    190;

  void Swap(AddressADXPDelimiter* other);
  friend void swap(AddressADXPDelimiter& a, AddressADXPDelimiter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADXPDelimiter* New() const final {
    return CreateMaybeMessage<AddressADXPDelimiter>(NULL);
  }

  AddressADXPDelimiter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADXPDelimiter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADXPDelimiter& from);
  void MergeFrom(const AddressADXPDelimiter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADXPDelimiter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADXPDelimiter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADXPDeliveryAddressLine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADXPDeliveryAddressLine) */ {
 public:
  AddressADXPDeliveryAddressLine();
  virtual ~AddressADXPDeliveryAddressLine();

  AddressADXPDeliveryAddressLine(const AddressADXPDeliveryAddressLine& from);

  inline AddressADXPDeliveryAddressLine& operator=(const AddressADXPDeliveryAddressLine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADXPDeliveryAddressLine(AddressADXPDeliveryAddressLine&& from) noexcept
    : AddressADXPDeliveryAddressLine() {
    *this = ::std::move(from);
  }

  inline AddressADXPDeliveryAddressLine& operator=(AddressADXPDeliveryAddressLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADXPDeliveryAddressLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADXPDeliveryAddressLine* internal_default_instance() {
    return reinterpret_cast<const AddressADXPDeliveryAddressLine*>(
               &_AddressADXPDeliveryAddressLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    191;

  void Swap(AddressADXPDeliveryAddressLine* other);
  friend void swap(AddressADXPDeliveryAddressLine& a, AddressADXPDeliveryAddressLine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADXPDeliveryAddressLine* New() const final {
    return CreateMaybeMessage<AddressADXPDeliveryAddressLine>(NULL);
  }

  AddressADXPDeliveryAddressLine* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADXPDeliveryAddressLine>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADXPDeliveryAddressLine& from);
  void MergeFrom(const AddressADXPDeliveryAddressLine& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADXPDeliveryAddressLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADXPDeliveryAddressLine)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADXPDeliveryInstallationArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADXPDeliveryInstallationArea) */ {
 public:
  AddressADXPDeliveryInstallationArea();
  virtual ~AddressADXPDeliveryInstallationArea();

  AddressADXPDeliveryInstallationArea(const AddressADXPDeliveryInstallationArea& from);

  inline AddressADXPDeliveryInstallationArea& operator=(const AddressADXPDeliveryInstallationArea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADXPDeliveryInstallationArea(AddressADXPDeliveryInstallationArea&& from) noexcept
    : AddressADXPDeliveryInstallationArea() {
    *this = ::std::move(from);
  }

  inline AddressADXPDeliveryInstallationArea& operator=(AddressADXPDeliveryInstallationArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADXPDeliveryInstallationArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADXPDeliveryInstallationArea* internal_default_instance() {
    return reinterpret_cast<const AddressADXPDeliveryInstallationArea*>(
               &_AddressADXPDeliveryInstallationArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    192;

  void Swap(AddressADXPDeliveryInstallationArea* other);
  friend void swap(AddressADXPDeliveryInstallationArea& a, AddressADXPDeliveryInstallationArea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADXPDeliveryInstallationArea* New() const final {
    return CreateMaybeMessage<AddressADXPDeliveryInstallationArea>(NULL);
  }

  AddressADXPDeliveryInstallationArea* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADXPDeliveryInstallationArea>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADXPDeliveryInstallationArea& from);
  void MergeFrom(const AddressADXPDeliveryInstallationArea& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADXPDeliveryInstallationArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADXPDeliveryInstallationArea)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADXPDeliveryInstallationQualifier : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADXPDeliveryInstallationQualifier) */ {
 public:
  AddressADXPDeliveryInstallationQualifier();
  virtual ~AddressADXPDeliveryInstallationQualifier();

  AddressADXPDeliveryInstallationQualifier(const AddressADXPDeliveryInstallationQualifier& from);

  inline AddressADXPDeliveryInstallationQualifier& operator=(const AddressADXPDeliveryInstallationQualifier& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADXPDeliveryInstallationQualifier(AddressADXPDeliveryInstallationQualifier&& from) noexcept
    : AddressADXPDeliveryInstallationQualifier() {
    *this = ::std::move(from);
  }

  inline AddressADXPDeliveryInstallationQualifier& operator=(AddressADXPDeliveryInstallationQualifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADXPDeliveryInstallationQualifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADXPDeliveryInstallationQualifier* internal_default_instance() {
    return reinterpret_cast<const AddressADXPDeliveryInstallationQualifier*>(
               &_AddressADXPDeliveryInstallationQualifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    193;

  void Swap(AddressADXPDeliveryInstallationQualifier* other);
  friend void swap(AddressADXPDeliveryInstallationQualifier& a, AddressADXPDeliveryInstallationQualifier& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADXPDeliveryInstallationQualifier* New() const final {
    return CreateMaybeMessage<AddressADXPDeliveryInstallationQualifier>(NULL);
  }

  AddressADXPDeliveryInstallationQualifier* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADXPDeliveryInstallationQualifier>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADXPDeliveryInstallationQualifier& from);
  void MergeFrom(const AddressADXPDeliveryInstallationQualifier& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADXPDeliveryInstallationQualifier* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADXPDeliveryInstallationQualifier)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADXPDeliveryInstallationType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADXPDeliveryInstallationType) */ {
 public:
  AddressADXPDeliveryInstallationType();
  virtual ~AddressADXPDeliveryInstallationType();

  AddressADXPDeliveryInstallationType(const AddressADXPDeliveryInstallationType& from);

  inline AddressADXPDeliveryInstallationType& operator=(const AddressADXPDeliveryInstallationType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADXPDeliveryInstallationType(AddressADXPDeliveryInstallationType&& from) noexcept
    : AddressADXPDeliveryInstallationType() {
    *this = ::std::move(from);
  }

  inline AddressADXPDeliveryInstallationType& operator=(AddressADXPDeliveryInstallationType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADXPDeliveryInstallationType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADXPDeliveryInstallationType* internal_default_instance() {
    return reinterpret_cast<const AddressADXPDeliveryInstallationType*>(
               &_AddressADXPDeliveryInstallationType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    194;

  void Swap(AddressADXPDeliveryInstallationType* other);
  friend void swap(AddressADXPDeliveryInstallationType& a, AddressADXPDeliveryInstallationType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADXPDeliveryInstallationType* New() const final {
    return CreateMaybeMessage<AddressADXPDeliveryInstallationType>(NULL);
  }

  AddressADXPDeliveryInstallationType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADXPDeliveryInstallationType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADXPDeliveryInstallationType& from);
  void MergeFrom(const AddressADXPDeliveryInstallationType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADXPDeliveryInstallationType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADXPDeliveryInstallationType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADXPDeliveryMode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADXPDeliveryMode) */ {
 public:
  AddressADXPDeliveryMode();
  virtual ~AddressADXPDeliveryMode();

  AddressADXPDeliveryMode(const AddressADXPDeliveryMode& from);

  inline AddressADXPDeliveryMode& operator=(const AddressADXPDeliveryMode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADXPDeliveryMode(AddressADXPDeliveryMode&& from) noexcept
    : AddressADXPDeliveryMode() {
    *this = ::std::move(from);
  }

  inline AddressADXPDeliveryMode& operator=(AddressADXPDeliveryMode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADXPDeliveryMode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADXPDeliveryMode* internal_default_instance() {
    return reinterpret_cast<const AddressADXPDeliveryMode*>(
               &_AddressADXPDeliveryMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    195;

  void Swap(AddressADXPDeliveryMode* other);
  friend void swap(AddressADXPDeliveryMode& a, AddressADXPDeliveryMode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADXPDeliveryMode* New() const final {
    return CreateMaybeMessage<AddressADXPDeliveryMode>(NULL);
  }

  AddressADXPDeliveryMode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADXPDeliveryMode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADXPDeliveryMode& from);
  void MergeFrom(const AddressADXPDeliveryMode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADXPDeliveryMode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADXPDeliveryMode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADXPDeliveryModeIdentifier : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADXPDeliveryModeIdentifier) */ {
 public:
  AddressADXPDeliveryModeIdentifier();
  virtual ~AddressADXPDeliveryModeIdentifier();

  AddressADXPDeliveryModeIdentifier(const AddressADXPDeliveryModeIdentifier& from);

  inline AddressADXPDeliveryModeIdentifier& operator=(const AddressADXPDeliveryModeIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADXPDeliveryModeIdentifier(AddressADXPDeliveryModeIdentifier&& from) noexcept
    : AddressADXPDeliveryModeIdentifier() {
    *this = ::std::move(from);
  }

  inline AddressADXPDeliveryModeIdentifier& operator=(AddressADXPDeliveryModeIdentifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADXPDeliveryModeIdentifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADXPDeliveryModeIdentifier* internal_default_instance() {
    return reinterpret_cast<const AddressADXPDeliveryModeIdentifier*>(
               &_AddressADXPDeliveryModeIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    196;

  void Swap(AddressADXPDeliveryModeIdentifier* other);
  friend void swap(AddressADXPDeliveryModeIdentifier& a, AddressADXPDeliveryModeIdentifier& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADXPDeliveryModeIdentifier* New() const final {
    return CreateMaybeMessage<AddressADXPDeliveryModeIdentifier>(NULL);
  }

  AddressADXPDeliveryModeIdentifier* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADXPDeliveryModeIdentifier>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADXPDeliveryModeIdentifier& from);
  void MergeFrom(const AddressADXPDeliveryModeIdentifier& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADXPDeliveryModeIdentifier* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADXPDeliveryModeIdentifier)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADXPDirection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADXPDirection) */ {
 public:
  AddressADXPDirection();
  virtual ~AddressADXPDirection();

  AddressADXPDirection(const AddressADXPDirection& from);

  inline AddressADXPDirection& operator=(const AddressADXPDirection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADXPDirection(AddressADXPDirection&& from) noexcept
    : AddressADXPDirection() {
    *this = ::std::move(from);
  }

  inline AddressADXPDirection& operator=(AddressADXPDirection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADXPDirection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADXPDirection* internal_default_instance() {
    return reinterpret_cast<const AddressADXPDirection*>(
               &_AddressADXPDirection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    197;

  void Swap(AddressADXPDirection* other);
  friend void swap(AddressADXPDirection& a, AddressADXPDirection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADXPDirection* New() const final {
    return CreateMaybeMessage<AddressADXPDirection>(NULL);
  }

  AddressADXPDirection* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADXPDirection>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADXPDirection& from);
  void MergeFrom(const AddressADXPDirection& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADXPDirection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADXPDirection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADXPHouseNumber : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADXPHouseNumber) */ {
 public:
  AddressADXPHouseNumber();
  virtual ~AddressADXPHouseNumber();

  AddressADXPHouseNumber(const AddressADXPHouseNumber& from);

  inline AddressADXPHouseNumber& operator=(const AddressADXPHouseNumber& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADXPHouseNumber(AddressADXPHouseNumber&& from) noexcept
    : AddressADXPHouseNumber() {
    *this = ::std::move(from);
  }

  inline AddressADXPHouseNumber& operator=(AddressADXPHouseNumber&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADXPHouseNumber& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADXPHouseNumber* internal_default_instance() {
    return reinterpret_cast<const AddressADXPHouseNumber*>(
               &_AddressADXPHouseNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    198;

  void Swap(AddressADXPHouseNumber* other);
  friend void swap(AddressADXPHouseNumber& a, AddressADXPHouseNumber& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADXPHouseNumber* New() const final {
    return CreateMaybeMessage<AddressADXPHouseNumber>(NULL);
  }

  AddressADXPHouseNumber* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADXPHouseNumber>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADXPHouseNumber& from);
  void MergeFrom(const AddressADXPHouseNumber& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADXPHouseNumber* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADXPHouseNumber)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADXPHouseNumberNumeric : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADXPHouseNumberNumeric) */ {
 public:
  AddressADXPHouseNumberNumeric();
  virtual ~AddressADXPHouseNumberNumeric();

  AddressADXPHouseNumberNumeric(const AddressADXPHouseNumberNumeric& from);

  inline AddressADXPHouseNumberNumeric& operator=(const AddressADXPHouseNumberNumeric& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADXPHouseNumberNumeric(AddressADXPHouseNumberNumeric&& from) noexcept
    : AddressADXPHouseNumberNumeric() {
    *this = ::std::move(from);
  }

  inline AddressADXPHouseNumberNumeric& operator=(AddressADXPHouseNumberNumeric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADXPHouseNumberNumeric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADXPHouseNumberNumeric* internal_default_instance() {
    return reinterpret_cast<const AddressADXPHouseNumberNumeric*>(
               &_AddressADXPHouseNumberNumeric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    199;

  void Swap(AddressADXPHouseNumberNumeric* other);
  friend void swap(AddressADXPHouseNumberNumeric& a, AddressADXPHouseNumberNumeric& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADXPHouseNumberNumeric* New() const final {
    return CreateMaybeMessage<AddressADXPHouseNumberNumeric>(NULL);
  }

  AddressADXPHouseNumberNumeric* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADXPHouseNumberNumeric>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADXPHouseNumberNumeric& from);
  void MergeFrom(const AddressADXPHouseNumberNumeric& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADXPHouseNumberNumeric* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADXPHouseNumberNumeric)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADXPPostBox : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADXPPostBox) */ {
 public:
  AddressADXPPostBox();
  virtual ~AddressADXPPostBox();

  AddressADXPPostBox(const AddressADXPPostBox& from);

  inline AddressADXPPostBox& operator=(const AddressADXPPostBox& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADXPPostBox(AddressADXPPostBox&& from) noexcept
    : AddressADXPPostBox() {
    *this = ::std::move(from);
  }

  inline AddressADXPPostBox& operator=(AddressADXPPostBox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADXPPostBox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADXPPostBox* internal_default_instance() {
    return reinterpret_cast<const AddressADXPPostBox*>(
               &_AddressADXPPostBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    200;

  void Swap(AddressADXPPostBox* other);
  friend void swap(AddressADXPPostBox& a, AddressADXPPostBox& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADXPPostBox* New() const final {
    return CreateMaybeMessage<AddressADXPPostBox>(NULL);
  }

  AddressADXPPostBox* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADXPPostBox>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADXPPostBox& from);
  void MergeFrom(const AddressADXPPostBox& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADXPPostBox* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADXPPostBox)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADXPPrecinct : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADXPPrecinct) */ {
 public:
  AddressADXPPrecinct();
  virtual ~AddressADXPPrecinct();

  AddressADXPPrecinct(const AddressADXPPrecinct& from);

  inline AddressADXPPrecinct& operator=(const AddressADXPPrecinct& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADXPPrecinct(AddressADXPPrecinct&& from) noexcept
    : AddressADXPPrecinct() {
    *this = ::std::move(from);
  }

  inline AddressADXPPrecinct& operator=(AddressADXPPrecinct&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADXPPrecinct& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADXPPrecinct* internal_default_instance() {
    return reinterpret_cast<const AddressADXPPrecinct*>(
               &_AddressADXPPrecinct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    201;

  void Swap(AddressADXPPrecinct* other);
  friend void swap(AddressADXPPrecinct& a, AddressADXPPrecinct& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADXPPrecinct* New() const final {
    return CreateMaybeMessage<AddressADXPPrecinct>(NULL);
  }

  AddressADXPPrecinct* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADXPPrecinct>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADXPPrecinct& from);
  void MergeFrom(const AddressADXPPrecinct& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADXPPrecinct* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADXPPrecinct)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADXPStreetAddressLine : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADXPStreetAddressLine) */ {
 public:
  AddressADXPStreetAddressLine();
  virtual ~AddressADXPStreetAddressLine();

  AddressADXPStreetAddressLine(const AddressADXPStreetAddressLine& from);

  inline AddressADXPStreetAddressLine& operator=(const AddressADXPStreetAddressLine& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADXPStreetAddressLine(AddressADXPStreetAddressLine&& from) noexcept
    : AddressADXPStreetAddressLine() {
    *this = ::std::move(from);
  }

  inline AddressADXPStreetAddressLine& operator=(AddressADXPStreetAddressLine&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADXPStreetAddressLine& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADXPStreetAddressLine* internal_default_instance() {
    return reinterpret_cast<const AddressADXPStreetAddressLine*>(
               &_AddressADXPStreetAddressLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    202;

  void Swap(AddressADXPStreetAddressLine* other);
  friend void swap(AddressADXPStreetAddressLine& a, AddressADXPStreetAddressLine& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADXPStreetAddressLine* New() const final {
    return CreateMaybeMessage<AddressADXPStreetAddressLine>(NULL);
  }

  AddressADXPStreetAddressLine* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADXPStreetAddressLine>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADXPStreetAddressLine& from);
  void MergeFrom(const AddressADXPStreetAddressLine& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADXPStreetAddressLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADXPStreetAddressLine)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADXPStreetName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADXPStreetName) */ {
 public:
  AddressADXPStreetName();
  virtual ~AddressADXPStreetName();

  AddressADXPStreetName(const AddressADXPStreetName& from);

  inline AddressADXPStreetName& operator=(const AddressADXPStreetName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADXPStreetName(AddressADXPStreetName&& from) noexcept
    : AddressADXPStreetName() {
    *this = ::std::move(from);
  }

  inline AddressADXPStreetName& operator=(AddressADXPStreetName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADXPStreetName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADXPStreetName* internal_default_instance() {
    return reinterpret_cast<const AddressADXPStreetName*>(
               &_AddressADXPStreetName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    203;

  void Swap(AddressADXPStreetName* other);
  friend void swap(AddressADXPStreetName& a, AddressADXPStreetName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADXPStreetName* New() const final {
    return CreateMaybeMessage<AddressADXPStreetName>(NULL);
  }

  AddressADXPStreetName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADXPStreetName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADXPStreetName& from);
  void MergeFrom(const AddressADXPStreetName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADXPStreetName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADXPStreetName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADXPStreetNameBase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADXPStreetNameBase) */ {
 public:
  AddressADXPStreetNameBase();
  virtual ~AddressADXPStreetNameBase();

  AddressADXPStreetNameBase(const AddressADXPStreetNameBase& from);

  inline AddressADXPStreetNameBase& operator=(const AddressADXPStreetNameBase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADXPStreetNameBase(AddressADXPStreetNameBase&& from) noexcept
    : AddressADXPStreetNameBase() {
    *this = ::std::move(from);
  }

  inline AddressADXPStreetNameBase& operator=(AddressADXPStreetNameBase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADXPStreetNameBase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADXPStreetNameBase* internal_default_instance() {
    return reinterpret_cast<const AddressADXPStreetNameBase*>(
               &_AddressADXPStreetNameBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    204;

  void Swap(AddressADXPStreetNameBase* other);
  friend void swap(AddressADXPStreetNameBase& a, AddressADXPStreetNameBase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADXPStreetNameBase* New() const final {
    return CreateMaybeMessage<AddressADXPStreetNameBase>(NULL);
  }

  AddressADXPStreetNameBase* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADXPStreetNameBase>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADXPStreetNameBase& from);
  void MergeFrom(const AddressADXPStreetNameBase& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADXPStreetNameBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADXPStreetNameBase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADXPStreetNameType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADXPStreetNameType) */ {
 public:
  AddressADXPStreetNameType();
  virtual ~AddressADXPStreetNameType();

  AddressADXPStreetNameType(const AddressADXPStreetNameType& from);

  inline AddressADXPStreetNameType& operator=(const AddressADXPStreetNameType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADXPStreetNameType(AddressADXPStreetNameType&& from) noexcept
    : AddressADXPStreetNameType() {
    *this = ::std::move(from);
  }

  inline AddressADXPStreetNameType& operator=(AddressADXPStreetNameType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADXPStreetNameType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADXPStreetNameType* internal_default_instance() {
    return reinterpret_cast<const AddressADXPStreetNameType*>(
               &_AddressADXPStreetNameType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    205;

  void Swap(AddressADXPStreetNameType* other);
  friend void swap(AddressADXPStreetNameType& a, AddressADXPStreetNameType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADXPStreetNameType* New() const final {
    return CreateMaybeMessage<AddressADXPStreetNameType>(NULL);
  }

  AddressADXPStreetNameType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADXPStreetNameType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADXPStreetNameType& from);
  void MergeFrom(const AddressADXPStreetNameType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADXPStreetNameType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADXPStreetNameType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADXPUnitID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADXPUnitID) */ {
 public:
  AddressADXPUnitID();
  virtual ~AddressADXPUnitID();

  AddressADXPUnitID(const AddressADXPUnitID& from);

  inline AddressADXPUnitID& operator=(const AddressADXPUnitID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADXPUnitID(AddressADXPUnitID&& from) noexcept
    : AddressADXPUnitID() {
    *this = ::std::move(from);
  }

  inline AddressADXPUnitID& operator=(AddressADXPUnitID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADXPUnitID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADXPUnitID* internal_default_instance() {
    return reinterpret_cast<const AddressADXPUnitID*>(
               &_AddressADXPUnitID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    206;

  void Swap(AddressADXPUnitID* other);
  friend void swap(AddressADXPUnitID& a, AddressADXPUnitID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADXPUnitID* New() const final {
    return CreateMaybeMessage<AddressADXPUnitID>(NULL);
  }

  AddressADXPUnitID* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADXPUnitID>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADXPUnitID& from);
  void MergeFrom(const AddressADXPUnitID& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADXPUnitID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADXPUnitID)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressADXPUnitType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressADXPUnitType) */ {
 public:
  AddressADXPUnitType();
  virtual ~AddressADXPUnitType();

  AddressADXPUnitType(const AddressADXPUnitType& from);

  inline AddressADXPUnitType& operator=(const AddressADXPUnitType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressADXPUnitType(AddressADXPUnitType&& from) noexcept
    : AddressADXPUnitType() {
    *this = ::std::move(from);
  }

  inline AddressADXPUnitType& operator=(AddressADXPUnitType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressADXPUnitType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressADXPUnitType* internal_default_instance() {
    return reinterpret_cast<const AddressADXPUnitType*>(
               &_AddressADXPUnitType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    207;

  void Swap(AddressADXPUnitType* other);
  friend void swap(AddressADXPUnitType& a, AddressADXPUnitType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressADXPUnitType* New() const final {
    return CreateMaybeMessage<AddressADXPUnitType>(NULL);
  }

  AddressADXPUnitType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressADXPUnitType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressADXPUnitType& from);
  void MergeFrom(const AddressADXPUnitType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressADXPUnitType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressADXPUnitType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodingCOValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodingCOValue) */ {
 public:
  CodingCOValue();
  virtual ~CodingCOValue();

  CodingCOValue(const CodingCOValue& from);

  inline CodingCOValue& operator=(const CodingCOValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodingCOValue(CodingCOValue&& from) noexcept
    : CodingCOValue() {
    *this = ::std::move(from);
  }

  inline CodingCOValue& operator=(CodingCOValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodingCOValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodingCOValue* internal_default_instance() {
    return reinterpret_cast<const CodingCOValue*>(
               &_CodingCOValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    208;

  void Swap(CodingCOValue* other);
  friend void swap(CodingCOValue& a, CodingCOValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodingCOValue* New() const final {
    return CreateMaybeMessage<CodingCOValue>(NULL);
  }

  CodingCOValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodingCOValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodingCOValue& from);
  void MergeFrom(const CodingCOValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodingCOValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Decimal value_decimal = 3;
  bool has_value_decimal() const;
  void clear_value_decimal();
  static const int kValueDecimalFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_value_decimal() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& value_decimal() const;
  ::google::fhir::stu3::proto::Decimal* release_value_decimal();
  ::google::fhir::stu3::proto::Decimal* mutable_value_decimal();
  void set_allocated_value_decimal(::google::fhir::stu3::proto::Decimal* value_decimal);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodingCOValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Decimal* value_decimal_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HumanNameENQualifier : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.HumanNameENQualifier) */ {
 public:
  HumanNameENQualifier();
  virtual ~HumanNameENQualifier();

  HumanNameENQualifier(const HumanNameENQualifier& from);

  inline HumanNameENQualifier& operator=(const HumanNameENQualifier& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HumanNameENQualifier(HumanNameENQualifier&& from) noexcept
    : HumanNameENQualifier() {
    *this = ::std::move(from);
  }

  inline HumanNameENQualifier& operator=(HumanNameENQualifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HumanNameENQualifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HumanNameENQualifier* internal_default_instance() {
    return reinterpret_cast<const HumanNameENQualifier*>(
               &_HumanNameENQualifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    209;

  void Swap(HumanNameENQualifier* other);
  friend void swap(HumanNameENQualifier& a, HumanNameENQualifier& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HumanNameENQualifier* New() const final {
    return CreateMaybeMessage<HumanNameENQualifier>(NULL);
  }

  HumanNameENQualifier* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HumanNameENQualifier>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HumanNameENQualifier& from);
  void MergeFrom(const HumanNameENQualifier& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HumanNameENQualifier* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.EntityNamePartQualifierCode value_code = 3;
  bool has_value_code() const;
  void clear_value_code();
  static const int kValueCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::EntityNamePartQualifierCode& _internal_value_code() const;
  public:
  const ::google::fhir::stu3::proto::EntityNamePartQualifierCode& value_code() const;
  ::google::fhir::stu3::proto::EntityNamePartQualifierCode* release_value_code();
  ::google::fhir::stu3::proto::EntityNamePartQualifierCode* mutable_value_code();
  void set_allocated_value_code(::google::fhir::stu3::proto::EntityNamePartQualifierCode* value_code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.HumanNameENQualifier)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::EntityNamePartQualifierCode* value_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HumanNameENRepresentation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.HumanNameENRepresentation) */ {
 public:
  HumanNameENRepresentation();
  virtual ~HumanNameENRepresentation();

  HumanNameENRepresentation(const HumanNameENRepresentation& from);

  inline HumanNameENRepresentation& operator=(const HumanNameENRepresentation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HumanNameENRepresentation(HumanNameENRepresentation&& from) noexcept
    : HumanNameENRepresentation() {
    *this = ::std::move(from);
  }

  inline HumanNameENRepresentation& operator=(HumanNameENRepresentation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HumanNameENRepresentation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HumanNameENRepresentation* internal_default_instance() {
    return reinterpret_cast<const HumanNameENRepresentation*>(
               &_HumanNameENRepresentation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    210;

  void Swap(HumanNameENRepresentation* other);
  friend void swap(HumanNameENRepresentation& a, HumanNameENRepresentation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HumanNameENRepresentation* New() const final {
    return CreateMaybeMessage<HumanNameENRepresentation>(NULL);
  }

  HumanNameENRepresentation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HumanNameENRepresentation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HumanNameENRepresentation& from);
  void MergeFrom(const HumanNameENRepresentation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HumanNameENRepresentation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.NameRepresentationUseCode value_code = 3;
  bool has_value_code() const;
  void clear_value_code();
  static const int kValueCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::NameRepresentationUseCode& _internal_value_code() const;
  public:
  const ::google::fhir::stu3::proto::NameRepresentationUseCode& value_code() const;
  ::google::fhir::stu3::proto::NameRepresentationUseCode* release_value_code();
  ::google::fhir::stu3::proto::NameRepresentationUseCode* mutable_value_code();
  void set_allocated_value_code(::google::fhir::stu3::proto::NameRepresentationUseCode* value_code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.HumanNameENRepresentation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::NameRepresentationUseCode* value_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnyNullFlavor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AnyNullFlavor) */ {
 public:
  AnyNullFlavor();
  virtual ~AnyNullFlavor();

  AnyNullFlavor(const AnyNullFlavor& from);

  inline AnyNullFlavor& operator=(const AnyNullFlavor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnyNullFlavor(AnyNullFlavor&& from) noexcept
    : AnyNullFlavor() {
    *this = ::std::move(from);
  }

  inline AnyNullFlavor& operator=(AnyNullFlavor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyNullFlavor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyNullFlavor* internal_default_instance() {
    return reinterpret_cast<const AnyNullFlavor*>(
               &_AnyNullFlavor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    211;

  void Swap(AnyNullFlavor* other);
  friend void swap(AnyNullFlavor& a, AnyNullFlavor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnyNullFlavor* New() const final {
    return CreateMaybeMessage<AnyNullFlavor>(NULL);
  }

  AnyNullFlavor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnyNullFlavor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnyNullFlavor& from);
  void MergeFrom(const AnyNullFlavor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyNullFlavor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.NullFlavorCode value_code = 3;
  bool has_value_code() const;
  void clear_value_code();
  static const int kValueCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::NullFlavorCode& _internal_value_code() const;
  public:
  const ::google::fhir::stu3::proto::NullFlavorCode& value_code() const;
  ::google::fhir::stu3::proto::NullFlavorCode* release_value_code();
  ::google::fhir::stu3::proto::NullFlavorCode* mutable_value_code();
  void set_allocated_value_code(::google::fhir::stu3::proto::NullFlavorCode* value_code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AnyNullFlavor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::NullFlavorCode* value_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnyPreferred : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AnyPreferred) */ {
 public:
  AnyPreferred();
  virtual ~AnyPreferred();

  AnyPreferred(const AnyPreferred& from);

  inline AnyPreferred& operator=(const AnyPreferred& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnyPreferred(AnyPreferred&& from) noexcept
    : AnyPreferred() {
    *this = ::std::move(from);
  }

  inline AnyPreferred& operator=(AnyPreferred&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyPreferred& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyPreferred* internal_default_instance() {
    return reinterpret_cast<const AnyPreferred*>(
               &_AnyPreferred_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    212;

  void Swap(AnyPreferred* other);
  friend void swap(AnyPreferred& a, AnyPreferred& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnyPreferred* New() const final {
    return CreateMaybeMessage<AnyPreferred>(NULL);
  }

  AnyPreferred* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnyPreferred>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnyPreferred& from);
  void MergeFrom(const AnyPreferred& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyPreferred* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AnyPreferred)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StringSCCoding : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.StringSCCoding) */ {
 public:
  StringSCCoding();
  virtual ~StringSCCoding();

  StringSCCoding(const StringSCCoding& from);

  inline StringSCCoding& operator=(const StringSCCoding& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StringSCCoding(StringSCCoding&& from) noexcept
    : StringSCCoding() {
    *this = ::std::move(from);
  }

  inline StringSCCoding& operator=(StringSCCoding&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StringSCCoding& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringSCCoding* internal_default_instance() {
    return reinterpret_cast<const StringSCCoding*>(
               &_StringSCCoding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    213;

  void Swap(StringSCCoding* other);
  friend void swap(StringSCCoding& a, StringSCCoding& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StringSCCoding* New() const final {
    return CreateMaybeMessage<StringSCCoding>(NULL);
  }

  StringSCCoding* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StringSCCoding>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StringSCCoding& from);
  void MergeFrom(const StringSCCoding& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringSCCoding* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Coding value_coding = 3;
  bool has_value_coding() const;
  void clear_value_coding();
  static const int kValueCodingFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Coding& _internal_value_coding() const;
  public:
  const ::google::fhir::stu3::proto::Coding& value_coding() const;
  ::google::fhir::stu3::proto::Coding* release_value_coding();
  ::google::fhir::stu3::proto::Coding* mutable_value_coding();
  void set_allocated_value_coding(::google::fhir::stu3::proto::Coding* value_coding);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.StringSCCoding)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Coding* value_coding_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContactPointTELAddress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ContactPointTELAddress) */ {
 public:
  ContactPointTELAddress();
  virtual ~ContactPointTELAddress();

  ContactPointTELAddress(const ContactPointTELAddress& from);

  inline ContactPointTELAddress& operator=(const ContactPointTELAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContactPointTELAddress(ContactPointTELAddress&& from) noexcept
    : ContactPointTELAddress() {
    *this = ::std::move(from);
  }

  inline ContactPointTELAddress& operator=(ContactPointTELAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContactPointTELAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContactPointTELAddress* internal_default_instance() {
    return reinterpret_cast<const ContactPointTELAddress*>(
               &_ContactPointTELAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    214;

  void Swap(ContactPointTELAddress* other);
  friend void swap(ContactPointTELAddress& a, ContactPointTELAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContactPointTELAddress* New() const final {
    return CreateMaybeMessage<ContactPointTELAddress>(NULL);
  }

  ContactPointTELAddress* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContactPointTELAddress>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContactPointTELAddress& from);
  void MergeFrom(const ContactPointTELAddress& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContactPointTELAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri value_uri = 3;
  bool has_value_uri() const;
  void clear_value_uri();
  static const int kValueUriFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_value_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& value_uri() const;
  ::google::fhir::stu3::proto::Uri* release_value_uri();
  ::google::fhir::stu3::proto::Uri* mutable_value_uri();
  void set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ContactPointTELAddress)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* value_uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuantityUncertainty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuantityUncertainty) */ {
 public:
  QuantityUncertainty();
  virtual ~QuantityUncertainty();

  QuantityUncertainty(const QuantityUncertainty& from);

  inline QuantityUncertainty& operator=(const QuantityUncertainty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuantityUncertainty(QuantityUncertainty&& from) noexcept
    : QuantityUncertainty() {
    *this = ::std::move(from);
  }

  inline QuantityUncertainty& operator=(QuantityUncertainty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuantityUncertainty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuantityUncertainty* internal_default_instance() {
    return reinterpret_cast<const QuantityUncertainty*>(
               &_QuantityUncertainty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    215;

  void Swap(QuantityUncertainty* other);
  friend void swap(QuantityUncertainty& a, QuantityUncertainty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuantityUncertainty* New() const final {
    return CreateMaybeMessage<QuantityUncertainty>(NULL);
  }

  QuantityUncertainty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuantityUncertainty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuantityUncertainty& from);
  void MergeFrom(const QuantityUncertainty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuantityUncertainty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Decimal value_decimal = 3;
  bool has_value_decimal() const;
  void clear_value_decimal();
  static const int kValueDecimalFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_value_decimal() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& value_decimal() const;
  ::google::fhir::stu3::proto::Decimal* release_value_decimal();
  ::google::fhir::stu3::proto::Decimal* mutable_value_decimal();
  void set_allocated_value_decimal(::google::fhir::stu3::proto::Decimal* value_decimal);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuantityUncertainty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Decimal* value_decimal_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuantityUncertaintyType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuantityUncertaintyType) */ {
 public:
  QuantityUncertaintyType();
  virtual ~QuantityUncertaintyType();

  QuantityUncertaintyType(const QuantityUncertaintyType& from);

  inline QuantityUncertaintyType& operator=(const QuantityUncertaintyType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuantityUncertaintyType(QuantityUncertaintyType&& from) noexcept
    : QuantityUncertaintyType() {
    *this = ::std::move(from);
  }

  inline QuantityUncertaintyType& operator=(QuantityUncertaintyType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuantityUncertaintyType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuantityUncertaintyType* internal_default_instance() {
    return reinterpret_cast<const QuantityUncertaintyType*>(
               &_QuantityUncertaintyType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    216;

  void Swap(QuantityUncertaintyType* other);
  friend void swap(QuantityUncertaintyType& a, QuantityUncertaintyType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuantityUncertaintyType* New() const final {
    return CreateMaybeMessage<QuantityUncertaintyType>(NULL);
  }

  QuantityUncertaintyType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuantityUncertaintyType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuantityUncertaintyType& from);
  void MergeFrom(const QuantityUncertaintyType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuantityUncertaintyType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.ProbabilityDistributionTypeCode value_code = 3;
  bool has_value_code() const;
  void clear_value_code();
  static const int kValueCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::ProbabilityDistributionTypeCode& _internal_value_code() const;
  public:
  const ::google::fhir::stu3::proto::ProbabilityDistributionTypeCode& value_code() const;
  ::google::fhir::stu3::proto::ProbabilityDistributionTypeCode* release_value_code();
  ::google::fhir::stu3::proto::ProbabilityDistributionTypeCode* mutable_value_code();
  void set_allocated_value_code(::google::fhir::stu3::proto::ProbabilityDistributionTypeCode* value_code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuantityUncertaintyType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::ProbabilityDistributionTypeCode* value_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnyVerification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AnyVerification) */ {
 public:
  AnyVerification();
  virtual ~AnyVerification();

  AnyVerification(const AnyVerification& from);

  inline AnyVerification& operator=(const AnyVerification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnyVerification(AnyVerification&& from) noexcept
    : AnyVerification() {
    *this = ::std::move(from);
  }

  inline AnyVerification& operator=(AnyVerification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyVerification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnyVerification* internal_default_instance() {
    return reinterpret_cast<const AnyVerification*>(
               &_AnyVerification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    217;

  void Swap(AnyVerification* other);
  friend void swap(AnyVerification& a, AnyVerification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnyVerification* New() const final {
    return CreateMaybeMessage<AnyVerification>(NULL);
  }

  AnyVerification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnyVerification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnyVerification& from);
  void MergeFrom(const AnyVerification& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnyVerification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AnyVerification)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LocationAlias : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.LocationAlias) */ {
 public:
  LocationAlias();
  virtual ~LocationAlias();

  LocationAlias(const LocationAlias& from);

  inline LocationAlias& operator=(const LocationAlias& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocationAlias(LocationAlias&& from) noexcept
    : LocationAlias() {
    *this = ::std::move(from);
  }

  inline LocationAlias& operator=(LocationAlias&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LocationAlias& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocationAlias* internal_default_instance() {
    return reinterpret_cast<const LocationAlias*>(
               &_LocationAlias_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    218;

  void Swap(LocationAlias* other);
  friend void swap(LocationAlias& a, LocationAlias& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocationAlias* New() const final {
    return CreateMaybeMessage<LocationAlias>(NULL);
  }

  LocationAlias* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LocationAlias>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LocationAlias& from);
  void MergeFrom(const LocationAlias& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationAlias* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.LocationAlias)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BundleLocationDistance : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.BundleLocationDistance) */ {
 public:
  BundleLocationDistance();
  virtual ~BundleLocationDistance();

  BundleLocationDistance(const BundleLocationDistance& from);

  inline BundleLocationDistance& operator=(const BundleLocationDistance& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BundleLocationDistance(BundleLocationDistance&& from) noexcept
    : BundleLocationDistance() {
    *this = ::std::move(from);
  }

  inline BundleLocationDistance& operator=(BundleLocationDistance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BundleLocationDistance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BundleLocationDistance* internal_default_instance() {
    return reinterpret_cast<const BundleLocationDistance*>(
               &_BundleLocationDistance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    219;

  void Swap(BundleLocationDistance* other);
  friend void swap(BundleLocationDistance& a, BundleLocationDistance& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BundleLocationDistance* New() const final {
    return CreateMaybeMessage<BundleLocationDistance>(NULL);
  }

  BundleLocationDistance* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BundleLocationDistance>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BundleLocationDistance& from);
  void MergeFrom(const BundleLocationDistance& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BundleLocationDistance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Distance value_distance = 3;
  bool has_value_distance() const;
  void clear_value_distance();
  static const int kValueDistanceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Distance& _internal_value_distance() const;
  public:
  const ::google::fhir::stu3::proto::Distance& value_distance() const;
  ::google::fhir::stu3::proto::Distance* release_value_distance();
  ::google::fhir::stu3::proto::Distance* mutable_value_distance();
  void set_allocated_value_distance(::google::fhir::stu3::proto::Distance* value_distance);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.BundleLocationDistance)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Distance* value_distance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataElementMapSourcePublisher : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DataElementMapSourcePublisher) */ {
 public:
  DataElementMapSourcePublisher();
  virtual ~DataElementMapSourcePublisher();

  DataElementMapSourcePublisher(const DataElementMapSourcePublisher& from);

  inline DataElementMapSourcePublisher& operator=(const DataElementMapSourcePublisher& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataElementMapSourcePublisher(DataElementMapSourcePublisher&& from) noexcept
    : DataElementMapSourcePublisher() {
    *this = ::std::move(from);
  }

  inline DataElementMapSourcePublisher& operator=(DataElementMapSourcePublisher&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataElementMapSourcePublisher& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataElementMapSourcePublisher* internal_default_instance() {
    return reinterpret_cast<const DataElementMapSourcePublisher*>(
               &_DataElementMapSourcePublisher_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    220;

  void Swap(DataElementMapSourcePublisher* other);
  friend void swap(DataElementMapSourcePublisher& a, DataElementMapSourcePublisher& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataElementMapSourcePublisher* New() const final {
    return CreateMaybeMessage<DataElementMapSourcePublisher>(NULL);
  }

  DataElementMapSourcePublisher* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataElementMapSourcePublisher>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataElementMapSourcePublisher& from);
  void MergeFrom(const DataElementMapSourcePublisher& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataElementMapSourcePublisher* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DataElementMapSourcePublisher)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BundleMatchGrade : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.BundleMatchGrade) */ {
 public:
  BundleMatchGrade();
  virtual ~BundleMatchGrade();

  BundleMatchGrade(const BundleMatchGrade& from);

  inline BundleMatchGrade& operator=(const BundleMatchGrade& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BundleMatchGrade(BundleMatchGrade&& from) noexcept
    : BundleMatchGrade() {
    *this = ::std::move(from);
  }

  inline BundleMatchGrade& operator=(BundleMatchGrade&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BundleMatchGrade& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BundleMatchGrade* internal_default_instance() {
    return reinterpret_cast<const BundleMatchGrade*>(
               &_BundleMatchGrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    221;

  void Swap(BundleMatchGrade* other);
  friend void swap(BundleMatchGrade& a, BundleMatchGrade& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BundleMatchGrade* New() const final {
    return CreateMaybeMessage<BundleMatchGrade>(NULL);
  }

  BundleMatchGrade* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BundleMatchGrade>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BundleMatchGrade& from);
  void MergeFrom(const BundleMatchGrade& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BundleMatchGrade* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.MatchGradeCode value_code = 3;
  bool has_value_code() const;
  void clear_value_code();
  static const int kValueCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::MatchGradeCode& _internal_value_code() const;
  public:
  const ::google::fhir::stu3::proto::MatchGradeCode& value_code() const;
  ::google::fhir::stu3::proto::MatchGradeCode* release_value_code();
  ::google::fhir::stu3::proto::MatchGradeCode* mutable_value_code();
  void set_allocated_value_code(::google::fhir::stu3::proto::MatchGradeCode* value_code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.BundleMatchGrade)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::MatchGradeCode* value_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MaxDecimalPlaces : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.MaxDecimalPlaces) */ {
 public:
  MaxDecimalPlaces();
  virtual ~MaxDecimalPlaces();

  MaxDecimalPlaces(const MaxDecimalPlaces& from);

  inline MaxDecimalPlaces& operator=(const MaxDecimalPlaces& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MaxDecimalPlaces(MaxDecimalPlaces&& from) noexcept
    : MaxDecimalPlaces() {
    *this = ::std::move(from);
  }

  inline MaxDecimalPlaces& operator=(MaxDecimalPlaces&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MaxDecimalPlaces& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaxDecimalPlaces* internal_default_instance() {
    return reinterpret_cast<const MaxDecimalPlaces*>(
               &_MaxDecimalPlaces_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    222;

  void Swap(MaxDecimalPlaces* other);
  friend void swap(MaxDecimalPlaces& a, MaxDecimalPlaces& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MaxDecimalPlaces* New() const final {
    return CreateMaybeMessage<MaxDecimalPlaces>(NULL);
  }

  MaxDecimalPlaces* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MaxDecimalPlaces>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MaxDecimalPlaces& from);
  void MergeFrom(const MaxDecimalPlaces& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaxDecimalPlaces* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Integer value_integer = 3;
  bool has_value_integer() const;
  void clear_value_integer();
  static const int kValueIntegerFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Integer& _internal_value_integer() const;
  public:
  const ::google::fhir::stu3::proto::Integer& value_integer() const;
  ::google::fhir::stu3::proto::Integer* release_value_integer();
  ::google::fhir::stu3::proto::Integer* mutable_value_integer();
  void set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.MaxDecimalPlaces)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Integer* value_integer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MaxSize : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.MaxSize) */ {
 public:
  MaxSize();
  virtual ~MaxSize();

  MaxSize(const MaxSize& from);

  inline MaxSize& operator=(const MaxSize& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MaxSize(MaxSize&& from) noexcept
    : MaxSize() {
    *this = ::std::move(from);
  }

  inline MaxSize& operator=(MaxSize&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MaxSize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaxSize* internal_default_instance() {
    return reinterpret_cast<const MaxSize*>(
               &_MaxSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    223;

  void Swap(MaxSize* other);
  friend void swap(MaxSize& a, MaxSize& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MaxSize* New() const final {
    return CreateMaybeMessage<MaxSize>(NULL);
  }

  MaxSize* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MaxSize>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MaxSize& from);
  void MergeFrom(const MaxSize& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaxSize* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Decimal value_decimal = 3;
  bool has_value_decimal() const;
  void clear_value_decimal();
  static const int kValueDecimalFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_value_decimal() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& value_decimal() const;
  ::google::fhir::stu3::proto::Decimal* release_value_decimal();
  ::google::fhir::stu3::proto::Decimal* mutable_value_decimal();
  void set_allocated_value_decimal(::google::fhir::stu3::proto::Decimal* value_decimal);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.MaxSize)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Decimal* value_decimal_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireMaxValue_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireMaxValue.Value) */ {
 public:
  QuestionnaireMaxValue_Value();
  virtual ~QuestionnaireMaxValue_Value();

  QuestionnaireMaxValue_Value(const QuestionnaireMaxValue_Value& from);

  inline QuestionnaireMaxValue_Value& operator=(const QuestionnaireMaxValue_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireMaxValue_Value(QuestionnaireMaxValue_Value&& from) noexcept
    : QuestionnaireMaxValue_Value() {
    *this = ::std::move(from);
  }

  inline QuestionnaireMaxValue_Value& operator=(QuestionnaireMaxValue_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireMaxValue_Value& default_instance();

  enum ValueCase {
    kDate = 1,
    kDateTime = 2,
    kTime = 3,
    kInstant = 4,
    kDecimal = 5,
    kInteger = 6,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireMaxValue_Value* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireMaxValue_Value*>(
               &_QuestionnaireMaxValue_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    224;

  void Swap(QuestionnaireMaxValue_Value* other);
  friend void swap(QuestionnaireMaxValue_Value& a, QuestionnaireMaxValue_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireMaxValue_Value* New() const final {
    return CreateMaybeMessage<QuestionnaireMaxValue_Value>(NULL);
  }

  QuestionnaireMaxValue_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireMaxValue_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireMaxValue_Value& from);
  void MergeFrom(const QuestionnaireMaxValue_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireMaxValue_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Date date = 1;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Date& _internal_date() const;
  public:
  const ::google::fhir::stu3::proto::Date& date() const;
  ::google::fhir::stu3::proto::Date* release_date();
  ::google::fhir::stu3::proto::Date* mutable_date();
  void set_allocated_date(::google::fhir::stu3::proto::Date* date);

  // .google.fhir.stu3.proto.DateTime date_time = 2;
  bool has_date_time() const;
  void clear_date_time();
  static const int kDateTimeFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::DateTime& _internal_date_time() const;
  public:
  const ::google::fhir::stu3::proto::DateTime& date_time() const;
  ::google::fhir::stu3::proto::DateTime* release_date_time();
  ::google::fhir::stu3::proto::DateTime* mutable_date_time();
  void set_allocated_date_time(::google::fhir::stu3::proto::DateTime* date_time);

  // .google.fhir.stu3.proto.Time time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Time& _internal_time() const;
  public:
  const ::google::fhir::stu3::proto::Time& time() const;
  ::google::fhir::stu3::proto::Time* release_time();
  ::google::fhir::stu3::proto::Time* mutable_time();
  void set_allocated_time(::google::fhir::stu3::proto::Time* time);

  // .google.fhir.stu3.proto.Instant instant = 4;
  bool has_instant() const;
  void clear_instant();
  static const int kInstantFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::Instant& _internal_instant() const;
  public:
  const ::google::fhir::stu3::proto::Instant& instant() const;
  ::google::fhir::stu3::proto::Instant* release_instant();
  ::google::fhir::stu3::proto::Instant* mutable_instant();
  void set_allocated_instant(::google::fhir::stu3::proto::Instant* instant);

  // .google.fhir.stu3.proto.Decimal decimal = 5;
  bool has_decimal() const;
  void clear_decimal();
  static const int kDecimalFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_decimal() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& decimal() const;
  ::google::fhir::stu3::proto::Decimal* release_decimal();
  ::google::fhir::stu3::proto::Decimal* mutable_decimal();
  void set_allocated_decimal(::google::fhir::stu3::proto::Decimal* decimal);

  // .google.fhir.stu3.proto.Integer integer = 6;
  bool has_integer() const;
  void clear_integer();
  static const int kIntegerFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::Integer& _internal_integer() const;
  public:
  const ::google::fhir::stu3::proto::Integer& integer() const;
  ::google::fhir::stu3::proto::Integer* release_integer();
  ::google::fhir::stu3::proto::Integer* mutable_integer();
  void set_allocated_integer(::google::fhir::stu3::proto::Integer* integer);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireMaxValue.Value)
 private:
  void set_has_date();
  void set_has_date_time();
  void set_has_time();
  void set_has_instant();
  void set_has_decimal();
  void set_has_integer();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::Date* date_;
    ::google::fhir::stu3::proto::DateTime* date_time_;
    ::google::fhir::stu3::proto::Time* time_;
    ::google::fhir::stu3::proto::Instant* instant_;
    ::google::fhir::stu3::proto::Decimal* decimal_;
    ::google::fhir::stu3::proto::Integer* integer_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireMaxValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireMaxValue) */ {
 public:
  QuestionnaireMaxValue();
  virtual ~QuestionnaireMaxValue();

  QuestionnaireMaxValue(const QuestionnaireMaxValue& from);

  inline QuestionnaireMaxValue& operator=(const QuestionnaireMaxValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireMaxValue(QuestionnaireMaxValue&& from) noexcept
    : QuestionnaireMaxValue() {
    *this = ::std::move(from);
  }

  inline QuestionnaireMaxValue& operator=(QuestionnaireMaxValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireMaxValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireMaxValue* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireMaxValue*>(
               &_QuestionnaireMaxValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    225;

  void Swap(QuestionnaireMaxValue* other);
  friend void swap(QuestionnaireMaxValue& a, QuestionnaireMaxValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireMaxValue* New() const final {
    return CreateMaybeMessage<QuestionnaireMaxValue>(NULL);
  }

  QuestionnaireMaxValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireMaxValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireMaxValue& from);
  void MergeFrom(const QuestionnaireMaxValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireMaxValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef QuestionnaireMaxValue_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.QuestionnaireMaxValue.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::QuestionnaireMaxValue_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::QuestionnaireMaxValue_Value& value() const;
  ::google::fhir::stu3::proto::QuestionnaireMaxValue_Value* release_value();
  ::google::fhir::stu3::proto::QuestionnaireMaxValue_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::QuestionnaireMaxValue_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireMaxValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::QuestionnaireMaxValue_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MedicationUsualRoute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.MedicationUsualRoute) */ {
 public:
  MedicationUsualRoute();
  virtual ~MedicationUsualRoute();

  MedicationUsualRoute(const MedicationUsualRoute& from);

  inline MedicationUsualRoute& operator=(const MedicationUsualRoute& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MedicationUsualRoute(MedicationUsualRoute&& from) noexcept
    : MedicationUsualRoute() {
    *this = ::std::move(from);
  }

  inline MedicationUsualRoute& operator=(MedicationUsualRoute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MedicationUsualRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MedicationUsualRoute* internal_default_instance() {
    return reinterpret_cast<const MedicationUsualRoute*>(
               &_MedicationUsualRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    226;

  void Swap(MedicationUsualRoute* other);
  friend void swap(MedicationUsualRoute& a, MedicationUsualRoute& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MedicationUsualRoute* New() const final {
    return CreateMaybeMessage<MedicationUsualRoute>(NULL);
  }

  MedicationUsualRoute* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MedicationUsualRoute>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MedicationUsualRoute& from);
  void MergeFrom(const MedicationUsualRoute& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MedicationUsualRoute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.MedicationUsualRoute)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MedicationDispenseValidityPeriod : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.MedicationDispenseValidityPeriod) */ {
 public:
  MedicationDispenseValidityPeriod();
  virtual ~MedicationDispenseValidityPeriod();

  MedicationDispenseValidityPeriod(const MedicationDispenseValidityPeriod& from);

  inline MedicationDispenseValidityPeriod& operator=(const MedicationDispenseValidityPeriod& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MedicationDispenseValidityPeriod(MedicationDispenseValidityPeriod&& from) noexcept
    : MedicationDispenseValidityPeriod() {
    *this = ::std::move(from);
  }

  inline MedicationDispenseValidityPeriod& operator=(MedicationDispenseValidityPeriod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MedicationDispenseValidityPeriod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MedicationDispenseValidityPeriod* internal_default_instance() {
    return reinterpret_cast<const MedicationDispenseValidityPeriod*>(
               &_MedicationDispenseValidityPeriod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    227;

  void Swap(MedicationDispenseValidityPeriod* other);
  friend void swap(MedicationDispenseValidityPeriod& a, MedicationDispenseValidityPeriod& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MedicationDispenseValidityPeriod* New() const final {
    return CreateMaybeMessage<MedicationDispenseValidityPeriod>(NULL);
  }

  MedicationDispenseValidityPeriod* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MedicationDispenseValidityPeriod>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MedicationDispenseValidityPeriod& from);
  void MergeFrom(const MedicationDispenseValidityPeriod& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MedicationDispenseValidityPeriod* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Period value_period = 3;
  bool has_value_period() const;
  void clear_value_period();
  static const int kValuePeriodFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Period& _internal_value_period() const;
  public:
  const ::google::fhir::stu3::proto::Period& value_period() const;
  ::google::fhir::stu3::proto::Period* release_value_period();
  ::google::fhir::stu3::proto::Period* mutable_value_period();
  void set_allocated_value_period(::google::fhir::stu3::proto::Period* value_period);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.MedicationDispenseValidityPeriod)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Period* value_period_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MedicationStatementPrescriber : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.MedicationStatementPrescriber) */ {
 public:
  MedicationStatementPrescriber();
  virtual ~MedicationStatementPrescriber();

  MedicationStatementPrescriber(const MedicationStatementPrescriber& from);

  inline MedicationStatementPrescriber& operator=(const MedicationStatementPrescriber& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MedicationStatementPrescriber(MedicationStatementPrescriber&& from) noexcept
    : MedicationStatementPrescriber() {
    *this = ::std::move(from);
  }

  inline MedicationStatementPrescriber& operator=(MedicationStatementPrescriber&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MedicationStatementPrescriber& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MedicationStatementPrescriber* internal_default_instance() {
    return reinterpret_cast<const MedicationStatementPrescriber*>(
               &_MedicationStatementPrescriber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    228;

  void Swap(MedicationStatementPrescriber* other);
  friend void swap(MedicationStatementPrescriber& a, MedicationStatementPrescriber& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MedicationStatementPrescriber* New() const final {
    return CreateMaybeMessage<MedicationStatementPrescriber>(NULL);
  }

  MedicationStatementPrescriber* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MedicationStatementPrescriber>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MedicationStatementPrescriber& from);
  void MergeFrom(const MedicationStatementPrescriber& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MedicationStatementPrescriber* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.MedicationStatementPrescriber)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessageHeaderMessageheaderResponseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.MessageHeaderMessageheaderResponseRequest) */ {
 public:
  MessageHeaderMessageheaderResponseRequest();
  virtual ~MessageHeaderMessageheaderResponseRequest();

  MessageHeaderMessageheaderResponseRequest(const MessageHeaderMessageheaderResponseRequest& from);

  inline MessageHeaderMessageheaderResponseRequest& operator=(const MessageHeaderMessageheaderResponseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageHeaderMessageheaderResponseRequest(MessageHeaderMessageheaderResponseRequest&& from) noexcept
    : MessageHeaderMessageheaderResponseRequest() {
    *this = ::std::move(from);
  }

  inline MessageHeaderMessageheaderResponseRequest& operator=(MessageHeaderMessageheaderResponseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageHeaderMessageheaderResponseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageHeaderMessageheaderResponseRequest* internal_default_instance() {
    return reinterpret_cast<const MessageHeaderMessageheaderResponseRequest*>(
               &_MessageHeaderMessageheaderResponseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    229;

  void Swap(MessageHeaderMessageheaderResponseRequest* other);
  friend void swap(MessageHeaderMessageheaderResponseRequest& a, MessageHeaderMessageheaderResponseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageHeaderMessageheaderResponseRequest* New() const final {
    return CreateMaybeMessage<MessageHeaderMessageheaderResponseRequest>(NULL);
  }

  MessageHeaderMessageheaderResponseRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageHeaderMessageheaderResponseRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageHeaderMessageheaderResponseRequest& from);
  void MergeFrom(const MessageHeaderMessageheaderResponseRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageHeaderMessageheaderResponseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.MessageHeaderResponseRequestCode value_code = 3;
  bool has_value_code() const;
  void clear_value_code();
  static const int kValueCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::MessageHeaderResponseRequestCode& _internal_value_code() const;
  public:
  const ::google::fhir::stu3::proto::MessageHeaderResponseRequestCode& value_code() const;
  ::google::fhir::stu3::proto::MessageHeaderResponseRequestCode* release_value_code();
  ::google::fhir::stu3::proto::MessageHeaderResponseRequestCode* mutable_value_code();
  void set_allocated_value_code(::google::fhir::stu3::proto::MessageHeaderResponseRequestCode* value_code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.MessageHeaderMessageheaderResponseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::MessageHeaderResponseRequestCode* value_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MimeType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.MimeType) */ {
 public:
  MimeType();
  virtual ~MimeType();

  MimeType(const MimeType& from);

  inline MimeType& operator=(const MimeType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MimeType(MimeType&& from) noexcept
    : MimeType() {
    *this = ::std::move(from);
  }

  inline MimeType& operator=(MimeType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MimeType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MimeType* internal_default_instance() {
    return reinterpret_cast<const MimeType*>(
               &_MimeType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    230;

  void Swap(MimeType* other);
  friend void swap(MimeType& a, MimeType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MimeType* New() const final {
    return CreateMaybeMessage<MimeType>(NULL);
  }

  MimeType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MimeType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MimeType& from);
  void MergeFrom(const MimeType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MimeType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.MimeTypeCode value_code = 3;
  bool has_value_code() const;
  void clear_value_code();
  static const int kValueCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::MimeTypeCode& _internal_value_code() const;
  public:
  const ::google::fhir::stu3::proto::MimeTypeCode& value_code() const;
  ::google::fhir::stu3::proto::MimeTypeCode* release_value_code();
  ::google::fhir::stu3::proto::MimeTypeCode* mutable_value_code();
  void set_allocated_value_code(::google::fhir::stu3::proto::MimeTypeCode* value_code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.MimeType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::MimeTypeCode* value_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MinLength : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.MinLength) */ {
 public:
  MinLength();
  virtual ~MinLength();

  MinLength(const MinLength& from);

  inline MinLength& operator=(const MinLength& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MinLength(MinLength&& from) noexcept
    : MinLength() {
    *this = ::std::move(from);
  }

  inline MinLength& operator=(MinLength&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MinLength& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MinLength* internal_default_instance() {
    return reinterpret_cast<const MinLength*>(
               &_MinLength_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    231;

  void Swap(MinLength* other);
  friend void swap(MinLength& a, MinLength& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MinLength* New() const final {
    return CreateMaybeMessage<MinLength>(NULL);
  }

  MinLength* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MinLength>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MinLength& from);
  void MergeFrom(const MinLength& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MinLength* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Integer value_integer = 3;
  bool has_value_integer() const;
  void clear_value_integer();
  static const int kValueIntegerFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Integer& _internal_value_integer() const;
  public:
  const ::google::fhir::stu3::proto::Integer& value_integer() const;
  ::google::fhir::stu3::proto::Integer* release_value_integer();
  ::google::fhir::stu3::proto::Integer* mutable_value_integer();
  void set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.MinLength)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Integer* value_integer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireMinValue_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireMinValue.Value) */ {
 public:
  QuestionnaireMinValue_Value();
  virtual ~QuestionnaireMinValue_Value();

  QuestionnaireMinValue_Value(const QuestionnaireMinValue_Value& from);

  inline QuestionnaireMinValue_Value& operator=(const QuestionnaireMinValue_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireMinValue_Value(QuestionnaireMinValue_Value&& from) noexcept
    : QuestionnaireMinValue_Value() {
    *this = ::std::move(from);
  }

  inline QuestionnaireMinValue_Value& operator=(QuestionnaireMinValue_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireMinValue_Value& default_instance();

  enum ValueCase {
    kDate = 1,
    kDateTime = 2,
    kTime = 3,
    kInstant = 4,
    kDecimal = 5,
    kInteger = 6,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireMinValue_Value* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireMinValue_Value*>(
               &_QuestionnaireMinValue_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    232;

  void Swap(QuestionnaireMinValue_Value* other);
  friend void swap(QuestionnaireMinValue_Value& a, QuestionnaireMinValue_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireMinValue_Value* New() const final {
    return CreateMaybeMessage<QuestionnaireMinValue_Value>(NULL);
  }

  QuestionnaireMinValue_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireMinValue_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireMinValue_Value& from);
  void MergeFrom(const QuestionnaireMinValue_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireMinValue_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Date date = 1;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Date& _internal_date() const;
  public:
  const ::google::fhir::stu3::proto::Date& date() const;
  ::google::fhir::stu3::proto::Date* release_date();
  ::google::fhir::stu3::proto::Date* mutable_date();
  void set_allocated_date(::google::fhir::stu3::proto::Date* date);

  // .google.fhir.stu3.proto.DateTime date_time = 2;
  bool has_date_time() const;
  void clear_date_time();
  static const int kDateTimeFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::DateTime& _internal_date_time() const;
  public:
  const ::google::fhir::stu3::proto::DateTime& date_time() const;
  ::google::fhir::stu3::proto::DateTime* release_date_time();
  ::google::fhir::stu3::proto::DateTime* mutable_date_time();
  void set_allocated_date_time(::google::fhir::stu3::proto::DateTime* date_time);

  // .google.fhir.stu3.proto.Time time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Time& _internal_time() const;
  public:
  const ::google::fhir::stu3::proto::Time& time() const;
  ::google::fhir::stu3::proto::Time* release_time();
  ::google::fhir::stu3::proto::Time* mutable_time();
  void set_allocated_time(::google::fhir::stu3::proto::Time* time);

  // .google.fhir.stu3.proto.Instant instant = 4;
  bool has_instant() const;
  void clear_instant();
  static const int kInstantFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::Instant& _internal_instant() const;
  public:
  const ::google::fhir::stu3::proto::Instant& instant() const;
  ::google::fhir::stu3::proto::Instant* release_instant();
  ::google::fhir::stu3::proto::Instant* mutable_instant();
  void set_allocated_instant(::google::fhir::stu3::proto::Instant* instant);

  // .google.fhir.stu3.proto.Decimal decimal = 5;
  bool has_decimal() const;
  void clear_decimal();
  static const int kDecimalFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_decimal() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& decimal() const;
  ::google::fhir::stu3::proto::Decimal* release_decimal();
  ::google::fhir::stu3::proto::Decimal* mutable_decimal();
  void set_allocated_decimal(::google::fhir::stu3::proto::Decimal* decimal);

  // .google.fhir.stu3.proto.Integer integer = 6;
  bool has_integer() const;
  void clear_integer();
  static const int kIntegerFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::Integer& _internal_integer() const;
  public:
  const ::google::fhir::stu3::proto::Integer& integer() const;
  ::google::fhir::stu3::proto::Integer* release_integer();
  ::google::fhir::stu3::proto::Integer* mutable_integer();
  void set_allocated_integer(::google::fhir::stu3::proto::Integer* integer);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireMinValue.Value)
 private:
  void set_has_date();
  void set_has_date_time();
  void set_has_time();
  void set_has_instant();
  void set_has_decimal();
  void set_has_integer();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::Date* date_;
    ::google::fhir::stu3::proto::DateTime* date_time_;
    ::google::fhir::stu3::proto::Time* time_;
    ::google::fhir::stu3::proto::Instant* instant_;
    ::google::fhir::stu3::proto::Decimal* decimal_;
    ::google::fhir::stu3::proto::Integer* integer_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireMinValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireMinValue) */ {
 public:
  QuestionnaireMinValue();
  virtual ~QuestionnaireMinValue();

  QuestionnaireMinValue(const QuestionnaireMinValue& from);

  inline QuestionnaireMinValue& operator=(const QuestionnaireMinValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireMinValue(QuestionnaireMinValue&& from) noexcept
    : QuestionnaireMinValue() {
    *this = ::std::move(from);
  }

  inline QuestionnaireMinValue& operator=(QuestionnaireMinValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireMinValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireMinValue* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireMinValue*>(
               &_QuestionnaireMinValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    233;

  void Swap(QuestionnaireMinValue* other);
  friend void swap(QuestionnaireMinValue& a, QuestionnaireMinValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireMinValue* New() const final {
    return CreateMaybeMessage<QuestionnaireMinValue>(NULL);
  }

  QuestionnaireMinValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireMinValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireMinValue& from);
  void MergeFrom(const QuestionnaireMinValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireMinValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef QuestionnaireMinValue_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.QuestionnaireMinValue.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::QuestionnaireMinValue_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::QuestionnaireMinValue_Value& value() const;
  ::google::fhir::stu3::proto::QuestionnaireMinValue_Value* release_value();
  ::google::fhir::stu3::proto::QuestionnaireMinValue_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::QuestionnaireMinValue_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireMinValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::QuestionnaireMinValue_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObservationBodyPosition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ObservationBodyPosition) */ {
 public:
  ObservationBodyPosition();
  virtual ~ObservationBodyPosition();

  ObservationBodyPosition(const ObservationBodyPosition& from);

  inline ObservationBodyPosition& operator=(const ObservationBodyPosition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObservationBodyPosition(ObservationBodyPosition&& from) noexcept
    : ObservationBodyPosition() {
    *this = ::std::move(from);
  }

  inline ObservationBodyPosition& operator=(ObservationBodyPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservationBodyPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservationBodyPosition* internal_default_instance() {
    return reinterpret_cast<const ObservationBodyPosition*>(
               &_ObservationBodyPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    234;

  void Swap(ObservationBodyPosition* other);
  friend void swap(ObservationBodyPosition& a, ObservationBodyPosition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObservationBodyPosition* New() const final {
    return CreateMaybeMessage<ObservationBodyPosition>(NULL);
  }

  ObservationBodyPosition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObservationBodyPosition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObservationBodyPosition& from);
  void MergeFrom(const ObservationBodyPosition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationBodyPosition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ObservationBodyPosition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObservationDelta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ObservationDelta) */ {
 public:
  ObservationDelta();
  virtual ~ObservationDelta();

  ObservationDelta(const ObservationDelta& from);

  inline ObservationDelta& operator=(const ObservationDelta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObservationDelta(ObservationDelta&& from) noexcept
    : ObservationDelta() {
    *this = ::std::move(from);
  }

  inline ObservationDelta& operator=(ObservationDelta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservationDelta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservationDelta* internal_default_instance() {
    return reinterpret_cast<const ObservationDelta*>(
               &_ObservationDelta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    235;

  void Swap(ObservationDelta* other);
  friend void swap(ObservationDelta& a, ObservationDelta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObservationDelta* New() const final {
    return CreateMaybeMessage<ObservationDelta>(NULL);
  }

  ObservationDelta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObservationDelta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObservationDelta& from);
  void MergeFrom(const ObservationDelta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationDelta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ObservationDelta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObservationEventTiming : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ObservationEventTiming) */ {
 public:
  ObservationEventTiming();
  virtual ~ObservationEventTiming();

  ObservationEventTiming(const ObservationEventTiming& from);

  inline ObservationEventTiming& operator=(const ObservationEventTiming& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObservationEventTiming(ObservationEventTiming&& from) noexcept
    : ObservationEventTiming() {
    *this = ::std::move(from);
  }

  inline ObservationEventTiming& operator=(ObservationEventTiming&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservationEventTiming& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservationEventTiming* internal_default_instance() {
    return reinterpret_cast<const ObservationEventTiming*>(
               &_ObservationEventTiming_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    236;

  void Swap(ObservationEventTiming* other);
  friend void swap(ObservationEventTiming& a, ObservationEventTiming& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObservationEventTiming* New() const final {
    return CreateMaybeMessage<ObservationEventTiming>(NULL);
  }

  ObservationEventTiming* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObservationEventTiming>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObservationEventTiming& from);
  void MergeFrom(const ObservationEventTiming& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationEventTiming* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept code = 4;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_code() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& code() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_code();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_code();
  void set_allocated_code(::google::fhir::stu3::proto::CodeableConcept* code);

  // .google.fhir.stu3.proto.Quantity offset = 5;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Quantity& _internal_offset() const;
  public:
  const ::google::fhir::stu3::proto::Quantity& offset() const;
  ::google::fhir::stu3::proto::Quantity* release_offset();
  ::google::fhir::stu3::proto::Quantity* mutable_offset();
  void set_allocated_offset(::google::fhir::stu3::proto::Quantity* offset);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ObservationEventTiming)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* code_;
  ::google::fhir::stu3::proto::Quantity* offset_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObservationFocalSubject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ObservationFocalSubject) */ {
 public:
  ObservationFocalSubject();
  virtual ~ObservationFocalSubject();

  ObservationFocalSubject(const ObservationFocalSubject& from);

  inline ObservationFocalSubject& operator=(const ObservationFocalSubject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObservationFocalSubject(ObservationFocalSubject&& from) noexcept
    : ObservationFocalSubject() {
    *this = ::std::move(from);
  }

  inline ObservationFocalSubject& operator=(ObservationFocalSubject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservationFocalSubject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservationFocalSubject* internal_default_instance() {
    return reinterpret_cast<const ObservationFocalSubject*>(
               &_ObservationFocalSubject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    237;

  void Swap(ObservationFocalSubject* other);
  friend void swap(ObservationFocalSubject& a, ObservationFocalSubject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObservationFocalSubject* New() const final {
    return CreateMaybeMessage<ObservationFocalSubject>(NULL);
  }

  ObservationFocalSubject* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObservationFocalSubject>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObservationFocalSubject& from);
  void MergeFrom(const ObservationFocalSubject& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationFocalSubject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ObservationFocalSubject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObservationAlleleName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ObservationAlleleName) */ {
 public:
  ObservationAlleleName();
  virtual ~ObservationAlleleName();

  ObservationAlleleName(const ObservationAlleleName& from);

  inline ObservationAlleleName& operator=(const ObservationAlleleName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObservationAlleleName(ObservationAlleleName&& from) noexcept
    : ObservationAlleleName() {
    *this = ::std::move(from);
  }

  inline ObservationAlleleName& operator=(ObservationAlleleName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservationAlleleName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservationAlleleName* internal_default_instance() {
    return reinterpret_cast<const ObservationAlleleName*>(
               &_ObservationAlleleName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    238;

  void Swap(ObservationAlleleName* other);
  friend void swap(ObservationAlleleName& a, ObservationAlleleName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObservationAlleleName* New() const final {
    return CreateMaybeMessage<ObservationAlleleName>(NULL);
  }

  ObservationAlleleName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObservationAlleleName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObservationAlleleName& from);
  void MergeFrom(const ObservationAlleleName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationAlleleName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ObservationAlleleName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObservationAllelicFrequency : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ObservationAllelicFrequency) */ {
 public:
  ObservationAllelicFrequency();
  virtual ~ObservationAllelicFrequency();

  ObservationAllelicFrequency(const ObservationAllelicFrequency& from);

  inline ObservationAllelicFrequency& operator=(const ObservationAllelicFrequency& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObservationAllelicFrequency(ObservationAllelicFrequency&& from) noexcept
    : ObservationAllelicFrequency() {
    *this = ::std::move(from);
  }

  inline ObservationAllelicFrequency& operator=(ObservationAllelicFrequency&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservationAllelicFrequency& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservationAllelicFrequency* internal_default_instance() {
    return reinterpret_cast<const ObservationAllelicFrequency*>(
               &_ObservationAllelicFrequency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    239;

  void Swap(ObservationAllelicFrequency* other);
  friend void swap(ObservationAllelicFrequency& a, ObservationAllelicFrequency& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObservationAllelicFrequency* New() const final {
    return CreateMaybeMessage<ObservationAllelicFrequency>(NULL);
  }

  ObservationAllelicFrequency* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObservationAllelicFrequency>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObservationAllelicFrequency& from);
  void MergeFrom(const ObservationAllelicFrequency& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationAllelicFrequency* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Decimal value_decimal = 3;
  bool has_value_decimal() const;
  void clear_value_decimal();
  static const int kValueDecimalFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_value_decimal() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& value_decimal() const;
  ::google::fhir::stu3::proto::Decimal* release_value_decimal();
  ::google::fhir::stu3::proto::Decimal* mutable_value_decimal();
  void set_allocated_value_decimal(::google::fhir::stu3::proto::Decimal* value_decimal);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ObservationAllelicFrequency)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Decimal* value_decimal_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObservationAllelicState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ObservationAllelicState) */ {
 public:
  ObservationAllelicState();
  virtual ~ObservationAllelicState();

  ObservationAllelicState(const ObservationAllelicState& from);

  inline ObservationAllelicState& operator=(const ObservationAllelicState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObservationAllelicState(ObservationAllelicState&& from) noexcept
    : ObservationAllelicState() {
    *this = ::std::move(from);
  }

  inline ObservationAllelicState& operator=(ObservationAllelicState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservationAllelicState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservationAllelicState* internal_default_instance() {
    return reinterpret_cast<const ObservationAllelicState*>(
               &_ObservationAllelicState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    240;

  void Swap(ObservationAllelicState* other);
  friend void swap(ObservationAllelicState& a, ObservationAllelicState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObservationAllelicState* New() const final {
    return CreateMaybeMessage<ObservationAllelicState>(NULL);
  }

  ObservationAllelicState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObservationAllelicState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObservationAllelicState& from);
  void MergeFrom(const ObservationAllelicState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationAllelicState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ObservationAllelicState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObservationAminoAcidChangeName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ObservationAminoAcidChangeName) */ {
 public:
  ObservationAminoAcidChangeName();
  virtual ~ObservationAminoAcidChangeName();

  ObservationAminoAcidChangeName(const ObservationAminoAcidChangeName& from);

  inline ObservationAminoAcidChangeName& operator=(const ObservationAminoAcidChangeName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObservationAminoAcidChangeName(ObservationAminoAcidChangeName&& from) noexcept
    : ObservationAminoAcidChangeName() {
    *this = ::std::move(from);
  }

  inline ObservationAminoAcidChangeName& operator=(ObservationAminoAcidChangeName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservationAminoAcidChangeName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservationAminoAcidChangeName* internal_default_instance() {
    return reinterpret_cast<const ObservationAminoAcidChangeName*>(
               &_ObservationAminoAcidChangeName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    241;

  void Swap(ObservationAminoAcidChangeName* other);
  friend void swap(ObservationAminoAcidChangeName& a, ObservationAminoAcidChangeName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObservationAminoAcidChangeName* New() const final {
    return CreateMaybeMessage<ObservationAminoAcidChangeName>(NULL);
  }

  ObservationAminoAcidChangeName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObservationAminoAcidChangeName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObservationAminoAcidChangeName& from);
  void MergeFrom(const ObservationAminoAcidChangeName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationAminoAcidChangeName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ObservationAminoAcidChangeName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObservationAminoAcidChangeType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ObservationAminoAcidChangeType) */ {
 public:
  ObservationAminoAcidChangeType();
  virtual ~ObservationAminoAcidChangeType();

  ObservationAminoAcidChangeType(const ObservationAminoAcidChangeType& from);

  inline ObservationAminoAcidChangeType& operator=(const ObservationAminoAcidChangeType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObservationAminoAcidChangeType(ObservationAminoAcidChangeType&& from) noexcept
    : ObservationAminoAcidChangeType() {
    *this = ::std::move(from);
  }

  inline ObservationAminoAcidChangeType& operator=(ObservationAminoAcidChangeType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservationAminoAcidChangeType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservationAminoAcidChangeType* internal_default_instance() {
    return reinterpret_cast<const ObservationAminoAcidChangeType*>(
               &_ObservationAminoAcidChangeType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    242;

  void Swap(ObservationAminoAcidChangeType* other);
  friend void swap(ObservationAminoAcidChangeType& a, ObservationAminoAcidChangeType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObservationAminoAcidChangeType* New() const final {
    return CreateMaybeMessage<ObservationAminoAcidChangeType>(NULL);
  }

  ObservationAminoAcidChangeType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObservationAminoAcidChangeType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObservationAminoAcidChangeType& from);
  void MergeFrom(const ObservationAminoAcidChangeType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationAminoAcidChangeType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ObservationAminoAcidChangeType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObservationCopyNumberEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ObservationCopyNumberEvent) */ {
 public:
  ObservationCopyNumberEvent();
  virtual ~ObservationCopyNumberEvent();

  ObservationCopyNumberEvent(const ObservationCopyNumberEvent& from);

  inline ObservationCopyNumberEvent& operator=(const ObservationCopyNumberEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObservationCopyNumberEvent(ObservationCopyNumberEvent&& from) noexcept
    : ObservationCopyNumberEvent() {
    *this = ::std::move(from);
  }

  inline ObservationCopyNumberEvent& operator=(ObservationCopyNumberEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservationCopyNumberEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservationCopyNumberEvent* internal_default_instance() {
    return reinterpret_cast<const ObservationCopyNumberEvent*>(
               &_ObservationCopyNumberEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    243;

  void Swap(ObservationCopyNumberEvent* other);
  friend void swap(ObservationCopyNumberEvent& a, ObservationCopyNumberEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObservationCopyNumberEvent* New() const final {
    return CreateMaybeMessage<ObservationCopyNumberEvent>(NULL);
  }

  ObservationCopyNumberEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObservationCopyNumberEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObservationCopyNumberEvent& from);
  void MergeFrom(const ObservationCopyNumberEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationCopyNumberEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ObservationCopyNumberEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObservationDNARegionName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ObservationDNARegionName) */ {
 public:
  ObservationDNARegionName();
  virtual ~ObservationDNARegionName();

  ObservationDNARegionName(const ObservationDNARegionName& from);

  inline ObservationDNARegionName& operator=(const ObservationDNARegionName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObservationDNARegionName(ObservationDNARegionName&& from) noexcept
    : ObservationDNARegionName() {
    *this = ::std::move(from);
  }

  inline ObservationDNARegionName& operator=(ObservationDNARegionName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservationDNARegionName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservationDNARegionName* internal_default_instance() {
    return reinterpret_cast<const ObservationDNARegionName*>(
               &_ObservationDNARegionName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    244;

  void Swap(ObservationDNARegionName* other);
  friend void swap(ObservationDNARegionName& a, ObservationDNARegionName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObservationDNARegionName* New() const final {
    return CreateMaybeMessage<ObservationDNARegionName>(NULL);
  }

  ObservationDNARegionName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObservationDNARegionName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObservationDNARegionName& from);
  void MergeFrom(const ObservationDNARegionName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationDNARegionName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ObservationDNARegionName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObservationDNASequenceVariantName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ObservationDNASequenceVariantName) */ {
 public:
  ObservationDNASequenceVariantName();
  virtual ~ObservationDNASequenceVariantName();

  ObservationDNASequenceVariantName(const ObservationDNASequenceVariantName& from);

  inline ObservationDNASequenceVariantName& operator=(const ObservationDNASequenceVariantName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObservationDNASequenceVariantName(ObservationDNASequenceVariantName&& from) noexcept
    : ObservationDNASequenceVariantName() {
    *this = ::std::move(from);
  }

  inline ObservationDNASequenceVariantName& operator=(ObservationDNASequenceVariantName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservationDNASequenceVariantName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservationDNASequenceVariantName* internal_default_instance() {
    return reinterpret_cast<const ObservationDNASequenceVariantName*>(
               &_ObservationDNASequenceVariantName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    245;

  void Swap(ObservationDNASequenceVariantName* other);
  friend void swap(ObservationDNASequenceVariantName& a, ObservationDNASequenceVariantName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObservationDNASequenceVariantName* New() const final {
    return CreateMaybeMessage<ObservationDNASequenceVariantName>(NULL);
  }

  ObservationDNASequenceVariantName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObservationDNASequenceVariantName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObservationDNASequenceVariantName& from);
  void MergeFrom(const ObservationDNASequenceVariantName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationDNASequenceVariantName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ObservationDNASequenceVariantName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObservationDNASequenceVariantType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ObservationDNASequenceVariantType) */ {
 public:
  ObservationDNASequenceVariantType();
  virtual ~ObservationDNASequenceVariantType();

  ObservationDNASequenceVariantType(const ObservationDNASequenceVariantType& from);

  inline ObservationDNASequenceVariantType& operator=(const ObservationDNASequenceVariantType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObservationDNASequenceVariantType(ObservationDNASequenceVariantType&& from) noexcept
    : ObservationDNASequenceVariantType() {
    *this = ::std::move(from);
  }

  inline ObservationDNASequenceVariantType& operator=(ObservationDNASequenceVariantType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservationDNASequenceVariantType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservationDNASequenceVariantType* internal_default_instance() {
    return reinterpret_cast<const ObservationDNASequenceVariantType*>(
               &_ObservationDNASequenceVariantType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    246;

  void Swap(ObservationDNASequenceVariantType* other);
  friend void swap(ObservationDNASequenceVariantType& a, ObservationDNASequenceVariantType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObservationDNASequenceVariantType* New() const final {
    return CreateMaybeMessage<ObservationDNASequenceVariantType>(NULL);
  }

  ObservationDNASequenceVariantType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObservationDNASequenceVariantType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObservationDNASequenceVariantType& from);
  void MergeFrom(const ObservationDNASequenceVariantType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationDNASequenceVariantType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ObservationDNASequenceVariantType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObservationDNAVariantId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ObservationDNAVariantId) */ {
 public:
  ObservationDNAVariantId();
  virtual ~ObservationDNAVariantId();

  ObservationDNAVariantId(const ObservationDNAVariantId& from);

  inline ObservationDNAVariantId& operator=(const ObservationDNAVariantId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObservationDNAVariantId(ObservationDNAVariantId&& from) noexcept
    : ObservationDNAVariantId() {
    *this = ::std::move(from);
  }

  inline ObservationDNAVariantId& operator=(ObservationDNAVariantId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservationDNAVariantId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservationDNAVariantId* internal_default_instance() {
    return reinterpret_cast<const ObservationDNAVariantId*>(
               &_ObservationDNAVariantId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    247;

  void Swap(ObservationDNAVariantId* other);
  friend void swap(ObservationDNAVariantId& a, ObservationDNAVariantId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObservationDNAVariantId* New() const final {
    return CreateMaybeMessage<ObservationDNAVariantId>(NULL);
  }

  ObservationDNAVariantId* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObservationDNAVariantId>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObservationDNAVariantId& from);
  void MergeFrom(const ObservationDNAVariantId& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationDNAVariantId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ObservationDNAVariantId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObservationGene : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ObservationGene) */ {
 public:
  ObservationGene();
  virtual ~ObservationGene();

  ObservationGene(const ObservationGene& from);

  inline ObservationGene& operator=(const ObservationGene& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObservationGene(ObservationGene&& from) noexcept
    : ObservationGene() {
    *this = ::std::move(from);
  }

  inline ObservationGene& operator=(ObservationGene&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservationGene& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservationGene* internal_default_instance() {
    return reinterpret_cast<const ObservationGene*>(
               &_ObservationGene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    248;

  void Swap(ObservationGene* other);
  friend void swap(ObservationGene& a, ObservationGene& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObservationGene* New() const final {
    return CreateMaybeMessage<ObservationGene>(NULL);
  }

  ObservationGene* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObservationGene>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObservationGene& from);
  void MergeFrom(const ObservationGene& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationGene* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ObservationGene)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObservationGenomicSourceClass : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ObservationGenomicSourceClass) */ {
 public:
  ObservationGenomicSourceClass();
  virtual ~ObservationGenomicSourceClass();

  ObservationGenomicSourceClass(const ObservationGenomicSourceClass& from);

  inline ObservationGenomicSourceClass& operator=(const ObservationGenomicSourceClass& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObservationGenomicSourceClass(ObservationGenomicSourceClass&& from) noexcept
    : ObservationGenomicSourceClass() {
    *this = ::std::move(from);
  }

  inline ObservationGenomicSourceClass& operator=(ObservationGenomicSourceClass&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservationGenomicSourceClass& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservationGenomicSourceClass* internal_default_instance() {
    return reinterpret_cast<const ObservationGenomicSourceClass*>(
               &_ObservationGenomicSourceClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    249;

  void Swap(ObservationGenomicSourceClass* other);
  friend void swap(ObservationGenomicSourceClass& a, ObservationGenomicSourceClass& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObservationGenomicSourceClass* New() const final {
    return CreateMaybeMessage<ObservationGenomicSourceClass>(NULL);
  }

  ObservationGenomicSourceClass* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObservationGenomicSourceClass>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObservationGenomicSourceClass& from);
  void MergeFrom(const ObservationGenomicSourceClass& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationGenomicSourceClass* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ObservationGenomicSourceClass)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObservationInterpretation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ObservationInterpretation) */ {
 public:
  ObservationInterpretation();
  virtual ~ObservationInterpretation();

  ObservationInterpretation(const ObservationInterpretation& from);

  inline ObservationInterpretation& operator=(const ObservationInterpretation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObservationInterpretation(ObservationInterpretation&& from) noexcept
    : ObservationInterpretation() {
    *this = ::std::move(from);
  }

  inline ObservationInterpretation& operator=(ObservationInterpretation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservationInterpretation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservationInterpretation* internal_default_instance() {
    return reinterpret_cast<const ObservationInterpretation*>(
               &_ObservationInterpretation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    250;

  void Swap(ObservationInterpretation* other);
  friend void swap(ObservationInterpretation& a, ObservationInterpretation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObservationInterpretation* New() const final {
    return CreateMaybeMessage<ObservationInterpretation>(NULL);
  }

  ObservationInterpretation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObservationInterpretation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObservationInterpretation& from);
  void MergeFrom(const ObservationInterpretation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationInterpretation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Observation"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ObservationInterpretation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObservationPhaseSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ObservationPhaseSet) */ {
 public:
  ObservationPhaseSet();
  virtual ~ObservationPhaseSet();

  ObservationPhaseSet(const ObservationPhaseSet& from);

  inline ObservationPhaseSet& operator=(const ObservationPhaseSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObservationPhaseSet(ObservationPhaseSet&& from) noexcept
    : ObservationPhaseSet() {
    *this = ::std::move(from);
  }

  inline ObservationPhaseSet& operator=(ObservationPhaseSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservationPhaseSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservationPhaseSet* internal_default_instance() {
    return reinterpret_cast<const ObservationPhaseSet*>(
               &_ObservationPhaseSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    251;

  void Swap(ObservationPhaseSet* other);
  friend void swap(ObservationPhaseSet& a, ObservationPhaseSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObservationPhaseSet* New() const final {
    return CreateMaybeMessage<ObservationPhaseSet>(NULL);
  }

  ObservationPhaseSet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObservationPhaseSet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObservationPhaseSet& from);
  void MergeFrom(const ObservationPhaseSet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationPhaseSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri value_uri = 3;
  bool has_value_uri() const;
  void clear_value_uri();
  static const int kValueUriFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_value_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& value_uri() const;
  ::google::fhir::stu3::proto::Uri* release_value_uri();
  ::google::fhir::stu3::proto::Uri* mutable_value_uri();
  void set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ObservationPhaseSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* value_uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObservationSequence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ObservationSequence) */ {
 public:
  ObservationSequence();
  virtual ~ObservationSequence();

  ObservationSequence(const ObservationSequence& from);

  inline ObservationSequence& operator=(const ObservationSequence& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObservationSequence(ObservationSequence&& from) noexcept
    : ObservationSequence() {
    *this = ::std::move(from);
  }

  inline ObservationSequence& operator=(ObservationSequence&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservationSequence& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservationSequence* internal_default_instance() {
    return reinterpret_cast<const ObservationSequence*>(
               &_ObservationSequence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    252;

  void Swap(ObservationSequence* other);
  friend void swap(ObservationSequence& a, ObservationSequence& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObservationSequence* New() const final {
    return CreateMaybeMessage<ObservationSequence>(NULL);
  }

  ObservationSequence* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObservationSequence>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObservationSequence& from);
  void MergeFrom(const ObservationSequence& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationSequence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Sequence"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ObservationSequence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObservationTimeOffset : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ObservationTimeOffset) */ {
 public:
  ObservationTimeOffset();
  virtual ~ObservationTimeOffset();

  ObservationTimeOffset(const ObservationTimeOffset& from);

  inline ObservationTimeOffset& operator=(const ObservationTimeOffset& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObservationTimeOffset(ObservationTimeOffset&& from) noexcept
    : ObservationTimeOffset() {
    *this = ::std::move(from);
  }

  inline ObservationTimeOffset& operator=(ObservationTimeOffset&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservationTimeOffset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObservationTimeOffset* internal_default_instance() {
    return reinterpret_cast<const ObservationTimeOffset*>(
               &_ObservationTimeOffset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    253;

  void Swap(ObservationTimeOffset* other);
  friend void swap(ObservationTimeOffset& a, ObservationTimeOffset& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObservationTimeOffset* New() const final {
    return CreateMaybeMessage<ObservationTimeOffset>(NULL);
  }

  ObservationTimeOffset* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ObservationTimeOffset>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ObservationTimeOffset& from);
  void MergeFrom(const ObservationTimeOffset& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObservationTimeOffset* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Integer value_integer = 3;
  bool has_value_integer() const;
  void clear_value_integer();
  static const int kValueIntegerFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Integer& _internal_value_integer() const;
  public:
  const ::google::fhir::stu3::proto::Integer& value_integer() const;
  ::google::fhir::stu3::proto::Integer* release_value_integer();
  ::google::fhir::stu3::proto::Integer* mutable_value_integer();
  void set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ObservationTimeOffset)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Integer* value_integer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllergyIntoleranceAdministration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AllergyIntoleranceAdministration) */ {
 public:
  AllergyIntoleranceAdministration();
  virtual ~AllergyIntoleranceAdministration();

  AllergyIntoleranceAdministration(const AllergyIntoleranceAdministration& from);

  inline AllergyIntoleranceAdministration& operator=(const AllergyIntoleranceAdministration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllergyIntoleranceAdministration(AllergyIntoleranceAdministration&& from) noexcept
    : AllergyIntoleranceAdministration() {
    *this = ::std::move(from);
  }

  inline AllergyIntoleranceAdministration& operator=(AllergyIntoleranceAdministration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllergyIntoleranceAdministration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllergyIntoleranceAdministration* internal_default_instance() {
    return reinterpret_cast<const AllergyIntoleranceAdministration*>(
               &_AllergyIntoleranceAdministration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    254;

  void Swap(AllergyIntoleranceAdministration* other);
  friend void swap(AllergyIntoleranceAdministration& a, AllergyIntoleranceAdministration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllergyIntoleranceAdministration* New() const final {
    return CreateMaybeMessage<AllergyIntoleranceAdministration>(NULL);
  }

  AllergyIntoleranceAdministration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllergyIntoleranceAdministration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllergyIntoleranceAdministration& from);
  void MergeFrom(const AllergyIntoleranceAdministration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllergyIntoleranceAdministration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/MedicationAdministration"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AllergyIntoleranceAdministration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllergyIntoleranceCareplan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AllergyIntoleranceCareplan) */ {
 public:
  AllergyIntoleranceCareplan();
  virtual ~AllergyIntoleranceCareplan();

  AllergyIntoleranceCareplan(const AllergyIntoleranceCareplan& from);

  inline AllergyIntoleranceCareplan& operator=(const AllergyIntoleranceCareplan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllergyIntoleranceCareplan(AllergyIntoleranceCareplan&& from) noexcept
    : AllergyIntoleranceCareplan() {
    *this = ::std::move(from);
  }

  inline AllergyIntoleranceCareplan& operator=(AllergyIntoleranceCareplan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllergyIntoleranceCareplan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllergyIntoleranceCareplan* internal_default_instance() {
    return reinterpret_cast<const AllergyIntoleranceCareplan*>(
               &_AllergyIntoleranceCareplan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    255;

  void Swap(AllergyIntoleranceCareplan* other);
  friend void swap(AllergyIntoleranceCareplan& a, AllergyIntoleranceCareplan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllergyIntoleranceCareplan* New() const final {
    return CreateMaybeMessage<AllergyIntoleranceCareplan>(NULL);
  }

  AllergyIntoleranceCareplan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllergyIntoleranceCareplan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllergyIntoleranceCareplan& from);
  void MergeFrom(const AllergyIntoleranceCareplan& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllergyIntoleranceCareplan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/CarePlan"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AllergyIntoleranceCareplan)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllergyIntoleranceExposureDate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AllergyIntoleranceExposureDate) */ {
 public:
  AllergyIntoleranceExposureDate();
  virtual ~AllergyIntoleranceExposureDate();

  AllergyIntoleranceExposureDate(const AllergyIntoleranceExposureDate& from);

  inline AllergyIntoleranceExposureDate& operator=(const AllergyIntoleranceExposureDate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllergyIntoleranceExposureDate(AllergyIntoleranceExposureDate&& from) noexcept
    : AllergyIntoleranceExposureDate() {
    *this = ::std::move(from);
  }

  inline AllergyIntoleranceExposureDate& operator=(AllergyIntoleranceExposureDate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllergyIntoleranceExposureDate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllergyIntoleranceExposureDate* internal_default_instance() {
    return reinterpret_cast<const AllergyIntoleranceExposureDate*>(
               &_AllergyIntoleranceExposureDate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    256;

  void Swap(AllergyIntoleranceExposureDate* other);
  friend void swap(AllergyIntoleranceExposureDate& a, AllergyIntoleranceExposureDate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllergyIntoleranceExposureDate* New() const final {
    return CreateMaybeMessage<AllergyIntoleranceExposureDate>(NULL);
  }

  AllergyIntoleranceExposureDate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllergyIntoleranceExposureDate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllergyIntoleranceExposureDate& from);
  void MergeFrom(const AllergyIntoleranceExposureDate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllergyIntoleranceExposureDate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.DateTime value_date_time = 3;
  bool has_value_date_time() const;
  void clear_value_date_time();
  static const int kValueDateTimeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::DateTime& _internal_value_date_time() const;
  public:
  const ::google::fhir::stu3::proto::DateTime& value_date_time() const;
  ::google::fhir::stu3::proto::DateTime* release_value_date_time();
  ::google::fhir::stu3::proto::DateTime* mutable_value_date_time();
  void set_allocated_value_date_time(::google::fhir::stu3::proto::DateTime* value_date_time);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AllergyIntoleranceExposureDate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::DateTime* value_date_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllergyIntoleranceExposureDescription : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AllergyIntoleranceExposureDescription) */ {
 public:
  AllergyIntoleranceExposureDescription();
  virtual ~AllergyIntoleranceExposureDescription();

  AllergyIntoleranceExposureDescription(const AllergyIntoleranceExposureDescription& from);

  inline AllergyIntoleranceExposureDescription& operator=(const AllergyIntoleranceExposureDescription& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllergyIntoleranceExposureDescription(AllergyIntoleranceExposureDescription&& from) noexcept
    : AllergyIntoleranceExposureDescription() {
    *this = ::std::move(from);
  }

  inline AllergyIntoleranceExposureDescription& operator=(AllergyIntoleranceExposureDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllergyIntoleranceExposureDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllergyIntoleranceExposureDescription* internal_default_instance() {
    return reinterpret_cast<const AllergyIntoleranceExposureDescription*>(
               &_AllergyIntoleranceExposureDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    257;

  void Swap(AllergyIntoleranceExposureDescription* other);
  friend void swap(AllergyIntoleranceExposureDescription& a, AllergyIntoleranceExposureDescription& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllergyIntoleranceExposureDescription* New() const final {
    return CreateMaybeMessage<AllergyIntoleranceExposureDescription>(NULL);
  }

  AllergyIntoleranceExposureDescription* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllergyIntoleranceExposureDescription>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllergyIntoleranceExposureDescription& from);
  void MergeFrom(const AllergyIntoleranceExposureDescription& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllergyIntoleranceExposureDescription* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AllergyIntoleranceExposureDescription)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllergyIntoleranceExposureDuration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AllergyIntoleranceExposureDuration) */ {
 public:
  AllergyIntoleranceExposureDuration();
  virtual ~AllergyIntoleranceExposureDuration();

  AllergyIntoleranceExposureDuration(const AllergyIntoleranceExposureDuration& from);

  inline AllergyIntoleranceExposureDuration& operator=(const AllergyIntoleranceExposureDuration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllergyIntoleranceExposureDuration(AllergyIntoleranceExposureDuration&& from) noexcept
    : AllergyIntoleranceExposureDuration() {
    *this = ::std::move(from);
  }

  inline AllergyIntoleranceExposureDuration& operator=(AllergyIntoleranceExposureDuration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllergyIntoleranceExposureDuration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllergyIntoleranceExposureDuration* internal_default_instance() {
    return reinterpret_cast<const AllergyIntoleranceExposureDuration*>(
               &_AllergyIntoleranceExposureDuration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    258;

  void Swap(AllergyIntoleranceExposureDuration* other);
  friend void swap(AllergyIntoleranceExposureDuration& a, AllergyIntoleranceExposureDuration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllergyIntoleranceExposureDuration* New() const final {
    return CreateMaybeMessage<AllergyIntoleranceExposureDuration>(NULL);
  }

  AllergyIntoleranceExposureDuration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllergyIntoleranceExposureDuration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllergyIntoleranceExposureDuration& from);
  void MergeFrom(const AllergyIntoleranceExposureDuration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllergyIntoleranceExposureDuration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Duration value_duration = 3;
  bool has_value_duration() const;
  void clear_value_duration();
  static const int kValueDurationFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Duration& _internal_value_duration() const;
  public:
  const ::google::fhir::stu3::proto::Duration& value_duration() const;
  ::google::fhir::stu3::proto::Duration* release_value_duration();
  ::google::fhir::stu3::proto::Duration* mutable_value_duration();
  void set_allocated_value_duration(::google::fhir::stu3::proto::Duration* value_duration);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AllergyIntoleranceExposureDuration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Duration* value_duration_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllergyIntoleranceLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AllergyIntoleranceLocation) */ {
 public:
  AllergyIntoleranceLocation();
  virtual ~AllergyIntoleranceLocation();

  AllergyIntoleranceLocation(const AllergyIntoleranceLocation& from);

  inline AllergyIntoleranceLocation& operator=(const AllergyIntoleranceLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllergyIntoleranceLocation(AllergyIntoleranceLocation&& from) noexcept
    : AllergyIntoleranceLocation() {
    *this = ::std::move(from);
  }

  inline AllergyIntoleranceLocation& operator=(AllergyIntoleranceLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllergyIntoleranceLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllergyIntoleranceLocation* internal_default_instance() {
    return reinterpret_cast<const AllergyIntoleranceLocation*>(
               &_AllergyIntoleranceLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    259;

  void Swap(AllergyIntoleranceLocation* other);
  friend void swap(AllergyIntoleranceLocation& a, AllergyIntoleranceLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllergyIntoleranceLocation* New() const final {
    return CreateMaybeMessage<AllergyIntoleranceLocation>(NULL);
  }

  AllergyIntoleranceLocation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllergyIntoleranceLocation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllergyIntoleranceLocation& from);
  void MergeFrom(const AllergyIntoleranceLocation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllergyIntoleranceLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AllergyIntoleranceLocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllergyIntoleranceManagement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AllergyIntoleranceManagement) */ {
 public:
  AllergyIntoleranceManagement();
  virtual ~AllergyIntoleranceManagement();

  AllergyIntoleranceManagement(const AllergyIntoleranceManagement& from);

  inline AllergyIntoleranceManagement& operator=(const AllergyIntoleranceManagement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllergyIntoleranceManagement(AllergyIntoleranceManagement&& from) noexcept
    : AllergyIntoleranceManagement() {
    *this = ::std::move(from);
  }

  inline AllergyIntoleranceManagement& operator=(AllergyIntoleranceManagement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllergyIntoleranceManagement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllergyIntoleranceManagement* internal_default_instance() {
    return reinterpret_cast<const AllergyIntoleranceManagement*>(
               &_AllergyIntoleranceManagement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    260;

  void Swap(AllergyIntoleranceManagement* other);
  friend void swap(AllergyIntoleranceManagement& a, AllergyIntoleranceManagement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllergyIntoleranceManagement* New() const final {
    return CreateMaybeMessage<AllergyIntoleranceManagement>(NULL);
  }

  AllergyIntoleranceManagement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllergyIntoleranceManagement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllergyIntoleranceManagement& from);
  void MergeFrom(const AllergyIntoleranceManagement& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllergyIntoleranceManagement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AllergyIntoleranceManagement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllergyIntoleranceTest_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AllergyIntoleranceTest.Value) */ {
 public:
  AllergyIntoleranceTest_Value();
  virtual ~AllergyIntoleranceTest_Value();

  AllergyIntoleranceTest_Value(const AllergyIntoleranceTest_Value& from);

  inline AllergyIntoleranceTest_Value& operator=(const AllergyIntoleranceTest_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllergyIntoleranceTest_Value(AllergyIntoleranceTest_Value&& from) noexcept
    : AllergyIntoleranceTest_Value() {
    *this = ::std::move(from);
  }

  inline AllergyIntoleranceTest_Value& operator=(AllergyIntoleranceTest_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllergyIntoleranceTest_Value& default_instance();

  enum ValueCase {
    kReference = 1,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllergyIntoleranceTest_Value* internal_default_instance() {
    return reinterpret_cast<const AllergyIntoleranceTest_Value*>(
               &_AllergyIntoleranceTest_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    261;

  void Swap(AllergyIntoleranceTest_Value* other);
  friend void swap(AllergyIntoleranceTest_Value& a, AllergyIntoleranceTest_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllergyIntoleranceTest_Value* New() const final {
    return CreateMaybeMessage<AllergyIntoleranceTest_Value>(NULL);
  }

  AllergyIntoleranceTest_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllergyIntoleranceTest_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllergyIntoleranceTest_Value& from);
  void MergeFrom(const AllergyIntoleranceTest_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllergyIntoleranceTest_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Observation", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/DiagnosticReport"];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AllergyIntoleranceTest.Value)
 private:
  void set_has_reference();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::Reference* reference_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllergyIntoleranceTest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AllergyIntoleranceTest) */ {
 public:
  AllergyIntoleranceTest();
  virtual ~AllergyIntoleranceTest();

  AllergyIntoleranceTest(const AllergyIntoleranceTest& from);

  inline AllergyIntoleranceTest& operator=(const AllergyIntoleranceTest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllergyIntoleranceTest(AllergyIntoleranceTest&& from) noexcept
    : AllergyIntoleranceTest() {
    *this = ::std::move(from);
  }

  inline AllergyIntoleranceTest& operator=(AllergyIntoleranceTest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllergyIntoleranceTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllergyIntoleranceTest* internal_default_instance() {
    return reinterpret_cast<const AllergyIntoleranceTest*>(
               &_AllergyIntoleranceTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    262;

  void Swap(AllergyIntoleranceTest* other);
  friend void swap(AllergyIntoleranceTest& a, AllergyIntoleranceTest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllergyIntoleranceTest* New() const final {
    return CreateMaybeMessage<AllergyIntoleranceTest>(NULL);
  }

  AllergyIntoleranceTest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllergyIntoleranceTest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllergyIntoleranceTest& from);
  void MergeFrom(const AllergyIntoleranceTest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllergyIntoleranceTest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AllergyIntoleranceTest_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.AllergyIntoleranceTest.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::AllergyIntoleranceTest_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::AllergyIntoleranceTest_Value& value() const;
  ::google::fhir::stu3::proto::AllergyIntoleranceTest_Value* release_value();
  ::google::fhir::stu3::proto::AllergyIntoleranceTest_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::AllergyIntoleranceTest_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AllergyIntoleranceTest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::AllergyIntoleranceTest_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OperationOutcomeAuthority : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.OperationOutcomeAuthority) */ {
 public:
  OperationOutcomeAuthority();
  virtual ~OperationOutcomeAuthority();

  OperationOutcomeAuthority(const OperationOutcomeAuthority& from);

  inline OperationOutcomeAuthority& operator=(const OperationOutcomeAuthority& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OperationOutcomeAuthority(OperationOutcomeAuthority&& from) noexcept
    : OperationOutcomeAuthority() {
    *this = ::std::move(from);
  }

  inline OperationOutcomeAuthority& operator=(OperationOutcomeAuthority&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OperationOutcomeAuthority& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperationOutcomeAuthority* internal_default_instance() {
    return reinterpret_cast<const OperationOutcomeAuthority*>(
               &_OperationOutcomeAuthority_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    263;

  void Swap(OperationOutcomeAuthority* other);
  friend void swap(OperationOutcomeAuthority& a, OperationOutcomeAuthority& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OperationOutcomeAuthority* New() const final {
    return CreateMaybeMessage<OperationOutcomeAuthority>(NULL);
  }

  OperationOutcomeAuthority* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OperationOutcomeAuthority>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OperationOutcomeAuthority& from);
  void MergeFrom(const OperationOutcomeAuthority& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationOutcomeAuthority* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri value_uri = 3;
  bool has_value_uri() const;
  void clear_value_uri();
  static const int kValueUriFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_value_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& value_uri() const;
  ::google::fhir::stu3::proto::Uri* release_value_uri();
  ::google::fhir::stu3::proto::Uri* mutable_value_uri();
  void set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.OperationOutcomeAuthority)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* value_uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OperationOutcomeDetectedIssue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.OperationOutcomeDetectedIssue) */ {
 public:
  OperationOutcomeDetectedIssue();
  virtual ~OperationOutcomeDetectedIssue();

  OperationOutcomeDetectedIssue(const OperationOutcomeDetectedIssue& from);

  inline OperationOutcomeDetectedIssue& operator=(const OperationOutcomeDetectedIssue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OperationOutcomeDetectedIssue(OperationOutcomeDetectedIssue&& from) noexcept
    : OperationOutcomeDetectedIssue() {
    *this = ::std::move(from);
  }

  inline OperationOutcomeDetectedIssue& operator=(OperationOutcomeDetectedIssue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OperationOutcomeDetectedIssue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperationOutcomeDetectedIssue* internal_default_instance() {
    return reinterpret_cast<const OperationOutcomeDetectedIssue*>(
               &_OperationOutcomeDetectedIssue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    264;

  void Swap(OperationOutcomeDetectedIssue* other);
  friend void swap(OperationOutcomeDetectedIssue& a, OperationOutcomeDetectedIssue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OperationOutcomeDetectedIssue* New() const final {
    return CreateMaybeMessage<OperationOutcomeDetectedIssue>(NULL);
  }

  OperationOutcomeDetectedIssue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OperationOutcomeDetectedIssue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OperationOutcomeDetectedIssue& from);
  void MergeFrom(const OperationOutcomeDetectedIssue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationOutcomeDetectedIssue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/DetectedIssue"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.OperationOutcomeDetectedIssue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OperationOutcomeIssueSource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.OperationOutcomeIssueSource) */ {
 public:
  OperationOutcomeIssueSource();
  virtual ~OperationOutcomeIssueSource();

  OperationOutcomeIssueSource(const OperationOutcomeIssueSource& from);

  inline OperationOutcomeIssueSource& operator=(const OperationOutcomeIssueSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OperationOutcomeIssueSource(OperationOutcomeIssueSource&& from) noexcept
    : OperationOutcomeIssueSource() {
    *this = ::std::move(from);
  }

  inline OperationOutcomeIssueSource& operator=(OperationOutcomeIssueSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OperationOutcomeIssueSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperationOutcomeIssueSource* internal_default_instance() {
    return reinterpret_cast<const OperationOutcomeIssueSource*>(
               &_OperationOutcomeIssueSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    265;

  void Swap(OperationOutcomeIssueSource* other);
  friend void swap(OperationOutcomeIssueSource& a, OperationOutcomeIssueSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OperationOutcomeIssueSource* New() const final {
    return CreateMaybeMessage<OperationOutcomeIssueSource>(NULL);
  }

  OperationOutcomeIssueSource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OperationOutcomeIssueSource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OperationOutcomeIssueSource& from);
  void MergeFrom(const OperationOutcomeIssueSource& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationOutcomeIssueSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.OperationOutcomeIssueSource)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OrganizationAlias : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.OrganizationAlias) */ {
 public:
  OrganizationAlias();
  virtual ~OrganizationAlias();

  OrganizationAlias(const OrganizationAlias& from);

  inline OrganizationAlias& operator=(const OrganizationAlias& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrganizationAlias(OrganizationAlias&& from) noexcept
    : OrganizationAlias() {
    *this = ::std::move(from);
  }

  inline OrganizationAlias& operator=(OrganizationAlias&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OrganizationAlias& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrganizationAlias* internal_default_instance() {
    return reinterpret_cast<const OrganizationAlias*>(
               &_OrganizationAlias_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    266;

  void Swap(OrganizationAlias* other);
  friend void swap(OrganizationAlias& a, OrganizationAlias& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrganizationAlias* New() const final {
    return CreateMaybeMessage<OrganizationAlias>(NULL);
  }

  OrganizationAlias* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OrganizationAlias>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OrganizationAlias& from);
  void MergeFrom(const OrganizationAlias& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrganizationAlias* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.OrganizationAlias)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OrganizationPeriod : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.OrganizationPeriod) */ {
 public:
  OrganizationPeriod();
  virtual ~OrganizationPeriod();

  OrganizationPeriod(const OrganizationPeriod& from);

  inline OrganizationPeriod& operator=(const OrganizationPeriod& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrganizationPeriod(OrganizationPeriod&& from) noexcept
    : OrganizationPeriod() {
    *this = ::std::move(from);
  }

  inline OrganizationPeriod& operator=(OrganizationPeriod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OrganizationPeriod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrganizationPeriod* internal_default_instance() {
    return reinterpret_cast<const OrganizationPeriod*>(
               &_OrganizationPeriod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    267;

  void Swap(OrganizationPeriod* other);
  friend void swap(OrganizationPeriod& a, OrganizationPeriod& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrganizationPeriod* New() const final {
    return CreateMaybeMessage<OrganizationPeriod>(NULL);
  }

  OrganizationPeriod* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OrganizationPeriod>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OrganizationPeriod& from);
  void MergeFrom(const OrganizationPeriod& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrganizationPeriod* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Period value_period = 3;
  bool has_value_period() const;
  void clear_value_period();
  static const int kValuePeriodFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Period& _internal_value_period() const;
  public:
  const ::google::fhir::stu3::proto::Period& value_period() const;
  ::google::fhir::stu3::proto::Period* release_value_period();
  ::google::fhir::stu3::proto::Period* mutable_value_period();
  void set_allocated_value_period(::google::fhir::stu3::proto::Period* value_period);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.OrganizationPeriod)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Period* value_period_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OrganizationPreferredContact : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.OrganizationPreferredContact) */ {
 public:
  OrganizationPreferredContact();
  virtual ~OrganizationPreferredContact();

  OrganizationPreferredContact(const OrganizationPreferredContact& from);

  inline OrganizationPreferredContact& operator=(const OrganizationPreferredContact& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OrganizationPreferredContact(OrganizationPreferredContact&& from) noexcept
    : OrganizationPreferredContact() {
    *this = ::std::move(from);
  }

  inline OrganizationPreferredContact& operator=(OrganizationPreferredContact&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OrganizationPreferredContact& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrganizationPreferredContact* internal_default_instance() {
    return reinterpret_cast<const OrganizationPreferredContact*>(
               &_OrganizationPreferredContact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    268;

  void Swap(OrganizationPreferredContact* other);
  friend void swap(OrganizationPreferredContact& a, OrganizationPreferredContact& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OrganizationPreferredContact* New() const final {
    return CreateMaybeMessage<OrganizationPreferredContact>(NULL);
  }

  OrganizationPreferredContact* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OrganizationPreferredContact>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OrganizationPreferredContact& from);
  void MergeFrom(const OrganizationPreferredContact& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrganizationPreferredContact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.OrganizationPreferredContact)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PatientAdoptionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.PatientAdoptionInfo) */ {
 public:
  PatientAdoptionInfo();
  virtual ~PatientAdoptionInfo();

  PatientAdoptionInfo(const PatientAdoptionInfo& from);

  inline PatientAdoptionInfo& operator=(const PatientAdoptionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PatientAdoptionInfo(PatientAdoptionInfo&& from) noexcept
    : PatientAdoptionInfo() {
    *this = ::std::move(from);
  }

  inline PatientAdoptionInfo& operator=(PatientAdoptionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PatientAdoptionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatientAdoptionInfo* internal_default_instance() {
    return reinterpret_cast<const PatientAdoptionInfo*>(
               &_PatientAdoptionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    269;

  void Swap(PatientAdoptionInfo* other);
  friend void swap(PatientAdoptionInfo& a, PatientAdoptionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PatientAdoptionInfo* New() const final {
    return CreateMaybeMessage<PatientAdoptionInfo>(NULL);
  }

  PatientAdoptionInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PatientAdoptionInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PatientAdoptionInfo& from);
  void MergeFrom(const PatientAdoptionInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientAdoptionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.PatientAdoptionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PatientBirthTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.PatientBirthTime) */ {
 public:
  PatientBirthTime();
  virtual ~PatientBirthTime();

  PatientBirthTime(const PatientBirthTime& from);

  inline PatientBirthTime& operator=(const PatientBirthTime& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PatientBirthTime(PatientBirthTime&& from) noexcept
    : PatientBirthTime() {
    *this = ::std::move(from);
  }

  inline PatientBirthTime& operator=(PatientBirthTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PatientBirthTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatientBirthTime* internal_default_instance() {
    return reinterpret_cast<const PatientBirthTime*>(
               &_PatientBirthTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    270;

  void Swap(PatientBirthTime* other);
  friend void swap(PatientBirthTime& a, PatientBirthTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PatientBirthTime* New() const final {
    return CreateMaybeMessage<PatientBirthTime>(NULL);
  }

  PatientBirthTime* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PatientBirthTime>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PatientBirthTime& from);
  void MergeFrom(const PatientBirthTime& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientBirthTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.DateTime value_date_time = 3;
  bool has_value_date_time() const;
  void clear_value_date_time();
  static const int kValueDateTimeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::DateTime& _internal_value_date_time() const;
  public:
  const ::google::fhir::stu3::proto::DateTime& value_date_time() const;
  ::google::fhir::stu3::proto::DateTime* release_value_date_time();
  ::google::fhir::stu3::proto::DateTime* mutable_value_date_time();
  void set_allocated_value_date_time(::google::fhir::stu3::proto::DateTime* value_date_time);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.PatientBirthTime)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::DateTime* value_date_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PatientCadavericDonor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.PatientCadavericDonor) */ {
 public:
  PatientCadavericDonor();
  virtual ~PatientCadavericDonor();

  PatientCadavericDonor(const PatientCadavericDonor& from);

  inline PatientCadavericDonor& operator=(const PatientCadavericDonor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PatientCadavericDonor(PatientCadavericDonor&& from) noexcept
    : PatientCadavericDonor() {
    *this = ::std::move(from);
  }

  inline PatientCadavericDonor& operator=(PatientCadavericDonor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PatientCadavericDonor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatientCadavericDonor* internal_default_instance() {
    return reinterpret_cast<const PatientCadavericDonor*>(
               &_PatientCadavericDonor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    271;

  void Swap(PatientCadavericDonor* other);
  friend void swap(PatientCadavericDonor& a, PatientCadavericDonor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PatientCadavericDonor* New() const final {
    return CreateMaybeMessage<PatientCadavericDonor>(NULL);
  }

  PatientCadavericDonor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PatientCadavericDonor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PatientCadavericDonor& from);
  void MergeFrom(const PatientCadavericDonor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientCadavericDonor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.PatientCadavericDonor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PatientCitizenship : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.PatientCitizenship) */ {
 public:
  PatientCitizenship();
  virtual ~PatientCitizenship();

  PatientCitizenship(const PatientCitizenship& from);

  inline PatientCitizenship& operator=(const PatientCitizenship& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PatientCitizenship(PatientCitizenship&& from) noexcept
    : PatientCitizenship() {
    *this = ::std::move(from);
  }

  inline PatientCitizenship& operator=(PatientCitizenship&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PatientCitizenship& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatientCitizenship* internal_default_instance() {
    return reinterpret_cast<const PatientCitizenship*>(
               &_PatientCitizenship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    272;

  void Swap(PatientCitizenship* other);
  friend void swap(PatientCitizenship& a, PatientCitizenship& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PatientCitizenship* New() const final {
    return CreateMaybeMessage<PatientCitizenship>(NULL);
  }

  PatientCitizenship* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PatientCitizenship>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PatientCitizenship& from);
  void MergeFrom(const PatientCitizenship& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientCitizenship* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept code = 4;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_code() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& code() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_code();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_code();
  void set_allocated_code(::google::fhir::stu3::proto::CodeableConcept* code);

  // .google.fhir.stu3.proto.Period period = 5;
  bool has_period() const;
  void clear_period();
  static const int kPeriodFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Period& _internal_period() const;
  public:
  const ::google::fhir::stu3::proto::Period& period() const;
  ::google::fhir::stu3::proto::Period* release_period();
  ::google::fhir::stu3::proto::Period* mutable_period();
  void set_allocated_period(::google::fhir::stu3::proto::Period* period);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.PatientCitizenship)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* code_;
  ::google::fhir::stu3::proto::Period* period_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PatientClinicalTrial : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.PatientClinicalTrial) */ {
 public:
  PatientClinicalTrial();
  virtual ~PatientClinicalTrial();

  PatientClinicalTrial(const PatientClinicalTrial& from);

  inline PatientClinicalTrial& operator=(const PatientClinicalTrial& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PatientClinicalTrial(PatientClinicalTrial&& from) noexcept
    : PatientClinicalTrial() {
    *this = ::std::move(from);
  }

  inline PatientClinicalTrial& operator=(PatientClinicalTrial&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PatientClinicalTrial& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatientClinicalTrial* internal_default_instance() {
    return reinterpret_cast<const PatientClinicalTrial*>(
               &_PatientClinicalTrial_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    273;

  void Swap(PatientClinicalTrial* other);
  friend void swap(PatientClinicalTrial& a, PatientClinicalTrial& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PatientClinicalTrial* New() const final {
    return CreateMaybeMessage<PatientClinicalTrial>(NULL);
  }

  PatientClinicalTrial* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PatientClinicalTrial>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PatientClinicalTrial& from);
  void MergeFrom(const PatientClinicalTrial& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientClinicalTrial* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String n_c_t = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.fhir_inlined_extension_url) = "NCT"];
  bool has_n_c_t() const;
  void clear_n_c_t();
  static const int kNCTFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::String& _internal_n_c_t() const;
  public:
  const ::google::fhir::stu3::proto::String& n_c_t() const;
  ::google::fhir::stu3::proto::String* release_n_c_t();
  ::google::fhir::stu3::proto::String* mutable_n_c_t();
  void set_allocated_n_c_t(::google::fhir::stu3::proto::String* n_c_t);

  // .google.fhir.stu3.proto.Period period = 5;
  bool has_period() const;
  void clear_period();
  static const int kPeriodFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Period& _internal_period() const;
  public:
  const ::google::fhir::stu3::proto::Period& period() const;
  ::google::fhir::stu3::proto::Period* release_period();
  ::google::fhir::stu3::proto::Period* mutable_period();
  void set_allocated_period(::google::fhir::stu3::proto::Period* period);

  // .google.fhir.stu3.proto.CodeableConcept reason = 6;
  bool has_reason() const;
  void clear_reason();
  static const int kReasonFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_reason() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& reason() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_reason();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_reason();
  void set_allocated_reason(::google::fhir::stu3::proto::CodeableConcept* reason);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.PatientClinicalTrial)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* n_c_t_;
  ::google::fhir::stu3::proto::Period* period_;
  ::google::fhir::stu3::proto::CodeableConcept* reason_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PatientCongregation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.PatientCongregation) */ {
 public:
  PatientCongregation();
  virtual ~PatientCongregation();

  PatientCongregation(const PatientCongregation& from);

  inline PatientCongregation& operator=(const PatientCongregation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PatientCongregation(PatientCongregation&& from) noexcept
    : PatientCongregation() {
    *this = ::std::move(from);
  }

  inline PatientCongregation& operator=(PatientCongregation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PatientCongregation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatientCongregation* internal_default_instance() {
    return reinterpret_cast<const PatientCongregation*>(
               &_PatientCongregation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    274;

  void Swap(PatientCongregation* other);
  friend void swap(PatientCongregation& a, PatientCongregation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PatientCongregation* New() const final {
    return CreateMaybeMessage<PatientCongregation>(NULL);
  }

  PatientCongregation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PatientCongregation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PatientCongregation& from);
  void MergeFrom(const PatientCongregation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientCongregation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.PatientCongregation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PatientDisability : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.PatientDisability) */ {
 public:
  PatientDisability();
  virtual ~PatientDisability();

  PatientDisability(const PatientDisability& from);

  inline PatientDisability& operator=(const PatientDisability& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PatientDisability(PatientDisability&& from) noexcept
    : PatientDisability() {
    *this = ::std::move(from);
  }

  inline PatientDisability& operator=(PatientDisability&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PatientDisability& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatientDisability* internal_default_instance() {
    return reinterpret_cast<const PatientDisability*>(
               &_PatientDisability_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    275;

  void Swap(PatientDisability* other);
  friend void swap(PatientDisability& a, PatientDisability& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PatientDisability* New() const final {
    return CreateMaybeMessage<PatientDisability>(NULL);
  }

  PatientDisability* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PatientDisability>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PatientDisability& from);
  void MergeFrom(const PatientDisability& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientDisability* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.PatientDisability)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PatientImportance : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.PatientImportance) */ {
 public:
  PatientImportance();
  virtual ~PatientImportance();

  PatientImportance(const PatientImportance& from);

  inline PatientImportance& operator=(const PatientImportance& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PatientImportance(PatientImportance&& from) noexcept
    : PatientImportance() {
    *this = ::std::move(from);
  }

  inline PatientImportance& operator=(PatientImportance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PatientImportance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatientImportance* internal_default_instance() {
    return reinterpret_cast<const PatientImportance*>(
               &_PatientImportance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    276;

  void Swap(PatientImportance* other);
  friend void swap(PatientImportance& a, PatientImportance& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PatientImportance* New() const final {
    return CreateMaybeMessage<PatientImportance>(NULL);
  }

  PatientImportance* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PatientImportance>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PatientImportance& from);
  void MergeFrom(const PatientImportance& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientImportance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.PatientImportance)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PatientInterpreterRequired : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.PatientInterpreterRequired) */ {
 public:
  PatientInterpreterRequired();
  virtual ~PatientInterpreterRequired();

  PatientInterpreterRequired(const PatientInterpreterRequired& from);

  inline PatientInterpreterRequired& operator=(const PatientInterpreterRequired& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PatientInterpreterRequired(PatientInterpreterRequired&& from) noexcept
    : PatientInterpreterRequired() {
    *this = ::std::move(from);
  }

  inline PatientInterpreterRequired& operator=(PatientInterpreterRequired&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PatientInterpreterRequired& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatientInterpreterRequired* internal_default_instance() {
    return reinterpret_cast<const PatientInterpreterRequired*>(
               &_PatientInterpreterRequired_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    277;

  void Swap(PatientInterpreterRequired* other);
  friend void swap(PatientInterpreterRequired& a, PatientInterpreterRequired& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PatientInterpreterRequired* New() const final {
    return CreateMaybeMessage<PatientInterpreterRequired>(NULL);
  }

  PatientInterpreterRequired* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PatientInterpreterRequired>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PatientInterpreterRequired& from);
  void MergeFrom(const PatientInterpreterRequired& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientInterpreterRequired* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.PatientInterpreterRequired)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PatientMothersMaidenName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.PatientMothersMaidenName) */ {
 public:
  PatientMothersMaidenName();
  virtual ~PatientMothersMaidenName();

  PatientMothersMaidenName(const PatientMothersMaidenName& from);

  inline PatientMothersMaidenName& operator=(const PatientMothersMaidenName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PatientMothersMaidenName(PatientMothersMaidenName&& from) noexcept
    : PatientMothersMaidenName() {
    *this = ::std::move(from);
  }

  inline PatientMothersMaidenName& operator=(PatientMothersMaidenName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PatientMothersMaidenName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatientMothersMaidenName* internal_default_instance() {
    return reinterpret_cast<const PatientMothersMaidenName*>(
               &_PatientMothersMaidenName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    278;

  void Swap(PatientMothersMaidenName* other);
  friend void swap(PatientMothersMaidenName& a, PatientMothersMaidenName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PatientMothersMaidenName* New() const final {
    return CreateMaybeMessage<PatientMothersMaidenName>(NULL);
  }

  PatientMothersMaidenName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PatientMothersMaidenName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PatientMothersMaidenName& from);
  void MergeFrom(const PatientMothersMaidenName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientMothersMaidenName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.PatientMothersMaidenName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PatientNationality : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.PatientNationality) */ {
 public:
  PatientNationality();
  virtual ~PatientNationality();

  PatientNationality(const PatientNationality& from);

  inline PatientNationality& operator=(const PatientNationality& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PatientNationality(PatientNationality&& from) noexcept
    : PatientNationality() {
    *this = ::std::move(from);
  }

  inline PatientNationality& operator=(PatientNationality&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PatientNationality& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatientNationality* internal_default_instance() {
    return reinterpret_cast<const PatientNationality*>(
               &_PatientNationality_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    279;

  void Swap(PatientNationality* other);
  friend void swap(PatientNationality& a, PatientNationality& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PatientNationality* New() const final {
    return CreateMaybeMessage<PatientNationality>(NULL);
  }

  PatientNationality* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PatientNationality>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PatientNationality& from);
  void MergeFrom(const PatientNationality& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientNationality* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept code = 4;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_code() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& code() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_code();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_code();
  void set_allocated_code(::google::fhir::stu3::proto::CodeableConcept* code);

  // .google.fhir.stu3.proto.Period period = 5;
  bool has_period() const;
  void clear_period();
  static const int kPeriodFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Period& _internal_period() const;
  public:
  const ::google::fhir::stu3::proto::Period& period() const;
  ::google::fhir::stu3::proto::Period* release_period();
  ::google::fhir::stu3::proto::Period* mutable_period();
  void set_allocated_period(::google::fhir::stu3::proto::Period* period);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.PatientNationality)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* code_;
  ::google::fhir::stu3::proto::Period* period_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PatientReligion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.PatientReligion) */ {
 public:
  PatientReligion();
  virtual ~PatientReligion();

  PatientReligion(const PatientReligion& from);

  inline PatientReligion& operator=(const PatientReligion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PatientReligion(PatientReligion&& from) noexcept
    : PatientReligion() {
    *this = ::std::move(from);
  }

  inline PatientReligion& operator=(PatientReligion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PatientReligion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatientReligion* internal_default_instance() {
    return reinterpret_cast<const PatientReligion*>(
               &_PatientReligion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    280;

  void Swap(PatientReligion* other);
  friend void swap(PatientReligion& a, PatientReligion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PatientReligion* New() const final {
    return CreateMaybeMessage<PatientReligion>(NULL);
  }

  PatientReligion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PatientReligion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PatientReligion& from);
  void MergeFrom(const PatientReligion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatientReligion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.PatientReligion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DoseType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DoseType) */ {
 public:
  DoseType();
  virtual ~DoseType();

  DoseType(const DoseType& from);

  inline DoseType& operator=(const DoseType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DoseType(DoseType&& from) noexcept
    : DoseType() {
    *this = ::std::move(from);
  }

  inline DoseType& operator=(DoseType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DoseType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoseType* internal_default_instance() {
    return reinterpret_cast<const DoseType*>(
               &_DoseType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    281;

  void Swap(DoseType* other);
  friend void swap(DoseType& a, DoseType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoseType* New() const final {
    return CreateMaybeMessage<DoseType>(NULL);
  }

  DoseType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DoseType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DoseType& from);
  void MergeFrom(const DoseType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoseType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DoseType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InfuseOver : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.InfuseOver) */ {
 public:
  InfuseOver();
  virtual ~InfuseOver();

  InfuseOver(const InfuseOver& from);

  inline InfuseOver& operator=(const InfuseOver& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InfuseOver(InfuseOver&& from) noexcept
    : InfuseOver() {
    *this = ::std::move(from);
  }

  inline InfuseOver& operator=(InfuseOver&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InfuseOver& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InfuseOver* internal_default_instance() {
    return reinterpret_cast<const InfuseOver*>(
               &_InfuseOver_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    282;

  void Swap(InfuseOver* other);
  friend void swap(InfuseOver& a, InfuseOver& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InfuseOver* New() const final {
    return CreateMaybeMessage<InfuseOver>(NULL);
  }

  InfuseOver* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InfuseOver>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InfuseOver& from);
  void MergeFrom(const InfuseOver& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfuseOver* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Duration value_duration = 3;
  bool has_value_duration() const;
  void clear_value_duration();
  static const int kValueDurationFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Duration& _internal_value_duration() const;
  public:
  const ::google::fhir::stu3::proto::Duration& value_duration() const;
  ::google::fhir::stu3::proto::Duration* release_value_duration();
  ::google::fhir::stu3::proto::Duration* mutable_value_duration();
  void set_allocated_value_duration(::google::fhir::stu3::proto::Duration* value_duration);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.InfuseOver)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Duration* value_duration_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MaxDeliveryRate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.MaxDeliveryRate) */ {
 public:
  MaxDeliveryRate();
  virtual ~MaxDeliveryRate();

  MaxDeliveryRate(const MaxDeliveryRate& from);

  inline MaxDeliveryRate& operator=(const MaxDeliveryRate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MaxDeliveryRate(MaxDeliveryRate&& from) noexcept
    : MaxDeliveryRate() {
    *this = ::std::move(from);
  }

  inline MaxDeliveryRate& operator=(MaxDeliveryRate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MaxDeliveryRate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaxDeliveryRate* internal_default_instance() {
    return reinterpret_cast<const MaxDeliveryRate*>(
               &_MaxDeliveryRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    283;

  void Swap(MaxDeliveryRate* other);
  friend void swap(MaxDeliveryRate& a, MaxDeliveryRate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MaxDeliveryRate* New() const final {
    return CreateMaybeMessage<MaxDeliveryRate>(NULL);
  }

  MaxDeliveryRate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MaxDeliveryRate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MaxDeliveryRate& from);
  void MergeFrom(const MaxDeliveryRate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaxDeliveryRate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Ratio value_ratio = 3;
  bool has_value_ratio() const;
  void clear_value_ratio();
  static const int kValueRatioFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Ratio& _internal_value_ratio() const;
  public:
  const ::google::fhir::stu3::proto::Ratio& value_ratio() const;
  ::google::fhir::stu3::proto::Ratio* release_value_ratio();
  ::google::fhir::stu3::proto::Ratio* mutable_value_ratio();
  void set_allocated_value_ratio(::google::fhir::stu3::proto::Ratio* value_ratio);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.MaxDeliveryRate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Ratio* value_ratio_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MaxDeliveryVolume : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.MaxDeliveryVolume) */ {
 public:
  MaxDeliveryVolume();
  virtual ~MaxDeliveryVolume();

  MaxDeliveryVolume(const MaxDeliveryVolume& from);

  inline MaxDeliveryVolume& operator=(const MaxDeliveryVolume& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MaxDeliveryVolume(MaxDeliveryVolume&& from) noexcept
    : MaxDeliveryVolume() {
    *this = ::std::move(from);
  }

  inline MaxDeliveryVolume& operator=(MaxDeliveryVolume&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MaxDeliveryVolume& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaxDeliveryVolume* internal_default_instance() {
    return reinterpret_cast<const MaxDeliveryVolume*>(
               &_MaxDeliveryVolume_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    284;

  void Swap(MaxDeliveryVolume* other);
  friend void swap(MaxDeliveryVolume& a, MaxDeliveryVolume& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MaxDeliveryVolume* New() const final {
    return CreateMaybeMessage<MaxDeliveryVolume>(NULL);
  }

  MaxDeliveryVolume* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MaxDeliveryVolume>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MaxDeliveryVolume& from);
  void MergeFrom(const MaxDeliveryVolume& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaxDeliveryVolume* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Quantity value_quantity = 3;
  bool has_value_quantity() const;
  void clear_value_quantity();
  static const int kValueQuantityFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Quantity& _internal_value_quantity() const;
  public:
  const ::google::fhir::stu3::proto::Quantity& value_quantity() const;
  ::google::fhir::stu3::proto::Quantity* release_value_quantity();
  ::google::fhir::stu3::proto::Quantity* mutable_value_quantity();
  void set_allocated_value_quantity(::google::fhir::stu3::proto::Quantity* value_quantity);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.MaxDeliveryVolume)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Quantity* value_quantity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MinDosePerPeriod : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.MinDosePerPeriod) */ {
 public:
  MinDosePerPeriod();
  virtual ~MinDosePerPeriod();

  MinDosePerPeriod(const MinDosePerPeriod& from);

  inline MinDosePerPeriod& operator=(const MinDosePerPeriod& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MinDosePerPeriod(MinDosePerPeriod&& from) noexcept
    : MinDosePerPeriod() {
    *this = ::std::move(from);
  }

  inline MinDosePerPeriod& operator=(MinDosePerPeriod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MinDosePerPeriod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MinDosePerPeriod* internal_default_instance() {
    return reinterpret_cast<const MinDosePerPeriod*>(
               &_MinDosePerPeriod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    285;

  void Swap(MinDosePerPeriod* other);
  friend void swap(MinDosePerPeriod& a, MinDosePerPeriod& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MinDosePerPeriod* New() const final {
    return CreateMaybeMessage<MinDosePerPeriod>(NULL);
  }

  MinDosePerPeriod* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MinDosePerPeriod>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MinDosePerPeriod& from);
  void MergeFrom(const MinDosePerPeriod& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MinDosePerPeriod* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Ratio value_ratio = 3;
  bool has_value_ratio() const;
  void clear_value_ratio();
  static const int kValueRatioFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Ratio& _internal_value_ratio() const;
  public:
  const ::google::fhir::stu3::proto::Ratio& value_ratio() const;
  ::google::fhir::stu3::proto::Ratio* release_value_ratio();
  ::google::fhir::stu3::proto::Ratio* mutable_value_ratio();
  void set_allocated_value_ratio(::google::fhir::stu3::proto::Ratio* value_ratio);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.MinDosePerPeriod)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Ratio* value_ratio_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RateGoal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.RateGoal) */ {
 public:
  RateGoal();
  virtual ~RateGoal();

  RateGoal(const RateGoal& from);

  inline RateGoal& operator=(const RateGoal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RateGoal(RateGoal&& from) noexcept
    : RateGoal() {
    *this = ::std::move(from);
  }

  inline RateGoal& operator=(RateGoal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RateGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RateGoal* internal_default_instance() {
    return reinterpret_cast<const RateGoal*>(
               &_RateGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    286;

  void Swap(RateGoal* other);
  friend void swap(RateGoal& a, RateGoal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RateGoal* New() const final {
    return CreateMaybeMessage<RateGoal>(NULL);
  }

  RateGoal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RateGoal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RateGoal& from);
  void MergeFrom(const RateGoal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RateGoal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Ratio value_ratio = 3;
  bool has_value_ratio() const;
  void clear_value_ratio();
  static const int kValueRatioFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Ratio& _internal_value_ratio() const;
  public:
  const ::google::fhir::stu3::proto::Ratio& value_ratio() const;
  ::google::fhir::stu3::proto::Ratio* release_value_ratio();
  ::google::fhir::stu3::proto::Ratio* mutable_value_ratio();
  void set_allocated_value_ratio(::google::fhir::stu3::proto::Ratio* value_ratio);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.RateGoal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Ratio* value_ratio_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RateIncrement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.RateIncrement) */ {
 public:
  RateIncrement();
  virtual ~RateIncrement();

  RateIncrement(const RateIncrement& from);

  inline RateIncrement& operator=(const RateIncrement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RateIncrement(RateIncrement&& from) noexcept
    : RateIncrement() {
    *this = ::std::move(from);
  }

  inline RateIncrement& operator=(RateIncrement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RateIncrement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RateIncrement* internal_default_instance() {
    return reinterpret_cast<const RateIncrement*>(
               &_RateIncrement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    287;

  void Swap(RateIncrement* other);
  friend void swap(RateIncrement& a, RateIncrement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RateIncrement* New() const final {
    return CreateMaybeMessage<RateIncrement>(NULL);
  }

  RateIncrement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RateIncrement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RateIncrement& from);
  void MergeFrom(const RateIncrement& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RateIncrement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Ratio value_ratio = 3;
  bool has_value_ratio() const;
  void clear_value_ratio();
  static const int kValueRatioFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Ratio& _internal_value_ratio() const;
  public:
  const ::google::fhir::stu3::proto::Ratio& value_ratio() const;
  ::google::fhir::stu3::proto::Ratio* release_value_ratio();
  ::google::fhir::stu3::proto::Ratio* mutable_value_ratio();
  void set_allocated_value_ratio(::google::fhir::stu3::proto::Ratio* value_ratio);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.RateIncrement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Ratio* value_ratio_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RateIncrementInterval : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.RateIncrementInterval) */ {
 public:
  RateIncrementInterval();
  virtual ~RateIncrementInterval();

  RateIncrementInterval(const RateIncrementInterval& from);

  inline RateIncrementInterval& operator=(const RateIncrementInterval& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RateIncrementInterval(RateIncrementInterval&& from) noexcept
    : RateIncrementInterval() {
    *this = ::std::move(from);
  }

  inline RateIncrementInterval& operator=(RateIncrementInterval&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RateIncrementInterval& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RateIncrementInterval* internal_default_instance() {
    return reinterpret_cast<const RateIncrementInterval*>(
               &_RateIncrementInterval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    288;

  void Swap(RateIncrementInterval* other);
  friend void swap(RateIncrementInterval& a, RateIncrementInterval& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RateIncrementInterval* New() const final {
    return CreateMaybeMessage<RateIncrementInterval>(NULL);
  }

  RateIncrementInterval* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RateIncrementInterval>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RateIncrementInterval& from);
  void MergeFrom(const RateIncrementInterval& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RateIncrementInterval* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Duration value_duration = 3;
  bool has_value_duration() const;
  void clear_value_duration();
  static const int kValueDurationFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Duration& _internal_value_duration() const;
  public:
  const ::google::fhir::stu3::proto::Duration& value_duration() const;
  ::google::fhir::stu3::proto::Duration* release_value_duration();
  ::google::fhir::stu3::proto::Duration* mutable_value_duration();
  void set_allocated_value_duration(::google::fhir::stu3::proto::Duration* value_duration);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.RateIncrementInterval)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Duration* value_duration_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RefillsRemaining : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.RefillsRemaining) */ {
 public:
  RefillsRemaining();
  virtual ~RefillsRemaining();

  RefillsRemaining(const RefillsRemaining& from);

  inline RefillsRemaining& operator=(const RefillsRemaining& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RefillsRemaining(RefillsRemaining&& from) noexcept
    : RefillsRemaining() {
    *this = ::std::move(from);
  }

  inline RefillsRemaining& operator=(RefillsRemaining&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RefillsRemaining& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefillsRemaining* internal_default_instance() {
    return reinterpret_cast<const RefillsRemaining*>(
               &_RefillsRemaining_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    289;

  void Swap(RefillsRemaining* other);
  friend void swap(RefillsRemaining& a, RefillsRemaining& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RefillsRemaining* New() const final {
    return CreateMaybeMessage<RefillsRemaining>(NULL);
  }

  RefillsRemaining* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RefillsRemaining>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RefillsRemaining& from);
  void MergeFrom(const RefillsRemaining& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefillsRemaining* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Integer value_integer = 3;
  bool has_value_integer() const;
  void clear_value_integer();
  static const int kValueIntegerFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Integer& _internal_value_integer() const;
  public:
  const ::google::fhir::stu3::proto::Integer& value_integer() const;
  ::google::fhir::stu3::proto::Integer* release_value_integer();
  ::google::fhir::stu3::proto::Integer* mutable_value_integer();
  void set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.RefillsRemaining)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Integer* value_integer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AnimalSpecies : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AnimalSpecies) */ {
 public:
  AnimalSpecies();
  virtual ~AnimalSpecies();

  AnimalSpecies(const AnimalSpecies& from);

  inline AnimalSpecies& operator=(const AnimalSpecies& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AnimalSpecies(AnimalSpecies&& from) noexcept
    : AnimalSpecies() {
    *this = ::std::move(from);
  }

  inline AnimalSpecies& operator=(AnimalSpecies&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AnimalSpecies& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AnimalSpecies* internal_default_instance() {
    return reinterpret_cast<const AnimalSpecies*>(
               &_AnimalSpecies_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    290;

  void Swap(AnimalSpecies* other);
  friend void swap(AnimalSpecies& a, AnimalSpecies& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AnimalSpecies* New() const final {
    return CreateMaybeMessage<AnimalSpecies>(NULL);
  }

  AnimalSpecies* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AnimalSpecies>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AnimalSpecies& from);
  void MergeFrom(const AnimalSpecies& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimalSpecies* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AnimalSpecies)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PractitionerClassification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.PractitionerClassification) */ {
 public:
  PractitionerClassification();
  virtual ~PractitionerClassification();

  PractitionerClassification(const PractitionerClassification& from);

  inline PractitionerClassification& operator=(const PractitionerClassification& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PractitionerClassification(PractitionerClassification&& from) noexcept
    : PractitionerClassification() {
    *this = ::std::move(from);
  }

  inline PractitionerClassification& operator=(PractitionerClassification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PractitionerClassification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PractitionerClassification* internal_default_instance() {
    return reinterpret_cast<const PractitionerClassification*>(
               &_PractitionerClassification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    291;

  void Swap(PractitionerClassification* other);
  friend void swap(PractitionerClassification& a, PractitionerClassification& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PractitionerClassification* New() const final {
    return CreateMaybeMessage<PractitionerClassification>(NULL);
  }

  PractitionerClassification* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PractitionerClassification>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PractitionerClassification& from);
  void MergeFrom(const PractitionerClassification& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PractitionerClassification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.PractitionerClassification)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PractitionerRolePrimaryInd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.PractitionerRolePrimaryInd) */ {
 public:
  PractitionerRolePrimaryInd();
  virtual ~PractitionerRolePrimaryInd();

  PractitionerRolePrimaryInd(const PractitionerRolePrimaryInd& from);

  inline PractitionerRolePrimaryInd& operator=(const PractitionerRolePrimaryInd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PractitionerRolePrimaryInd(PractitionerRolePrimaryInd&& from) noexcept
    : PractitionerRolePrimaryInd() {
    *this = ::std::move(from);
  }

  inline PractitionerRolePrimaryInd& operator=(PractitionerRolePrimaryInd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PractitionerRolePrimaryInd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PractitionerRolePrimaryInd* internal_default_instance() {
    return reinterpret_cast<const PractitionerRolePrimaryInd*>(
               &_PractitionerRolePrimaryInd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    292;

  void Swap(PractitionerRolePrimaryInd* other);
  friend void swap(PractitionerRolePrimaryInd& a, PractitionerRolePrimaryInd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PractitionerRolePrimaryInd* New() const final {
    return CreateMaybeMessage<PractitionerRolePrimaryInd>(NULL);
  }

  PractitionerRolePrimaryInd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PractitionerRolePrimaryInd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PractitionerRolePrimaryInd& from);
  void MergeFrom(const PractitionerRolePrimaryInd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PractitionerRolePrimaryInd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.PractitionerRolePrimaryInd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcedureApproachBodySite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ProcedureApproachBodySite) */ {
 public:
  ProcedureApproachBodySite();
  virtual ~ProcedureApproachBodySite();

  ProcedureApproachBodySite(const ProcedureApproachBodySite& from);

  inline ProcedureApproachBodySite& operator=(const ProcedureApproachBodySite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcedureApproachBodySite(ProcedureApproachBodySite&& from) noexcept
    : ProcedureApproachBodySite() {
    *this = ::std::move(from);
  }

  inline ProcedureApproachBodySite& operator=(ProcedureApproachBodySite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcedureApproachBodySite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcedureApproachBodySite* internal_default_instance() {
    return reinterpret_cast<const ProcedureApproachBodySite*>(
               &_ProcedureApproachBodySite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    293;

  void Swap(ProcedureApproachBodySite* other);
  friend void swap(ProcedureApproachBodySite& a, ProcedureApproachBodySite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcedureApproachBodySite* New() const final {
    return CreateMaybeMessage<ProcedureApproachBodySite>(NULL);
  }

  ProcedureApproachBodySite* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcedureApproachBodySite>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcedureApproachBodySite& from);
  void MergeFrom(const ProcedureApproachBodySite& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcedureApproachBodySite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/BodySite"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ProcedureApproachBodySite)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcedureCausedBy_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ProcedureCausedBy.Value) */ {
 public:
  ProcedureCausedBy_Value();
  virtual ~ProcedureCausedBy_Value();

  ProcedureCausedBy_Value(const ProcedureCausedBy_Value& from);

  inline ProcedureCausedBy_Value& operator=(const ProcedureCausedBy_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcedureCausedBy_Value(ProcedureCausedBy_Value&& from) noexcept
    : ProcedureCausedBy_Value() {
    *this = ::std::move(from);
  }

  inline ProcedureCausedBy_Value& operator=(ProcedureCausedBy_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcedureCausedBy_Value& default_instance();

  enum ValueCase {
    kReference = 1,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcedureCausedBy_Value* internal_default_instance() {
    return reinterpret_cast<const ProcedureCausedBy_Value*>(
               &_ProcedureCausedBy_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    294;

  void Swap(ProcedureCausedBy_Value* other);
  friend void swap(ProcedureCausedBy_Value& a, ProcedureCausedBy_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcedureCausedBy_Value* New() const final {
    return CreateMaybeMessage<ProcedureCausedBy_Value>(NULL);
  }

  ProcedureCausedBy_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcedureCausedBy_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcedureCausedBy_Value& from);
  void MergeFrom(const ProcedureCausedBy_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcedureCausedBy_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/AllergyIntolerance", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/DiagnosticReport", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/FamilyMemberHistory", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ImagingStudy", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Immunization", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ImmunizationRecommendation", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/MedicationAdministration", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/MedicationRequest", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/MedicationStatement", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Observation", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Procedure"];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ProcedureCausedBy.Value)
 private:
  void set_has_reference();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::Reference* reference_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcedureCausedBy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ProcedureCausedBy) */ {
 public:
  ProcedureCausedBy();
  virtual ~ProcedureCausedBy();

  ProcedureCausedBy(const ProcedureCausedBy& from);

  inline ProcedureCausedBy& operator=(const ProcedureCausedBy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcedureCausedBy(ProcedureCausedBy&& from) noexcept
    : ProcedureCausedBy() {
    *this = ::std::move(from);
  }

  inline ProcedureCausedBy& operator=(ProcedureCausedBy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcedureCausedBy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcedureCausedBy* internal_default_instance() {
    return reinterpret_cast<const ProcedureCausedBy*>(
               &_ProcedureCausedBy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    295;

  void Swap(ProcedureCausedBy* other);
  friend void swap(ProcedureCausedBy& a, ProcedureCausedBy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcedureCausedBy* New() const final {
    return CreateMaybeMessage<ProcedureCausedBy>(NULL);
  }

  ProcedureCausedBy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcedureCausedBy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcedureCausedBy& from);
  void MergeFrom(const ProcedureCausedBy& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcedureCausedBy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProcedureCausedBy_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.ProcedureCausedBy.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::ProcedureCausedBy_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::ProcedureCausedBy_Value& value() const;
  ::google::fhir::stu3::proto::ProcedureCausedBy_Value* release_value();
  ::google::fhir::stu3::proto::ProcedureCausedBy_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::ProcedureCausedBy_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ProcedureCausedBy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::ProcedureCausedBy_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcedureIncisionDateTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ProcedureIncisionDateTime) */ {
 public:
  ProcedureIncisionDateTime();
  virtual ~ProcedureIncisionDateTime();

  ProcedureIncisionDateTime(const ProcedureIncisionDateTime& from);

  inline ProcedureIncisionDateTime& operator=(const ProcedureIncisionDateTime& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcedureIncisionDateTime(ProcedureIncisionDateTime&& from) noexcept
    : ProcedureIncisionDateTime() {
    *this = ::std::move(from);
  }

  inline ProcedureIncisionDateTime& operator=(ProcedureIncisionDateTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcedureIncisionDateTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcedureIncisionDateTime* internal_default_instance() {
    return reinterpret_cast<const ProcedureIncisionDateTime*>(
               &_ProcedureIncisionDateTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    296;

  void Swap(ProcedureIncisionDateTime* other);
  friend void swap(ProcedureIncisionDateTime& a, ProcedureIncisionDateTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcedureIncisionDateTime* New() const final {
    return CreateMaybeMessage<ProcedureIncisionDateTime>(NULL);
  }

  ProcedureIncisionDateTime* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcedureIncisionDateTime>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcedureIncisionDateTime& from);
  void MergeFrom(const ProcedureIncisionDateTime& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcedureIncisionDateTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.DateTime value_date_time = 3;
  bool has_value_date_time() const;
  void clear_value_date_time();
  static const int kValueDateTimeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::DateTime& _internal_value_date_time() const;
  public:
  const ::google::fhir::stu3::proto::DateTime& value_date_time() const;
  ::google::fhir::stu3::proto::DateTime* release_value_date_time();
  ::google::fhir::stu3::proto::DateTime* mutable_value_date_time();
  void set_allocated_value_date_time(::google::fhir::stu3::proto::DateTime* value_date_time);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ProcedureIncisionDateTime)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::DateTime* value_date_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcedureMethod : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ProcedureMethod) */ {
 public:
  ProcedureMethod();
  virtual ~ProcedureMethod();

  ProcedureMethod(const ProcedureMethod& from);

  inline ProcedureMethod& operator=(const ProcedureMethod& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcedureMethod(ProcedureMethod&& from) noexcept
    : ProcedureMethod() {
    *this = ::std::move(from);
  }

  inline ProcedureMethod& operator=(ProcedureMethod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcedureMethod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcedureMethod* internal_default_instance() {
    return reinterpret_cast<const ProcedureMethod*>(
               &_ProcedureMethod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    297;

  void Swap(ProcedureMethod* other);
  friend void swap(ProcedureMethod& a, ProcedureMethod& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcedureMethod* New() const final {
    return CreateMaybeMessage<ProcedureMethod>(NULL);
  }

  ProcedureMethod* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcedureMethod>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcedureMethod& from);
  void MergeFrom(const ProcedureMethod& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcedureMethod* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ProcedureMethod)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcedureProgressStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ProcedureProgressStatus) */ {
 public:
  ProcedureProgressStatus();
  virtual ~ProcedureProgressStatus();

  ProcedureProgressStatus(const ProcedureProgressStatus& from);

  inline ProcedureProgressStatus& operator=(const ProcedureProgressStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcedureProgressStatus(ProcedureProgressStatus&& from) noexcept
    : ProcedureProgressStatus() {
    *this = ::std::move(from);
  }

  inline ProcedureProgressStatus& operator=(ProcedureProgressStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcedureProgressStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcedureProgressStatus* internal_default_instance() {
    return reinterpret_cast<const ProcedureProgressStatus*>(
               &_ProcedureProgressStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    298;

  void Swap(ProcedureProgressStatus* other);
  friend void swap(ProcedureProgressStatus& a, ProcedureProgressStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcedureProgressStatus* New() const final {
    return CreateMaybeMessage<ProcedureProgressStatus>(NULL);
  }

  ProcedureProgressStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcedureProgressStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcedureProgressStatus& from);
  void MergeFrom(const ProcedureProgressStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcedureProgressStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ProcedureProgressStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcedureSchedule : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ProcedureSchedule) */ {
 public:
  ProcedureSchedule();
  virtual ~ProcedureSchedule();

  ProcedureSchedule(const ProcedureSchedule& from);

  inline ProcedureSchedule& operator=(const ProcedureSchedule& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcedureSchedule(ProcedureSchedule&& from) noexcept
    : ProcedureSchedule() {
    *this = ::std::move(from);
  }

  inline ProcedureSchedule& operator=(ProcedureSchedule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcedureSchedule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcedureSchedule* internal_default_instance() {
    return reinterpret_cast<const ProcedureSchedule*>(
               &_ProcedureSchedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    299;

  void Swap(ProcedureSchedule* other);
  friend void swap(ProcedureSchedule& a, ProcedureSchedule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcedureSchedule* New() const final {
    return CreateMaybeMessage<ProcedureSchedule>(NULL);
  }

  ProcedureSchedule* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcedureSchedule>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcedureSchedule& from);
  void MergeFrom(const ProcedureSchedule& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcedureSchedule* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Timing value_timing = 3;
  bool has_value_timing() const;
  void clear_value_timing();
  static const int kValueTimingFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Timing& _internal_value_timing() const;
  public:
  const ::google::fhir::stu3::proto::Timing& value_timing() const;
  ::google::fhir::stu3::proto::Timing* release_value_timing();
  ::google::fhir::stu3::proto::Timing* mutable_value_timing();
  void set_allocated_value_timing(::google::fhir::stu3::proto::Timing* value_timing);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ProcedureSchedule)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Timing* value_timing_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcedureTargetBodySite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ProcedureTargetBodySite) */ {
 public:
  ProcedureTargetBodySite();
  virtual ~ProcedureTargetBodySite();

  ProcedureTargetBodySite(const ProcedureTargetBodySite& from);

  inline ProcedureTargetBodySite& operator=(const ProcedureTargetBodySite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcedureTargetBodySite(ProcedureTargetBodySite&& from) noexcept
    : ProcedureTargetBodySite() {
    *this = ::std::move(from);
  }

  inline ProcedureTargetBodySite& operator=(ProcedureTargetBodySite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcedureTargetBodySite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcedureTargetBodySite* internal_default_instance() {
    return reinterpret_cast<const ProcedureTargetBodySite*>(
               &_ProcedureTargetBodySite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    300;

  void Swap(ProcedureTargetBodySite* other);
  friend void swap(ProcedureTargetBodySite& a, ProcedureTargetBodySite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcedureTargetBodySite* New() const final {
    return CreateMaybeMessage<ProcedureTargetBodySite>(NULL);
  }

  ProcedureTargetBodySite* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcedureTargetBodySite>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcedureTargetBodySite& from);
  void MergeFrom(const ProcedureTargetBodySite& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcedureTargetBodySite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/BodySite"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ProcedureTargetBodySite)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcedureRequestApproachBodySite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ProcedureRequestApproachBodySite) */ {
 public:
  ProcedureRequestApproachBodySite();
  virtual ~ProcedureRequestApproachBodySite();

  ProcedureRequestApproachBodySite(const ProcedureRequestApproachBodySite& from);

  inline ProcedureRequestApproachBodySite& operator=(const ProcedureRequestApproachBodySite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcedureRequestApproachBodySite(ProcedureRequestApproachBodySite&& from) noexcept
    : ProcedureRequestApproachBodySite() {
    *this = ::std::move(from);
  }

  inline ProcedureRequestApproachBodySite& operator=(ProcedureRequestApproachBodySite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcedureRequestApproachBodySite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcedureRequestApproachBodySite* internal_default_instance() {
    return reinterpret_cast<const ProcedureRequestApproachBodySite*>(
               &_ProcedureRequestApproachBodySite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    301;

  void Swap(ProcedureRequestApproachBodySite* other);
  friend void swap(ProcedureRequestApproachBodySite& a, ProcedureRequestApproachBodySite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcedureRequestApproachBodySite* New() const final {
    return CreateMaybeMessage<ProcedureRequestApproachBodySite>(NULL);
  }

  ProcedureRequestApproachBodySite* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcedureRequestApproachBodySite>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcedureRequestApproachBodySite& from);
  void MergeFrom(const ProcedureRequestApproachBodySite& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcedureRequestApproachBodySite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/BodySite"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ProcedureRequestApproachBodySite)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcedureRequestAuthorizedBy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ProcedureRequestAuthorizedBy) */ {
 public:
  ProcedureRequestAuthorizedBy();
  virtual ~ProcedureRequestAuthorizedBy();

  ProcedureRequestAuthorizedBy(const ProcedureRequestAuthorizedBy& from);

  inline ProcedureRequestAuthorizedBy& operator=(const ProcedureRequestAuthorizedBy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcedureRequestAuthorizedBy(ProcedureRequestAuthorizedBy&& from) noexcept
    : ProcedureRequestAuthorizedBy() {
    *this = ::std::move(from);
  }

  inline ProcedureRequestAuthorizedBy& operator=(ProcedureRequestAuthorizedBy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcedureRequestAuthorizedBy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcedureRequestAuthorizedBy* internal_default_instance() {
    return reinterpret_cast<const ProcedureRequestAuthorizedBy*>(
               &_ProcedureRequestAuthorizedBy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    302;

  void Swap(ProcedureRequestAuthorizedBy* other);
  friend void swap(ProcedureRequestAuthorizedBy& a, ProcedureRequestAuthorizedBy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcedureRequestAuthorizedBy* New() const final {
    return CreateMaybeMessage<ProcedureRequestAuthorizedBy>(NULL);
  }

  ProcedureRequestAuthorizedBy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcedureRequestAuthorizedBy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcedureRequestAuthorizedBy& from);
  void MergeFrom(const ProcedureRequestAuthorizedBy& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcedureRequestAuthorizedBy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ProcedureRequestAuthorizedBy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DiagnosticReportItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DiagnosticReportItem) */ {
 public:
  DiagnosticReportItem();
  virtual ~DiagnosticReportItem();

  DiagnosticReportItem(const DiagnosticReportItem& from);

  inline DiagnosticReportItem& operator=(const DiagnosticReportItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DiagnosticReportItem(DiagnosticReportItem&& from) noexcept
    : DiagnosticReportItem() {
    *this = ::std::move(from);
  }

  inline DiagnosticReportItem& operator=(DiagnosticReportItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiagnosticReportItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiagnosticReportItem* internal_default_instance() {
    return reinterpret_cast<const DiagnosticReportItem*>(
               &_DiagnosticReportItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    303;

  void Swap(DiagnosticReportItem* other);
  friend void swap(DiagnosticReportItem& a, DiagnosticReportItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DiagnosticReportItem* New() const final {
    return CreateMaybeMessage<DiagnosticReportItem>(NULL);
  }

  DiagnosticReportItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DiagnosticReportItem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DiagnosticReportItem& from);
  void MergeFrom(const DiagnosticReportItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiagnosticReportItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept code = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_code() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& code() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_code();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_code();
  void set_allocated_code(::google::fhir::stu3::proto::CodeableConcept* code);

  // .google.fhir.stu3.proto.Reference genetics_observation = 5;
  bool has_genetics_observation() const;
  void clear_genetics_observation();
  static const int kGeneticsObservationFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_genetics_observation() const;
  public:
  const ::google::fhir::stu3::proto::Reference& genetics_observation() const;
  ::google::fhir::stu3::proto::Reference* release_genetics_observation();
  ::google::fhir::stu3::proto::Reference* mutable_genetics_observation();
  void set_allocated_genetics_observation(::google::fhir::stu3::proto::Reference* genetics_observation);

  // .google.fhir.stu3.proto.Reference specimen = 6;
  bool has_specimen() const;
  void clear_specimen();
  static const int kSpecimenFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_specimen() const;
  public:
  const ::google::fhir::stu3::proto::Reference& specimen() const;
  ::google::fhir::stu3::proto::Reference* release_specimen();
  ::google::fhir::stu3::proto::Reference* mutable_specimen();
  void set_allocated_specimen(::google::fhir::stu3::proto::Reference* specimen);

  // .google.fhir.stu3.proto.Code status = 7;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::Code& _internal_status() const;
  public:
  const ::google::fhir::stu3::proto::Code& status() const;
  ::google::fhir::stu3::proto::Code* release_status();
  ::google::fhir::stu3::proto::Code* mutable_status();
  void set_allocated_status(::google::fhir::stu3::proto::Code* status);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DiagnosticReportItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* code_;
  ::google::fhir::stu3::proto::Reference* genetics_observation_;
  ::google::fhir::stu3::proto::Reference* specimen_;
  ::google::fhir::stu3::proto::Code* status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcedureRequestPrecondition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ProcedureRequestPrecondition) */ {
 public:
  ProcedureRequestPrecondition();
  virtual ~ProcedureRequestPrecondition();

  ProcedureRequestPrecondition(const ProcedureRequestPrecondition& from);

  inline ProcedureRequestPrecondition& operator=(const ProcedureRequestPrecondition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcedureRequestPrecondition(ProcedureRequestPrecondition&& from) noexcept
    : ProcedureRequestPrecondition() {
    *this = ::std::move(from);
  }

  inline ProcedureRequestPrecondition& operator=(ProcedureRequestPrecondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcedureRequestPrecondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcedureRequestPrecondition* internal_default_instance() {
    return reinterpret_cast<const ProcedureRequestPrecondition*>(
               &_ProcedureRequestPrecondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    304;

  void Swap(ProcedureRequestPrecondition* other);
  friend void swap(ProcedureRequestPrecondition& a, ProcedureRequestPrecondition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcedureRequestPrecondition* New() const final {
    return CreateMaybeMessage<ProcedureRequestPrecondition>(NULL);
  }

  ProcedureRequestPrecondition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcedureRequestPrecondition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcedureRequestPrecondition& from);
  void MergeFrom(const ProcedureRequestPrecondition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcedureRequestPrecondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ProcedureRequestPrecondition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcedureRequestQuestionnaireRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ProcedureRequestQuestionnaireRequest) */ {
 public:
  ProcedureRequestQuestionnaireRequest();
  virtual ~ProcedureRequestQuestionnaireRequest();

  ProcedureRequestQuestionnaireRequest(const ProcedureRequestQuestionnaireRequest& from);

  inline ProcedureRequestQuestionnaireRequest& operator=(const ProcedureRequestQuestionnaireRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcedureRequestQuestionnaireRequest(ProcedureRequestQuestionnaireRequest&& from) noexcept
    : ProcedureRequestQuestionnaireRequest() {
    *this = ::std::move(from);
  }

  inline ProcedureRequestQuestionnaireRequest& operator=(ProcedureRequestQuestionnaireRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcedureRequestQuestionnaireRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcedureRequestQuestionnaireRequest* internal_default_instance() {
    return reinterpret_cast<const ProcedureRequestQuestionnaireRequest*>(
               &_ProcedureRequestQuestionnaireRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    305;

  void Swap(ProcedureRequestQuestionnaireRequest* other);
  friend void swap(ProcedureRequestQuestionnaireRequest& a, ProcedureRequestQuestionnaireRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcedureRequestQuestionnaireRequest* New() const final {
    return CreateMaybeMessage<ProcedureRequestQuestionnaireRequest>(NULL);
  }

  ProcedureRequestQuestionnaireRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcedureRequestQuestionnaireRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcedureRequestQuestionnaireRequest& from);
  void MergeFrom(const ProcedureRequestQuestionnaireRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcedureRequestQuestionnaireRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Questionnaire"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ProcedureRequestQuestionnaireRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcedureRequestReasonRefused : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ProcedureRequestReasonRefused) */ {
 public:
  ProcedureRequestReasonRefused();
  virtual ~ProcedureRequestReasonRefused();

  ProcedureRequestReasonRefused(const ProcedureRequestReasonRefused& from);

  inline ProcedureRequestReasonRefused& operator=(const ProcedureRequestReasonRefused& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcedureRequestReasonRefused(ProcedureRequestReasonRefused&& from) noexcept
    : ProcedureRequestReasonRefused() {
    *this = ::std::move(from);
  }

  inline ProcedureRequestReasonRefused& operator=(ProcedureRequestReasonRefused&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcedureRequestReasonRefused& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcedureRequestReasonRefused* internal_default_instance() {
    return reinterpret_cast<const ProcedureRequestReasonRefused*>(
               &_ProcedureRequestReasonRefused_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    306;

  void Swap(ProcedureRequestReasonRefused* other);
  friend void swap(ProcedureRequestReasonRefused& a, ProcedureRequestReasonRefused& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcedureRequestReasonRefused* New() const final {
    return CreateMaybeMessage<ProcedureRequestReasonRefused>(NULL);
  }

  ProcedureRequestReasonRefused* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcedureRequestReasonRefused>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcedureRequestReasonRefused& from);
  void MergeFrom(const ProcedureRequestReasonRefused& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcedureRequestReasonRefused* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ProcedureRequestReasonRefused)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcedureRequestReasonRejected : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ProcedureRequestReasonRejected) */ {
 public:
  ProcedureRequestReasonRejected();
  virtual ~ProcedureRequestReasonRejected();

  ProcedureRequestReasonRejected(const ProcedureRequestReasonRejected& from);

  inline ProcedureRequestReasonRejected& operator=(const ProcedureRequestReasonRejected& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcedureRequestReasonRejected(ProcedureRequestReasonRejected&& from) noexcept
    : ProcedureRequestReasonRejected() {
    *this = ::std::move(from);
  }

  inline ProcedureRequestReasonRejected& operator=(ProcedureRequestReasonRejected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcedureRequestReasonRejected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcedureRequestReasonRejected* internal_default_instance() {
    return reinterpret_cast<const ProcedureRequestReasonRejected*>(
               &_ProcedureRequestReasonRejected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    307;

  void Swap(ProcedureRequestReasonRejected* other);
  friend void swap(ProcedureRequestReasonRejected& a, ProcedureRequestReasonRejected& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcedureRequestReasonRejected* New() const final {
    return CreateMaybeMessage<ProcedureRequestReasonRejected>(NULL);
  }

  ProcedureRequestReasonRejected* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcedureRequestReasonRejected>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcedureRequestReasonRejected& from);
  void MergeFrom(const ProcedureRequestReasonRejected& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcedureRequestReasonRejected* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ProcedureRequestReasonRejected)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcedureRequestTargetBodySite : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ProcedureRequestTargetBodySite) */ {
 public:
  ProcedureRequestTargetBodySite();
  virtual ~ProcedureRequestTargetBodySite();

  ProcedureRequestTargetBodySite(const ProcedureRequestTargetBodySite& from);

  inline ProcedureRequestTargetBodySite& operator=(const ProcedureRequestTargetBodySite& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcedureRequestTargetBodySite(ProcedureRequestTargetBodySite&& from) noexcept
    : ProcedureRequestTargetBodySite() {
    *this = ::std::move(from);
  }

  inline ProcedureRequestTargetBodySite& operator=(ProcedureRequestTargetBodySite&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcedureRequestTargetBodySite& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcedureRequestTargetBodySite* internal_default_instance() {
    return reinterpret_cast<const ProcedureRequestTargetBodySite*>(
               &_ProcedureRequestTargetBodySite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    308;

  void Swap(ProcedureRequestTargetBodySite* other);
  friend void swap(ProcedureRequestTargetBodySite& a, ProcedureRequestTargetBodySite& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcedureRequestTargetBodySite* New() const final {
    return CreateMaybeMessage<ProcedureRequestTargetBodySite>(NULL);
  }

  ProcedureRequestTargetBodySite* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcedureRequestTargetBodySite>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcedureRequestTargetBodySite& from);
  void MergeFrom(const ProcedureRequestTargetBodySite& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcedureRequestTargetBodySite* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/BodySite"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ProcedureRequestTargetBodySite)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireAllowedProfile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireAllowedProfile) */ {
 public:
  QuestionnaireAllowedProfile();
  virtual ~QuestionnaireAllowedProfile();

  QuestionnaireAllowedProfile(const QuestionnaireAllowedProfile& from);

  inline QuestionnaireAllowedProfile& operator=(const QuestionnaireAllowedProfile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireAllowedProfile(QuestionnaireAllowedProfile&& from) noexcept
    : QuestionnaireAllowedProfile() {
    *this = ::std::move(from);
  }

  inline QuestionnaireAllowedProfile& operator=(QuestionnaireAllowedProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireAllowedProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireAllowedProfile* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireAllowedProfile*>(
               &_QuestionnaireAllowedProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    309;

  void Swap(QuestionnaireAllowedProfile* other);
  friend void swap(QuestionnaireAllowedProfile& a, QuestionnaireAllowedProfile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireAllowedProfile* New() const final {
    return CreateMaybeMessage<QuestionnaireAllowedProfile>(NULL);
  }

  QuestionnaireAllowedProfile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireAllowedProfile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireAllowedProfile& from);
  void MergeFrom(const QuestionnaireAllowedProfile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireAllowedProfile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/StructureDefinition"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireAllowedProfile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireAllowedResource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireAllowedResource) */ {
 public:
  QuestionnaireAllowedResource();
  virtual ~QuestionnaireAllowedResource();

  QuestionnaireAllowedResource(const QuestionnaireAllowedResource& from);

  inline QuestionnaireAllowedResource& operator=(const QuestionnaireAllowedResource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireAllowedResource(QuestionnaireAllowedResource&& from) noexcept
    : QuestionnaireAllowedResource() {
    *this = ::std::move(from);
  }

  inline QuestionnaireAllowedResource& operator=(QuestionnaireAllowedResource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireAllowedResource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireAllowedResource* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireAllowedResource*>(
               &_QuestionnaireAllowedResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    310;

  void Swap(QuestionnaireAllowedResource* other);
  friend void swap(QuestionnaireAllowedResource& a, QuestionnaireAllowedResource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireAllowedResource* New() const final {
    return CreateMaybeMessage<QuestionnaireAllowedResource>(NULL);
  }

  QuestionnaireAllowedResource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireAllowedResource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireAllowedResource& from);
  void MergeFrom(const QuestionnaireAllowedResource& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireAllowedResource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.ResourceTypeCode value_code = 3;
  bool has_value_code() const;
  void clear_value_code();
  static const int kValueCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::ResourceTypeCode& _internal_value_code() const;
  public:
  const ::google::fhir::stu3::proto::ResourceTypeCode& value_code() const;
  ::google::fhir::stu3::proto::ResourceTypeCode* release_value_code();
  ::google::fhir::stu3::proto::ResourceTypeCode* mutable_value_code();
  void set_allocated_value_code(::google::fhir::stu3::proto::ResourceTypeCode* value_code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireAllowedResource)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::ResourceTypeCode* value_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireBaseType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireBaseType) */ {
 public:
  QuestionnaireBaseType();
  virtual ~QuestionnaireBaseType();

  QuestionnaireBaseType(const QuestionnaireBaseType& from);

  inline QuestionnaireBaseType& operator=(const QuestionnaireBaseType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireBaseType(QuestionnaireBaseType&& from) noexcept
    : QuestionnaireBaseType() {
    *this = ::std::move(from);
  }

  inline QuestionnaireBaseType& operator=(QuestionnaireBaseType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireBaseType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireBaseType* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireBaseType*>(
               &_QuestionnaireBaseType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    311;

  void Swap(QuestionnaireBaseType* other);
  friend void swap(QuestionnaireBaseType& a, QuestionnaireBaseType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireBaseType* New() const final {
    return CreateMaybeMessage<QuestionnaireBaseType>(NULL);
  }

  QuestionnaireBaseType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireBaseType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireBaseType& from);
  void MergeFrom(const QuestionnaireBaseType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireBaseType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.DataTypeCode value_code = 3;
  bool has_value_code() const;
  void clear_value_code();
  static const int kValueCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::DataTypeCode& _internal_value_code() const;
  public:
  const ::google::fhir::stu3::proto::DataTypeCode& value_code() const;
  ::google::fhir::stu3::proto::DataTypeCode* release_value_code();
  ::google::fhir::stu3::proto::DataTypeCode* mutable_value_code();
  void set_allocated_value_code(::google::fhir::stu3::proto::DataTypeCode* value_code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireBaseType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::DataTypeCode* value_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireChoiceOrientation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireChoiceOrientation) */ {
 public:
  QuestionnaireChoiceOrientation();
  virtual ~QuestionnaireChoiceOrientation();

  QuestionnaireChoiceOrientation(const QuestionnaireChoiceOrientation& from);

  inline QuestionnaireChoiceOrientation& operator=(const QuestionnaireChoiceOrientation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireChoiceOrientation(QuestionnaireChoiceOrientation&& from) noexcept
    : QuestionnaireChoiceOrientation() {
    *this = ::std::move(from);
  }

  inline QuestionnaireChoiceOrientation& operator=(QuestionnaireChoiceOrientation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireChoiceOrientation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireChoiceOrientation* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireChoiceOrientation*>(
               &_QuestionnaireChoiceOrientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    312;

  void Swap(QuestionnaireChoiceOrientation* other);
  friend void swap(QuestionnaireChoiceOrientation& a, QuestionnaireChoiceOrientation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireChoiceOrientation* New() const final {
    return CreateMaybeMessage<QuestionnaireChoiceOrientation>(NULL);
  }

  QuestionnaireChoiceOrientation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireChoiceOrientation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireChoiceOrientation& from);
  void MergeFrom(const QuestionnaireChoiceOrientation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireChoiceOrientation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.ChoiceListOrientationCode value_code = 3;
  bool has_value_code() const;
  void clear_value_code();
  static const int kValueCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::ChoiceListOrientationCode& _internal_value_code() const;
  public:
  const ::google::fhir::stu3::proto::ChoiceListOrientationCode& value_code() const;
  ::google::fhir::stu3::proto::ChoiceListOrientationCode* release_value_code();
  ::google::fhir::stu3::proto::ChoiceListOrientationCode* mutable_value_code();
  void set_allocated_value_code(::google::fhir::stu3::proto::ChoiceListOrientationCode* value_code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireChoiceOrientation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::ChoiceListOrientationCode* value_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireDeMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireDeMap) */ {
 public:
  QuestionnaireDeMap();
  virtual ~QuestionnaireDeMap();

  QuestionnaireDeMap(const QuestionnaireDeMap& from);

  inline QuestionnaireDeMap& operator=(const QuestionnaireDeMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireDeMap(QuestionnaireDeMap&& from) noexcept
    : QuestionnaireDeMap() {
    *this = ::std::move(from);
  }

  inline QuestionnaireDeMap& operator=(QuestionnaireDeMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireDeMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireDeMap* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireDeMap*>(
               &_QuestionnaireDeMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    313;

  void Swap(QuestionnaireDeMap* other);
  friend void swap(QuestionnaireDeMap& a, QuestionnaireDeMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireDeMap* New() const final {
    return CreateMaybeMessage<QuestionnaireDeMap>(NULL);
  }

  QuestionnaireDeMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireDeMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireDeMap& from);
  void MergeFrom(const QuestionnaireDeMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireDeMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ConceptMap"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireDeMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireDisplayCategory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireDisplayCategory) */ {
 public:
  QuestionnaireDisplayCategory();
  virtual ~QuestionnaireDisplayCategory();

  QuestionnaireDisplayCategory(const QuestionnaireDisplayCategory& from);

  inline QuestionnaireDisplayCategory& operator=(const QuestionnaireDisplayCategory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireDisplayCategory(QuestionnaireDisplayCategory&& from) noexcept
    : QuestionnaireDisplayCategory() {
    *this = ::std::move(from);
  }

  inline QuestionnaireDisplayCategory& operator=(QuestionnaireDisplayCategory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireDisplayCategory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireDisplayCategory* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireDisplayCategory*>(
               &_QuestionnaireDisplayCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    314;

  void Swap(QuestionnaireDisplayCategory* other);
  friend void swap(QuestionnaireDisplayCategory& a, QuestionnaireDisplayCategory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireDisplayCategory* New() const final {
    return CreateMaybeMessage<QuestionnaireDisplayCategory>(NULL);
  }

  QuestionnaireDisplayCategory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireDisplayCategory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireDisplayCategory& from);
  void MergeFrom(const QuestionnaireDisplayCategory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireDisplayCategory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireDisplayCategory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireFhirType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireFhirType) */ {
 public:
  QuestionnaireFhirType();
  virtual ~QuestionnaireFhirType();

  QuestionnaireFhirType(const QuestionnaireFhirType& from);

  inline QuestionnaireFhirType& operator=(const QuestionnaireFhirType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireFhirType(QuestionnaireFhirType&& from) noexcept
    : QuestionnaireFhirType() {
    *this = ::std::move(from);
  }

  inline QuestionnaireFhirType& operator=(QuestionnaireFhirType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireFhirType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireFhirType* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireFhirType*>(
               &_QuestionnaireFhirType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    315;

  void Swap(QuestionnaireFhirType* other);
  friend void swap(QuestionnaireFhirType& a, QuestionnaireFhirType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireFhirType* New() const final {
    return CreateMaybeMessage<QuestionnaireFhirType>(NULL);
  }

  QuestionnaireFhirType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireFhirType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireFhirType& from);
  void MergeFrom(const QuestionnaireFhirType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireFhirType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireFhirType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireHidden : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireHidden) */ {
 public:
  QuestionnaireHidden();
  virtual ~QuestionnaireHidden();

  QuestionnaireHidden(const QuestionnaireHidden& from);

  inline QuestionnaireHidden& operator=(const QuestionnaireHidden& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireHidden(QuestionnaireHidden&& from) noexcept
    : QuestionnaireHidden() {
    *this = ::std::move(from);
  }

  inline QuestionnaireHidden& operator=(QuestionnaireHidden&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireHidden& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireHidden* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireHidden*>(
               &_QuestionnaireHidden_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    316;

  void Swap(QuestionnaireHidden* other);
  friend void swap(QuestionnaireHidden& a, QuestionnaireHidden& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireHidden* New() const final {
    return CreateMaybeMessage<QuestionnaireHidden>(NULL);
  }

  QuestionnaireHidden* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireHidden>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireHidden& from);
  void MergeFrom(const QuestionnaireHidden& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireHidden* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireHidden)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireItemControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireItemControl) */ {
 public:
  QuestionnaireItemControl();
  virtual ~QuestionnaireItemControl();

  QuestionnaireItemControl(const QuestionnaireItemControl& from);

  inline QuestionnaireItemControl& operator=(const QuestionnaireItemControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireItemControl(QuestionnaireItemControl&& from) noexcept
    : QuestionnaireItemControl() {
    *this = ::std::move(from);
  }

  inline QuestionnaireItemControl& operator=(QuestionnaireItemControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireItemControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireItemControl* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireItemControl*>(
               &_QuestionnaireItemControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    317;

  void Swap(QuestionnaireItemControl* other);
  friend void swap(QuestionnaireItemControl& a, QuestionnaireItemControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireItemControl* New() const final {
    return CreateMaybeMessage<QuestionnaireItemControl>(NULL);
  }

  QuestionnaireItemControl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireItemControl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireItemControl& from);
  void MergeFrom(const QuestionnaireItemControl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireItemControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireItemControl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireLookupQuestionnaire : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireLookupQuestionnaire) */ {
 public:
  QuestionnaireLookupQuestionnaire();
  virtual ~QuestionnaireLookupQuestionnaire();

  QuestionnaireLookupQuestionnaire(const QuestionnaireLookupQuestionnaire& from);

  inline QuestionnaireLookupQuestionnaire& operator=(const QuestionnaireLookupQuestionnaire& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireLookupQuestionnaire(QuestionnaireLookupQuestionnaire&& from) noexcept
    : QuestionnaireLookupQuestionnaire() {
    *this = ::std::move(from);
  }

  inline QuestionnaireLookupQuestionnaire& operator=(QuestionnaireLookupQuestionnaire&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireLookupQuestionnaire& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireLookupQuestionnaire* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireLookupQuestionnaire*>(
               &_QuestionnaireLookupQuestionnaire_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    318;

  void Swap(QuestionnaireLookupQuestionnaire* other);
  friend void swap(QuestionnaireLookupQuestionnaire& a, QuestionnaireLookupQuestionnaire& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireLookupQuestionnaire* New() const final {
    return CreateMaybeMessage<QuestionnaireLookupQuestionnaire>(NULL);
  }

  QuestionnaireLookupQuestionnaire* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireLookupQuestionnaire>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireLookupQuestionnaire& from);
  void MergeFrom(const QuestionnaireLookupQuestionnaire& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireLookupQuestionnaire* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri value_uri = 3;
  bool has_value_uri() const;
  void clear_value_uri();
  static const int kValueUriFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_value_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& value_uri() const;
  ::google::fhir::stu3::proto::Uri* release_value_uri();
  ::google::fhir::stu3::proto::Uri* mutable_value_uri();
  void set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireLookupQuestionnaire)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* value_uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireMaxOccurs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireMaxOccurs) */ {
 public:
  QuestionnaireMaxOccurs();
  virtual ~QuestionnaireMaxOccurs();

  QuestionnaireMaxOccurs(const QuestionnaireMaxOccurs& from);

  inline QuestionnaireMaxOccurs& operator=(const QuestionnaireMaxOccurs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireMaxOccurs(QuestionnaireMaxOccurs&& from) noexcept
    : QuestionnaireMaxOccurs() {
    *this = ::std::move(from);
  }

  inline QuestionnaireMaxOccurs& operator=(QuestionnaireMaxOccurs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireMaxOccurs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireMaxOccurs* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireMaxOccurs*>(
               &_QuestionnaireMaxOccurs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    319;

  void Swap(QuestionnaireMaxOccurs* other);
  friend void swap(QuestionnaireMaxOccurs& a, QuestionnaireMaxOccurs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireMaxOccurs* New() const final {
    return CreateMaybeMessage<QuestionnaireMaxOccurs>(NULL);
  }

  QuestionnaireMaxOccurs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireMaxOccurs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireMaxOccurs& from);
  void MergeFrom(const QuestionnaireMaxOccurs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireMaxOccurs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Integer value_integer = 3;
  bool has_value_integer() const;
  void clear_value_integer();
  static const int kValueIntegerFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Integer& _internal_value_integer() const;
  public:
  const ::google::fhir::stu3::proto::Integer& value_integer() const;
  ::google::fhir::stu3::proto::Integer* release_value_integer();
  ::google::fhir::stu3::proto::Integer* mutable_value_integer();
  void set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireMaxOccurs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Integer* value_integer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireMinOccurs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireMinOccurs) */ {
 public:
  QuestionnaireMinOccurs();
  virtual ~QuestionnaireMinOccurs();

  QuestionnaireMinOccurs(const QuestionnaireMinOccurs& from);

  inline QuestionnaireMinOccurs& operator=(const QuestionnaireMinOccurs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireMinOccurs(QuestionnaireMinOccurs&& from) noexcept
    : QuestionnaireMinOccurs() {
    *this = ::std::move(from);
  }

  inline QuestionnaireMinOccurs& operator=(QuestionnaireMinOccurs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireMinOccurs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireMinOccurs* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireMinOccurs*>(
               &_QuestionnaireMinOccurs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    320;

  void Swap(QuestionnaireMinOccurs* other);
  friend void swap(QuestionnaireMinOccurs& a, QuestionnaireMinOccurs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireMinOccurs* New() const final {
    return CreateMaybeMessage<QuestionnaireMinOccurs>(NULL);
  }

  QuestionnaireMinOccurs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireMinOccurs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireMinOccurs& from);
  void MergeFrom(const QuestionnaireMinOccurs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireMinOccurs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Integer value_integer = 3;
  bool has_value_integer() const;
  void clear_value_integer();
  static const int kValueIntegerFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Integer& _internal_value_integer() const;
  public:
  const ::google::fhir::stu3::proto::Integer& value_integer() const;
  ::google::fhir::stu3::proto::Integer* release_value_integer();
  ::google::fhir::stu3::proto::Integer* mutable_value_integer();
  void set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireMinOccurs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Integer* value_integer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireOptionExclusive : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireOptionExclusive) */ {
 public:
  QuestionnaireOptionExclusive();
  virtual ~QuestionnaireOptionExclusive();

  QuestionnaireOptionExclusive(const QuestionnaireOptionExclusive& from);

  inline QuestionnaireOptionExclusive& operator=(const QuestionnaireOptionExclusive& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireOptionExclusive(QuestionnaireOptionExclusive&& from) noexcept
    : QuestionnaireOptionExclusive() {
    *this = ::std::move(from);
  }

  inline QuestionnaireOptionExclusive& operator=(QuestionnaireOptionExclusive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireOptionExclusive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireOptionExclusive* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireOptionExclusive*>(
               &_QuestionnaireOptionExclusive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    321;

  void Swap(QuestionnaireOptionExclusive* other);
  friend void swap(QuestionnaireOptionExclusive& a, QuestionnaireOptionExclusive& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireOptionExclusive* New() const final {
    return CreateMaybeMessage<QuestionnaireOptionExclusive>(NULL);
  }

  QuestionnaireOptionExclusive* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireOptionExclusive>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireOptionExclusive& from);
  void MergeFrom(const QuestionnaireOptionExclusive& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireOptionExclusive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireOptionExclusive)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireOptionPrefix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireOptionPrefix) */ {
 public:
  QuestionnaireOptionPrefix();
  virtual ~QuestionnaireOptionPrefix();

  QuestionnaireOptionPrefix(const QuestionnaireOptionPrefix& from);

  inline QuestionnaireOptionPrefix& operator=(const QuestionnaireOptionPrefix& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireOptionPrefix(QuestionnaireOptionPrefix&& from) noexcept
    : QuestionnaireOptionPrefix() {
    *this = ::std::move(from);
  }

  inline QuestionnaireOptionPrefix& operator=(QuestionnaireOptionPrefix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireOptionPrefix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireOptionPrefix* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireOptionPrefix*>(
               &_QuestionnaireOptionPrefix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    322;

  void Swap(QuestionnaireOptionPrefix* other);
  friend void swap(QuestionnaireOptionPrefix& a, QuestionnaireOptionPrefix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireOptionPrefix* New() const final {
    return CreateMaybeMessage<QuestionnaireOptionPrefix>(NULL);
  }

  QuestionnaireOptionPrefix* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireOptionPrefix>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireOptionPrefix& from);
  void MergeFrom(const QuestionnaireOptionPrefix& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireOptionPrefix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireOptionPrefix)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireOrdinalValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireOrdinalValue) */ {
 public:
  QuestionnaireOrdinalValue();
  virtual ~QuestionnaireOrdinalValue();

  QuestionnaireOrdinalValue(const QuestionnaireOrdinalValue& from);

  inline QuestionnaireOrdinalValue& operator=(const QuestionnaireOrdinalValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireOrdinalValue(QuestionnaireOrdinalValue&& from) noexcept
    : QuestionnaireOrdinalValue() {
    *this = ::std::move(from);
  }

  inline QuestionnaireOrdinalValue& operator=(QuestionnaireOrdinalValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireOrdinalValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireOrdinalValue* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireOrdinalValue*>(
               &_QuestionnaireOrdinalValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    323;

  void Swap(QuestionnaireOrdinalValue* other);
  friend void swap(QuestionnaireOrdinalValue& a, QuestionnaireOrdinalValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireOrdinalValue* New() const final {
    return CreateMaybeMessage<QuestionnaireOrdinalValue>(NULL);
  }

  QuestionnaireOrdinalValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireOrdinalValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireOrdinalValue& from);
  void MergeFrom(const QuestionnaireOrdinalValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireOrdinalValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Decimal value_decimal = 3;
  bool has_value_decimal() const;
  void clear_value_decimal();
  static const int kValueDecimalFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_value_decimal() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& value_decimal() const;
  ::google::fhir::stu3::proto::Decimal* release_value_decimal();
  ::google::fhir::stu3::proto::Decimal* mutable_value_decimal();
  void set_allocated_value_decimal(::google::fhir::stu3::proto::Decimal* value_decimal);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireOrdinalValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Decimal* value_decimal_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireReferenceFilter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireReferenceFilter) */ {
 public:
  QuestionnaireReferenceFilter();
  virtual ~QuestionnaireReferenceFilter();

  QuestionnaireReferenceFilter(const QuestionnaireReferenceFilter& from);

  inline QuestionnaireReferenceFilter& operator=(const QuestionnaireReferenceFilter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireReferenceFilter(QuestionnaireReferenceFilter&& from) noexcept
    : QuestionnaireReferenceFilter() {
    *this = ::std::move(from);
  }

  inline QuestionnaireReferenceFilter& operator=(QuestionnaireReferenceFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireReferenceFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireReferenceFilter* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireReferenceFilter*>(
               &_QuestionnaireReferenceFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    324;

  void Swap(QuestionnaireReferenceFilter* other);
  friend void swap(QuestionnaireReferenceFilter& a, QuestionnaireReferenceFilter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireReferenceFilter* New() const final {
    return CreateMaybeMessage<QuestionnaireReferenceFilter>(NULL);
  }

  QuestionnaireReferenceFilter* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireReferenceFilter>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireReferenceFilter& from);
  void MergeFrom(const QuestionnaireReferenceFilter& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireReferenceFilter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireReferenceFilter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireSourceStructureMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireSourceStructureMap) */ {
 public:
  QuestionnaireSourceStructureMap();
  virtual ~QuestionnaireSourceStructureMap();

  QuestionnaireSourceStructureMap(const QuestionnaireSourceStructureMap& from);

  inline QuestionnaireSourceStructureMap& operator=(const QuestionnaireSourceStructureMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireSourceStructureMap(QuestionnaireSourceStructureMap&& from) noexcept
    : QuestionnaireSourceStructureMap() {
    *this = ::std::move(from);
  }

  inline QuestionnaireSourceStructureMap& operator=(QuestionnaireSourceStructureMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireSourceStructureMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireSourceStructureMap* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireSourceStructureMap*>(
               &_QuestionnaireSourceStructureMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    325;

  void Swap(QuestionnaireSourceStructureMap* other);
  friend void swap(QuestionnaireSourceStructureMap& a, QuestionnaireSourceStructureMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireSourceStructureMap* New() const final {
    return CreateMaybeMessage<QuestionnaireSourceStructureMap>(NULL);
  }

  QuestionnaireSourceStructureMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireSourceStructureMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireSourceStructureMap& from);
  void MergeFrom(const QuestionnaireSourceStructureMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireSourceStructureMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/StructureMap"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireSourceStructureMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireStudyprotocolIdentifier : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireStudyprotocolIdentifier) */ {
 public:
  QuestionnaireStudyprotocolIdentifier();
  virtual ~QuestionnaireStudyprotocolIdentifier();

  QuestionnaireStudyprotocolIdentifier(const QuestionnaireStudyprotocolIdentifier& from);

  inline QuestionnaireStudyprotocolIdentifier& operator=(const QuestionnaireStudyprotocolIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireStudyprotocolIdentifier(QuestionnaireStudyprotocolIdentifier&& from) noexcept
    : QuestionnaireStudyprotocolIdentifier() {
    *this = ::std::move(from);
  }

  inline QuestionnaireStudyprotocolIdentifier& operator=(QuestionnaireStudyprotocolIdentifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireStudyprotocolIdentifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireStudyprotocolIdentifier* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireStudyprotocolIdentifier*>(
               &_QuestionnaireStudyprotocolIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    326;

  void Swap(QuestionnaireStudyprotocolIdentifier* other);
  friend void swap(QuestionnaireStudyprotocolIdentifier& a, QuestionnaireStudyprotocolIdentifier& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireStudyprotocolIdentifier* New() const final {
    return CreateMaybeMessage<QuestionnaireStudyprotocolIdentifier>(NULL);
  }

  QuestionnaireStudyprotocolIdentifier* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireStudyprotocolIdentifier>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireStudyprotocolIdentifier& from);
  void MergeFrom(const QuestionnaireStudyprotocolIdentifier& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireStudyprotocolIdentifier* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Identifier value_identifier = 3;
  bool has_value_identifier() const;
  void clear_value_identifier();
  static const int kValueIdentifierFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Identifier& _internal_value_identifier() const;
  public:
  const ::google::fhir::stu3::proto::Identifier& value_identifier() const;
  ::google::fhir::stu3::proto::Identifier* release_value_identifier();
  ::google::fhir::stu3::proto::Identifier* mutable_value_identifier();
  void set_allocated_value_identifier(::google::fhir::stu3::proto::Identifier* value_identifier);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireStudyprotocolIdentifier)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Identifier* value_identifier_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireSupportLink : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireSupportLink) */ {
 public:
  QuestionnaireSupportLink();
  virtual ~QuestionnaireSupportLink();

  QuestionnaireSupportLink(const QuestionnaireSupportLink& from);

  inline QuestionnaireSupportLink& operator=(const QuestionnaireSupportLink& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireSupportLink(QuestionnaireSupportLink&& from) noexcept
    : QuestionnaireSupportLink() {
    *this = ::std::move(from);
  }

  inline QuestionnaireSupportLink& operator=(QuestionnaireSupportLink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireSupportLink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireSupportLink* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireSupportLink*>(
               &_QuestionnaireSupportLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    327;

  void Swap(QuestionnaireSupportLink* other);
  friend void swap(QuestionnaireSupportLink& a, QuestionnaireSupportLink& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireSupportLink* New() const final {
    return CreateMaybeMessage<QuestionnaireSupportLink>(NULL);
  }

  QuestionnaireSupportLink* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireSupportLink>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireSupportLink& from);
  void MergeFrom(const QuestionnaireSupportLink& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireSupportLink* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri value_uri = 3;
  bool has_value_uri() const;
  void clear_value_uri();
  static const int kValueUriFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_value_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& value_uri() const;
  ::google::fhir::stu3::proto::Uri* release_value_uri();
  ::google::fhir::stu3::proto::Uri* mutable_value_uri();
  void set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireSupportLink)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* value_uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireTargetStructureMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireTargetStructureMap) */ {
 public:
  QuestionnaireTargetStructureMap();
  virtual ~QuestionnaireTargetStructureMap();

  QuestionnaireTargetStructureMap(const QuestionnaireTargetStructureMap& from);

  inline QuestionnaireTargetStructureMap& operator=(const QuestionnaireTargetStructureMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireTargetStructureMap(QuestionnaireTargetStructureMap&& from) noexcept
    : QuestionnaireTargetStructureMap() {
    *this = ::std::move(from);
  }

  inline QuestionnaireTargetStructureMap& operator=(QuestionnaireTargetStructureMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireTargetStructureMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireTargetStructureMap* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireTargetStructureMap*>(
               &_QuestionnaireTargetStructureMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    328;

  void Swap(QuestionnaireTargetStructureMap* other);
  friend void swap(QuestionnaireTargetStructureMap& a, QuestionnaireTargetStructureMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireTargetStructureMap* New() const final {
    return CreateMaybeMessage<QuestionnaireTargetStructureMap>(NULL);
  }

  QuestionnaireTargetStructureMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireTargetStructureMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireTargetStructureMap& from);
  void MergeFrom(const QuestionnaireTargetStructureMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireTargetStructureMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/StructureMap"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireTargetStructureMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireUnit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireUnit) */ {
 public:
  QuestionnaireUnit();
  virtual ~QuestionnaireUnit();

  QuestionnaireUnit(const QuestionnaireUnit& from);

  inline QuestionnaireUnit& operator=(const QuestionnaireUnit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireUnit(QuestionnaireUnit&& from) noexcept
    : QuestionnaireUnit() {
    *this = ::std::move(from);
  }

  inline QuestionnaireUnit& operator=(QuestionnaireUnit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireUnit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireUnit* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireUnit*>(
               &_QuestionnaireUnit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    329;

  void Swap(QuestionnaireUnit* other);
  friend void swap(QuestionnaireUnit& a, QuestionnaireUnit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireUnit* New() const final {
    return CreateMaybeMessage<QuestionnaireUnit>(NULL);
  }

  QuestionnaireUnit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireUnit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireUnit& from);
  void MergeFrom(const QuestionnaireUnit& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireUnit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Coding value_coding = 3;
  bool has_value_coding() const;
  void clear_value_coding();
  static const int kValueCodingFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Coding& _internal_value_coding() const;
  public:
  const ::google::fhir::stu3::proto::Coding& value_coding() const;
  ::google::fhir::stu3::proto::Coding* release_value_coding();
  ::google::fhir::stu3::proto::Coding* mutable_value_coding();
  void set_allocated_value_coding(::google::fhir::stu3::proto::Coding* value_coding);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireUnit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Coding* value_coding_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireUsageMode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireUsageMode) */ {
 public:
  QuestionnaireUsageMode();
  virtual ~QuestionnaireUsageMode();

  QuestionnaireUsageMode(const QuestionnaireUsageMode& from);

  inline QuestionnaireUsageMode& operator=(const QuestionnaireUsageMode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireUsageMode(QuestionnaireUsageMode&& from) noexcept
    : QuestionnaireUsageMode() {
    *this = ::std::move(from);
  }

  inline QuestionnaireUsageMode& operator=(QuestionnaireUsageMode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireUsageMode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireUsageMode* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireUsageMode*>(
               &_QuestionnaireUsageMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    330;

  void Swap(QuestionnaireUsageMode* other);
  friend void swap(QuestionnaireUsageMode& a, QuestionnaireUsageMode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireUsageMode* New() const final {
    return CreateMaybeMessage<QuestionnaireUsageMode>(NULL);
  }

  QuestionnaireUsageMode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireUsageMode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireUsageMode& from);
  void MergeFrom(const QuestionnaireUsageMode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireUsageMode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.QuestionnaireItemUsageModeCode value_code = 3;
  bool has_value_code() const;
  void clear_value_code();
  static const int kValueCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::QuestionnaireItemUsageModeCode& _internal_value_code() const;
  public:
  const ::google::fhir::stu3::proto::QuestionnaireItemUsageModeCode& value_code() const;
  ::google::fhir::stu3::proto::QuestionnaireItemUsageModeCode* release_value_code();
  ::google::fhir::stu3::proto::QuestionnaireItemUsageModeCode* mutable_value_code();
  void set_allocated_value_code(::google::fhir::stu3::proto::QuestionnaireItemUsageModeCode* value_code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireUsageMode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::QuestionnaireItemUsageModeCode* value_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireResponseAuthor_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireResponseAuthor.Value) */ {
 public:
  QuestionnaireResponseAuthor_Value();
  virtual ~QuestionnaireResponseAuthor_Value();

  QuestionnaireResponseAuthor_Value(const QuestionnaireResponseAuthor_Value& from);

  inline QuestionnaireResponseAuthor_Value& operator=(const QuestionnaireResponseAuthor_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireResponseAuthor_Value(QuestionnaireResponseAuthor_Value&& from) noexcept
    : QuestionnaireResponseAuthor_Value() {
    *this = ::std::move(from);
  }

  inline QuestionnaireResponseAuthor_Value& operator=(QuestionnaireResponseAuthor_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireResponseAuthor_Value& default_instance();

  enum ValueCase {
    kReference = 1,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireResponseAuthor_Value* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireResponseAuthor_Value*>(
               &_QuestionnaireResponseAuthor_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    331;

  void Swap(QuestionnaireResponseAuthor_Value* other);
  friend void swap(QuestionnaireResponseAuthor_Value& a, QuestionnaireResponseAuthor_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireResponseAuthor_Value* New() const final {
    return CreateMaybeMessage<QuestionnaireResponseAuthor_Value>(NULL);
  }

  QuestionnaireResponseAuthor_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireResponseAuthor_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireResponseAuthor_Value& from);
  void MergeFrom(const QuestionnaireResponseAuthor_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireResponseAuthor_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Patient", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/RelatedPerson", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Device", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner"];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireResponseAuthor.Value)
 private:
  void set_has_reference();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::Reference* reference_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireResponseAuthor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireResponseAuthor) */ {
 public:
  QuestionnaireResponseAuthor();
  virtual ~QuestionnaireResponseAuthor();

  QuestionnaireResponseAuthor(const QuestionnaireResponseAuthor& from);

  inline QuestionnaireResponseAuthor& operator=(const QuestionnaireResponseAuthor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireResponseAuthor(QuestionnaireResponseAuthor&& from) noexcept
    : QuestionnaireResponseAuthor() {
    *this = ::std::move(from);
  }

  inline QuestionnaireResponseAuthor& operator=(QuestionnaireResponseAuthor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireResponseAuthor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireResponseAuthor* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireResponseAuthor*>(
               &_QuestionnaireResponseAuthor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    332;

  void Swap(QuestionnaireResponseAuthor* other);
  friend void swap(QuestionnaireResponseAuthor& a, QuestionnaireResponseAuthor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireResponseAuthor* New() const final {
    return CreateMaybeMessage<QuestionnaireResponseAuthor>(NULL);
  }

  QuestionnaireResponseAuthor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireResponseAuthor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireResponseAuthor& from);
  void MergeFrom(const QuestionnaireResponseAuthor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireResponseAuthor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef QuestionnaireResponseAuthor_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.QuestionnaireResponseAuthor.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::QuestionnaireResponseAuthor_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::QuestionnaireResponseAuthor_Value& value() const;
  ::google::fhir::stu3::proto::QuestionnaireResponseAuthor_Value* release_value();
  ::google::fhir::stu3::proto::QuestionnaireResponseAuthor_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::QuestionnaireResponseAuthor_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireResponseAuthor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::QuestionnaireResponseAuthor_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireResponseNote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireResponseNote) */ {
 public:
  QuestionnaireResponseNote();
  virtual ~QuestionnaireResponseNote();

  QuestionnaireResponseNote(const QuestionnaireResponseNote& from);

  inline QuestionnaireResponseNote& operator=(const QuestionnaireResponseNote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireResponseNote(QuestionnaireResponseNote&& from) noexcept
    : QuestionnaireResponseNote() {
    *this = ::std::move(from);
  }

  inline QuestionnaireResponseNote& operator=(QuestionnaireResponseNote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireResponseNote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireResponseNote* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireResponseNote*>(
               &_QuestionnaireResponseNote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    333;

  void Swap(QuestionnaireResponseNote* other);
  friend void swap(QuestionnaireResponseNote& a, QuestionnaireResponseNote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireResponseNote* New() const final {
    return CreateMaybeMessage<QuestionnaireResponseNote>(NULL);
  }

  QuestionnaireResponseNote* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireResponseNote>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireResponseNote& from);
  void MergeFrom(const QuestionnaireResponseNote& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireResponseNote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Annotation value_annotation = 3;
  bool has_value_annotation() const;
  void clear_value_annotation();
  static const int kValueAnnotationFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Annotation& _internal_value_annotation() const;
  public:
  const ::google::fhir::stu3::proto::Annotation& value_annotation() const;
  ::google::fhir::stu3::proto::Annotation* release_value_annotation();
  ::google::fhir::stu3::proto::Annotation* mutable_value_annotation();
  void set_allocated_value_annotation(::google::fhir::stu3::proto::Annotation* value_annotation);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireResponseNote)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Annotation* value_annotation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireResponseReason : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireResponseReason) */ {
 public:
  QuestionnaireResponseReason();
  virtual ~QuestionnaireResponseReason();

  QuestionnaireResponseReason(const QuestionnaireResponseReason& from);

  inline QuestionnaireResponseReason& operator=(const QuestionnaireResponseReason& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireResponseReason(QuestionnaireResponseReason&& from) noexcept
    : QuestionnaireResponseReason() {
    *this = ::std::move(from);
  }

  inline QuestionnaireResponseReason& operator=(QuestionnaireResponseReason&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireResponseReason& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireResponseReason* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireResponseReason*>(
               &_QuestionnaireResponseReason_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    334;

  void Swap(QuestionnaireResponseReason* other);
  friend void swap(QuestionnaireResponseReason& a, QuestionnaireResponseReason& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireResponseReason* New() const final {
    return CreateMaybeMessage<QuestionnaireResponseReason>(NULL);
  }

  QuestionnaireResponseReason* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireResponseReason>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireResponseReason& from);
  void MergeFrom(const QuestionnaireResponseReason& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireResponseReason* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireResponseReason)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuestionnaireResponseReviewer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuestionnaireResponseReviewer) */ {
 public:
  QuestionnaireResponseReviewer();
  virtual ~QuestionnaireResponseReviewer();

  QuestionnaireResponseReviewer(const QuestionnaireResponseReviewer& from);

  inline QuestionnaireResponseReviewer& operator=(const QuestionnaireResponseReviewer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuestionnaireResponseReviewer(QuestionnaireResponseReviewer&& from) noexcept
    : QuestionnaireResponseReviewer() {
    *this = ::std::move(from);
  }

  inline QuestionnaireResponseReviewer& operator=(QuestionnaireResponseReviewer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionnaireResponseReviewer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuestionnaireResponseReviewer* internal_default_instance() {
    return reinterpret_cast<const QuestionnaireResponseReviewer*>(
               &_QuestionnaireResponseReviewer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    335;

  void Swap(QuestionnaireResponseReviewer* other);
  friend void swap(QuestionnaireResponseReviewer& a, QuestionnaireResponseReviewer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuestionnaireResponseReviewer* New() const final {
    return CreateMaybeMessage<QuestionnaireResponseReviewer>(NULL);
  }

  QuestionnaireResponseReviewer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuestionnaireResponseReviewer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuestionnaireResponseReviewer& from);
  void MergeFrom(const QuestionnaireResponseReviewer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuestionnaireResponseReviewer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuestionnaireResponseReviewer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReferralRequestReasonRefused : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ReferralRequestReasonRefused) */ {
 public:
  ReferralRequestReasonRefused();
  virtual ~ReferralRequestReasonRefused();

  ReferralRequestReasonRefused(const ReferralRequestReasonRefused& from);

  inline ReferralRequestReasonRefused& operator=(const ReferralRequestReasonRefused& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReferralRequestReasonRefused(ReferralRequestReasonRefused&& from) noexcept
    : ReferralRequestReasonRefused() {
    *this = ::std::move(from);
  }

  inline ReferralRequestReasonRefused& operator=(ReferralRequestReasonRefused&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReferralRequestReasonRefused& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReferralRequestReasonRefused* internal_default_instance() {
    return reinterpret_cast<const ReferralRequestReasonRefused*>(
               &_ReferralRequestReasonRefused_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    336;

  void Swap(ReferralRequestReasonRefused* other);
  friend void swap(ReferralRequestReasonRefused& a, ReferralRequestReasonRefused& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReferralRequestReasonRefused* New() const final {
    return CreateMaybeMessage<ReferralRequestReasonRefused>(NULL);
  }

  ReferralRequestReasonRefused* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReferralRequestReasonRefused>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReferralRequestReasonRefused& from);
  void MergeFrom(const ReferralRequestReasonRefused& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferralRequestReasonRefused* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ReferralRequestReasonRefused)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Regex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Regex) */ {
 public:
  Regex();
  virtual ~Regex();

  Regex(const Regex& from);

  inline Regex& operator=(const Regex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Regex(Regex&& from) noexcept
    : Regex() {
    *this = ::std::move(from);
  }

  inline Regex& operator=(Regex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Regex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Regex* internal_default_instance() {
    return reinterpret_cast<const Regex*>(
               &_Regex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    337;

  void Swap(Regex* other);
  friend void swap(Regex& a, Regex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Regex* New() const final {
    return CreateMaybeMessage<Regex>(NULL);
  }

  Regex* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Regex>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Regex& from);
  void MergeFrom(const Regex& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Regex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Regex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RenderedValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.RenderedValue) */ {
 public:
  RenderedValue();
  virtual ~RenderedValue();

  RenderedValue(const RenderedValue& from);

  inline RenderedValue& operator=(const RenderedValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RenderedValue(RenderedValue&& from) noexcept
    : RenderedValue() {
    *this = ::std::move(from);
  }

  inline RenderedValue& operator=(RenderedValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RenderedValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RenderedValue* internal_default_instance() {
    return reinterpret_cast<const RenderedValue*>(
               &_RenderedValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    338;

  void Swap(RenderedValue* other);
  friend void swap(RenderedValue& a, RenderedValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RenderedValue* New() const final {
    return CreateMaybeMessage<RenderedValue>(NULL);
  }

  RenderedValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RenderedValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RenderedValue& from);
  void MergeFrom(const RenderedValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenderedValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.RenderedValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StringMarkdown : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.StringMarkdown) */ {
 public:
  StringMarkdown();
  virtual ~StringMarkdown();

  StringMarkdown(const StringMarkdown& from);

  inline StringMarkdown& operator=(const StringMarkdown& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StringMarkdown(StringMarkdown&& from) noexcept
    : StringMarkdown() {
    *this = ::std::move(from);
  }

  inline StringMarkdown& operator=(StringMarkdown&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StringMarkdown& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringMarkdown* internal_default_instance() {
    return reinterpret_cast<const StringMarkdown*>(
               &_StringMarkdown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    339;

  void Swap(StringMarkdown* other);
  friend void swap(StringMarkdown& a, StringMarkdown& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StringMarkdown* New() const final {
    return CreateMaybeMessage<StringMarkdown>(NULL);
  }

  StringMarkdown* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StringMarkdown>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StringMarkdown& from);
  void MergeFrom(const StringMarkdown& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringMarkdown* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Markdown value_markdown = 3;
  bool has_value_markdown() const;
  void clear_value_markdown();
  static const int kValueMarkdownFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Markdown& _internal_value_markdown() const;
  public:
  const ::google::fhir::stu3::proto::Markdown& value_markdown() const;
  ::google::fhir::stu3::proto::Markdown* release_value_markdown();
  ::google::fhir::stu3::proto::Markdown* mutable_value_markdown();
  void set_allocated_value_markdown(::google::fhir::stu3::proto::Markdown* value_markdown);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.StringMarkdown)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Markdown* value_markdown_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Style : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Style) */ {
 public:
  Style();
  virtual ~Style();

  Style(const Style& from);

  inline Style& operator=(const Style& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Style(Style&& from) noexcept
    : Style() {
    *this = ::std::move(from);
  }

  inline Style& operator=(Style&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Style& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Style* internal_default_instance() {
    return reinterpret_cast<const Style*>(
               &_Style_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    340;

  void Swap(Style* other);
  friend void swap(Style& a, Style& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Style* New() const final {
    return CreateMaybeMessage<Style>(NULL);
  }

  Style* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Style>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Style& from);
  void MergeFrom(const Style& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Style* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Style)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StyleSensitive : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.StyleSensitive) */ {
 public:
  StyleSensitive();
  virtual ~StyleSensitive();

  StyleSensitive(const StyleSensitive& from);

  inline StyleSensitive& operator=(const StyleSensitive& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StyleSensitive(StyleSensitive&& from) noexcept
    : StyleSensitive() {
    *this = ::std::move(from);
  }

  inline StyleSensitive& operator=(StyleSensitive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StyleSensitive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StyleSensitive* internal_default_instance() {
    return reinterpret_cast<const StyleSensitive*>(
               &_StyleSensitive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    341;

  void Swap(StyleSensitive* other);
  friend void swap(StyleSensitive& a, StyleSensitive& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StyleSensitive* New() const final {
    return CreateMaybeMessage<StyleSensitive>(NULL);
  }

  StyleSensitive* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StyleSensitive>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StyleSensitive& from);
  void MergeFrom(const StyleSensitive& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleSensitive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.StyleSensitive)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StringXhtml : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.StringXhtml) */ {
 public:
  StringXhtml();
  virtual ~StringXhtml();

  StringXhtml(const StringXhtml& from);

  inline StringXhtml& operator=(const StringXhtml& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StringXhtml(StringXhtml&& from) noexcept
    : StringXhtml() {
    *this = ::std::move(from);
  }

  inline StringXhtml& operator=(StringXhtml&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StringXhtml& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringXhtml* internal_default_instance() {
    return reinterpret_cast<const StringXhtml*>(
               &_StringXhtml_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    342;

  void Swap(StringXhtml* other);
  friend void swap(StringXhtml& a, StringXhtml& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StringXhtml* New() const final {
    return CreateMaybeMessage<StringXhtml>(NULL);
  }

  StringXhtml* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StringXhtml>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StringXhtml& from);
  void MergeFrom(const StringXhtml& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringXhtml* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.StringXhtml)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ApprovalDate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ApprovalDate) */ {
 public:
  ApprovalDate();
  virtual ~ApprovalDate();

  ApprovalDate(const ApprovalDate& from);

  inline ApprovalDate& operator=(const ApprovalDate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ApprovalDate(ApprovalDate&& from) noexcept
    : ApprovalDate() {
    *this = ::std::move(from);
  }

  inline ApprovalDate& operator=(ApprovalDate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ApprovalDate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApprovalDate* internal_default_instance() {
    return reinterpret_cast<const ApprovalDate*>(
               &_ApprovalDate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    343;

  void Swap(ApprovalDate* other);
  friend void swap(ApprovalDate& a, ApprovalDate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ApprovalDate* New() const final {
    return CreateMaybeMessage<ApprovalDate>(NULL);
  }

  ApprovalDate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ApprovalDate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ApprovalDate& from);
  void MergeFrom(const ApprovalDate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApprovalDate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Date value_date = 3;
  bool has_value_date() const;
  void clear_value_date();
  static const int kValueDateFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Date& _internal_value_date() const;
  public:
  const ::google::fhir::stu3::proto::Date& value_date() const;
  ::google::fhir::stu3::proto::Date* release_value_date();
  ::google::fhir::stu3::proto::Date* mutable_value_date();
  void set_allocated_value_date(::google::fhir::stu3::proto::Date* value_date);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ApprovalDate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Date* value_date_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EffectivePeriod : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.EffectivePeriod) */ {
 public:
  EffectivePeriod();
  virtual ~EffectivePeriod();

  EffectivePeriod(const EffectivePeriod& from);

  inline EffectivePeriod& operator=(const EffectivePeriod& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EffectivePeriod(EffectivePeriod&& from) noexcept
    : EffectivePeriod() {
    *this = ::std::move(from);
  }

  inline EffectivePeriod& operator=(EffectivePeriod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EffectivePeriod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EffectivePeriod* internal_default_instance() {
    return reinterpret_cast<const EffectivePeriod*>(
               &_EffectivePeriod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    344;

  void Swap(EffectivePeriod* other);
  friend void swap(EffectivePeriod& a, EffectivePeriod& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EffectivePeriod* New() const final {
    return CreateMaybeMessage<EffectivePeriod>(NULL);
  }

  EffectivePeriod* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EffectivePeriod>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EffectivePeriod& from);
  void MergeFrom(const EffectivePeriod& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EffectivePeriod* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Period value_period = 3;
  bool has_value_period() const;
  void clear_value_period();
  static const int kValuePeriodFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Period& _internal_value_period() const;
  public:
  const ::google::fhir::stu3::proto::Period& value_period() const;
  ::google::fhir::stu3::proto::Period* release_value_period();
  ::google::fhir::stu3::proto::Period* mutable_value_period();
  void set_allocated_value_period(::google::fhir::stu3::proto::Period* value_period);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.EffectivePeriod)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Period* value_period_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LastReviewDate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.LastReviewDate) */ {
 public:
  LastReviewDate();
  virtual ~LastReviewDate();

  LastReviewDate(const LastReviewDate& from);

  inline LastReviewDate& operator=(const LastReviewDate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LastReviewDate(LastReviewDate&& from) noexcept
    : LastReviewDate() {
    *this = ::std::move(from);
  }

  inline LastReviewDate& operator=(LastReviewDate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LastReviewDate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LastReviewDate* internal_default_instance() {
    return reinterpret_cast<const LastReviewDate*>(
               &_LastReviewDate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    345;

  void Swap(LastReviewDate* other);
  friend void swap(LastReviewDate& a, LastReviewDate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LastReviewDate* New() const final {
    return CreateMaybeMessage<LastReviewDate>(NULL);
  }

  LastReviewDate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LastReviewDate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LastReviewDate& from);
  void MergeFrom(const LastReviewDate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LastReviewDate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Date value_date = 3;
  bool has_value_date() const;
  void clear_value_date();
  static const int kValueDateFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Date& _internal_value_date() const;
  public:
  const ::google::fhir::stu3::proto::Date& value_date() const;
  ::google::fhir::stu3::proto::Date* release_value_date();
  ::google::fhir::stu3::proto::Date* mutable_value_date();
  void set_allocated_value_date(::google::fhir::stu3::proto::Date* value_date);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.LastReviewDate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Date* value_date_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpecimenCollectionPriority : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.SpecimenCollectionPriority) */ {
 public:
  SpecimenCollectionPriority();
  virtual ~SpecimenCollectionPriority();

  SpecimenCollectionPriority(const SpecimenCollectionPriority& from);

  inline SpecimenCollectionPriority& operator=(const SpecimenCollectionPriority& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpecimenCollectionPriority(SpecimenCollectionPriority&& from) noexcept
    : SpecimenCollectionPriority() {
    *this = ::std::move(from);
  }

  inline SpecimenCollectionPriority& operator=(SpecimenCollectionPriority&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpecimenCollectionPriority& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpecimenCollectionPriority* internal_default_instance() {
    return reinterpret_cast<const SpecimenCollectionPriority*>(
               &_SpecimenCollectionPriority_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    346;

  void Swap(SpecimenCollectionPriority* other);
  friend void swap(SpecimenCollectionPriority& a, SpecimenCollectionPriority& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpecimenCollectionPriority* New() const final {
    return CreateMaybeMessage<SpecimenCollectionPriority>(NULL);
  }

  SpecimenCollectionPriority* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpecimenCollectionPriority>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpecimenCollectionPriority& from);
  void MergeFrom(const SpecimenCollectionPriority& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpecimenCollectionPriority* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.SpecimenCollectionPriority)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpecimenIsDryWeight : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.SpecimenIsDryWeight) */ {
 public:
  SpecimenIsDryWeight();
  virtual ~SpecimenIsDryWeight();

  SpecimenIsDryWeight(const SpecimenIsDryWeight& from);

  inline SpecimenIsDryWeight& operator=(const SpecimenIsDryWeight& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpecimenIsDryWeight(SpecimenIsDryWeight&& from) noexcept
    : SpecimenIsDryWeight() {
    *this = ::std::move(from);
  }

  inline SpecimenIsDryWeight& operator=(SpecimenIsDryWeight&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpecimenIsDryWeight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpecimenIsDryWeight* internal_default_instance() {
    return reinterpret_cast<const SpecimenIsDryWeight*>(
               &_SpecimenIsDryWeight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    347;

  void Swap(SpecimenIsDryWeight* other);
  friend void swap(SpecimenIsDryWeight& a, SpecimenIsDryWeight& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpecimenIsDryWeight* New() const final {
    return CreateMaybeMessage<SpecimenIsDryWeight>(NULL);
  }

  SpecimenIsDryWeight* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpecimenIsDryWeight>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpecimenIsDryWeight& from);
  void MergeFrom(const SpecimenIsDryWeight& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpecimenIsDryWeight* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.SpecimenIsDryWeight)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpecimenProcessingTime_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.SpecimenProcessingTime.Value) */ {
 public:
  SpecimenProcessingTime_Value();
  virtual ~SpecimenProcessingTime_Value();

  SpecimenProcessingTime_Value(const SpecimenProcessingTime_Value& from);

  inline SpecimenProcessingTime_Value& operator=(const SpecimenProcessingTime_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpecimenProcessingTime_Value(SpecimenProcessingTime_Value&& from) noexcept
    : SpecimenProcessingTime_Value() {
    *this = ::std::move(from);
  }

  inline SpecimenProcessingTime_Value& operator=(SpecimenProcessingTime_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpecimenProcessingTime_Value& default_instance();

  enum ValueCase {
    kPeriod = 1,
    kDuration = 2,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpecimenProcessingTime_Value* internal_default_instance() {
    return reinterpret_cast<const SpecimenProcessingTime_Value*>(
               &_SpecimenProcessingTime_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    348;

  void Swap(SpecimenProcessingTime_Value* other);
  friend void swap(SpecimenProcessingTime_Value& a, SpecimenProcessingTime_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpecimenProcessingTime_Value* New() const final {
    return CreateMaybeMessage<SpecimenProcessingTime_Value>(NULL);
  }

  SpecimenProcessingTime_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpecimenProcessingTime_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpecimenProcessingTime_Value& from);
  void MergeFrom(const SpecimenProcessingTime_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpecimenProcessingTime_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Period period = 1;
  bool has_period() const;
  void clear_period();
  static const int kPeriodFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Period& _internal_period() const;
  public:
  const ::google::fhir::stu3::proto::Period& period() const;
  ::google::fhir::stu3::proto::Period* release_period();
  ::google::fhir::stu3::proto::Period* mutable_period();
  void set_allocated_period(::google::fhir::stu3::proto::Period* period);

  // .google.fhir.stu3.proto.Duration duration = 2;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::Duration& _internal_duration() const;
  public:
  const ::google::fhir::stu3::proto::Duration& duration() const;
  ::google::fhir::stu3::proto::Duration* release_duration();
  ::google::fhir::stu3::proto::Duration* mutable_duration();
  void set_allocated_duration(::google::fhir::stu3::proto::Duration* duration);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.SpecimenProcessingTime.Value)
 private:
  void set_has_period();
  void set_has_duration();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::Period* period_;
    ::google::fhir::stu3::proto::Duration* duration_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpecimenProcessingTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.SpecimenProcessingTime) */ {
 public:
  SpecimenProcessingTime();
  virtual ~SpecimenProcessingTime();

  SpecimenProcessingTime(const SpecimenProcessingTime& from);

  inline SpecimenProcessingTime& operator=(const SpecimenProcessingTime& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpecimenProcessingTime(SpecimenProcessingTime&& from) noexcept
    : SpecimenProcessingTime() {
    *this = ::std::move(from);
  }

  inline SpecimenProcessingTime& operator=(SpecimenProcessingTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpecimenProcessingTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpecimenProcessingTime* internal_default_instance() {
    return reinterpret_cast<const SpecimenProcessingTime*>(
               &_SpecimenProcessingTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    349;

  void Swap(SpecimenProcessingTime* other);
  friend void swap(SpecimenProcessingTime& a, SpecimenProcessingTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpecimenProcessingTime* New() const final {
    return CreateMaybeMessage<SpecimenProcessingTime>(NULL);
  }

  SpecimenProcessingTime* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpecimenProcessingTime>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpecimenProcessingTime& from);
  void MergeFrom(const SpecimenProcessingTime& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpecimenProcessingTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SpecimenProcessingTime_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.SpecimenProcessingTime.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::SpecimenProcessingTime_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::SpecimenProcessingTime_Value& value() const;
  ::google::fhir::stu3::proto::SpecimenProcessingTime_Value* release_value();
  ::google::fhir::stu3::proto::SpecimenProcessingTime_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::SpecimenProcessingTime_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.SpecimenProcessingTime)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::SpecimenProcessingTime_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpecimenSequenceNumber : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.SpecimenSequenceNumber) */ {
 public:
  SpecimenSequenceNumber();
  virtual ~SpecimenSequenceNumber();

  SpecimenSequenceNumber(const SpecimenSequenceNumber& from);

  inline SpecimenSequenceNumber& operator=(const SpecimenSequenceNumber& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpecimenSequenceNumber(SpecimenSequenceNumber&& from) noexcept
    : SpecimenSequenceNumber() {
    *this = ::std::move(from);
  }

  inline SpecimenSequenceNumber& operator=(SpecimenSequenceNumber&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpecimenSequenceNumber& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpecimenSequenceNumber* internal_default_instance() {
    return reinterpret_cast<const SpecimenSequenceNumber*>(
               &_SpecimenSequenceNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    350;

  void Swap(SpecimenSequenceNumber* other);
  friend void swap(SpecimenSequenceNumber& a, SpecimenSequenceNumber& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpecimenSequenceNumber* New() const final {
    return CreateMaybeMessage<SpecimenSequenceNumber>(NULL);
  }

  SpecimenSequenceNumber* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpecimenSequenceNumber>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpecimenSequenceNumber& from);
  void MergeFrom(const SpecimenSequenceNumber& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpecimenSequenceNumber* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Integer value_integer = 3;
  bool has_value_integer() const;
  void clear_value_integer();
  static const int kValueIntegerFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Integer& _internal_value_integer() const;
  public:
  const ::google::fhir::stu3::proto::Integer& value_integer() const;
  ::google::fhir::stu3::proto::Integer* release_value_integer();
  ::google::fhir::stu3::proto::Integer* mutable_value_integer();
  void set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.SpecimenSequenceNumber)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Integer* value_integer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SpecimenSpecialHandling : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.SpecimenSpecialHandling) */ {
 public:
  SpecimenSpecialHandling();
  virtual ~SpecimenSpecialHandling();

  SpecimenSpecialHandling(const SpecimenSpecialHandling& from);

  inline SpecimenSpecialHandling& operator=(const SpecimenSpecialHandling& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpecimenSpecialHandling(SpecimenSpecialHandling&& from) noexcept
    : SpecimenSpecialHandling() {
    *this = ::std::move(from);
  }

  inline SpecimenSpecialHandling& operator=(SpecimenSpecialHandling&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpecimenSpecialHandling& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpecimenSpecialHandling* internal_default_instance() {
    return reinterpret_cast<const SpecimenSpecialHandling*>(
               &_SpecimenSpecialHandling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    351;

  void Swap(SpecimenSpecialHandling* other);
  friend void swap(SpecimenSpecialHandling& a, SpecimenSpecialHandling& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpecimenSpecialHandling* New() const final {
    return CreateMaybeMessage<SpecimenSpecialHandling>(NULL);
  }

  SpecimenSpecialHandling* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SpecimenSpecialHandling>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SpecimenSpecialHandling& from);
  void MergeFrom(const SpecimenSpecialHandling& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpecimenSpecialHandling* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
  bool has_value_codeable_concept() const;
  void clear_value_codeable_concept();
  static const int kValueCodeableConceptFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_value_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& value_codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_value_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_value_codeable_concept();
  void set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.SpecimenSpecialHandling)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StructureDefinitionAncestor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.StructureDefinitionAncestor) */ {
 public:
  StructureDefinitionAncestor();
  virtual ~StructureDefinitionAncestor();

  StructureDefinitionAncestor(const StructureDefinitionAncestor& from);

  inline StructureDefinitionAncestor& operator=(const StructureDefinitionAncestor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StructureDefinitionAncestor(StructureDefinitionAncestor&& from) noexcept
    : StructureDefinitionAncestor() {
    *this = ::std::move(from);
  }

  inline StructureDefinitionAncestor& operator=(StructureDefinitionAncestor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StructureDefinitionAncestor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StructureDefinitionAncestor* internal_default_instance() {
    return reinterpret_cast<const StructureDefinitionAncestor*>(
               &_StructureDefinitionAncestor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    352;

  void Swap(StructureDefinitionAncestor* other);
  friend void swap(StructureDefinitionAncestor& a, StructureDefinitionAncestor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StructureDefinitionAncestor* New() const final {
    return CreateMaybeMessage<StructureDefinitionAncestor>(NULL);
  }

  StructureDefinitionAncestor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StructureDefinitionAncestor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StructureDefinitionAncestor& from);
  void MergeFrom(const StructureDefinitionAncestor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructureDefinitionAncestor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri value_uri = 3;
  bool has_value_uri() const;
  void clear_value_uri();
  static const int kValueUriFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_value_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& value_uri() const;
  ::google::fhir::stu3::proto::Uri* release_value_uri();
  ::google::fhir::stu3::proto::Uri* mutable_value_uri();
  void set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.StructureDefinitionAncestor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* value_uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StructureDefinitionAnnotation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.StructureDefinitionAnnotation) */ {
 public:
  StructureDefinitionAnnotation();
  virtual ~StructureDefinitionAnnotation();

  StructureDefinitionAnnotation(const StructureDefinitionAnnotation& from);

  inline StructureDefinitionAnnotation& operator=(const StructureDefinitionAnnotation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StructureDefinitionAnnotation(StructureDefinitionAnnotation&& from) noexcept
    : StructureDefinitionAnnotation() {
    *this = ::std::move(from);
  }

  inline StructureDefinitionAnnotation& operator=(StructureDefinitionAnnotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StructureDefinitionAnnotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StructureDefinitionAnnotation* internal_default_instance() {
    return reinterpret_cast<const StructureDefinitionAnnotation*>(
               &_StructureDefinitionAnnotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    353;

  void Swap(StructureDefinitionAnnotation* other);
  friend void swap(StructureDefinitionAnnotation& a, StructureDefinitionAnnotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StructureDefinitionAnnotation* New() const final {
    return CreateMaybeMessage<StructureDefinitionAnnotation>(NULL);
  }

  StructureDefinitionAnnotation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StructureDefinitionAnnotation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StructureDefinitionAnnotation& from);
  void MergeFrom(const StructureDefinitionAnnotation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructureDefinitionAnnotation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Annotation value_annotation = 3;
  bool has_value_annotation() const;
  void clear_value_annotation();
  static const int kValueAnnotationFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Annotation& _internal_value_annotation() const;
  public:
  const ::google::fhir::stu3::proto::Annotation& value_annotation() const;
  ::google::fhir::stu3::proto::Annotation* release_value_annotation();
  ::google::fhir::stu3::proto::Annotation* mutable_value_annotation();
  void set_allocated_value_annotation(::google::fhir::stu3::proto::Annotation* value_annotation);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.StructureDefinitionAnnotation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Annotation* value_annotation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BallotStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.BallotStatus) */ {
 public:
  BallotStatus();
  virtual ~BallotStatus();

  BallotStatus(const BallotStatus& from);

  inline BallotStatus& operator=(const BallotStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BallotStatus(BallotStatus&& from) noexcept
    : BallotStatus() {
    *this = ::std::move(from);
  }

  inline BallotStatus& operator=(BallotStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BallotStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BallotStatus* internal_default_instance() {
    return reinterpret_cast<const BallotStatus*>(
               &_BallotStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    354;

  void Swap(BallotStatus* other);
  friend void swap(BallotStatus& a, BallotStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BallotStatus* New() const final {
    return CreateMaybeMessage<BallotStatus>(NULL);
  }

  BallotStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BallotStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BallotStatus& from);
  void MergeFrom(const BallotStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BallotStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.BallotStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StructureDefinitionCategory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.StructureDefinitionCategory) */ {
 public:
  StructureDefinitionCategory();
  virtual ~StructureDefinitionCategory();

  StructureDefinitionCategory(const StructureDefinitionCategory& from);

  inline StructureDefinitionCategory& operator=(const StructureDefinitionCategory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StructureDefinitionCategory(StructureDefinitionCategory&& from) noexcept
    : StructureDefinitionCategory() {
    *this = ::std::move(from);
  }

  inline StructureDefinitionCategory& operator=(StructureDefinitionCategory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StructureDefinitionCategory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StructureDefinitionCategory* internal_default_instance() {
    return reinterpret_cast<const StructureDefinitionCategory*>(
               &_StructureDefinitionCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    355;

  void Swap(StructureDefinitionCategory* other);
  friend void swap(StructureDefinitionCategory& a, StructureDefinitionCategory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StructureDefinitionCategory* New() const final {
    return CreateMaybeMessage<StructureDefinitionCategory>(NULL);
  }

  StructureDefinitionCategory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StructureDefinitionCategory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StructureDefinitionCategory& from);
  void MergeFrom(const StructureDefinitionCategory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructureDefinitionCategory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.StructureDefinitionCategory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionDisplayHint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionDisplayHint) */ {
 public:
  ElementDefinitionDisplayHint();
  virtual ~ElementDefinitionDisplayHint();

  ElementDefinitionDisplayHint(const ElementDefinitionDisplayHint& from);

  inline ElementDefinitionDisplayHint& operator=(const ElementDefinitionDisplayHint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionDisplayHint(ElementDefinitionDisplayHint&& from) noexcept
    : ElementDefinitionDisplayHint() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionDisplayHint& operator=(ElementDefinitionDisplayHint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionDisplayHint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionDisplayHint* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionDisplayHint*>(
               &_ElementDefinitionDisplayHint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    356;

  void Swap(ElementDefinitionDisplayHint* other);
  friend void swap(ElementDefinitionDisplayHint& a, ElementDefinitionDisplayHint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionDisplayHint* New() const final {
    return CreateMaybeMessage<ElementDefinitionDisplayHint>(NULL);
  }

  ElementDefinitionDisplayHint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionDisplayHint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionDisplayHint& from);
  void MergeFrom(const ElementDefinitionDisplayHint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionDisplayHint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionDisplayHint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionExplicitTypeName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionExplicitTypeName) */ {
 public:
  ElementDefinitionExplicitTypeName();
  virtual ~ElementDefinitionExplicitTypeName();

  ElementDefinitionExplicitTypeName(const ElementDefinitionExplicitTypeName& from);

  inline ElementDefinitionExplicitTypeName& operator=(const ElementDefinitionExplicitTypeName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionExplicitTypeName(ElementDefinitionExplicitTypeName&& from) noexcept
    : ElementDefinitionExplicitTypeName() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionExplicitTypeName& operator=(ElementDefinitionExplicitTypeName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionExplicitTypeName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionExplicitTypeName* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionExplicitTypeName*>(
               &_ElementDefinitionExplicitTypeName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    357;

  void Swap(ElementDefinitionExplicitTypeName* other);
  friend void swap(ElementDefinitionExplicitTypeName& a, ElementDefinitionExplicitTypeName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionExplicitTypeName* New() const final {
    return CreateMaybeMessage<ElementDefinitionExplicitTypeName>(NULL);
  }

  ElementDefinitionExplicitTypeName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionExplicitTypeName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionExplicitTypeName& from);
  void MergeFrom(const ElementDefinitionExplicitTypeName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionExplicitTypeName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionExplicitTypeName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StructureDefinitionFmmNoWarnings : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.StructureDefinitionFmmNoWarnings) */ {
 public:
  StructureDefinitionFmmNoWarnings();
  virtual ~StructureDefinitionFmmNoWarnings();

  StructureDefinitionFmmNoWarnings(const StructureDefinitionFmmNoWarnings& from);

  inline StructureDefinitionFmmNoWarnings& operator=(const StructureDefinitionFmmNoWarnings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StructureDefinitionFmmNoWarnings(StructureDefinitionFmmNoWarnings&& from) noexcept
    : StructureDefinitionFmmNoWarnings() {
    *this = ::std::move(from);
  }

  inline StructureDefinitionFmmNoWarnings& operator=(StructureDefinitionFmmNoWarnings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StructureDefinitionFmmNoWarnings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StructureDefinitionFmmNoWarnings* internal_default_instance() {
    return reinterpret_cast<const StructureDefinitionFmmNoWarnings*>(
               &_StructureDefinitionFmmNoWarnings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    358;

  void Swap(StructureDefinitionFmmNoWarnings* other);
  friend void swap(StructureDefinitionFmmNoWarnings& a, StructureDefinitionFmmNoWarnings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StructureDefinitionFmmNoWarnings* New() const final {
    return CreateMaybeMessage<StructureDefinitionFmmNoWarnings>(NULL);
  }

  StructureDefinitionFmmNoWarnings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StructureDefinitionFmmNoWarnings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StructureDefinitionFmmNoWarnings& from);
  void MergeFrom(const StructureDefinitionFmmNoWarnings& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructureDefinitionFmmNoWarnings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Integer value_integer = 3;
  bool has_value_integer() const;
  void clear_value_integer();
  static const int kValueIntegerFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Integer& _internal_value_integer() const;
  public:
  const ::google::fhir::stu3::proto::Integer& value_integer() const;
  ::google::fhir::stu3::proto::Integer* release_value_integer();
  ::google::fhir::stu3::proto::Integer* mutable_value_integer();
  void set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.StructureDefinitionFmmNoWarnings)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Integer* value_integer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Fmm : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Fmm) */ {
 public:
  Fmm();
  virtual ~Fmm();

  Fmm(const Fmm& from);

  inline Fmm& operator=(const Fmm& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Fmm(Fmm&& from) noexcept
    : Fmm() {
    *this = ::std::move(from);
  }

  inline Fmm& operator=(Fmm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Fmm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Fmm* internal_default_instance() {
    return reinterpret_cast<const Fmm*>(
               &_Fmm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    359;

  void Swap(Fmm* other);
  friend void swap(Fmm& a, Fmm& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Fmm* New() const final {
    return CreateMaybeMessage<Fmm>(NULL);
  }

  Fmm* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Fmm>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Fmm& from);
  void MergeFrom(const Fmm& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fmm* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Integer value_integer = 3;
  bool has_value_integer() const;
  void clear_value_integer();
  static const int kValueIntegerFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Integer& _internal_value_integer() const;
  public:
  const ::google::fhir::stu3::proto::Integer& value_integer() const;
  ::google::fhir::stu3::proto::Integer* release_value_integer();
  ::google::fhir::stu3::proto::Integer* mutable_value_integer();
  void set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Fmm)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Integer* value_integer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionJsonType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionJsonType) */ {
 public:
  ElementDefinitionJsonType();
  virtual ~ElementDefinitionJsonType();

  ElementDefinitionJsonType(const ElementDefinitionJsonType& from);

  inline ElementDefinitionJsonType& operator=(const ElementDefinitionJsonType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionJsonType(ElementDefinitionJsonType&& from) noexcept
    : ElementDefinitionJsonType() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionJsonType& operator=(ElementDefinitionJsonType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionJsonType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionJsonType* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionJsonType*>(
               &_ElementDefinitionJsonType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    360;

  void Swap(ElementDefinitionJsonType* other);
  friend void swap(ElementDefinitionJsonType& a, ElementDefinitionJsonType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionJsonType* New() const final {
    return CreateMaybeMessage<ElementDefinitionJsonType>(NULL);
  }

  ElementDefinitionJsonType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionJsonType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionJsonType& from);
  void MergeFrom(const ElementDefinitionJsonType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionJsonType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionJsonType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionRdfType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionRdfType) */ {
 public:
  ElementDefinitionRdfType();
  virtual ~ElementDefinitionRdfType();

  ElementDefinitionRdfType(const ElementDefinitionRdfType& from);

  inline ElementDefinitionRdfType& operator=(const ElementDefinitionRdfType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionRdfType(ElementDefinitionRdfType&& from) noexcept
    : ElementDefinitionRdfType() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionRdfType& operator=(ElementDefinitionRdfType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionRdfType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionRdfType* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionRdfType*>(
               &_ElementDefinitionRdfType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    361;

  void Swap(ElementDefinitionRdfType* other);
  friend void swap(ElementDefinitionRdfType& a, ElementDefinitionRdfType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionRdfType* New() const final {
    return CreateMaybeMessage<ElementDefinitionRdfType>(NULL);
  }

  ElementDefinitionRdfType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionRdfType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionRdfType& from);
  void MergeFrom(const ElementDefinitionRdfType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionRdfType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionRdfType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionRegex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionRegex) */ {
 public:
  ElementDefinitionRegex();
  virtual ~ElementDefinitionRegex();

  ElementDefinitionRegex(const ElementDefinitionRegex& from);

  inline ElementDefinitionRegex& operator=(const ElementDefinitionRegex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionRegex(ElementDefinitionRegex&& from) noexcept
    : ElementDefinitionRegex() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionRegex& operator=(ElementDefinitionRegex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionRegex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionRegex* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionRegex*>(
               &_ElementDefinitionRegex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    362;

  void Swap(ElementDefinitionRegex* other);
  friend void swap(ElementDefinitionRegex& a, ElementDefinitionRegex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionRegex* New() const final {
    return CreateMaybeMessage<ElementDefinitionRegex>(NULL);
  }

  ElementDefinitionRegex* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionRegex>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionRegex& from);
  void MergeFrom(const ElementDefinitionRegex& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionRegex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionRegex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StructureDefinitionSummary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.StructureDefinitionSummary) */ {
 public:
  StructureDefinitionSummary();
  virtual ~StructureDefinitionSummary();

  StructureDefinitionSummary(const StructureDefinitionSummary& from);

  inline StructureDefinitionSummary& operator=(const StructureDefinitionSummary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StructureDefinitionSummary(StructureDefinitionSummary&& from) noexcept
    : StructureDefinitionSummary() {
    *this = ::std::move(from);
  }

  inline StructureDefinitionSummary& operator=(StructureDefinitionSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StructureDefinitionSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StructureDefinitionSummary* internal_default_instance() {
    return reinterpret_cast<const StructureDefinitionSummary*>(
               &_StructureDefinitionSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    363;

  void Swap(StructureDefinitionSummary* other);
  friend void swap(StructureDefinitionSummary& a, StructureDefinitionSummary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StructureDefinitionSummary* New() const final {
    return CreateMaybeMessage<StructureDefinitionSummary>(NULL);
  }

  StructureDefinitionSummary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StructureDefinitionSummary>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StructureDefinitionSummary& from);
  void MergeFrom(const StructureDefinitionSummary& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructureDefinitionSummary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Markdown value_markdown = 3;
  bool has_value_markdown() const;
  void clear_value_markdown();
  static const int kValueMarkdownFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Markdown& _internal_value_markdown() const;
  public:
  const ::google::fhir::stu3::proto::Markdown& value_markdown() const;
  ::google::fhir::stu3::proto::Markdown* release_value_markdown();
  ::google::fhir::stu3::proto::Markdown* mutable_value_markdown();
  void set_allocated_value_markdown(::google::fhir::stu3::proto::Markdown* value_markdown);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.StructureDefinitionSummary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Markdown* value_markdown_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StructureDefinitionTableName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.StructureDefinitionTableName) */ {
 public:
  StructureDefinitionTableName();
  virtual ~StructureDefinitionTableName();

  StructureDefinitionTableName(const StructureDefinitionTableName& from);

  inline StructureDefinitionTableName& operator=(const StructureDefinitionTableName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StructureDefinitionTableName(StructureDefinitionTableName&& from) noexcept
    : StructureDefinitionTableName() {
    *this = ::std::move(from);
  }

  inline StructureDefinitionTableName& operator=(StructureDefinitionTableName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StructureDefinitionTableName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StructureDefinitionTableName* internal_default_instance() {
    return reinterpret_cast<const StructureDefinitionTableName*>(
               &_StructureDefinitionTableName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    364;

  void Swap(StructureDefinitionTableName* other);
  friend void swap(StructureDefinitionTableName& a, StructureDefinitionTableName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StructureDefinitionTableName* New() const final {
    return CreateMaybeMessage<StructureDefinitionTableName>(NULL);
  }

  StructureDefinitionTableName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StructureDefinitionTableName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StructureDefinitionTableName& from);
  void MergeFrom(const StructureDefinitionTableName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructureDefinitionTableName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.StructureDefinitionTableName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StructureDefinitionTemplateStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.StructureDefinitionTemplateStatus) */ {
 public:
  StructureDefinitionTemplateStatus();
  virtual ~StructureDefinitionTemplateStatus();

  StructureDefinitionTemplateStatus(const StructureDefinitionTemplateStatus& from);

  inline StructureDefinitionTemplateStatus& operator=(const StructureDefinitionTemplateStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StructureDefinitionTemplateStatus(StructureDefinitionTemplateStatus&& from) noexcept
    : StructureDefinitionTemplateStatus() {
    *this = ::std::move(from);
  }

  inline StructureDefinitionTemplateStatus& operator=(StructureDefinitionTemplateStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StructureDefinitionTemplateStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StructureDefinitionTemplateStatus* internal_default_instance() {
    return reinterpret_cast<const StructureDefinitionTemplateStatus*>(
               &_StructureDefinitionTemplateStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    365;

  void Swap(StructureDefinitionTemplateStatus* other);
  friend void swap(StructureDefinitionTemplateStatus& a, StructureDefinitionTemplateStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StructureDefinitionTemplateStatus* New() const final {
    return CreateMaybeMessage<StructureDefinitionTemplateStatus>(NULL);
  }

  StructureDefinitionTemplateStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StructureDefinitionTemplateStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StructureDefinitionTemplateStatus& from);
  void MergeFrom(const StructureDefinitionTemplateStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructureDefinitionTemplateStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.TemplateStatusCodeCode value_code = 3;
  bool has_value_code() const;
  void clear_value_code();
  static const int kValueCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::TemplateStatusCodeCode& _internal_value_code() const;
  public:
  const ::google::fhir::stu3::proto::TemplateStatusCodeCode& value_code() const;
  ::google::fhir::stu3::proto::TemplateStatusCodeCode* release_value_code();
  ::google::fhir::stu3::proto::TemplateStatusCodeCode* mutable_value_code();
  void set_allocated_value_code(::google::fhir::stu3::proto::TemplateStatusCodeCode* value_code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.StructureDefinitionTemplateStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::TemplateStatusCodeCode* value_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Wg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Wg) */ {
 public:
  Wg();
  virtual ~Wg();

  Wg(const Wg& from);

  inline Wg& operator=(const Wg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Wg(Wg&& from) noexcept
    : Wg() {
    *this = ::std::move(from);
  }

  inline Wg& operator=(Wg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Wg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Wg* internal_default_instance() {
    return reinterpret_cast<const Wg*>(
               &_Wg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    366;

  void Swap(Wg* other);
  friend void swap(Wg& a, Wg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Wg* New() const final {
    return CreateMaybeMessage<Wg>(NULL);
  }

  Wg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Wg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Wg& from);
  void MergeFrom(const Wg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.HL7WorkgroupCode value_code = 3;
  bool has_value_code() const;
  void clear_value_code();
  static const int kValueCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::HL7WorkgroupCode& _internal_value_code() const;
  public:
  const ::google::fhir::stu3::proto::HL7WorkgroupCode& value_code() const;
  ::google::fhir::stu3::proto::HL7WorkgroupCode* release_value_code();
  ::google::fhir::stu3::proto::HL7WorkgroupCode* mutable_value_code();
  void set_allocated_value_code(::google::fhir::stu3::proto::HL7WorkgroupCode* value_code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Wg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::HL7WorkgroupCode* value_code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementDefinitionXmlType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ElementDefinitionXmlType) */ {
 public:
  ElementDefinitionXmlType();
  virtual ~ElementDefinitionXmlType();

  ElementDefinitionXmlType(const ElementDefinitionXmlType& from);

  inline ElementDefinitionXmlType& operator=(const ElementDefinitionXmlType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementDefinitionXmlType(ElementDefinitionXmlType&& from) noexcept
    : ElementDefinitionXmlType() {
    *this = ::std::move(from);
  }

  inline ElementDefinitionXmlType& operator=(ElementDefinitionXmlType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementDefinitionXmlType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementDefinitionXmlType* internal_default_instance() {
    return reinterpret_cast<const ElementDefinitionXmlType*>(
               &_ElementDefinitionXmlType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    367;

  void Swap(ElementDefinitionXmlType* other);
  friend void swap(ElementDefinitionXmlType& a, ElementDefinitionXmlType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementDefinitionXmlType* New() const final {
    return CreateMaybeMessage<ElementDefinitionXmlType>(NULL);
  }

  ElementDefinitionXmlType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementDefinitionXmlType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementDefinitionXmlType& from);
  void MergeFrom(const ElementDefinitionXmlType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementDefinitionXmlType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ElementDefinitionXmlType)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TaskCandidateList_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.TaskCandidateList.Value) */ {
 public:
  TaskCandidateList_Value();
  virtual ~TaskCandidateList_Value();

  TaskCandidateList_Value(const TaskCandidateList_Value& from);

  inline TaskCandidateList_Value& operator=(const TaskCandidateList_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskCandidateList_Value(TaskCandidateList_Value&& from) noexcept
    : TaskCandidateList_Value() {
    *this = ::std::move(from);
  }

  inline TaskCandidateList_Value& operator=(TaskCandidateList_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskCandidateList_Value& default_instance();

  enum ValueCase {
    kReference = 1,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskCandidateList_Value* internal_default_instance() {
    return reinterpret_cast<const TaskCandidateList_Value*>(
               &_TaskCandidateList_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    368;

  void Swap(TaskCandidateList_Value* other);
  friend void swap(TaskCandidateList_Value& a, TaskCandidateList_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskCandidateList_Value* New() const final {
    return CreateMaybeMessage<TaskCandidateList_Value>(NULL);
  }

  TaskCandidateList_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskCandidateList_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskCandidateList_Value& from);
  void MergeFrom(const TaskCandidateList_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskCandidateList_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Device", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Organization", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Patient", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/RelatedPerson"];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.TaskCandidateList.Value)
 private:
  void set_has_reference();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::Reference* reference_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TaskCandidateList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.TaskCandidateList) */ {
 public:
  TaskCandidateList();
  virtual ~TaskCandidateList();

  TaskCandidateList(const TaskCandidateList& from);

  inline TaskCandidateList& operator=(const TaskCandidateList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskCandidateList(TaskCandidateList&& from) noexcept
    : TaskCandidateList() {
    *this = ::std::move(from);
  }

  inline TaskCandidateList& operator=(TaskCandidateList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskCandidateList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskCandidateList* internal_default_instance() {
    return reinterpret_cast<const TaskCandidateList*>(
               &_TaskCandidateList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    369;

  void Swap(TaskCandidateList* other);
  friend void swap(TaskCandidateList& a, TaskCandidateList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskCandidateList* New() const final {
    return CreateMaybeMessage<TaskCandidateList>(NULL);
  }

  TaskCandidateList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskCandidateList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskCandidateList& from);
  void MergeFrom(const TaskCandidateList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskCandidateList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TaskCandidateList_Value Value;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.TaskCandidateList.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::TaskCandidateList_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::TaskCandidateList_Value& value() const;
  ::google::fhir::stu3::proto::TaskCandidateList_Value* release_value();
  ::google::fhir::stu3::proto::TaskCandidateList_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::TaskCandidateList_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.TaskCandidateList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::TaskCandidateList_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TaskReplaces : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.TaskReplaces) */ {
 public:
  TaskReplaces();
  virtual ~TaskReplaces();

  TaskReplaces(const TaskReplaces& from);

  inline TaskReplaces& operator=(const TaskReplaces& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskReplaces(TaskReplaces&& from) noexcept
    : TaskReplaces() {
    *this = ::std::move(from);
  }

  inline TaskReplaces& operator=(TaskReplaces&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskReplaces& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskReplaces* internal_default_instance() {
    return reinterpret_cast<const TaskReplaces*>(
               &_TaskReplaces_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    370;

  void Swap(TaskReplaces* other);
  friend void swap(TaskReplaces& a, TaskReplaces& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskReplaces* New() const final {
    return CreateMaybeMessage<TaskReplaces>(NULL);
  }

  TaskReplaces* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskReplaces>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskReplaces& from);
  void MergeFrom(const TaskReplaces& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskReplaces* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Task"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.TaskReplaces)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DaysOfCycle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DaysOfCycle) */ {
 public:
  DaysOfCycle();
  virtual ~DaysOfCycle();

  DaysOfCycle(const DaysOfCycle& from);

  inline DaysOfCycle& operator=(const DaysOfCycle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DaysOfCycle(DaysOfCycle&& from) noexcept
    : DaysOfCycle() {
    *this = ::std::move(from);
  }

  inline DaysOfCycle& operator=(DaysOfCycle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DaysOfCycle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DaysOfCycle* internal_default_instance() {
    return reinterpret_cast<const DaysOfCycle*>(
               &_DaysOfCycle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    371;

  void Swap(DaysOfCycle* other);
  friend void swap(DaysOfCycle& a, DaysOfCycle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DaysOfCycle* New() const final {
    return CreateMaybeMessage<DaysOfCycle>(NULL);
  }

  DaysOfCycle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DaysOfCycle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DaysOfCycle& from);
  void MergeFrom(const DaysOfCycle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DaysOfCycle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // repeated .google.fhir.stu3.proto.Integer day = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  int day_size() const;
  void clear_day();
  static const int kDayFieldNumber = 4;
  ::google::fhir::stu3::proto::Integer* mutable_day(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Integer >*
      mutable_day();
  const ::google::fhir::stu3::proto::Integer& day(int index) const;
  ::google::fhir::stu3::proto::Integer* add_day();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Integer >&
      day() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DaysOfCycle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Integer > day_;
  ::google::fhir::stu3::proto::String* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TimingExact : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.TimingExact) */ {
 public:
  TimingExact();
  virtual ~TimingExact();

  TimingExact(const TimingExact& from);

  inline TimingExact& operator=(const TimingExact& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimingExact(TimingExact&& from) noexcept
    : TimingExact() {
    *this = ::std::move(from);
  }

  inline TimingExact& operator=(TimingExact&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TimingExact& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimingExact* internal_default_instance() {
    return reinterpret_cast<const TimingExact*>(
               &_TimingExact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    372;

  void Swap(TimingExact* other);
  friend void swap(TimingExact& a, TimingExact& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimingExact* New() const final {
    return CreateMaybeMessage<TimingExact>(NULL);
  }

  TimingExact* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TimingExact>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TimingExact& from);
  void MergeFrom(const TimingExact& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimingExact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.TimingExact)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Translation_Content : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Translation.Content) */ {
 public:
  Translation_Content();
  virtual ~Translation_Content();

  Translation_Content(const Translation_Content& from);

  inline Translation_Content& operator=(const Translation_Content& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Translation_Content(Translation_Content&& from) noexcept
    : Translation_Content() {
    *this = ::std::move(from);
  }

  inline Translation_Content& operator=(Translation_Content&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Translation_Content& default_instance();

  enum ContentCase {
    kStringValue = 1,
    kMarkdown = 2,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Translation_Content* internal_default_instance() {
    return reinterpret_cast<const Translation_Content*>(
               &_Translation_Content_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    373;

  void Swap(Translation_Content* other);
  friend void swap(Translation_Content& a, Translation_Content& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Translation_Content* New() const final {
    return CreateMaybeMessage<Translation_Content>(NULL);
  }

  Translation_Content* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Translation_Content>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Translation_Content& from);
  void MergeFrom(const Translation_Content& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Translation_Content* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String string_value = 1[json_name = "string"];
  bool has_string_value() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_string_value() const;
  public:
  const ::google::fhir::stu3::proto::String& string_value() const;
  ::google::fhir::stu3::proto::String* release_string_value();
  ::google::fhir::stu3::proto::String* mutable_string_value();
  void set_allocated_string_value(::google::fhir::stu3::proto::String* string_value);

  // .google.fhir.stu3.proto.Markdown markdown = 2;
  bool has_markdown() const;
  void clear_markdown();
  static const int kMarkdownFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::Markdown& _internal_markdown() const;
  public:
  const ::google::fhir::stu3::proto::Markdown& markdown() const;
  ::google::fhir::stu3::proto::Markdown* release_markdown();
  ::google::fhir::stu3::proto::Markdown* mutable_markdown();
  void set_allocated_markdown(::google::fhir::stu3::proto::Markdown* markdown);

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Translation.Content)
 private:
  void set_has_string_value();
  void set_has_markdown();

  inline bool has_content() const;
  inline void clear_has_content();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ContentUnion {
    ContentUnion() {}
    ::google::fhir::stu3::proto::String* string_value_;
    ::google::fhir::stu3::proto::Markdown* markdown_;
  } content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Translation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Translation) */ {
 public:
  Translation();
  virtual ~Translation();

  Translation(const Translation& from);

  inline Translation& operator=(const Translation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Translation(Translation&& from) noexcept
    : Translation() {
    *this = ::std::move(from);
  }

  inline Translation& operator=(Translation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Translation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Translation* internal_default_instance() {
    return reinterpret_cast<const Translation*>(
               &_Translation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    374;

  void Swap(Translation* other);
  friend void swap(Translation& a, Translation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Translation* New() const final {
    return CreateMaybeMessage<Translation>(NULL);
  }

  Translation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Translation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Translation& from);
  void MergeFrom(const Translation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Translation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Translation_Content Content;

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.LanguageCode lang = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_lang() const;
  void clear_lang();
  static const int kLangFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::LanguageCode& _internal_lang() const;
  public:
  const ::google::fhir::stu3::proto::LanguageCode& lang() const;
  ::google::fhir::stu3::proto::LanguageCode* release_lang();
  ::google::fhir::stu3::proto::LanguageCode* mutable_lang();
  void set_allocated_lang(::google::fhir::stu3::proto::LanguageCode* lang);

  // .google.fhir.stu3.proto.Translation.Content content = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Translation_Content& _internal_content() const;
  public:
  const ::google::fhir::stu3::proto::Translation_Content& content() const;
  ::google::fhir::stu3::proto::Translation_Content* release_content();
  ::google::fhir::stu3::proto::Translation_Content* mutable_content();
  void set_allocated_content(::google::fhir::stu3::proto::Translation_Content* content);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Translation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::LanguageCode* lang_;
  ::google::fhir::stu3::proto::Translation_Content* content_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UsageContextGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.UsageContextGroup) */ {
 public:
  UsageContextGroup();
  virtual ~UsageContextGroup();

  UsageContextGroup(const UsageContextGroup& from);

  inline UsageContextGroup& operator=(const UsageContextGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UsageContextGroup(UsageContextGroup&& from) noexcept
    : UsageContextGroup() {
    *this = ::std::move(from);
  }

  inline UsageContextGroup& operator=(UsageContextGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UsageContextGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsageContextGroup* internal_default_instance() {
    return reinterpret_cast<const UsageContextGroup*>(
               &_UsageContextGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    375;

  void Swap(UsageContextGroup* other);
  friend void swap(UsageContextGroup& a, UsageContextGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UsageContextGroup* New() const final {
    return CreateMaybeMessage<UsageContextGroup>(NULL);
  }

  UsageContextGroup* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UsageContextGroup>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UsageContextGroup& from);
  void MergeFrom(const UsageContextGroup& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsageContextGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.UsageContextGroup)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetAuthor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetAuthor) */ {
 public:
  ValueSetAuthor();
  virtual ~ValueSetAuthor();

  ValueSetAuthor(const ValueSetAuthor& from);

  inline ValueSetAuthor& operator=(const ValueSetAuthor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetAuthor(ValueSetAuthor&& from) noexcept
    : ValueSetAuthor() {
    *this = ::std::move(from);
  }

  inline ValueSetAuthor& operator=(ValueSetAuthor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetAuthor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetAuthor* internal_default_instance() {
    return reinterpret_cast<const ValueSetAuthor*>(
               &_ValueSetAuthor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    376;

  void Swap(ValueSetAuthor* other);
  friend void swap(ValueSetAuthor& a, ValueSetAuthor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetAuthor* New() const final {
    return CreateMaybeMessage<ValueSetAuthor>(NULL);
  }

  ValueSetAuthor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetAuthor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetAuthor& from);
  void MergeFrom(const ValueSetAuthor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetAuthor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetAuthor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetCaseSensitive : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetCaseSensitive) */ {
 public:
  ValueSetCaseSensitive();
  virtual ~ValueSetCaseSensitive();

  ValueSetCaseSensitive(const ValueSetCaseSensitive& from);

  inline ValueSetCaseSensitive& operator=(const ValueSetCaseSensitive& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetCaseSensitive(ValueSetCaseSensitive&& from) noexcept
    : ValueSetCaseSensitive() {
    *this = ::std::move(from);
  }

  inline ValueSetCaseSensitive& operator=(ValueSetCaseSensitive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetCaseSensitive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetCaseSensitive* internal_default_instance() {
    return reinterpret_cast<const ValueSetCaseSensitive*>(
               &_ValueSetCaseSensitive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    377;

  void Swap(ValueSetCaseSensitive* other);
  friend void swap(ValueSetCaseSensitive& a, ValueSetCaseSensitive& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetCaseSensitive* New() const final {
    return CreateMaybeMessage<ValueSetCaseSensitive>(NULL);
  }

  ValueSetCaseSensitive* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetCaseSensitive>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetCaseSensitive& from);
  void MergeFrom(const ValueSetCaseSensitive& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetCaseSensitive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetCaseSensitive)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetComment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetComment) */ {
 public:
  ValueSetComment();
  virtual ~ValueSetComment();

  ValueSetComment(const ValueSetComment& from);

  inline ValueSetComment& operator=(const ValueSetComment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetComment(ValueSetComment&& from) noexcept
    : ValueSetComment() {
    *this = ::std::move(from);
  }

  inline ValueSetComment& operator=(ValueSetComment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetComment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetComment* internal_default_instance() {
    return reinterpret_cast<const ValueSetComment*>(
               &_ValueSetComment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    378;

  void Swap(ValueSetComment* other);
  friend void swap(ValueSetComment& a, ValueSetComment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetComment* New() const final {
    return CreateMaybeMessage<ValueSetComment>(NULL);
  }

  ValueSetComment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetComment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetComment& from);
  void MergeFrom(const ValueSetComment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetComment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String content = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::String& _internal_content() const;
  public:
  const ::google::fhir::stu3::proto::String& content() const;
  ::google::fhir::stu3::proto::String* release_content();
  ::google::fhir::stu3::proto::String* mutable_content();
  void set_allocated_content(::google::fhir::stu3::proto::String* content);

  // .google.fhir.stu3.proto.Instant timestamp = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Instant& _internal_timestamp() const;
  public:
  const ::google::fhir::stu3::proto::Instant& timestamp() const;
  ::google::fhir::stu3::proto::Instant* release_timestamp();
  ::google::fhir::stu3::proto::Instant* mutable_timestamp();
  void set_allocated_timestamp(::google::fhir::stu3::proto::Instant* timestamp);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetComment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* content_;
  ::google::fhir::stu3::proto::Instant* timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetComments : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetComments) */ {
 public:
  ValueSetComments();
  virtual ~ValueSetComments();

  ValueSetComments(const ValueSetComments& from);

  inline ValueSetComments& operator=(const ValueSetComments& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetComments(ValueSetComments&& from) noexcept
    : ValueSetComments() {
    *this = ::std::move(from);
  }

  inline ValueSetComments& operator=(ValueSetComments&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetComments& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetComments* internal_default_instance() {
    return reinterpret_cast<const ValueSetComments*>(
               &_ValueSetComments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    379;

  void Swap(ValueSetComments* other);
  friend void swap(ValueSetComments& a, ValueSetComments& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetComments* New() const final {
    return CreateMaybeMessage<ValueSetComments>(NULL);
  }

  ValueSetComments* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetComments>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetComments& from);
  void MergeFrom(const ValueSetComments& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetComments* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetComments)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetConceptOrder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetConceptOrder) */ {
 public:
  ValueSetConceptOrder();
  virtual ~ValueSetConceptOrder();

  ValueSetConceptOrder(const ValueSetConceptOrder& from);

  inline ValueSetConceptOrder& operator=(const ValueSetConceptOrder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetConceptOrder(ValueSetConceptOrder&& from) noexcept
    : ValueSetConceptOrder() {
    *this = ::std::move(from);
  }

  inline ValueSetConceptOrder& operator=(ValueSetConceptOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetConceptOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetConceptOrder* internal_default_instance() {
    return reinterpret_cast<const ValueSetConceptOrder*>(
               &_ValueSetConceptOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    380;

  void Swap(ValueSetConceptOrder* other);
  friend void swap(ValueSetConceptOrder& a, ValueSetConceptOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetConceptOrder* New() const final {
    return CreateMaybeMessage<ValueSetConceptOrder>(NULL);
  }

  ValueSetConceptOrder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetConceptOrder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetConceptOrder& from);
  void MergeFrom(const ValueSetConceptOrder& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetConceptOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Integer value_integer = 3;
  bool has_value_integer() const;
  void clear_value_integer();
  static const int kValueIntegerFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Integer& _internal_value_integer() const;
  public:
  const ::google::fhir::stu3::proto::Integer& value_integer() const;
  ::google::fhir::stu3::proto::Integer* release_value_integer();
  ::google::fhir::stu3::proto::Integer* mutable_value_integer();
  void set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetConceptOrder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Integer* value_integer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetDefinition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetDefinition) */ {
 public:
  ValueSetDefinition();
  virtual ~ValueSetDefinition();

  ValueSetDefinition(const ValueSetDefinition& from);

  inline ValueSetDefinition& operator=(const ValueSetDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetDefinition(ValueSetDefinition&& from) noexcept
    : ValueSetDefinition() {
    *this = ::std::move(from);
  }

  inline ValueSetDefinition& operator=(ValueSetDefinition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetDefinition* internal_default_instance() {
    return reinterpret_cast<const ValueSetDefinition*>(
               &_ValueSetDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    381;

  void Swap(ValueSetDefinition* other);
  friend void swap(ValueSetDefinition& a, ValueSetDefinition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetDefinition* New() const final {
    return CreateMaybeMessage<ValueSetDefinition>(NULL);
  }

  ValueSetDefinition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetDefinition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetDefinition& from);
  void MergeFrom(const ValueSetDefinition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetDefinition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetDefinition)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetEffectiveDate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetEffectiveDate) */ {
 public:
  ValueSetEffectiveDate();
  virtual ~ValueSetEffectiveDate();

  ValueSetEffectiveDate(const ValueSetEffectiveDate& from);

  inline ValueSetEffectiveDate& operator=(const ValueSetEffectiveDate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetEffectiveDate(ValueSetEffectiveDate&& from) noexcept
    : ValueSetEffectiveDate() {
    *this = ::std::move(from);
  }

  inline ValueSetEffectiveDate& operator=(ValueSetEffectiveDate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetEffectiveDate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetEffectiveDate* internal_default_instance() {
    return reinterpret_cast<const ValueSetEffectiveDate*>(
               &_ValueSetEffectiveDate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    382;

  void Swap(ValueSetEffectiveDate* other);
  friend void swap(ValueSetEffectiveDate& a, ValueSetEffectiveDate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetEffectiveDate* New() const final {
    return CreateMaybeMessage<ValueSetEffectiveDate>(NULL);
  }

  ValueSetEffectiveDate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetEffectiveDate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetEffectiveDate& from);
  void MergeFrom(const ValueSetEffectiveDate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetEffectiveDate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Date value_date = 3;
  bool has_value_date() const;
  void clear_value_date();
  static const int kValueDateFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Date& _internal_value_date() const;
  public:
  const ::google::fhir::stu3::proto::Date& value_date() const;
  ::google::fhir::stu3::proto::Date* release_value_date();
  ::google::fhir::stu3::proto::Date* mutable_value_date();
  void set_allocated_value_date(::google::fhir::stu3::proto::Date* value_date);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetEffectiveDate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Date* value_date_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetExpansionSource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetExpansionSource) */ {
 public:
  ValueSetExpansionSource();
  virtual ~ValueSetExpansionSource();

  ValueSetExpansionSource(const ValueSetExpansionSource& from);

  inline ValueSetExpansionSource& operator=(const ValueSetExpansionSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetExpansionSource(ValueSetExpansionSource&& from) noexcept
    : ValueSetExpansionSource() {
    *this = ::std::move(from);
  }

  inline ValueSetExpansionSource& operator=(ValueSetExpansionSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetExpansionSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetExpansionSource* internal_default_instance() {
    return reinterpret_cast<const ValueSetExpansionSource*>(
               &_ValueSetExpansionSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    383;

  void Swap(ValueSetExpansionSource* other);
  friend void swap(ValueSetExpansionSource& a, ValueSetExpansionSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetExpansionSource* New() const final {
    return CreateMaybeMessage<ValueSetExpansionSource>(NULL);
  }

  ValueSetExpansionSource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetExpansionSource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetExpansionSource& from);
  void MergeFrom(const ValueSetExpansionSource& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetExpansionSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri value_uri = 3;
  bool has_value_uri() const;
  void clear_value_uri();
  static const int kValueUriFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_value_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& value_uri() const;
  ::google::fhir::stu3::proto::Uri* release_value_uri();
  ::google::fhir::stu3::proto::Uri* mutable_value_uri();
  void set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetExpansionSource)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* value_uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetExpirationDate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetExpirationDate) */ {
 public:
  ValueSetExpirationDate();
  virtual ~ValueSetExpirationDate();

  ValueSetExpirationDate(const ValueSetExpirationDate& from);

  inline ValueSetExpirationDate& operator=(const ValueSetExpirationDate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetExpirationDate(ValueSetExpirationDate&& from) noexcept
    : ValueSetExpirationDate() {
    *this = ::std::move(from);
  }

  inline ValueSetExpirationDate& operator=(ValueSetExpirationDate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetExpirationDate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetExpirationDate* internal_default_instance() {
    return reinterpret_cast<const ValueSetExpirationDate*>(
               &_ValueSetExpirationDate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    384;

  void Swap(ValueSetExpirationDate* other);
  friend void swap(ValueSetExpirationDate& a, ValueSetExpirationDate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetExpirationDate* New() const final {
    return CreateMaybeMessage<ValueSetExpirationDate>(NULL);
  }

  ValueSetExpirationDate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetExpirationDate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetExpirationDate& from);
  void MergeFrom(const ValueSetExpirationDate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetExpirationDate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Date value_date = 3;
  bool has_value_date() const;
  void clear_value_date();
  static const int kValueDateFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Date& _internal_value_date() const;
  public:
  const ::google::fhir::stu3::proto::Date& value_date() const;
  ::google::fhir::stu3::proto::Date* release_value_date();
  ::google::fhir::stu3::proto::Date* mutable_value_date();
  void set_allocated_value_date(::google::fhir::stu3::proto::Date* value_date);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetExpirationDate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Date* value_date_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetHistory_Revision : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetHistory.Revision) */ {
 public:
  ValueSetHistory_Revision();
  virtual ~ValueSetHistory_Revision();

  ValueSetHistory_Revision(const ValueSetHistory_Revision& from);

  inline ValueSetHistory_Revision& operator=(const ValueSetHistory_Revision& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetHistory_Revision(ValueSetHistory_Revision&& from) noexcept
    : ValueSetHistory_Revision() {
    *this = ::std::move(from);
  }

  inline ValueSetHistory_Revision& operator=(ValueSetHistory_Revision&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetHistory_Revision& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetHistory_Revision* internal_default_instance() {
    return reinterpret_cast<const ValueSetHistory_Revision*>(
               &_ValueSetHistory_Revision_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    385;

  void Swap(ValueSetHistory_Revision* other);
  friend void swap(ValueSetHistory_Revision& a, ValueSetHistory_Revision& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetHistory_Revision* New() const final {
    return CreateMaybeMessage<ValueSetHistory_Revision>(NULL);
  }

  ValueSetHistory_Revision* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetHistory_Revision>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetHistory_Revision& from);
  void MergeFrom(const ValueSetHistory_Revision& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetHistory_Revision* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.DateTime date = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::DateTime& _internal_date() const;
  public:
  const ::google::fhir::stu3::proto::DateTime& date() const;
  ::google::fhir::stu3::proto::DateTime* release_date();
  ::google::fhir::stu3::proto::DateTime* mutable_date();
  void set_allocated_date(::google::fhir::stu3::proto::DateTime* date);

  // .google.fhir.stu3.proto.String id_slice = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.fhir_inlined_extension_url) = "id"];
  bool has_id_slice() const;
  void clear_id_slice();
  static const int kIdSliceFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id_slice() const;
  public:
  const ::google::fhir::stu3::proto::String& id_slice() const;
  ::google::fhir::stu3::proto::String* release_id_slice();
  ::google::fhir::stu3::proto::String* mutable_id_slice();
  void set_allocated_id_slice(::google::fhir::stu3::proto::String* id_slice);

  // .google.fhir.stu3.proto.String author = 6 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_author() const;
  void clear_author();
  static const int kAuthorFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::String& _internal_author() const;
  public:
  const ::google::fhir::stu3::proto::String& author() const;
  ::google::fhir::stu3::proto::String* release_author();
  ::google::fhir::stu3::proto::String* mutable_author();
  void set_allocated_author(::google::fhir::stu3::proto::String* author);

  // .google.fhir.stu3.proto.String notes = 7;
  bool has_notes() const;
  void clear_notes();
  static const int kNotesFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::String& _internal_notes() const;
  public:
  const ::google::fhir::stu3::proto::String& notes() const;
  ::google::fhir::stu3::proto::String* release_notes();
  ::google::fhir::stu3::proto::String* mutable_notes();
  void set_allocated_notes(::google::fhir::stu3::proto::String* notes);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetHistory.Revision)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::DateTime* date_;
  ::google::fhir::stu3::proto::String* id_slice_;
  ::google::fhir::stu3::proto::String* author_;
  ::google::fhir::stu3::proto::String* notes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetHistory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetHistory) */ {
 public:
  ValueSetHistory();
  virtual ~ValueSetHistory();

  ValueSetHistory(const ValueSetHistory& from);

  inline ValueSetHistory& operator=(const ValueSetHistory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetHistory(ValueSetHistory&& from) noexcept
    : ValueSetHistory() {
    *this = ::std::move(from);
  }

  inline ValueSetHistory& operator=(ValueSetHistory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetHistory* internal_default_instance() {
    return reinterpret_cast<const ValueSetHistory*>(
               &_ValueSetHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    386;

  void Swap(ValueSetHistory* other);
  friend void swap(ValueSetHistory& a, ValueSetHistory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetHistory* New() const final {
    return CreateMaybeMessage<ValueSetHistory>(NULL);
  }

  ValueSetHistory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetHistory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetHistory& from);
  void MergeFrom(const ValueSetHistory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetHistory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ValueSetHistory_Revision Revision;

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // repeated .google.fhir.stu3.proto.ValueSetHistory.Revision revision = 5;
  int revision_size() const;
  void clear_revision();
  static const int kRevisionFieldNumber = 5;
  ::google::fhir::stu3::proto::ValueSetHistory_Revision* mutable_revision(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::ValueSetHistory_Revision >*
      mutable_revision();
  const ::google::fhir::stu3::proto::ValueSetHistory_Revision& revision(int index) const;
  ::google::fhir::stu3::proto::ValueSetHistory_Revision* add_revision();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::ValueSetHistory_Revision >&
      revision() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::String& _internal_name() const;
  public:
  const ::google::fhir::stu3::proto::String& name() const;
  ::google::fhir::stu3::proto::String* release_name();
  ::google::fhir::stu3::proto::String* mutable_name();
  void set_allocated_name(::google::fhir::stu3::proto::String* name);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetHistory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::ValueSetHistory_Revision > revision_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetKeyWord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetKeyWord) */ {
 public:
  ValueSetKeyWord();
  virtual ~ValueSetKeyWord();

  ValueSetKeyWord(const ValueSetKeyWord& from);

  inline ValueSetKeyWord& operator=(const ValueSetKeyWord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetKeyWord(ValueSetKeyWord&& from) noexcept
    : ValueSetKeyWord() {
    *this = ::std::move(from);
  }

  inline ValueSetKeyWord& operator=(ValueSetKeyWord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetKeyWord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetKeyWord* internal_default_instance() {
    return reinterpret_cast<const ValueSetKeyWord*>(
               &_ValueSetKeyWord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    387;

  void Swap(ValueSetKeyWord* other);
  friend void swap(ValueSetKeyWord& a, ValueSetKeyWord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetKeyWord* New() const final {
    return CreateMaybeMessage<ValueSetKeyWord>(NULL);
  }

  ValueSetKeyWord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetKeyWord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetKeyWord& from);
  void MergeFrom(const ValueSetKeyWord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetKeyWord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetKeyWord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetLabel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetLabel) */ {
 public:
  ValueSetLabel();
  virtual ~ValueSetLabel();

  ValueSetLabel(const ValueSetLabel& from);

  inline ValueSetLabel& operator=(const ValueSetLabel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetLabel(ValueSetLabel&& from) noexcept
    : ValueSetLabel() {
    *this = ::std::move(from);
  }

  inline ValueSetLabel& operator=(ValueSetLabel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetLabel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetLabel* internal_default_instance() {
    return reinterpret_cast<const ValueSetLabel*>(
               &_ValueSetLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    388;

  void Swap(ValueSetLabel* other);
  friend void swap(ValueSetLabel& a, ValueSetLabel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetLabel* New() const final {
    return CreateMaybeMessage<ValueSetLabel>(NULL);
  }

  ValueSetLabel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetLabel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetLabel& from);
  void MergeFrom(const ValueSetLabel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetLabel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetLabel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetMap) */ {
 public:
  ValueSetMap();
  virtual ~ValueSetMap();

  ValueSetMap(const ValueSetMap& from);

  inline ValueSetMap& operator=(const ValueSetMap& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetMap(ValueSetMap&& from) noexcept
    : ValueSetMap() {
    *this = ::std::move(from);
  }

  inline ValueSetMap& operator=(ValueSetMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetMap* internal_default_instance() {
    return reinterpret_cast<const ValueSetMap*>(
               &_ValueSetMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    389;

  void Swap(ValueSetMap* other);
  friend void swap(ValueSetMap& a, ValueSetMap& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetMap* New() const final {
    return CreateMaybeMessage<ValueSetMap>(NULL);
  }

  ValueSetMap* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetMap>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetMap& from);
  void MergeFrom(const ValueSetMap& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ConceptMap"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetOrdinalValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetOrdinalValue) */ {
 public:
  ValueSetOrdinalValue();
  virtual ~ValueSetOrdinalValue();

  ValueSetOrdinalValue(const ValueSetOrdinalValue& from);

  inline ValueSetOrdinalValue& operator=(const ValueSetOrdinalValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetOrdinalValue(ValueSetOrdinalValue&& from) noexcept
    : ValueSetOrdinalValue() {
    *this = ::std::move(from);
  }

  inline ValueSetOrdinalValue& operator=(ValueSetOrdinalValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetOrdinalValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetOrdinalValue* internal_default_instance() {
    return reinterpret_cast<const ValueSetOrdinalValue*>(
               &_ValueSetOrdinalValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    390;

  void Swap(ValueSetOrdinalValue* other);
  friend void swap(ValueSetOrdinalValue& a, ValueSetOrdinalValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetOrdinalValue* New() const final {
    return CreateMaybeMessage<ValueSetOrdinalValue>(NULL);
  }

  ValueSetOrdinalValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetOrdinalValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetOrdinalValue& from);
  void MergeFrom(const ValueSetOrdinalValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetOrdinalValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Decimal value_decimal = 3;
  bool has_value_decimal() const;
  void clear_value_decimal();
  static const int kValueDecimalFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_value_decimal() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& value_decimal() const;
  ::google::fhir::stu3::proto::Decimal* release_value_decimal();
  ::google::fhir::stu3::proto::Decimal* mutable_value_decimal();
  void set_allocated_value_decimal(::google::fhir::stu3::proto::Decimal* value_decimal);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetOrdinalValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Decimal* value_decimal_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetOtherName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetOtherName) */ {
 public:
  ValueSetOtherName();
  virtual ~ValueSetOtherName();

  ValueSetOtherName(const ValueSetOtherName& from);

  inline ValueSetOtherName& operator=(const ValueSetOtherName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetOtherName(ValueSetOtherName&& from) noexcept
    : ValueSetOtherName() {
    *this = ::std::move(from);
  }

  inline ValueSetOtherName& operator=(ValueSetOtherName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetOtherName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetOtherName* internal_default_instance() {
    return reinterpret_cast<const ValueSetOtherName*>(
               &_ValueSetOtherName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    391;

  void Swap(ValueSetOtherName* other);
  friend void swap(ValueSetOtherName& a, ValueSetOtherName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetOtherName* New() const final {
    return CreateMaybeMessage<ValueSetOtherName>(NULL);
  }

  ValueSetOtherName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetOtherName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetOtherName& from);
  void MergeFrom(const ValueSetOtherName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetOtherName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String name = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::String& _internal_name() const;
  public:
  const ::google::fhir::stu3::proto::String& name() const;
  ::google::fhir::stu3::proto::String* release_name();
  ::google::fhir::stu3::proto::String* mutable_name();
  void set_allocated_name(::google::fhir::stu3::proto::String* name);

  // .google.fhir.stu3.proto.Boolean preferred = 5;
  bool has_preferred() const;
  void clear_preferred();
  static const int kPreferredFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_preferred() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& preferred() const;
  ::google::fhir::stu3::proto::Boolean* release_preferred();
  ::google::fhir::stu3::proto::Boolean* mutable_preferred();
  void set_allocated_preferred(::google::fhir::stu3::proto::Boolean* preferred);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetOtherName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* name_;
  ::google::fhir::stu3::proto::Boolean* preferred_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetReference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetReference) */ {
 public:
  ValueSetReference();
  virtual ~ValueSetReference();

  ValueSetReference(const ValueSetReference& from);

  inline ValueSetReference& operator=(const ValueSetReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetReference(ValueSetReference&& from) noexcept
    : ValueSetReference() {
    *this = ::std::move(from);
  }

  inline ValueSetReference& operator=(ValueSetReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetReference* internal_default_instance() {
    return reinterpret_cast<const ValueSetReference*>(
               &_ValueSetReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    392;

  void Swap(ValueSetReference* other);
  friend void swap(ValueSetReference& a, ValueSetReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetReference* New() const final {
    return CreateMaybeMessage<ValueSetReference>(NULL);
  }

  ValueSetReference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetReference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetReference& from);
  void MergeFrom(const ValueSetReference& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri value_uri = 3;
  bool has_value_uri() const;
  void clear_value_uri();
  static const int kValueUriFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_value_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& value_uri() const;
  ::google::fhir::stu3::proto::Uri* release_value_uri();
  ::google::fhir::stu3::proto::Uri* mutable_value_uri();
  void set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetReference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* value_uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetSourceReference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetSourceReference) */ {
 public:
  ValueSetSourceReference();
  virtual ~ValueSetSourceReference();

  ValueSetSourceReference(const ValueSetSourceReference& from);

  inline ValueSetSourceReference& operator=(const ValueSetSourceReference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetSourceReference(ValueSetSourceReference&& from) noexcept
    : ValueSetSourceReference() {
    *this = ::std::move(from);
  }

  inline ValueSetSourceReference& operator=(ValueSetSourceReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetSourceReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetSourceReference* internal_default_instance() {
    return reinterpret_cast<const ValueSetSourceReference*>(
               &_ValueSetSourceReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    393;

  void Swap(ValueSetSourceReference* other);
  friend void swap(ValueSetSourceReference& a, ValueSetSourceReference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetSourceReference* New() const final {
    return CreateMaybeMessage<ValueSetSourceReference>(NULL);
  }

  ValueSetSourceReference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetSourceReference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetSourceReference& from);
  void MergeFrom(const ValueSetSourceReference& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetSourceReference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri value_uri = 3;
  bool has_value_uri() const;
  void clear_value_uri();
  static const int kValueUriFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_value_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& value_uri() const;
  ::google::fhir::stu3::proto::Uri* release_value_uri();
  ::google::fhir::stu3::proto::Uri* mutable_value_uri();
  void set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetSourceReference)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* value_uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetSystem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetSystem) */ {
 public:
  ValueSetSystem();
  virtual ~ValueSetSystem();

  ValueSetSystem(const ValueSetSystem& from);

  inline ValueSetSystem& operator=(const ValueSetSystem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetSystem(ValueSetSystem&& from) noexcept
    : ValueSetSystem() {
    *this = ::std::move(from);
  }

  inline ValueSetSystem& operator=(ValueSetSystem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetSystem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetSystem* internal_default_instance() {
    return reinterpret_cast<const ValueSetSystem*>(
               &_ValueSetSystem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    394;

  void Swap(ValueSetSystem* other);
  friend void swap(ValueSetSystem& a, ValueSetSystem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetSystem* New() const final {
    return CreateMaybeMessage<ValueSetSystem>(NULL);
  }

  ValueSetSystem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetSystem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetSystem& from);
  void MergeFrom(const ValueSetSystem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetSystem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/CodeSystem"];
  bool has_value_reference() const;
  void clear_value_reference();
  static const int kValueReferenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_value_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& value_reference() const;
  ::google::fhir::stu3::proto::Reference* release_value_reference();
  ::google::fhir::stu3::proto::Reference* mutable_value_reference();
  void set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetSystem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* value_reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetSystemName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetSystemName) */ {
 public:
  ValueSetSystemName();
  virtual ~ValueSetSystemName();

  ValueSetSystemName(const ValueSetSystemName& from);

  inline ValueSetSystemName& operator=(const ValueSetSystemName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetSystemName(ValueSetSystemName&& from) noexcept
    : ValueSetSystemName() {
    *this = ::std::move(from);
  }

  inline ValueSetSystemName& operator=(ValueSetSystemName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetSystemName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetSystemName* internal_default_instance() {
    return reinterpret_cast<const ValueSetSystemName*>(
               &_ValueSetSystemName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    395;

  void Swap(ValueSetSystemName* other);
  friend void swap(ValueSetSystemName& a, ValueSetSystemName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetSystemName* New() const final {
    return CreateMaybeMessage<ValueSetSystemName>(NULL);
  }

  ValueSetSystemName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetSystemName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetSystemName& from);
  void MergeFrom(const ValueSetSystemName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetSystemName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetSystemName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetSystemRef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetSystemRef) */ {
 public:
  ValueSetSystemRef();
  virtual ~ValueSetSystemRef();

  ValueSetSystemRef(const ValueSetSystemRef& from);

  inline ValueSetSystemRef& operator=(const ValueSetSystemRef& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetSystemRef(ValueSetSystemRef&& from) noexcept
    : ValueSetSystemRef() {
    *this = ::std::move(from);
  }

  inline ValueSetSystemRef& operator=(ValueSetSystemRef&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetSystemRef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetSystemRef* internal_default_instance() {
    return reinterpret_cast<const ValueSetSystemRef*>(
               &_ValueSetSystemRef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    396;

  void Swap(ValueSetSystemRef* other);
  friend void swap(ValueSetSystemRef& a, ValueSetSystemRef& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetSystemRef* New() const final {
    return CreateMaybeMessage<ValueSetSystemRef>(NULL);
  }

  ValueSetSystemRef* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetSystemRef>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetSystemRef& from);
  void MergeFrom(const ValueSetSystemRef& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetSystemRef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri value_uri = 3;
  bool has_value_uri() const;
  void clear_value_uri();
  static const int kValueUriFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_value_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& value_uri() const;
  ::google::fhir::stu3::proto::Uri* release_value_uri();
  ::google::fhir::stu3::proto::Uri* mutable_value_uri();
  void set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetSystemRef)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* value_uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetToocostly : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetToocostly) */ {
 public:
  ValueSetToocostly();
  virtual ~ValueSetToocostly();

  ValueSetToocostly(const ValueSetToocostly& from);

  inline ValueSetToocostly& operator=(const ValueSetToocostly& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetToocostly(ValueSetToocostly&& from) noexcept
    : ValueSetToocostly() {
    *this = ::std::move(from);
  }

  inline ValueSetToocostly& operator=(ValueSetToocostly&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetToocostly& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetToocostly* internal_default_instance() {
    return reinterpret_cast<const ValueSetToocostly*>(
               &_ValueSetToocostly_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    397;

  void Swap(ValueSetToocostly* other);
  friend void swap(ValueSetToocostly& a, ValueSetToocostly& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetToocostly* New() const final {
    return CreateMaybeMessage<ValueSetToocostly>(NULL);
  }

  ValueSetToocostly* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetToocostly>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetToocostly& from);
  void MergeFrom(const ValueSetToocostly& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetToocostly* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetToocostly)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetTrustedExpansion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetTrustedExpansion) */ {
 public:
  ValueSetTrustedExpansion();
  virtual ~ValueSetTrustedExpansion();

  ValueSetTrustedExpansion(const ValueSetTrustedExpansion& from);

  inline ValueSetTrustedExpansion& operator=(const ValueSetTrustedExpansion& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetTrustedExpansion(ValueSetTrustedExpansion&& from) noexcept
    : ValueSetTrustedExpansion() {
    *this = ::std::move(from);
  }

  inline ValueSetTrustedExpansion& operator=(ValueSetTrustedExpansion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetTrustedExpansion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetTrustedExpansion* internal_default_instance() {
    return reinterpret_cast<const ValueSetTrustedExpansion*>(
               &_ValueSetTrustedExpansion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    398;

  void Swap(ValueSetTrustedExpansion* other);
  friend void swap(ValueSetTrustedExpansion& a, ValueSetTrustedExpansion& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetTrustedExpansion* New() const final {
    return CreateMaybeMessage<ValueSetTrustedExpansion>(NULL);
  }

  ValueSetTrustedExpansion* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetTrustedExpansion>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetTrustedExpansion& from);
  void MergeFrom(const ValueSetTrustedExpansion& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetTrustedExpansion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri value_uri = 3;
  bool has_value_uri() const;
  void clear_value_uri();
  static const int kValueUriFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_value_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& value_uri() const;
  ::google::fhir::stu3::proto::Uri* release_value_uri();
  ::google::fhir::stu3::proto::Uri* mutable_value_uri();
  void set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetTrustedExpansion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* value_uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetUnclosed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetUnclosed) */ {
 public:
  ValueSetUnclosed();
  virtual ~ValueSetUnclosed();

  ValueSetUnclosed(const ValueSetUnclosed& from);

  inline ValueSetUnclosed& operator=(const ValueSetUnclosed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetUnclosed(ValueSetUnclosed&& from) noexcept
    : ValueSetUnclosed() {
    *this = ::std::move(from);
  }

  inline ValueSetUnclosed& operator=(ValueSetUnclosed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetUnclosed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetUnclosed* internal_default_instance() {
    return reinterpret_cast<const ValueSetUnclosed*>(
               &_ValueSetUnclosed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    399;

  void Swap(ValueSetUnclosed* other);
  friend void swap(ValueSetUnclosed& a, ValueSetUnclosed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetUnclosed* New() const final {
    return CreateMaybeMessage<ValueSetUnclosed>(NULL);
  }

  ValueSetUnclosed* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetUnclosed>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetUnclosed& from);
  void MergeFrom(const ValueSetUnclosed& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetUnclosed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetUnclosed)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetUsage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetUsage) */ {
 public:
  ValueSetUsage();
  virtual ~ValueSetUsage();

  ValueSetUsage(const ValueSetUsage& from);

  inline ValueSetUsage& operator=(const ValueSetUsage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetUsage(ValueSetUsage&& from) noexcept
    : ValueSetUsage() {
    *this = ::std::move(from);
  }

  inline ValueSetUsage& operator=(ValueSetUsage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetUsage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetUsage* internal_default_instance() {
    return reinterpret_cast<const ValueSetUsage*>(
               &_ValueSetUsage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    400;

  void Swap(ValueSetUsage* other);
  friend void swap(ValueSetUsage& a, ValueSetUsage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetUsage* New() const final {
    return CreateMaybeMessage<ValueSetUsage>(NULL);
  }

  ValueSetUsage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetUsage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetUsage& from);
  void MergeFrom(const ValueSetUsage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetUsage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String user = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::String& _internal_user() const;
  public:
  const ::google::fhir::stu3::proto::String& user() const;
  ::google::fhir::stu3::proto::String* release_user();
  ::google::fhir::stu3::proto::String* mutable_user();
  void set_allocated_user(::google::fhir::stu3::proto::String* user);

  // .google.fhir.stu3.proto.String use = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_use() const;
  void clear_use();
  static const int kUseFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::String& _internal_use() const;
  public:
  const ::google::fhir::stu3::proto::String& use() const;
  ::google::fhir::stu3::proto::String* release_use();
  ::google::fhir::stu3::proto::String* mutable_use();
  void set_allocated_use(::google::fhir::stu3::proto::String* use);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetUsage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* user_;
  ::google::fhir::stu3::proto::String* use_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetWarning : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetWarning) */ {
 public:
  ValueSetWarning();
  virtual ~ValueSetWarning();

  ValueSetWarning(const ValueSetWarning& from);

  inline ValueSetWarning& operator=(const ValueSetWarning& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetWarning(ValueSetWarning&& from) noexcept
    : ValueSetWarning() {
    *this = ::std::move(from);
  }

  inline ValueSetWarning& operator=(ValueSetWarning&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetWarning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetWarning* internal_default_instance() {
    return reinterpret_cast<const ValueSetWarning*>(
               &_ValueSetWarning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    401;

  void Swap(ValueSetWarning* other);
  friend void swap(ValueSetWarning& a, ValueSetWarning& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetWarning* New() const final {
    return CreateMaybeMessage<ValueSetWarning>(NULL);
  }

  ValueSetWarning* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetWarning>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetWarning& from);
  void MergeFrom(const ValueSetWarning& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetWarning* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Markdown value_markdown = 3;
  bool has_value_markdown() const;
  void clear_value_markdown();
  static const int kValueMarkdownFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Markdown& _internal_value_markdown() const;
  public:
  const ::google::fhir::stu3::proto::Markdown& value_markdown() const;
  ::google::fhir::stu3::proto::Markdown* release_value_markdown();
  ::google::fhir::stu3::proto::Markdown* mutable_value_markdown();
  void set_allocated_value_markdown(::google::fhir::stu3::proto::Markdown* value_markdown);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetWarning)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Markdown* value_markdown_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ValueSetWorkflowStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ValueSetWorkflowStatus) */ {
 public:
  ValueSetWorkflowStatus();
  virtual ~ValueSetWorkflowStatus();

  ValueSetWorkflowStatus(const ValueSetWorkflowStatus& from);

  inline ValueSetWorkflowStatus& operator=(const ValueSetWorkflowStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ValueSetWorkflowStatus(ValueSetWorkflowStatus&& from) noexcept
    : ValueSetWorkflowStatus() {
    *this = ::std::move(from);
  }

  inline ValueSetWorkflowStatus& operator=(ValueSetWorkflowStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ValueSetWorkflowStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ValueSetWorkflowStatus* internal_default_instance() {
    return reinterpret_cast<const ValueSetWorkflowStatus*>(
               &_ValueSetWorkflowStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    402;

  void Swap(ValueSetWorkflowStatus* other);
  friend void swap(ValueSetWorkflowStatus& a, ValueSetWorkflowStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ValueSetWorkflowStatus* New() const final {
    return CreateMaybeMessage<ValueSetWorkflowStatus>(NULL);
  }

  ValueSetWorkflowStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ValueSetWorkflowStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ValueSetWorkflowStatus& from);
  void MergeFrom(const ValueSetWorkflowStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValueSetWorkflowStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String value_string = 3;
  bool has_value_string() const;
  void clear_value_string();
  static const int kValueStringFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value_string() const;
  public:
  const ::google::fhir::stu3::proto::String& value_string() const;
  ::google::fhir::stu3::proto::String* release_value_string();
  ::google::fhir::stu3::proto::String* mutable_value_string();
  void set_allocated_value_string(::google::fhir::stu3::proto::String* value_string);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ValueSetWorkflowStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* value_string_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fextensions_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataElementAdministrativeStatus

// .google.fhir.stu3.proto.String id = 1;
inline bool DataElementAdministrativeStatus::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DataElementAdministrativeStatus::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DataElementAdministrativeStatus::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DataElementAdministrativeStatus.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DataElementAdministrativeStatus::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DataElementAdministrativeStatus.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DataElementAdministrativeStatus::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DataElementAdministrativeStatus.id)
  return id_;
}
inline void DataElementAdministrativeStatus::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DataElementAdministrativeStatus.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool DataElementAdministrativeStatus::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& DataElementAdministrativeStatus::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& DataElementAdministrativeStatus::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DataElementAdministrativeStatus.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* DataElementAdministrativeStatus::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DataElementAdministrativeStatus.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* DataElementAdministrativeStatus::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DataElementAdministrativeStatus.value_codeable_concept)
  return value_codeable_concept_;
}
inline void DataElementAdministrativeStatus::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DataElementAdministrativeStatus.value_codeable_concept)
}

// -------------------------------------------------------------------

// DataElementChangeDescription

// .google.fhir.stu3.proto.String id = 1;
inline bool DataElementChangeDescription::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DataElementChangeDescription::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DataElementChangeDescription::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DataElementChangeDescription.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DataElementChangeDescription::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DataElementChangeDescription.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DataElementChangeDescription::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DataElementChangeDescription.id)
  return id_;
}
inline void DataElementChangeDescription::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DataElementChangeDescription.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool DataElementChangeDescription::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DataElementChangeDescription::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& DataElementChangeDescription::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DataElementChangeDescription.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DataElementChangeDescription::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DataElementChangeDescription.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DataElementChangeDescription::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DataElementChangeDescription.value_string)
  return value_string_;
}
inline void DataElementChangeDescription::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DataElementChangeDescription.value_string)
}

// -------------------------------------------------------------------

// DataElementClassificationOrContext

// .google.fhir.stu3.proto.String id = 1;
inline bool DataElementClassificationOrContext::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DataElementClassificationOrContext::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DataElementClassificationOrContext::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DataElementClassificationOrContext.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DataElementClassificationOrContext::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DataElementClassificationOrContext.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DataElementClassificationOrContext::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DataElementClassificationOrContext.id)
  return id_;
}
inline void DataElementClassificationOrContext::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DataElementClassificationOrContext.id)
}

// .google.fhir.stu3.proto.ClassificationOrContextCode value_code = 3;
inline bool DataElementClassificationOrContext::has_value_code() const {
  return this != internal_default_instance() && value_code_ != NULL;
}
inline const ::google::fhir::stu3::proto::ClassificationOrContextCode& DataElementClassificationOrContext::_internal_value_code() const {
  return *value_code_;
}
inline const ::google::fhir::stu3::proto::ClassificationOrContextCode& DataElementClassificationOrContext::value_code() const {
  const ::google::fhir::stu3::proto::ClassificationOrContextCode* p = value_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DataElementClassificationOrContext.value_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::ClassificationOrContextCode*>(
      &::google::fhir::stu3::proto::_ClassificationOrContextCode_default_instance_);
}
inline ::google::fhir::stu3::proto::ClassificationOrContextCode* DataElementClassificationOrContext::release_value_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DataElementClassificationOrContext.value_code)
  
  ::google::fhir::stu3::proto::ClassificationOrContextCode* temp = value_code_;
  value_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::ClassificationOrContextCode* DataElementClassificationOrContext::mutable_value_code() {
  
  if (value_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::ClassificationOrContextCode>(GetArenaNoVirtual());
    value_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DataElementClassificationOrContext.value_code)
  return value_code_;
}
inline void DataElementClassificationOrContext::set_allocated_value_code(::google::fhir::stu3::proto::ClassificationOrContextCode* value_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_code_);
  }
  if (value_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_code, submessage_arena);
    }
    
  } else {
    
  }
  value_code_ = value_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DataElementClassificationOrContext.value_code)
}

// -------------------------------------------------------------------

// DataElementContactAddress

// .google.fhir.stu3.proto.String id = 1;
inline bool DataElementContactAddress::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DataElementContactAddress::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DataElementContactAddress::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DataElementContactAddress.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DataElementContactAddress::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DataElementContactAddress.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DataElementContactAddress::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DataElementContactAddress.id)
  return id_;
}
inline void DataElementContactAddress::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DataElementContactAddress.id)
}

// .google.fhir.stu3.proto.Address value_address = 3;
inline bool DataElementContactAddress::has_value_address() const {
  return this != internal_default_instance() && value_address_ != NULL;
}
inline const ::google::fhir::stu3::proto::Address& DataElementContactAddress::_internal_value_address() const {
  return *value_address_;
}
inline const ::google::fhir::stu3::proto::Address& DataElementContactAddress::value_address() const {
  const ::google::fhir::stu3::proto::Address* p = value_address_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DataElementContactAddress.value_address)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Address*>(
      &::google::fhir::stu3::proto::_Address_default_instance_);
}
inline ::google::fhir::stu3::proto::Address* DataElementContactAddress::release_value_address() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DataElementContactAddress.value_address)
  
  ::google::fhir::stu3::proto::Address* temp = value_address_;
  value_address_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Address* DataElementContactAddress::mutable_value_address() {
  
  if (value_address_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Address>(GetArenaNoVirtual());
    value_address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DataElementContactAddress.value_address)
  return value_address_;
}
inline void DataElementContactAddress::set_allocated_value_address(::google::fhir::stu3::proto::Address* value_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_address_);
  }
  if (value_address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_address, submessage_arena);
    }
    
  } else {
    
  }
  value_address_ = value_address;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DataElementContactAddress.value_address)
}

// -------------------------------------------------------------------

// DataElementDocumentReference

// .google.fhir.stu3.proto.String id = 1;
inline bool DataElementDocumentReference::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DataElementDocumentReference::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DataElementDocumentReference::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DataElementDocumentReference.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DataElementDocumentReference::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DataElementDocumentReference.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DataElementDocumentReference::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DataElementDocumentReference.id)
  return id_;
}
inline void DataElementDocumentReference::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DataElementDocumentReference.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/DocumentReference"];
inline bool DataElementDocumentReference::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& DataElementDocumentReference::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& DataElementDocumentReference::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DataElementDocumentReference.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* DataElementDocumentReference::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DataElementDocumentReference.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* DataElementDocumentReference::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DataElementDocumentReference.value_reference)
  return value_reference_;
}
inline void DataElementDocumentReference::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DataElementDocumentReference.value_reference)
}

// -------------------------------------------------------------------

// DataElementEffectivePeriod

// .google.fhir.stu3.proto.String id = 1;
inline bool DataElementEffectivePeriod::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DataElementEffectivePeriod::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DataElementEffectivePeriod::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DataElementEffectivePeriod.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DataElementEffectivePeriod::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DataElementEffectivePeriod.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DataElementEffectivePeriod::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DataElementEffectivePeriod.id)
  return id_;
}
inline void DataElementEffectivePeriod::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DataElementEffectivePeriod.id)
}

// .google.fhir.stu3.proto.Period value_period = 3;
inline bool DataElementEffectivePeriod::has_value_period() const {
  return this != internal_default_instance() && value_period_ != NULL;
}
inline const ::google::fhir::stu3::proto::Period& DataElementEffectivePeriod::_internal_value_period() const {
  return *value_period_;
}
inline const ::google::fhir::stu3::proto::Period& DataElementEffectivePeriod::value_period() const {
  const ::google::fhir::stu3::proto::Period* p = value_period_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DataElementEffectivePeriod.value_period)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Period*>(
      &::google::fhir::stu3::proto::_Period_default_instance_);
}
inline ::google::fhir::stu3::proto::Period* DataElementEffectivePeriod::release_value_period() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DataElementEffectivePeriod.value_period)
  
  ::google::fhir::stu3::proto::Period* temp = value_period_;
  value_period_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Period* DataElementEffectivePeriod::mutable_value_period() {
  
  if (value_period_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Period>(GetArenaNoVirtual());
    value_period_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DataElementEffectivePeriod.value_period)
  return value_period_;
}
inline void DataElementEffectivePeriod::set_allocated_value_period(::google::fhir::stu3::proto::Period* value_period) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_period_);
  }
  if (value_period) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_period = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_period, submessage_arena);
    }
    
  } else {
    
  }
  value_period_ = value_period;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DataElementEffectivePeriod.value_period)
}

// -------------------------------------------------------------------

// DataElementIsDataElementConcept

// .google.fhir.stu3.proto.String id = 1;
inline bool DataElementIsDataElementConcept::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DataElementIsDataElementConcept::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DataElementIsDataElementConcept::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DataElementIsDataElementConcept.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DataElementIsDataElementConcept::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DataElementIsDataElementConcept.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DataElementIsDataElementConcept::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DataElementIsDataElementConcept.id)
  return id_;
}
inline void DataElementIsDataElementConcept::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DataElementIsDataElementConcept.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool DataElementIsDataElementConcept::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& DataElementIsDataElementConcept::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& DataElementIsDataElementConcept::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DataElementIsDataElementConcept.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* DataElementIsDataElementConcept::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DataElementIsDataElementConcept.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* DataElementIsDataElementConcept::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DataElementIsDataElementConcept.value_boolean)
  return value_boolean_;
}
inline void DataElementIsDataElementConcept::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DataElementIsDataElementConcept.value_boolean)
}

// -------------------------------------------------------------------

// DataElementRegistryOrg

// .google.fhir.stu3.proto.String id = 1;
inline bool DataElementRegistryOrg::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DataElementRegistryOrg::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DataElementRegistryOrg::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DataElementRegistryOrg.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DataElementRegistryOrg::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DataElementRegistryOrg.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DataElementRegistryOrg::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DataElementRegistryOrg.id)
  return id_;
}
inline void DataElementRegistryOrg::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DataElementRegistryOrg.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Organization"];
inline bool DataElementRegistryOrg::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& DataElementRegistryOrg::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& DataElementRegistryOrg::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DataElementRegistryOrg.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* DataElementRegistryOrg::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DataElementRegistryOrg.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* DataElementRegistryOrg::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DataElementRegistryOrg.value_reference)
  return value_reference_;
}
inline void DataElementRegistryOrg::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DataElementRegistryOrg.value_reference)
}

// -------------------------------------------------------------------

// DataElementSubmitterOrg

// .google.fhir.stu3.proto.String id = 1;
inline bool DataElementSubmitterOrg::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DataElementSubmitterOrg::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DataElementSubmitterOrg::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DataElementSubmitterOrg.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DataElementSubmitterOrg::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DataElementSubmitterOrg.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DataElementSubmitterOrg::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DataElementSubmitterOrg.id)
  return id_;
}
inline void DataElementSubmitterOrg::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DataElementSubmitterOrg.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Organization"];
inline bool DataElementSubmitterOrg::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& DataElementSubmitterOrg::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& DataElementSubmitterOrg::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DataElementSubmitterOrg.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* DataElementSubmitterOrg::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DataElementSubmitterOrg.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* DataElementSubmitterOrg::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DataElementSubmitterOrg.value_reference)
  return value_reference_;
}
inline void DataElementSubmitterOrg::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DataElementSubmitterOrg.value_reference)
}

// -------------------------------------------------------------------

// ElementDefinitionObjectClass

// .google.fhir.stu3.proto.String id = 1;
inline bool ElementDefinitionObjectClass::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionObjectClass::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionObjectClass::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionObjectClass.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionObjectClass::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionObjectClass.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionObjectClass::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionObjectClass.id)
  return id_;
}
inline void ElementDefinitionObjectClass::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionObjectClass.id)
}

// .google.fhir.stu3.proto.Coding value_coding = 3;
inline bool ElementDefinitionObjectClass::has_value_coding() const {
  return this != internal_default_instance() && value_coding_ != NULL;
}
inline const ::google::fhir::stu3::proto::Coding& ElementDefinitionObjectClass::_internal_value_coding() const {
  return *value_coding_;
}
inline const ::google::fhir::stu3::proto::Coding& ElementDefinitionObjectClass::value_coding() const {
  const ::google::fhir::stu3::proto::Coding* p = value_coding_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionObjectClass.value_coding)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Coding*>(
      &::google::fhir::stu3::proto::_Coding_default_instance_);
}
inline ::google::fhir::stu3::proto::Coding* ElementDefinitionObjectClass::release_value_coding() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionObjectClass.value_coding)
  
  ::google::fhir::stu3::proto::Coding* temp = value_coding_;
  value_coding_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Coding* ElementDefinitionObjectClass::mutable_value_coding() {
  
  if (value_coding_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Coding>(GetArenaNoVirtual());
    value_coding_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionObjectClass.value_coding)
  return value_coding_;
}
inline void ElementDefinitionObjectClass::set_allocated_value_coding(::google::fhir::stu3::proto::Coding* value_coding) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_coding_);
  }
  if (value_coding) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_coding = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_coding, submessage_arena);
    }
    
  } else {
    
  }
  value_coding_ = value_coding;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionObjectClass.value_coding)
}

// -------------------------------------------------------------------

// ElementDefinitionObjectClassProperty

// .google.fhir.stu3.proto.String id = 1;
inline bool ElementDefinitionObjectClassProperty::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionObjectClassProperty::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionObjectClassProperty::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionObjectClassProperty.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionObjectClassProperty::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionObjectClassProperty.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionObjectClassProperty::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionObjectClassProperty.id)
  return id_;
}
inline void ElementDefinitionObjectClassProperty::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionObjectClassProperty.id)
}

// .google.fhir.stu3.proto.Coding value_coding = 3;
inline bool ElementDefinitionObjectClassProperty::has_value_coding() const {
  return this != internal_default_instance() && value_coding_ != NULL;
}
inline const ::google::fhir::stu3::proto::Coding& ElementDefinitionObjectClassProperty::_internal_value_coding() const {
  return *value_coding_;
}
inline const ::google::fhir::stu3::proto::Coding& ElementDefinitionObjectClassProperty::value_coding() const {
  const ::google::fhir::stu3::proto::Coding* p = value_coding_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionObjectClassProperty.value_coding)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Coding*>(
      &::google::fhir::stu3::proto::_Coding_default_instance_);
}
inline ::google::fhir::stu3::proto::Coding* ElementDefinitionObjectClassProperty::release_value_coding() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionObjectClassProperty.value_coding)
  
  ::google::fhir::stu3::proto::Coding* temp = value_coding_;
  value_coding_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Coding* ElementDefinitionObjectClassProperty::mutable_value_coding() {
  
  if (value_coding_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Coding>(GetArenaNoVirtual());
    value_coding_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionObjectClassProperty.value_coding)
  return value_coding_;
}
inline void ElementDefinitionObjectClassProperty::set_allocated_value_coding(::google::fhir::stu3::proto::Coding* value_coding) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_coding_);
  }
  if (value_coding) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_coding = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_coding, submessage_arena);
    }
    
  } else {
    
  }
  value_coding_ = value_coding;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionObjectClassProperty.value_coding)
}

// -------------------------------------------------------------------

// PermittedValueConceptmap

// .google.fhir.stu3.proto.String id = 1;
inline bool PermittedValueConceptmap::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& PermittedValueConceptmap::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& PermittedValueConceptmap::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PermittedValueConceptmap.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PermittedValueConceptmap::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PermittedValueConceptmap.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PermittedValueConceptmap::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PermittedValueConceptmap.id)
  return id_;
}
inline void PermittedValueConceptmap::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PermittedValueConceptmap.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ConceptMap"];
inline bool PermittedValueConceptmap::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& PermittedValueConceptmap::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& PermittedValueConceptmap::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PermittedValueConceptmap.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* PermittedValueConceptmap::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PermittedValueConceptmap.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* PermittedValueConceptmap::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PermittedValueConceptmap.value_reference)
  return value_reference_;
}
inline void PermittedValueConceptmap::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PermittedValueConceptmap.value_reference)
}

// -------------------------------------------------------------------

// PermittedValueValueset

// .google.fhir.stu3.proto.String id = 1;
inline bool PermittedValueValueset::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& PermittedValueValueset::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& PermittedValueValueset::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PermittedValueValueset.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PermittedValueValueset::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PermittedValueValueset.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PermittedValueValueset::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PermittedValueValueset.id)
  return id_;
}
inline void PermittedValueValueset::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PermittedValueValueset.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ValueSet"];
inline bool PermittedValueValueset::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& PermittedValueValueset::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& PermittedValueValueset::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PermittedValueValueset.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* PermittedValueValueset::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PermittedValueValueset.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* PermittedValueValueset::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PermittedValueValueset.value_reference)
  return value_reference_;
}
inline void PermittedValueValueset::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PermittedValueValueset.value_reference)
}

// -------------------------------------------------------------------

// AllergyIntoleranceCertainty

// .google.fhir.stu3.proto.String id = 1;
inline bool AllergyIntoleranceCertainty::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceCertainty::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceCertainty::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceCertainty.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceCertainty::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceCertainty.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceCertainty::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceCertainty.id)
  return id_;
}
inline void AllergyIntoleranceCertainty::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceCertainty.id)
}

// .google.fhir.stu3.proto.AllergyIntoleranceCertaintyCode value_code = 3;
inline bool AllergyIntoleranceCertainty::has_value_code() const {
  return this != internal_default_instance() && value_code_ != NULL;
}
inline const ::google::fhir::stu3::proto::AllergyIntoleranceCertaintyCode& AllergyIntoleranceCertainty::_internal_value_code() const {
  return *value_code_;
}
inline const ::google::fhir::stu3::proto::AllergyIntoleranceCertaintyCode& AllergyIntoleranceCertainty::value_code() const {
  const ::google::fhir::stu3::proto::AllergyIntoleranceCertaintyCode* p = value_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceCertainty.value_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::AllergyIntoleranceCertaintyCode*>(
      &::google::fhir::stu3::proto::_AllergyIntoleranceCertaintyCode_default_instance_);
}
inline ::google::fhir::stu3::proto::AllergyIntoleranceCertaintyCode* AllergyIntoleranceCertainty::release_value_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceCertainty.value_code)
  
  ::google::fhir::stu3::proto::AllergyIntoleranceCertaintyCode* temp = value_code_;
  value_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::AllergyIntoleranceCertaintyCode* AllergyIntoleranceCertainty::mutable_value_code() {
  
  if (value_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::AllergyIntoleranceCertaintyCode>(GetArenaNoVirtual());
    value_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceCertainty.value_code)
  return value_code_;
}
inline void AllergyIntoleranceCertainty::set_allocated_value_code(::google::fhir::stu3::proto::AllergyIntoleranceCertaintyCode* value_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_code_);
  }
  if (value_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_code, submessage_arena);
    }
    
  } else {
    
  }
  value_code_ = value_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceCertainty.value_code)
}

// -------------------------------------------------------------------

// AllergyIntoleranceDuration

// .google.fhir.stu3.proto.String id = 1;
inline bool AllergyIntoleranceDuration::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceDuration::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceDuration::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceDuration.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceDuration::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceDuration.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceDuration::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceDuration.id)
  return id_;
}
inline void AllergyIntoleranceDuration::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceDuration.id)
}

// .google.fhir.stu3.proto.Duration value_duration = 3;
inline bool AllergyIntoleranceDuration::has_value_duration() const {
  return this != internal_default_instance() && value_duration_ != NULL;
}
inline const ::google::fhir::stu3::proto::Duration& AllergyIntoleranceDuration::_internal_value_duration() const {
  return *value_duration_;
}
inline const ::google::fhir::stu3::proto::Duration& AllergyIntoleranceDuration::value_duration() const {
  const ::google::fhir::stu3::proto::Duration* p = value_duration_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceDuration.value_duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Duration*>(
      &::google::fhir::stu3::proto::_Duration_default_instance_);
}
inline ::google::fhir::stu3::proto::Duration* AllergyIntoleranceDuration::release_value_duration() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceDuration.value_duration)
  
  ::google::fhir::stu3::proto::Duration* temp = value_duration_;
  value_duration_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Duration* AllergyIntoleranceDuration::mutable_value_duration() {
  
  if (value_duration_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Duration>(GetArenaNoVirtual());
    value_duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceDuration.value_duration)
  return value_duration_;
}
inline void AllergyIntoleranceDuration::set_allocated_value_duration(::google::fhir::stu3::proto::Duration* value_duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_duration_);
  }
  if (value_duration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_duration, submessage_arena);
    }
    
  } else {
    
  }
  value_duration_ = value_duration;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceDuration.value_duration)
}

// -------------------------------------------------------------------

// AllergyIntoleranceReasonRefuted

// .google.fhir.stu3.proto.String id = 1;
inline bool AllergyIntoleranceReasonRefuted::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceReasonRefuted::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceReasonRefuted::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceReasonRefuted.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceReasonRefuted::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceReasonRefuted.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceReasonRefuted::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceReasonRefuted.id)
  return id_;
}
inline void AllergyIntoleranceReasonRefuted::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceReasonRefuted.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool AllergyIntoleranceReasonRefuted::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& AllergyIntoleranceReasonRefuted::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& AllergyIntoleranceReasonRefuted::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceReasonRefuted.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* AllergyIntoleranceReasonRefuted::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceReasonRefuted.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* AllergyIntoleranceReasonRefuted::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceReasonRefuted.value_codeable_concept)
  return value_codeable_concept_;
}
inline void AllergyIntoleranceReasonRefuted::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceReasonRefuted.value_codeable_concept)
}

// -------------------------------------------------------------------

// AllergyIntoleranceResolutionAge

// .google.fhir.stu3.proto.String id = 1;
inline bool AllergyIntoleranceResolutionAge::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceResolutionAge::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceResolutionAge::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceResolutionAge.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceResolutionAge::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceResolutionAge.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceResolutionAge::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceResolutionAge.id)
  return id_;
}
inline void AllergyIntoleranceResolutionAge::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceResolutionAge.id)
}

// .google.fhir.stu3.proto.Age value_age = 3;
inline bool AllergyIntoleranceResolutionAge::has_value_age() const {
  return this != internal_default_instance() && value_age_ != NULL;
}
inline const ::google::fhir::stu3::proto::Age& AllergyIntoleranceResolutionAge::_internal_value_age() const {
  return *value_age_;
}
inline const ::google::fhir::stu3::proto::Age& AllergyIntoleranceResolutionAge::value_age() const {
  const ::google::fhir::stu3::proto::Age* p = value_age_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceResolutionAge.value_age)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Age*>(
      &::google::fhir::stu3::proto::_Age_default_instance_);
}
inline ::google::fhir::stu3::proto::Age* AllergyIntoleranceResolutionAge::release_value_age() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceResolutionAge.value_age)
  
  ::google::fhir::stu3::proto::Age* temp = value_age_;
  value_age_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Age* AllergyIntoleranceResolutionAge::mutable_value_age() {
  
  if (value_age_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Age>(GetArenaNoVirtual());
    value_age_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceResolutionAge.value_age)
  return value_age_;
}
inline void AllergyIntoleranceResolutionAge::set_allocated_value_age(::google::fhir::stu3::proto::Age* value_age) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_age_);
  }
  if (value_age) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_age = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_age, submessage_arena);
    }
    
  } else {
    
  }
  value_age_ = value_age;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceResolutionAge.value_age)
}

// -------------------------------------------------------------------

// AllergyIntoleranceSubstanceExposureRisk

// .google.fhir.stu3.proto.String id = 1;
inline bool AllergyIntoleranceSubstanceExposureRisk::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceSubstanceExposureRisk::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceSubstanceExposureRisk::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceSubstanceExposureRisk::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceSubstanceExposureRisk::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk.id)
  return id_;
}
inline void AllergyIntoleranceSubstanceExposureRisk::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int AllergyIntoleranceSubstanceExposureRisk::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* AllergyIntoleranceSubstanceExposureRisk::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
AllergyIntoleranceSubstanceExposureRisk::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& AllergyIntoleranceSubstanceExposureRisk::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* AllergyIntoleranceSubstanceExposureRisk::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
AllergyIntoleranceSubstanceExposureRisk::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk.extension)
  return extension_;
}

// .google.fhir.stu3.proto.CodeableConcept substance = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool AllergyIntoleranceSubstanceExposureRisk::has_substance() const {
  return this != internal_default_instance() && substance_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& AllergyIntoleranceSubstanceExposureRisk::_internal_substance() const {
  return *substance_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& AllergyIntoleranceSubstanceExposureRisk::substance() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = substance_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk.substance)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* AllergyIntoleranceSubstanceExposureRisk::release_substance() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk.substance)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = substance_;
  substance_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* AllergyIntoleranceSubstanceExposureRisk::mutable_substance() {
  
  if (substance_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    substance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk.substance)
  return substance_;
}
inline void AllergyIntoleranceSubstanceExposureRisk::set_allocated_substance(::google::fhir::stu3::proto::CodeableConcept* substance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(substance_);
  }
  if (substance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      substance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, substance, submessage_arena);
    }
    
  } else {
    
  }
  substance_ = substance;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk.substance)
}

// .google.fhir.stu3.proto.CodeableConcept exposure_risk = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool AllergyIntoleranceSubstanceExposureRisk::has_exposure_risk() const {
  return this != internal_default_instance() && exposure_risk_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& AllergyIntoleranceSubstanceExposureRisk::_internal_exposure_risk() const {
  return *exposure_risk_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& AllergyIntoleranceSubstanceExposureRisk::exposure_risk() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = exposure_risk_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk.exposure_risk)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* AllergyIntoleranceSubstanceExposureRisk::release_exposure_risk() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk.exposure_risk)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = exposure_risk_;
  exposure_risk_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* AllergyIntoleranceSubstanceExposureRisk::mutable_exposure_risk() {
  
  if (exposure_risk_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    exposure_risk_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk.exposure_risk)
  return exposure_risk_;
}
inline void AllergyIntoleranceSubstanceExposureRisk::set_allocated_exposure_risk(::google::fhir::stu3::proto::CodeableConcept* exposure_risk) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exposure_risk_);
  }
  if (exposure_risk) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exposure_risk = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exposure_risk, submessage_arena);
    }
    
  } else {
    
  }
  exposure_risk_ = exposure_risk;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk.exposure_risk)
}

// -------------------------------------------------------------------

// AuditEventAccession

// .google.fhir.stu3.proto.String id = 1;
inline bool AuditEventAccession::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AuditEventAccession::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AuditEventAccession::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AuditEventAccession.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AuditEventAccession::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AuditEventAccession.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AuditEventAccession::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AuditEventAccession.id)
  return id_;
}
inline void AuditEventAccession::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AuditEventAccession.id)
}

// .google.fhir.stu3.proto.Identifier value_identifier = 3;
inline bool AuditEventAccession::has_value_identifier() const {
  return this != internal_default_instance() && value_identifier_ != NULL;
}
inline const ::google::fhir::stu3::proto::Identifier& AuditEventAccession::_internal_value_identifier() const {
  return *value_identifier_;
}
inline const ::google::fhir::stu3::proto::Identifier& AuditEventAccession::value_identifier() const {
  const ::google::fhir::stu3::proto::Identifier* p = value_identifier_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AuditEventAccession.value_identifier)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Identifier*>(
      &::google::fhir::stu3::proto::_Identifier_default_instance_);
}
inline ::google::fhir::stu3::proto::Identifier* AuditEventAccession::release_value_identifier() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AuditEventAccession.value_identifier)
  
  ::google::fhir::stu3::proto::Identifier* temp = value_identifier_;
  value_identifier_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Identifier* AuditEventAccession::mutable_value_identifier() {
  
  if (value_identifier_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Identifier>(GetArenaNoVirtual());
    value_identifier_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AuditEventAccession.value_identifier)
  return value_identifier_;
}
inline void AuditEventAccession::set_allocated_value_identifier(::google::fhir::stu3::proto::Identifier* value_identifier) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_identifier_);
  }
  if (value_identifier) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_identifier = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_identifier, submessage_arena);
    }
    
  } else {
    
  }
  value_identifier_ = value_identifier;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AuditEventAccession.value_identifier)
}

// -------------------------------------------------------------------

// AuditEventAnonymized

// .google.fhir.stu3.proto.String id = 1;
inline bool AuditEventAnonymized::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AuditEventAnonymized::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AuditEventAnonymized::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AuditEventAnonymized.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AuditEventAnonymized::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AuditEventAnonymized.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AuditEventAnonymized::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AuditEventAnonymized.id)
  return id_;
}
inline void AuditEventAnonymized::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AuditEventAnonymized.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool AuditEventAnonymized::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& AuditEventAnonymized::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& AuditEventAnonymized::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AuditEventAnonymized.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* AuditEventAnonymized::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AuditEventAnonymized.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* AuditEventAnonymized::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AuditEventAnonymized.value_boolean)
  return value_boolean_;
}
inline void AuditEventAnonymized::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AuditEventAnonymized.value_boolean)
}

// -------------------------------------------------------------------

// AuditEventEncrypted

// .google.fhir.stu3.proto.String id = 1;
inline bool AuditEventEncrypted::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AuditEventEncrypted::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AuditEventEncrypted::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AuditEventEncrypted.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AuditEventEncrypted::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AuditEventEncrypted.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AuditEventEncrypted::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AuditEventEncrypted.id)
  return id_;
}
inline void AuditEventEncrypted::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AuditEventEncrypted.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool AuditEventEncrypted::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& AuditEventEncrypted::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& AuditEventEncrypted::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AuditEventEncrypted.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* AuditEventEncrypted::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AuditEventEncrypted.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* AuditEventEncrypted::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AuditEventEncrypted.value_boolean)
  return value_boolean_;
}
inline void AuditEventEncrypted::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AuditEventEncrypted.value_boolean)
}

// -------------------------------------------------------------------

// AuditEventInstance

// .google.fhir.stu3.proto.String id = 1;
inline bool AuditEventInstance::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AuditEventInstance::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AuditEventInstance::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AuditEventInstance.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AuditEventInstance::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AuditEventInstance.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AuditEventInstance::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AuditEventInstance.id)
  return id_;
}
inline void AuditEventInstance::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AuditEventInstance.id)
}

// .google.fhir.stu3.proto.Identifier value_identifier = 3;
inline bool AuditEventInstance::has_value_identifier() const {
  return this != internal_default_instance() && value_identifier_ != NULL;
}
inline const ::google::fhir::stu3::proto::Identifier& AuditEventInstance::_internal_value_identifier() const {
  return *value_identifier_;
}
inline const ::google::fhir::stu3::proto::Identifier& AuditEventInstance::value_identifier() const {
  const ::google::fhir::stu3::proto::Identifier* p = value_identifier_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AuditEventInstance.value_identifier)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Identifier*>(
      &::google::fhir::stu3::proto::_Identifier_default_instance_);
}
inline ::google::fhir::stu3::proto::Identifier* AuditEventInstance::release_value_identifier() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AuditEventInstance.value_identifier)
  
  ::google::fhir::stu3::proto::Identifier* temp = value_identifier_;
  value_identifier_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Identifier* AuditEventInstance::mutable_value_identifier() {
  
  if (value_identifier_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Identifier>(GetArenaNoVirtual());
    value_identifier_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AuditEventInstance.value_identifier)
  return value_identifier_;
}
inline void AuditEventInstance::set_allocated_value_identifier(::google::fhir::stu3::proto::Identifier* value_identifier) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_identifier_);
  }
  if (value_identifier) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_identifier = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_identifier, submessage_arena);
    }
    
  } else {
    
  }
  value_identifier_ = value_identifier;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AuditEventInstance.value_identifier)
}

// -------------------------------------------------------------------

// AuditEventMPPS

// .google.fhir.stu3.proto.String id = 1;
inline bool AuditEventMPPS::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AuditEventMPPS::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AuditEventMPPS::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AuditEventMPPS.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AuditEventMPPS::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AuditEventMPPS.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AuditEventMPPS::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AuditEventMPPS.id)
  return id_;
}
inline void AuditEventMPPS::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AuditEventMPPS.id)
}

// .google.fhir.stu3.proto.Identifier value_identifier = 3;
inline bool AuditEventMPPS::has_value_identifier() const {
  return this != internal_default_instance() && value_identifier_ != NULL;
}
inline const ::google::fhir::stu3::proto::Identifier& AuditEventMPPS::_internal_value_identifier() const {
  return *value_identifier_;
}
inline const ::google::fhir::stu3::proto::Identifier& AuditEventMPPS::value_identifier() const {
  const ::google::fhir::stu3::proto::Identifier* p = value_identifier_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AuditEventMPPS.value_identifier)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Identifier*>(
      &::google::fhir::stu3::proto::_Identifier_default_instance_);
}
inline ::google::fhir::stu3::proto::Identifier* AuditEventMPPS::release_value_identifier() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AuditEventMPPS.value_identifier)
  
  ::google::fhir::stu3::proto::Identifier* temp = value_identifier_;
  value_identifier_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Identifier* AuditEventMPPS::mutable_value_identifier() {
  
  if (value_identifier_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Identifier>(GetArenaNoVirtual());
    value_identifier_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AuditEventMPPS.value_identifier)
  return value_identifier_;
}
inline void AuditEventMPPS::set_allocated_value_identifier(::google::fhir::stu3::proto::Identifier* value_identifier) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_identifier_);
  }
  if (value_identifier) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_identifier = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_identifier, submessage_arena);
    }
    
  } else {
    
  }
  value_identifier_ = value_identifier;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AuditEventMPPS.value_identifier)
}

// -------------------------------------------------------------------

// AuditEventNumberOfInstances

// .google.fhir.stu3.proto.String id = 1;
inline bool AuditEventNumberOfInstances::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AuditEventNumberOfInstances::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AuditEventNumberOfInstances::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AuditEventNumberOfInstances.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AuditEventNumberOfInstances::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AuditEventNumberOfInstances.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AuditEventNumberOfInstances::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AuditEventNumberOfInstances.id)
  return id_;
}
inline void AuditEventNumberOfInstances::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AuditEventNumberOfInstances.id)
}

// .google.fhir.stu3.proto.Integer value_integer = 3;
inline bool AuditEventNumberOfInstances::has_value_integer() const {
  return this != internal_default_instance() && value_integer_ != NULL;
}
inline const ::google::fhir::stu3::proto::Integer& AuditEventNumberOfInstances::_internal_value_integer() const {
  return *value_integer_;
}
inline const ::google::fhir::stu3::proto::Integer& AuditEventNumberOfInstances::value_integer() const {
  const ::google::fhir::stu3::proto::Integer* p = value_integer_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AuditEventNumberOfInstances.value_integer)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Integer*>(
      &::google::fhir::stu3::proto::_Integer_default_instance_);
}
inline ::google::fhir::stu3::proto::Integer* AuditEventNumberOfInstances::release_value_integer() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AuditEventNumberOfInstances.value_integer)
  
  ::google::fhir::stu3::proto::Integer* temp = value_integer_;
  value_integer_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Integer* AuditEventNumberOfInstances::mutable_value_integer() {
  
  if (value_integer_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Integer>(GetArenaNoVirtual());
    value_integer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AuditEventNumberOfInstances.value_integer)
  return value_integer_;
}
inline void AuditEventNumberOfInstances::set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_integer_);
  }
  if (value_integer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_integer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_integer, submessage_arena);
    }
    
  } else {
    
  }
  value_integer_ = value_integer;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AuditEventNumberOfInstances.value_integer)
}

// -------------------------------------------------------------------

// AuditEventParticipantObjectContainsStudy

// .google.fhir.stu3.proto.String id = 1;
inline bool AuditEventParticipantObjectContainsStudy::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AuditEventParticipantObjectContainsStudy::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AuditEventParticipantObjectContainsStudy::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AuditEventParticipantObjectContainsStudy.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AuditEventParticipantObjectContainsStudy::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AuditEventParticipantObjectContainsStudy.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AuditEventParticipantObjectContainsStudy::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AuditEventParticipantObjectContainsStudy.id)
  return id_;
}
inline void AuditEventParticipantObjectContainsStudy::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AuditEventParticipantObjectContainsStudy.id)
}

// .google.fhir.stu3.proto.Identifier value_identifier = 3;
inline bool AuditEventParticipantObjectContainsStudy::has_value_identifier() const {
  return this != internal_default_instance() && value_identifier_ != NULL;
}
inline const ::google::fhir::stu3::proto::Identifier& AuditEventParticipantObjectContainsStudy::_internal_value_identifier() const {
  return *value_identifier_;
}
inline const ::google::fhir::stu3::proto::Identifier& AuditEventParticipantObjectContainsStudy::value_identifier() const {
  const ::google::fhir::stu3::proto::Identifier* p = value_identifier_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AuditEventParticipantObjectContainsStudy.value_identifier)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Identifier*>(
      &::google::fhir::stu3::proto::_Identifier_default_instance_);
}
inline ::google::fhir::stu3::proto::Identifier* AuditEventParticipantObjectContainsStudy::release_value_identifier() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AuditEventParticipantObjectContainsStudy.value_identifier)
  
  ::google::fhir::stu3::proto::Identifier* temp = value_identifier_;
  value_identifier_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Identifier* AuditEventParticipantObjectContainsStudy::mutable_value_identifier() {
  
  if (value_identifier_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Identifier>(GetArenaNoVirtual());
    value_identifier_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AuditEventParticipantObjectContainsStudy.value_identifier)
  return value_identifier_;
}
inline void AuditEventParticipantObjectContainsStudy::set_allocated_value_identifier(::google::fhir::stu3::proto::Identifier* value_identifier) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_identifier_);
  }
  if (value_identifier) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_identifier = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_identifier, submessage_arena);
    }
    
  } else {
    
  }
  value_identifier_ = value_identifier;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AuditEventParticipantObjectContainsStudy.value_identifier)
}

// -------------------------------------------------------------------

// AuditEventSOPClass

// .google.fhir.stu3.proto.String id = 1;
inline bool AuditEventSOPClass::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AuditEventSOPClass::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AuditEventSOPClass::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AuditEventSOPClass.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AuditEventSOPClass::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AuditEventSOPClass.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AuditEventSOPClass::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AuditEventSOPClass.id)
  return id_;
}
inline void AuditEventSOPClass::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AuditEventSOPClass.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ImagingStudy"];
inline bool AuditEventSOPClass::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& AuditEventSOPClass::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& AuditEventSOPClass::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AuditEventSOPClass.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* AuditEventSOPClass::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AuditEventSOPClass.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* AuditEventSOPClass::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AuditEventSOPClass.value_reference)
  return value_reference_;
}
inline void AuditEventSOPClass::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AuditEventSOPClass.value_reference)
}

// -------------------------------------------------------------------

// PatientBirthPlace

// .google.fhir.stu3.proto.String id = 1;
inline bool PatientBirthPlace::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& PatientBirthPlace::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& PatientBirthPlace::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientBirthPlace.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PatientBirthPlace::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientBirthPlace.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PatientBirthPlace::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientBirthPlace.id)
  return id_;
}
inline void PatientBirthPlace::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientBirthPlace.id)
}

// .google.fhir.stu3.proto.Address value_address = 3;
inline bool PatientBirthPlace::has_value_address() const {
  return this != internal_default_instance() && value_address_ != NULL;
}
inline const ::google::fhir::stu3::proto::Address& PatientBirthPlace::_internal_value_address() const {
  return *value_address_;
}
inline const ::google::fhir::stu3::proto::Address& PatientBirthPlace::value_address() const {
  const ::google::fhir::stu3::proto::Address* p = value_address_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientBirthPlace.value_address)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Address*>(
      &::google::fhir::stu3::proto::_Address_default_instance_);
}
inline ::google::fhir::stu3::proto::Address* PatientBirthPlace::release_value_address() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientBirthPlace.value_address)
  
  ::google::fhir::stu3::proto::Address* temp = value_address_;
  value_address_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Address* PatientBirthPlace::mutable_value_address() {
  
  if (value_address_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Address>(GetArenaNoVirtual());
    value_address_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientBirthPlace.value_address)
  return value_address_;
}
inline void PatientBirthPlace::set_allocated_value_address(::google::fhir::stu3::proto::Address* value_address) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_address_);
  }
  if (value_address) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_address = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_address, submessage_arena);
    }
    
  } else {
    
  }
  value_address_ = value_address;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientBirthPlace.value_address)
}

// -------------------------------------------------------------------

// BodySiteInstance

// .google.fhir.stu3.proto.String id = 1;
inline bool BodySiteInstance::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& BodySiteInstance::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& BodySiteInstance::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BodySiteInstance.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* BodySiteInstance::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BodySiteInstance.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* BodySiteInstance::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BodySiteInstance.id)
  return id_;
}
inline void BodySiteInstance::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BodySiteInstance.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/BodySite"];
inline bool BodySiteInstance::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& BodySiteInstance::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& BodySiteInstance::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BodySiteInstance.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* BodySiteInstance::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BodySiteInstance.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* BodySiteInstance::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BodySiteInstance.value_reference)
  return value_reference_;
}
inline void BodySiteInstance::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BodySiteInstance.value_reference)
}

// -------------------------------------------------------------------

// CapabilityStatementExpectation

// .google.fhir.stu3.proto.String id = 1;
inline bool CapabilityStatementExpectation::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CapabilityStatementExpectation::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CapabilityStatementExpectation::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CapabilityStatementExpectation.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CapabilityStatementExpectation::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CapabilityStatementExpectation.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CapabilityStatementExpectation::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CapabilityStatementExpectation.id)
  return id_;
}
inline void CapabilityStatementExpectation::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CapabilityStatementExpectation.id)
}

// .google.fhir.stu3.proto.ConformanceExpectationCode value_code = 3;
inline bool CapabilityStatementExpectation::has_value_code() const {
  return this != internal_default_instance() && value_code_ != NULL;
}
inline const ::google::fhir::stu3::proto::ConformanceExpectationCode& CapabilityStatementExpectation::_internal_value_code() const {
  return *value_code_;
}
inline const ::google::fhir::stu3::proto::ConformanceExpectationCode& CapabilityStatementExpectation::value_code() const {
  const ::google::fhir::stu3::proto::ConformanceExpectationCode* p = value_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CapabilityStatementExpectation.value_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::ConformanceExpectationCode*>(
      &::google::fhir::stu3::proto::_ConformanceExpectationCode_default_instance_);
}
inline ::google::fhir::stu3::proto::ConformanceExpectationCode* CapabilityStatementExpectation::release_value_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CapabilityStatementExpectation.value_code)
  
  ::google::fhir::stu3::proto::ConformanceExpectationCode* temp = value_code_;
  value_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::ConformanceExpectationCode* CapabilityStatementExpectation::mutable_value_code() {
  
  if (value_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::ConformanceExpectationCode>(GetArenaNoVirtual());
    value_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CapabilityStatementExpectation.value_code)
  return value_code_;
}
inline void CapabilityStatementExpectation::set_allocated_value_code(::google::fhir::stu3::proto::ConformanceExpectationCode* value_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_code_);
  }
  if (value_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_code, submessage_arena);
    }
    
  } else {
    
  }
  value_code_ = value_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CapabilityStatementExpectation.value_code)
}

// -------------------------------------------------------------------

// CapabilityStatementProhibited

// .google.fhir.stu3.proto.String id = 1;
inline bool CapabilityStatementProhibited::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CapabilityStatementProhibited::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CapabilityStatementProhibited::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CapabilityStatementProhibited.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CapabilityStatementProhibited::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CapabilityStatementProhibited.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CapabilityStatementProhibited::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CapabilityStatementProhibited.id)
  return id_;
}
inline void CapabilityStatementProhibited::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CapabilityStatementProhibited.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool CapabilityStatementProhibited::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& CapabilityStatementProhibited::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& CapabilityStatementProhibited::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CapabilityStatementProhibited.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* CapabilityStatementProhibited::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CapabilityStatementProhibited.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* CapabilityStatementProhibited::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CapabilityStatementProhibited.value_boolean)
  return value_boolean_;
}
inline void CapabilityStatementProhibited::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CapabilityStatementProhibited.value_boolean)
}

// -------------------------------------------------------------------

// CapabilityStatementSearchParameterCombination

// .google.fhir.stu3.proto.String id = 1;
inline bool CapabilityStatementSearchParameterCombination::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CapabilityStatementSearchParameterCombination::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CapabilityStatementSearchParameterCombination::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CapabilityStatementSearchParameterCombination::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CapabilityStatementSearchParameterCombination::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.id)
  return id_;
}
inline void CapabilityStatementSearchParameterCombination::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int CapabilityStatementSearchParameterCombination::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* CapabilityStatementSearchParameterCombination::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
CapabilityStatementSearchParameterCombination::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& CapabilityStatementSearchParameterCombination::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* CapabilityStatementSearchParameterCombination::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
CapabilityStatementSearchParameterCombination::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.extension)
  return extension_;
}

// repeated .google.fhir.stu3.proto.String required = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline int CapabilityStatementSearchParameterCombination::required_size() const {
  return required_.size();
}
inline ::google::fhir::stu3::proto::String* CapabilityStatementSearchParameterCombination::mutable_required(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.required)
  return required_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >*
CapabilityStatementSearchParameterCombination::mutable_required() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.required)
  return &required_;
}
inline const ::google::fhir::stu3::proto::String& CapabilityStatementSearchParameterCombination::required(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.required)
  return required_.Get(index);
}
inline ::google::fhir::stu3::proto::String* CapabilityStatementSearchParameterCombination::add_required() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.required)
  return required_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >&
CapabilityStatementSearchParameterCombination::required() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.required)
  return required_;
}

// repeated .google.fhir.stu3.proto.String optional = 5;
inline int CapabilityStatementSearchParameterCombination::optional_size() const {
  return optional_.size();
}
inline ::google::fhir::stu3::proto::String* CapabilityStatementSearchParameterCombination::mutable_optional(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.optional)
  return optional_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >*
CapabilityStatementSearchParameterCombination::mutable_optional() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.optional)
  return &optional_;
}
inline const ::google::fhir::stu3::proto::String& CapabilityStatementSearchParameterCombination::optional(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.optional)
  return optional_.Get(index);
}
inline ::google::fhir::stu3::proto::String* CapabilityStatementSearchParameterCombination::add_optional() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.optional)
  return optional_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >&
CapabilityStatementSearchParameterCombination::optional() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination.optional)
  return optional_;
}

// -------------------------------------------------------------------

// CapabilityStatementSupportedSystem

// .google.fhir.stu3.proto.String id = 1;
inline bool CapabilityStatementSupportedSystem::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CapabilityStatementSupportedSystem::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CapabilityStatementSupportedSystem::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CapabilityStatementSupportedSystem.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CapabilityStatementSupportedSystem::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CapabilityStatementSupportedSystem.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CapabilityStatementSupportedSystem::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CapabilityStatementSupportedSystem.id)
  return id_;
}
inline void CapabilityStatementSupportedSystem::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CapabilityStatementSupportedSystem.id)
}

// .google.fhir.stu3.proto.Uri value_uri = 3;
inline bool CapabilityStatementSupportedSystem::has_value_uri() const {
  return this != internal_default_instance() && value_uri_ != NULL;
}
inline const ::google::fhir::stu3::proto::Uri& CapabilityStatementSupportedSystem::_internal_value_uri() const {
  return *value_uri_;
}
inline const ::google::fhir::stu3::proto::Uri& CapabilityStatementSupportedSystem::value_uri() const {
  const ::google::fhir::stu3::proto::Uri* p = value_uri_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CapabilityStatementSupportedSystem.value_uri)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* CapabilityStatementSupportedSystem::release_value_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CapabilityStatementSupportedSystem.value_uri)
  
  ::google::fhir::stu3::proto::Uri* temp = value_uri_;
  value_uri_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* CapabilityStatementSupportedSystem::mutable_value_uri() {
  
  if (value_uri_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    value_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CapabilityStatementSupportedSystem.value_uri)
  return value_uri_;
}
inline void CapabilityStatementSupportedSystem::set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_uri_);
  }
  if (value_uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_uri, submessage_arena);
    }
    
  } else {
    
  }
  value_uri_ = value_uri;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CapabilityStatementSupportedSystem.value_uri)
}

// -------------------------------------------------------------------

// CapabilityStatementWebsocket

// .google.fhir.stu3.proto.String id = 1;
inline bool CapabilityStatementWebsocket::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CapabilityStatementWebsocket::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CapabilityStatementWebsocket::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CapabilityStatementWebsocket.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CapabilityStatementWebsocket::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CapabilityStatementWebsocket.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CapabilityStatementWebsocket::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CapabilityStatementWebsocket.id)
  return id_;
}
inline void CapabilityStatementWebsocket::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CapabilityStatementWebsocket.id)
}

// .google.fhir.stu3.proto.Uri value_uri = 3;
inline bool CapabilityStatementWebsocket::has_value_uri() const {
  return this != internal_default_instance() && value_uri_ != NULL;
}
inline const ::google::fhir::stu3::proto::Uri& CapabilityStatementWebsocket::_internal_value_uri() const {
  return *value_uri_;
}
inline const ::google::fhir::stu3::proto::Uri& CapabilityStatementWebsocket::value_uri() const {
  const ::google::fhir::stu3::proto::Uri* p = value_uri_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CapabilityStatementWebsocket.value_uri)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* CapabilityStatementWebsocket::release_value_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CapabilityStatementWebsocket.value_uri)
  
  ::google::fhir::stu3::proto::Uri* temp = value_uri_;
  value_uri_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* CapabilityStatementWebsocket::mutable_value_uri() {
  
  if (value_uri_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    value_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CapabilityStatementWebsocket.value_uri)
  return value_uri_;
}
inline void CapabilityStatementWebsocket::set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_uri_);
  }
  if (value_uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_uri, submessage_arena);
    }
    
  } else {
    
  }
  value_uri_ = value_uri;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CapabilityStatementWebsocket.value_uri)
}

// -------------------------------------------------------------------

// CarePlanActivityTitle

// .google.fhir.stu3.proto.String id = 1;
inline bool CarePlanActivityTitle::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CarePlanActivityTitle::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CarePlanActivityTitle::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CarePlanActivityTitle.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CarePlanActivityTitle::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CarePlanActivityTitle.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CarePlanActivityTitle::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CarePlanActivityTitle.id)
  return id_;
}
inline void CarePlanActivityTitle::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CarePlanActivityTitle.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool CarePlanActivityTitle::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CarePlanActivityTitle::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& CarePlanActivityTitle::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CarePlanActivityTitle.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CarePlanActivityTitle::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CarePlanActivityTitle.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CarePlanActivityTitle::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CarePlanActivityTitle.value_string)
  return value_string_;
}
inline void CarePlanActivityTitle::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CarePlanActivityTitle.value_string)
}

// -------------------------------------------------------------------

// CodeSystemAuthor

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeSystemAuthor::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemAuthor::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemAuthor::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemAuthor.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemAuthor::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemAuthor.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemAuthor::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemAuthor.id)
  return id_;
}
inline void CodeSystemAuthor::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemAuthor.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool CodeSystemAuthor::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemAuthor::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemAuthor::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemAuthor.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemAuthor::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemAuthor.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemAuthor::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemAuthor.value_string)
  return value_string_;
}
inline void CodeSystemAuthor::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemAuthor.value_string)
}

// -------------------------------------------------------------------

// CodeSystemComment

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeSystemComment::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemComment::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemComment::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemComment.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemComment::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemComment.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemComment::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemComment.id)
  return id_;
}
inline void CodeSystemComment::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemComment.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int CodeSystemComment::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* CodeSystemComment::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemComment.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
CodeSystemComment::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.CodeSystemComment.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& CodeSystemComment::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemComment.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* CodeSystemComment::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.CodeSystemComment.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
CodeSystemComment::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.CodeSystemComment.extension)
  return extension_;
}

// .google.fhir.stu3.proto.String content = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool CodeSystemComment::has_content() const {
  return this != internal_default_instance() && content_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemComment::_internal_content() const {
  return *content_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemComment::content() const {
  const ::google::fhir::stu3::proto::String* p = content_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemComment.content)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemComment::release_content() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemComment.content)
  
  ::google::fhir::stu3::proto::String* temp = content_;
  content_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemComment::mutable_content() {
  
  if (content_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    content_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemComment.content)
  return content_;
}
inline void CodeSystemComment::set_allocated_content(::google::fhir::stu3::proto::String* content) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(content_);
  }
  if (content) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      content = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, content, submessage_arena);
    }
    
  } else {
    
  }
  content_ = content;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemComment.content)
}

// .google.fhir.stu3.proto.Instant timestamp = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool CodeSystemComment::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::google::fhir::stu3::proto::Instant& CodeSystemComment::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::google::fhir::stu3::proto::Instant& CodeSystemComment::timestamp() const {
  const ::google::fhir::stu3::proto::Instant* p = timestamp_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemComment.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Instant*>(
      &::google::fhir::stu3::proto::_Instant_default_instance_);
}
inline ::google::fhir::stu3::proto::Instant* CodeSystemComment::release_timestamp() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemComment.timestamp)
  
  ::google::fhir::stu3::proto::Instant* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Instant* CodeSystemComment::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Instant>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemComment.timestamp)
  return timestamp_;
}
inline void CodeSystemComment::set_allocated_timestamp(::google::fhir::stu3::proto::Instant* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemComment.timestamp)
}

// -------------------------------------------------------------------

// CodeSystemComments

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeSystemComments::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemComments::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemComments::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemComments.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemComments::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemComments.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemComments::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemComments.id)
  return id_;
}
inline void CodeSystemComments::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemComments.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool CodeSystemComments::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemComments::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemComments::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemComments.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemComments::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemComments.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemComments::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemComments.value_string)
  return value_string_;
}
inline void CodeSystemComments::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemComments.value_string)
}

// -------------------------------------------------------------------

// CodeSystemConceptOrder

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeSystemConceptOrder::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemConceptOrder::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemConceptOrder::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemConceptOrder.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemConceptOrder::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemConceptOrder.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemConceptOrder::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemConceptOrder.id)
  return id_;
}
inline void CodeSystemConceptOrder::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemConceptOrder.id)
}

// .google.fhir.stu3.proto.Integer value_integer = 3;
inline bool CodeSystemConceptOrder::has_value_integer() const {
  return this != internal_default_instance() && value_integer_ != NULL;
}
inline const ::google::fhir::stu3::proto::Integer& CodeSystemConceptOrder::_internal_value_integer() const {
  return *value_integer_;
}
inline const ::google::fhir::stu3::proto::Integer& CodeSystemConceptOrder::value_integer() const {
  const ::google::fhir::stu3::proto::Integer* p = value_integer_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemConceptOrder.value_integer)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Integer*>(
      &::google::fhir::stu3::proto::_Integer_default_instance_);
}
inline ::google::fhir::stu3::proto::Integer* CodeSystemConceptOrder::release_value_integer() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemConceptOrder.value_integer)
  
  ::google::fhir::stu3::proto::Integer* temp = value_integer_;
  value_integer_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Integer* CodeSystemConceptOrder::mutable_value_integer() {
  
  if (value_integer_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Integer>(GetArenaNoVirtual());
    value_integer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemConceptOrder.value_integer)
  return value_integer_;
}
inline void CodeSystemConceptOrder::set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_integer_);
  }
  if (value_integer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_integer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_integer, submessage_arena);
    }
    
  } else {
    
  }
  value_integer_ = value_integer;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemConceptOrder.value_integer)
}

// -------------------------------------------------------------------

// CodeSystemDeprecated

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeSystemDeprecated::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemDeprecated::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemDeprecated::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemDeprecated.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemDeprecated::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemDeprecated.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemDeprecated::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemDeprecated.id)
  return id_;
}
inline void CodeSystemDeprecated::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemDeprecated.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool CodeSystemDeprecated::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& CodeSystemDeprecated::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& CodeSystemDeprecated::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemDeprecated.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* CodeSystemDeprecated::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemDeprecated.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* CodeSystemDeprecated::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemDeprecated.value_boolean)
  return value_boolean_;
}
inline void CodeSystemDeprecated::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemDeprecated.value_boolean)
}

// -------------------------------------------------------------------

// CodeSystemEffectiveDate

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeSystemEffectiveDate::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemEffectiveDate::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemEffectiveDate::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemEffectiveDate.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemEffectiveDate::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemEffectiveDate.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemEffectiveDate::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemEffectiveDate.id)
  return id_;
}
inline void CodeSystemEffectiveDate::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemEffectiveDate.id)
}

// .google.fhir.stu3.proto.Date value_date = 3;
inline bool CodeSystemEffectiveDate::has_value_date() const {
  return this != internal_default_instance() && value_date_ != NULL;
}
inline const ::google::fhir::stu3::proto::Date& CodeSystemEffectiveDate::_internal_value_date() const {
  return *value_date_;
}
inline const ::google::fhir::stu3::proto::Date& CodeSystemEffectiveDate::value_date() const {
  const ::google::fhir::stu3::proto::Date* p = value_date_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemEffectiveDate.value_date)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Date*>(
      &::google::fhir::stu3::proto::_Date_default_instance_);
}
inline ::google::fhir::stu3::proto::Date* CodeSystemEffectiveDate::release_value_date() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemEffectiveDate.value_date)
  
  ::google::fhir::stu3::proto::Date* temp = value_date_;
  value_date_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Date* CodeSystemEffectiveDate::mutable_value_date() {
  
  if (value_date_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Date>(GetArenaNoVirtual());
    value_date_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemEffectiveDate.value_date)
  return value_date_;
}
inline void CodeSystemEffectiveDate::set_allocated_value_date(::google::fhir::stu3::proto::Date* value_date) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_date_);
  }
  if (value_date) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_date = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_date, submessage_arena);
    }
    
  } else {
    
  }
  value_date_ = value_date;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemEffectiveDate.value_date)
}

// -------------------------------------------------------------------

// CodeSystemExpirationDate

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeSystemExpirationDate::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemExpirationDate::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemExpirationDate::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemExpirationDate.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemExpirationDate::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemExpirationDate.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemExpirationDate::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemExpirationDate.id)
  return id_;
}
inline void CodeSystemExpirationDate::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemExpirationDate.id)
}

// .google.fhir.stu3.proto.Date value_date = 3;
inline bool CodeSystemExpirationDate::has_value_date() const {
  return this != internal_default_instance() && value_date_ != NULL;
}
inline const ::google::fhir::stu3::proto::Date& CodeSystemExpirationDate::_internal_value_date() const {
  return *value_date_;
}
inline const ::google::fhir::stu3::proto::Date& CodeSystemExpirationDate::value_date() const {
  const ::google::fhir::stu3::proto::Date* p = value_date_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemExpirationDate.value_date)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Date*>(
      &::google::fhir::stu3::proto::_Date_default_instance_);
}
inline ::google::fhir::stu3::proto::Date* CodeSystemExpirationDate::release_value_date() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemExpirationDate.value_date)
  
  ::google::fhir::stu3::proto::Date* temp = value_date_;
  value_date_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Date* CodeSystemExpirationDate::mutable_value_date() {
  
  if (value_date_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Date>(GetArenaNoVirtual());
    value_date_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemExpirationDate.value_date)
  return value_date_;
}
inline void CodeSystemExpirationDate::set_allocated_value_date(::google::fhir::stu3::proto::Date* value_date) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_date_);
  }
  if (value_date) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_date = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_date, submessage_arena);
    }
    
  } else {
    
  }
  value_date_ = value_date;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemExpirationDate.value_date)
}

// -------------------------------------------------------------------

// CodeSystemHistory_Revision

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeSystemHistory_Revision::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemHistory_Revision::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemHistory_Revision::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemHistory.Revision.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemHistory_Revision::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemHistory.Revision.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemHistory_Revision::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemHistory.Revision.id)
  return id_;
}
inline void CodeSystemHistory_Revision::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemHistory.Revision.id)
}

// .google.fhir.stu3.proto.DateTime date = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool CodeSystemHistory_Revision::has_date() const {
  return this != internal_default_instance() && date_ != NULL;
}
inline const ::google::fhir::stu3::proto::DateTime& CodeSystemHistory_Revision::_internal_date() const {
  return *date_;
}
inline const ::google::fhir::stu3::proto::DateTime& CodeSystemHistory_Revision::date() const {
  const ::google::fhir::stu3::proto::DateTime* p = date_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemHistory.Revision.date)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::DateTime*>(
      &::google::fhir::stu3::proto::_DateTime_default_instance_);
}
inline ::google::fhir::stu3::proto::DateTime* CodeSystemHistory_Revision::release_date() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemHistory.Revision.date)
  
  ::google::fhir::stu3::proto::DateTime* temp = date_;
  date_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::DateTime* CodeSystemHistory_Revision::mutable_date() {
  
  if (date_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::DateTime>(GetArenaNoVirtual());
    date_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemHistory.Revision.date)
  return date_;
}
inline void CodeSystemHistory_Revision::set_allocated_date(::google::fhir::stu3::proto::DateTime* date) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(date_);
  }
  if (date) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      date = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    
  } else {
    
  }
  date_ = date;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemHistory.Revision.date)
}

// .google.fhir.stu3.proto.String id_slice = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.fhir_inlined_extension_url) = "id"];
inline bool CodeSystemHistory_Revision::has_id_slice() const {
  return this != internal_default_instance() && id_slice_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemHistory_Revision::_internal_id_slice() const {
  return *id_slice_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemHistory_Revision::id_slice() const {
  const ::google::fhir::stu3::proto::String* p = id_slice_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemHistory.Revision.id_slice)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemHistory_Revision::release_id_slice() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemHistory.Revision.id_slice)
  
  ::google::fhir::stu3::proto::String* temp = id_slice_;
  id_slice_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemHistory_Revision::mutable_id_slice() {
  
  if (id_slice_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_slice_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemHistory.Revision.id_slice)
  return id_slice_;
}
inline void CodeSystemHistory_Revision::set_allocated_id_slice(::google::fhir::stu3::proto::String* id_slice) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_slice_);
  }
  if (id_slice) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id_slice = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id_slice, submessage_arena);
    }
    
  } else {
    
  }
  id_slice_ = id_slice;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemHistory.Revision.id_slice)
}

// .google.fhir.stu3.proto.String author = 6 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool CodeSystemHistory_Revision::has_author() const {
  return this != internal_default_instance() && author_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemHistory_Revision::_internal_author() const {
  return *author_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemHistory_Revision::author() const {
  const ::google::fhir::stu3::proto::String* p = author_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemHistory.Revision.author)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemHistory_Revision::release_author() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemHistory.Revision.author)
  
  ::google::fhir::stu3::proto::String* temp = author_;
  author_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemHistory_Revision::mutable_author() {
  
  if (author_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    author_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemHistory.Revision.author)
  return author_;
}
inline void CodeSystemHistory_Revision::set_allocated_author(::google::fhir::stu3::proto::String* author) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(author_);
  }
  if (author) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      author = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    
  } else {
    
  }
  author_ = author;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemHistory.Revision.author)
}

// .google.fhir.stu3.proto.String notes = 7;
inline bool CodeSystemHistory_Revision::has_notes() const {
  return this != internal_default_instance() && notes_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemHistory_Revision::_internal_notes() const {
  return *notes_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemHistory_Revision::notes() const {
  const ::google::fhir::stu3::proto::String* p = notes_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemHistory.Revision.notes)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemHistory_Revision::release_notes() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemHistory.Revision.notes)
  
  ::google::fhir::stu3::proto::String* temp = notes_;
  notes_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemHistory_Revision::mutable_notes() {
  
  if (notes_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    notes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemHistory.Revision.notes)
  return notes_;
}
inline void CodeSystemHistory_Revision::set_allocated_notes(::google::fhir::stu3::proto::String* notes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(notes_);
  }
  if (notes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      notes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, notes, submessage_arena);
    }
    
  } else {
    
  }
  notes_ = notes;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemHistory.Revision.notes)
}

// -------------------------------------------------------------------

// CodeSystemHistory

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeSystemHistory::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemHistory::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemHistory::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemHistory.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemHistory::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemHistory.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemHistory::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemHistory.id)
  return id_;
}
inline void CodeSystemHistory::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemHistory.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int CodeSystemHistory::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* CodeSystemHistory::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemHistory.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
CodeSystemHistory::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.CodeSystemHistory.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& CodeSystemHistory::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemHistory.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* CodeSystemHistory::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.CodeSystemHistory.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
CodeSystemHistory::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.CodeSystemHistory.extension)
  return extension_;
}

// .google.fhir.stu3.proto.String name = 4;
inline bool CodeSystemHistory::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemHistory::_internal_name() const {
  return *name_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemHistory::name() const {
  const ::google::fhir::stu3::proto::String* p = name_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemHistory.name)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemHistory::release_name() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemHistory.name)
  
  ::google::fhir::stu3::proto::String* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemHistory::mutable_name() {
  
  if (name_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemHistory.name)
  return name_;
}
inline void CodeSystemHistory::set_allocated_name(::google::fhir::stu3::proto::String* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemHistory.name)
}

// repeated .google.fhir.stu3.proto.CodeSystemHistory.Revision revision = 5;
inline int CodeSystemHistory::revision_size() const {
  return revision_.size();
}
inline void CodeSystemHistory::clear_revision() {
  revision_.Clear();
}
inline ::google::fhir::stu3::proto::CodeSystemHistory_Revision* CodeSystemHistory::mutable_revision(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemHistory.revision)
  return revision_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::CodeSystemHistory_Revision >*
CodeSystemHistory::mutable_revision() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.CodeSystemHistory.revision)
  return &revision_;
}
inline const ::google::fhir::stu3::proto::CodeSystemHistory_Revision& CodeSystemHistory::revision(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemHistory.revision)
  return revision_.Get(index);
}
inline ::google::fhir::stu3::proto::CodeSystemHistory_Revision* CodeSystemHistory::add_revision() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.CodeSystemHistory.revision)
  return revision_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::CodeSystemHistory_Revision >&
CodeSystemHistory::revision() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.CodeSystemHistory.revision)
  return revision_;
}

// -------------------------------------------------------------------

// CodeSystemKeyWord

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeSystemKeyWord::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemKeyWord::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemKeyWord::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemKeyWord.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemKeyWord::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemKeyWord.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemKeyWord::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemKeyWord.id)
  return id_;
}
inline void CodeSystemKeyWord::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemKeyWord.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool CodeSystemKeyWord::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemKeyWord::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemKeyWord::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemKeyWord.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemKeyWord::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemKeyWord.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemKeyWord::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemKeyWord.value_string)
  return value_string_;
}
inline void CodeSystemKeyWord::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemKeyWord.value_string)
}

// -------------------------------------------------------------------

// CodeSystemLabel

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeSystemLabel::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemLabel::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemLabel::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemLabel.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemLabel::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemLabel.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemLabel::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemLabel.id)
  return id_;
}
inline void CodeSystemLabel::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemLabel.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool CodeSystemLabel::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemLabel::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemLabel::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemLabel.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemLabel::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemLabel.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemLabel::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemLabel.value_string)
  return value_string_;
}
inline void CodeSystemLabel::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemLabel.value_string)
}

// -------------------------------------------------------------------

// CodeSystemMap

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeSystemMap::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemMap::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemMap::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemMap.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemMap::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemMap.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemMap::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemMap.id)
  return id_;
}
inline void CodeSystemMap::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemMap.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ConceptMap"];
inline bool CodeSystemMap::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& CodeSystemMap::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& CodeSystemMap::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemMap.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* CodeSystemMap::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemMap.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* CodeSystemMap::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemMap.value_reference)
  return value_reference_;
}
inline void CodeSystemMap::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemMap.value_reference)
}

// -------------------------------------------------------------------

// CodeSystemOrdinalValue

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeSystemOrdinalValue::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemOrdinalValue::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemOrdinalValue::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemOrdinalValue.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemOrdinalValue::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemOrdinalValue.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemOrdinalValue::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemOrdinalValue.id)
  return id_;
}
inline void CodeSystemOrdinalValue::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemOrdinalValue.id)
}

// .google.fhir.stu3.proto.Decimal value_decimal = 3;
inline bool CodeSystemOrdinalValue::has_value_decimal() const {
  return this != internal_default_instance() && value_decimal_ != NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& CodeSystemOrdinalValue::_internal_value_decimal() const {
  return *value_decimal_;
}
inline const ::google::fhir::stu3::proto::Decimal& CodeSystemOrdinalValue::value_decimal() const {
  const ::google::fhir::stu3::proto::Decimal* p = value_decimal_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemOrdinalValue.value_decimal)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* CodeSystemOrdinalValue::release_value_decimal() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemOrdinalValue.value_decimal)
  
  ::google::fhir::stu3::proto::Decimal* temp = value_decimal_;
  value_decimal_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* CodeSystemOrdinalValue::mutable_value_decimal() {
  
  if (value_decimal_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    value_decimal_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemOrdinalValue.value_decimal)
  return value_decimal_;
}
inline void CodeSystemOrdinalValue::set_allocated_value_decimal(::google::fhir::stu3::proto::Decimal* value_decimal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_decimal_);
  }
  if (value_decimal) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_decimal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_decimal, submessage_arena);
    }
    
  } else {
    
  }
  value_decimal_ = value_decimal;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemOrdinalValue.value_decimal)
}

// -------------------------------------------------------------------

// CodeSystemOtherName

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeSystemOtherName::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemOtherName::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemOtherName::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemOtherName.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemOtherName::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemOtherName.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemOtherName::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemOtherName.id)
  return id_;
}
inline void CodeSystemOtherName::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemOtherName.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int CodeSystemOtherName::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* CodeSystemOtherName::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemOtherName.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
CodeSystemOtherName::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.CodeSystemOtherName.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& CodeSystemOtherName::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemOtherName.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* CodeSystemOtherName::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.CodeSystemOtherName.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
CodeSystemOtherName::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.CodeSystemOtherName.extension)
  return extension_;
}

// .google.fhir.stu3.proto.String name = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool CodeSystemOtherName::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemOtherName::_internal_name() const {
  return *name_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemOtherName::name() const {
  const ::google::fhir::stu3::proto::String* p = name_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemOtherName.name)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemOtherName::release_name() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemOtherName.name)
  
  ::google::fhir::stu3::proto::String* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemOtherName::mutable_name() {
  
  if (name_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemOtherName.name)
  return name_;
}
inline void CodeSystemOtherName::set_allocated_name(::google::fhir::stu3::proto::String* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemOtherName.name)
}

// .google.fhir.stu3.proto.Boolean preferred = 5;
inline bool CodeSystemOtherName::has_preferred() const {
  return this != internal_default_instance() && preferred_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& CodeSystemOtherName::_internal_preferred() const {
  return *preferred_;
}
inline const ::google::fhir::stu3::proto::Boolean& CodeSystemOtherName::preferred() const {
  const ::google::fhir::stu3::proto::Boolean* p = preferred_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemOtherName.preferred)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* CodeSystemOtherName::release_preferred() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemOtherName.preferred)
  
  ::google::fhir::stu3::proto::Boolean* temp = preferred_;
  preferred_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* CodeSystemOtherName::mutable_preferred() {
  
  if (preferred_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    preferred_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemOtherName.preferred)
  return preferred_;
}
inline void CodeSystemOtherName::set_allocated_preferred(::google::fhir::stu3::proto::Boolean* preferred) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(preferred_);
  }
  if (preferred) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      preferred = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, preferred, submessage_arena);
    }
    
  } else {
    
  }
  preferred_ = preferred;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemOtherName.preferred)
}

// -------------------------------------------------------------------

// CodeSystemReference

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeSystemReference::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemReference::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemReference::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemReference.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemReference::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemReference.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemReference::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemReference.id)
  return id_;
}
inline void CodeSystemReference::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemReference.id)
}

// .google.fhir.stu3.proto.Uri value_uri = 3;
inline bool CodeSystemReference::has_value_uri() const {
  return this != internal_default_instance() && value_uri_ != NULL;
}
inline const ::google::fhir::stu3::proto::Uri& CodeSystemReference::_internal_value_uri() const {
  return *value_uri_;
}
inline const ::google::fhir::stu3::proto::Uri& CodeSystemReference::value_uri() const {
  const ::google::fhir::stu3::proto::Uri* p = value_uri_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemReference.value_uri)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* CodeSystemReference::release_value_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemReference.value_uri)
  
  ::google::fhir::stu3::proto::Uri* temp = value_uri_;
  value_uri_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* CodeSystemReference::mutable_value_uri() {
  
  if (value_uri_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    value_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemReference.value_uri)
  return value_uri_;
}
inline void CodeSystemReference::set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_uri_);
  }
  if (value_uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_uri, submessage_arena);
    }
    
  } else {
    
  }
  value_uri_ = value_uri;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemReference.value_uri)
}

// -------------------------------------------------------------------

// CodeSystemReplacedby

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeSystemReplacedby::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemReplacedby::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemReplacedby::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemReplacedby.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemReplacedby::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemReplacedby.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemReplacedby::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemReplacedby.id)
  return id_;
}
inline void CodeSystemReplacedby::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemReplacedby.id)
}

// .google.fhir.stu3.proto.Coding value_coding = 3;
inline bool CodeSystemReplacedby::has_value_coding() const {
  return this != internal_default_instance() && value_coding_ != NULL;
}
inline const ::google::fhir::stu3::proto::Coding& CodeSystemReplacedby::_internal_value_coding() const {
  return *value_coding_;
}
inline const ::google::fhir::stu3::proto::Coding& CodeSystemReplacedby::value_coding() const {
  const ::google::fhir::stu3::proto::Coding* p = value_coding_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemReplacedby.value_coding)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Coding*>(
      &::google::fhir::stu3::proto::_Coding_default_instance_);
}
inline ::google::fhir::stu3::proto::Coding* CodeSystemReplacedby::release_value_coding() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemReplacedby.value_coding)
  
  ::google::fhir::stu3::proto::Coding* temp = value_coding_;
  value_coding_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Coding* CodeSystemReplacedby::mutable_value_coding() {
  
  if (value_coding_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Coding>(GetArenaNoVirtual());
    value_coding_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemReplacedby.value_coding)
  return value_coding_;
}
inline void CodeSystemReplacedby::set_allocated_value_coding(::google::fhir::stu3::proto::Coding* value_coding) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_coding_);
  }
  if (value_coding) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_coding = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_coding, submessage_arena);
    }
    
  } else {
    
  }
  value_coding_ = value_coding;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemReplacedby.value_coding)
}

// -------------------------------------------------------------------

// CodeSystemSourceReference

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeSystemSourceReference::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemSourceReference::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemSourceReference::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemSourceReference.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemSourceReference::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemSourceReference.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemSourceReference::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemSourceReference.id)
  return id_;
}
inline void CodeSystemSourceReference::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemSourceReference.id)
}

// .google.fhir.stu3.proto.Uri value_uri = 3;
inline bool CodeSystemSourceReference::has_value_uri() const {
  return this != internal_default_instance() && value_uri_ != NULL;
}
inline const ::google::fhir::stu3::proto::Uri& CodeSystemSourceReference::_internal_value_uri() const {
  return *value_uri_;
}
inline const ::google::fhir::stu3::proto::Uri& CodeSystemSourceReference::value_uri() const {
  const ::google::fhir::stu3::proto::Uri* p = value_uri_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemSourceReference.value_uri)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* CodeSystemSourceReference::release_value_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemSourceReference.value_uri)
  
  ::google::fhir::stu3::proto::Uri* temp = value_uri_;
  value_uri_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* CodeSystemSourceReference::mutable_value_uri() {
  
  if (value_uri_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    value_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemSourceReference.value_uri)
  return value_uri_;
}
inline void CodeSystemSourceReference::set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_uri_);
  }
  if (value_uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_uri, submessage_arena);
    }
    
  } else {
    
  }
  value_uri_ = value_uri;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemSourceReference.value_uri)
}

// -------------------------------------------------------------------

// CodeSystemSubsumes

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeSystemSubsumes::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemSubsumes::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemSubsumes::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemSubsumes.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemSubsumes::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemSubsumes.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemSubsumes::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemSubsumes.id)
  return id_;
}
inline void CodeSystemSubsumes::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemSubsumes.id)
}

// .google.fhir.stu3.proto.Code value_code = 3;
inline bool CodeSystemSubsumes::has_value_code() const {
  return this != internal_default_instance() && value_code_ != NULL;
}
inline const ::google::fhir::stu3::proto::Code& CodeSystemSubsumes::_internal_value_code() const {
  return *value_code_;
}
inline const ::google::fhir::stu3::proto::Code& CodeSystemSubsumes::value_code() const {
  const ::google::fhir::stu3::proto::Code* p = value_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemSubsumes.value_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Code*>(
      &::google::fhir::stu3::proto::_Code_default_instance_);
}
inline ::google::fhir::stu3::proto::Code* CodeSystemSubsumes::release_value_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemSubsumes.value_code)
  
  ::google::fhir::stu3::proto::Code* temp = value_code_;
  value_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Code* CodeSystemSubsumes::mutable_value_code() {
  
  if (value_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Code>(GetArenaNoVirtual());
    value_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemSubsumes.value_code)
  return value_code_;
}
inline void CodeSystemSubsumes::set_allocated_value_code(::google::fhir::stu3::proto::Code* value_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_code_);
  }
  if (value_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_code, submessage_arena);
    }
    
  } else {
    
  }
  value_code_ = value_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemSubsumes.value_code)
}

// -------------------------------------------------------------------

// CodeSystemTrustedExpansion

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeSystemTrustedExpansion::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemTrustedExpansion::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemTrustedExpansion::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemTrustedExpansion.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemTrustedExpansion::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemTrustedExpansion.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemTrustedExpansion::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemTrustedExpansion.id)
  return id_;
}
inline void CodeSystemTrustedExpansion::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemTrustedExpansion.id)
}

// .google.fhir.stu3.proto.Uri value_uri = 3;
inline bool CodeSystemTrustedExpansion::has_value_uri() const {
  return this != internal_default_instance() && value_uri_ != NULL;
}
inline const ::google::fhir::stu3::proto::Uri& CodeSystemTrustedExpansion::_internal_value_uri() const {
  return *value_uri_;
}
inline const ::google::fhir::stu3::proto::Uri& CodeSystemTrustedExpansion::value_uri() const {
  const ::google::fhir::stu3::proto::Uri* p = value_uri_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemTrustedExpansion.value_uri)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* CodeSystemTrustedExpansion::release_value_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemTrustedExpansion.value_uri)
  
  ::google::fhir::stu3::proto::Uri* temp = value_uri_;
  value_uri_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* CodeSystemTrustedExpansion::mutable_value_uri() {
  
  if (value_uri_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    value_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemTrustedExpansion.value_uri)
  return value_uri_;
}
inline void CodeSystemTrustedExpansion::set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_uri_);
  }
  if (value_uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_uri, submessage_arena);
    }
    
  } else {
    
  }
  value_uri_ = value_uri;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemTrustedExpansion.value_uri)
}

// -------------------------------------------------------------------

// CodeSystemUsage

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeSystemUsage::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemUsage::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemUsage::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemUsage.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemUsage::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemUsage.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemUsage::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemUsage.id)
  return id_;
}
inline void CodeSystemUsage::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemUsage.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int CodeSystemUsage::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* CodeSystemUsage::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemUsage.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
CodeSystemUsage::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.CodeSystemUsage.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& CodeSystemUsage::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemUsage.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* CodeSystemUsage::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.CodeSystemUsage.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
CodeSystemUsage::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.CodeSystemUsage.extension)
  return extension_;
}

// .google.fhir.stu3.proto.String user = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool CodeSystemUsage::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemUsage::_internal_user() const {
  return *user_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemUsage::user() const {
  const ::google::fhir::stu3::proto::String* p = user_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemUsage.user)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemUsage::release_user() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemUsage.user)
  
  ::google::fhir::stu3::proto::String* temp = user_;
  user_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemUsage::mutable_user() {
  
  if (user_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemUsage.user)
  return user_;
}
inline void CodeSystemUsage::set_allocated_user(::google::fhir::stu3::proto::String* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_);
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemUsage.user)
}

// .google.fhir.stu3.proto.String use = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool CodeSystemUsage::has_use() const {
  return this != internal_default_instance() && use_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemUsage::_internal_use() const {
  return *use_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemUsage::use() const {
  const ::google::fhir::stu3::proto::String* p = use_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemUsage.use)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemUsage::release_use() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemUsage.use)
  
  ::google::fhir::stu3::proto::String* temp = use_;
  use_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemUsage::mutable_use() {
  
  if (use_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    use_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemUsage.use)
  return use_;
}
inline void CodeSystemUsage::set_allocated_use(::google::fhir::stu3::proto::String* use) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(use_);
  }
  if (use) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      use = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, use, submessage_arena);
    }
    
  } else {
    
  }
  use_ = use;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemUsage.use)
}

// -------------------------------------------------------------------

// CodeSystemWarning

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeSystemWarning::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemWarning::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemWarning::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemWarning.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemWarning::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemWarning.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemWarning::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemWarning.id)
  return id_;
}
inline void CodeSystemWarning::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemWarning.id)
}

// .google.fhir.stu3.proto.Markdown value_markdown = 3;
inline bool CodeSystemWarning::has_value_markdown() const {
  return this != internal_default_instance() && value_markdown_ != NULL;
}
inline const ::google::fhir::stu3::proto::Markdown& CodeSystemWarning::_internal_value_markdown() const {
  return *value_markdown_;
}
inline const ::google::fhir::stu3::proto::Markdown& CodeSystemWarning::value_markdown() const {
  const ::google::fhir::stu3::proto::Markdown* p = value_markdown_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemWarning.value_markdown)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Markdown*>(
      &::google::fhir::stu3::proto::_Markdown_default_instance_);
}
inline ::google::fhir::stu3::proto::Markdown* CodeSystemWarning::release_value_markdown() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemWarning.value_markdown)
  
  ::google::fhir::stu3::proto::Markdown* temp = value_markdown_;
  value_markdown_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Markdown* CodeSystemWarning::mutable_value_markdown() {
  
  if (value_markdown_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Markdown>(GetArenaNoVirtual());
    value_markdown_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemWarning.value_markdown)
  return value_markdown_;
}
inline void CodeSystemWarning::set_allocated_value_markdown(::google::fhir::stu3::proto::Markdown* value_markdown) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_markdown_);
  }
  if (value_markdown) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_markdown = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_markdown, submessage_arena);
    }
    
  } else {
    
  }
  value_markdown_ = value_markdown;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemWarning.value_markdown)
}

// -------------------------------------------------------------------

// CodeSystemWorkflowStatus

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeSystemWorkflowStatus::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemWorkflowStatus::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemWorkflowStatus::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemWorkflowStatus.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemWorkflowStatus::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemWorkflowStatus.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemWorkflowStatus::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemWorkflowStatus.id)
  return id_;
}
inline void CodeSystemWorkflowStatus::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemWorkflowStatus.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool CodeSystemWorkflowStatus::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemWorkflowStatus::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& CodeSystemWorkflowStatus::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeSystemWorkflowStatus.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeSystemWorkflowStatus::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeSystemWorkflowStatus.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeSystemWorkflowStatus::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeSystemWorkflowStatus.value_string)
  return value_string_;
}
inline void CodeSystemWorkflowStatus::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeSystemWorkflowStatus.value_string)
}

// -------------------------------------------------------------------

// CodingSctdescid

// .google.fhir.stu3.proto.String id = 1;
inline bool CodingSctdescid::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodingSctdescid::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodingSctdescid::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodingSctdescid.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodingSctdescid::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodingSctdescid.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodingSctdescid::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodingSctdescid.id)
  return id_;
}
inline void CodingSctdescid::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodingSctdescid.id)
}

// .google.fhir.stu3.proto.Id value_id = 3;
inline bool CodingSctdescid::has_value_id() const {
  return this != internal_default_instance() && value_id_ != NULL;
}
inline const ::google::fhir::stu3::proto::Id& CodingSctdescid::_internal_value_id() const {
  return *value_id_;
}
inline const ::google::fhir::stu3::proto::Id& CodingSctdescid::value_id() const {
  const ::google::fhir::stu3::proto::Id* p = value_id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodingSctdescid.value_id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Id*>(
      &::google::fhir::stu3::proto::_Id_default_instance_);
}
inline ::google::fhir::stu3::proto::Id* CodingSctdescid::release_value_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodingSctdescid.value_id)
  
  ::google::fhir::stu3::proto::Id* temp = value_id_;
  value_id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Id* CodingSctdescid::mutable_value_id() {
  
  if (value_id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Id>(GetArenaNoVirtual());
    value_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodingSctdescid.value_id)
  return value_id_;
}
inline void CodingSctdescid::set_allocated_value_id(::google::fhir::stu3::proto::Id* value_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_id_);
  }
  if (value_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_id, submessage_arena);
    }
    
  } else {
    
  }
  value_id_ = value_id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodingSctdescid.value_id)
}

// -------------------------------------------------------------------

// CommunicationMedia

// .google.fhir.stu3.proto.String id = 1;
inline bool CommunicationMedia::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CommunicationMedia::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CommunicationMedia::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CommunicationMedia.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CommunicationMedia::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CommunicationMedia.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CommunicationMedia::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CommunicationMedia.id)
  return id_;
}
inline void CommunicationMedia::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CommunicationMedia.id)
}

// .google.fhir.stu3.proto.Attachment value_attachment = 3;
inline bool CommunicationMedia::has_value_attachment() const {
  return this != internal_default_instance() && value_attachment_ != NULL;
}
inline const ::google::fhir::stu3::proto::Attachment& CommunicationMedia::_internal_value_attachment() const {
  return *value_attachment_;
}
inline const ::google::fhir::stu3::proto::Attachment& CommunicationMedia::value_attachment() const {
  const ::google::fhir::stu3::proto::Attachment* p = value_attachment_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CommunicationMedia.value_attachment)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Attachment*>(
      &::google::fhir::stu3::proto::_Attachment_default_instance_);
}
inline ::google::fhir::stu3::proto::Attachment* CommunicationMedia::release_value_attachment() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CommunicationMedia.value_attachment)
  
  ::google::fhir::stu3::proto::Attachment* temp = value_attachment_;
  value_attachment_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Attachment* CommunicationMedia::mutable_value_attachment() {
  
  if (value_attachment_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Attachment>(GetArenaNoVirtual());
    value_attachment_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CommunicationMedia.value_attachment)
  return value_attachment_;
}
inline void CommunicationMedia::set_allocated_value_attachment(::google::fhir::stu3::proto::Attachment* value_attachment) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_attachment_);
  }
  if (value_attachment) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_attachment = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_attachment, submessage_arena);
    }
    
  } else {
    
  }
  value_attachment_ = value_attachment;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CommunicationMedia.value_attachment)
}

// -------------------------------------------------------------------

// CommunicationReasonNotPerformed

// .google.fhir.stu3.proto.String id = 1;
inline bool CommunicationReasonNotPerformed::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CommunicationReasonNotPerformed::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CommunicationReasonNotPerformed::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CommunicationReasonNotPerformed.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CommunicationReasonNotPerformed::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CommunicationReasonNotPerformed.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CommunicationReasonNotPerformed::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CommunicationReasonNotPerformed.id)
  return id_;
}
inline void CommunicationReasonNotPerformed::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CommunicationReasonNotPerformed.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool CommunicationReasonNotPerformed::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& CommunicationReasonNotPerformed::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& CommunicationReasonNotPerformed::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CommunicationReasonNotPerformed.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* CommunicationReasonNotPerformed::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CommunicationReasonNotPerformed.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* CommunicationReasonNotPerformed::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CommunicationReasonNotPerformed.value_codeable_concept)
  return value_codeable_concept_;
}
inline void CommunicationReasonNotPerformed::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CommunicationReasonNotPerformed.value_codeable_concept)
}

// -------------------------------------------------------------------

// CommunicationRequestDefinition_Value

// .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/PlanDefinition", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ActivityDefinition"];
inline bool CommunicationRequestDefinition_Value::has_reference() const {
  return value_case() == kReference;
}
inline void CommunicationRequestDefinition_Value::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline const ::google::fhir::stu3::proto::Reference& CommunicationRequestDefinition_Value::_internal_reference() const {
  return *value_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* CommunicationRequestDefinition_Value::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CommunicationRequestDefinition.Value.reference)
  if (has_reference()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Reference* temp = value_.reference_;
    value_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& CommunicationRequestDefinition_Value::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CommunicationRequestDefinition.Value.reference)
  return has_reference()
      ? *value_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* CommunicationRequestDefinition_Value::mutable_reference() {
  if (!has_reference()) {
    clear_value();
    set_has_reference();
    value_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CommunicationRequestDefinition.Value.reference)
  return value_.reference_;
}

inline bool CommunicationRequestDefinition_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void CommunicationRequestDefinition_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline CommunicationRequestDefinition_Value::ValueCase CommunicationRequestDefinition_Value::value_case() const {
  return CommunicationRequestDefinition_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CommunicationRequestDefinition

// .google.fhir.stu3.proto.String id = 1;
inline bool CommunicationRequestDefinition::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CommunicationRequestDefinition::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CommunicationRequestDefinition::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CommunicationRequestDefinition.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CommunicationRequestDefinition::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CommunicationRequestDefinition.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CommunicationRequestDefinition::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CommunicationRequestDefinition.id)
  return id_;
}
inline void CommunicationRequestDefinition::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CommunicationRequestDefinition.id)
}

// .google.fhir.stu3.proto.CommunicationRequestDefinition.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool CommunicationRequestDefinition::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void CommunicationRequestDefinition::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::CommunicationRequestDefinition_Value& CommunicationRequestDefinition::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::CommunicationRequestDefinition_Value& CommunicationRequestDefinition::value() const {
  const ::google::fhir::stu3::proto::CommunicationRequestDefinition_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CommunicationRequestDefinition.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CommunicationRequestDefinition_Value*>(
      &::google::fhir::stu3::proto::_CommunicationRequestDefinition_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::CommunicationRequestDefinition_Value* CommunicationRequestDefinition::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CommunicationRequestDefinition.value)
  
  ::google::fhir::stu3::proto::CommunicationRequestDefinition_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CommunicationRequestDefinition_Value* CommunicationRequestDefinition::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CommunicationRequestDefinition_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CommunicationRequestDefinition.value)
  return value_;
}
inline void CommunicationRequestDefinition::set_allocated_value(::google::fhir::stu3::proto::CommunicationRequestDefinition_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CommunicationRequestDefinition.value)
}

// -------------------------------------------------------------------

// CommunicationRequestOrderedBy_Value

// .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Organization", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Device", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Patient"];
inline bool CommunicationRequestOrderedBy_Value::has_reference() const {
  return value_case() == kReference;
}
inline void CommunicationRequestOrderedBy_Value::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline const ::google::fhir::stu3::proto::Reference& CommunicationRequestOrderedBy_Value::_internal_reference() const {
  return *value_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* CommunicationRequestOrderedBy_Value::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CommunicationRequestOrderedBy.Value.reference)
  if (has_reference()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Reference* temp = value_.reference_;
    value_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& CommunicationRequestOrderedBy_Value::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CommunicationRequestOrderedBy.Value.reference)
  return has_reference()
      ? *value_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* CommunicationRequestOrderedBy_Value::mutable_reference() {
  if (!has_reference()) {
    clear_value();
    set_has_reference();
    value_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CommunicationRequestOrderedBy.Value.reference)
  return value_.reference_;
}

inline bool CommunicationRequestOrderedBy_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void CommunicationRequestOrderedBy_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline CommunicationRequestOrderedBy_Value::ValueCase CommunicationRequestOrderedBy_Value::value_case() const {
  return CommunicationRequestOrderedBy_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CommunicationRequestOrderedBy

// .google.fhir.stu3.proto.String id = 1;
inline bool CommunicationRequestOrderedBy::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CommunicationRequestOrderedBy::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CommunicationRequestOrderedBy::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CommunicationRequestOrderedBy.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CommunicationRequestOrderedBy::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CommunicationRequestOrderedBy.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CommunicationRequestOrderedBy::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CommunicationRequestOrderedBy.id)
  return id_;
}
inline void CommunicationRequestOrderedBy::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CommunicationRequestOrderedBy.id)
}

// .google.fhir.stu3.proto.CommunicationRequestOrderedBy.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool CommunicationRequestOrderedBy::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void CommunicationRequestOrderedBy::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::CommunicationRequestOrderedBy_Value& CommunicationRequestOrderedBy::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::CommunicationRequestOrderedBy_Value& CommunicationRequestOrderedBy::value() const {
  const ::google::fhir::stu3::proto::CommunicationRequestOrderedBy_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CommunicationRequestOrderedBy.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CommunicationRequestOrderedBy_Value*>(
      &::google::fhir::stu3::proto::_CommunicationRequestOrderedBy_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::CommunicationRequestOrderedBy_Value* CommunicationRequestOrderedBy::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CommunicationRequestOrderedBy.value)
  
  ::google::fhir::stu3::proto::CommunicationRequestOrderedBy_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CommunicationRequestOrderedBy_Value* CommunicationRequestOrderedBy::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CommunicationRequestOrderedBy_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CommunicationRequestOrderedBy.value)
  return value_;
}
inline void CommunicationRequestOrderedBy::set_allocated_value(::google::fhir::stu3::proto::CommunicationRequestOrderedBy_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CommunicationRequestOrderedBy.value)
}

// -------------------------------------------------------------------

// CommunicationRequestReasonRejected

// .google.fhir.stu3.proto.String id = 1;
inline bool CommunicationRequestReasonRejected::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CommunicationRequestReasonRejected::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CommunicationRequestReasonRejected::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CommunicationRequestReasonRejected.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CommunicationRequestReasonRejected::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CommunicationRequestReasonRejected.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CommunicationRequestReasonRejected::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CommunicationRequestReasonRejected.id)
  return id_;
}
inline void CommunicationRequestReasonRejected::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CommunicationRequestReasonRejected.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool CommunicationRequestReasonRejected::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& CommunicationRequestReasonRejected::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& CommunicationRequestReasonRejected::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CommunicationRequestReasonRejected.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* CommunicationRequestReasonRejected::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CommunicationRequestReasonRejected.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* CommunicationRequestReasonRejected::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CommunicationRequestReasonRejected.value_codeable_concept)
  return value_codeable_concept_;
}
inline void CommunicationRequestReasonRejected::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CommunicationRequestReasonRejected.value_codeable_concept)
}

// -------------------------------------------------------------------

// CommunicationRequestRelevantHistory

// .google.fhir.stu3.proto.String id = 1;
inline bool CommunicationRequestRelevantHistory::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CommunicationRequestRelevantHistory::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CommunicationRequestRelevantHistory::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CommunicationRequestRelevantHistory.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CommunicationRequestRelevantHistory::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CommunicationRequestRelevantHistory.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CommunicationRequestRelevantHistory::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CommunicationRequestRelevantHistory.id)
  return id_;
}
inline void CommunicationRequestRelevantHistory::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CommunicationRequestRelevantHistory.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Provenance"];
inline bool CommunicationRequestRelevantHistory::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& CommunicationRequestRelevantHistory::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& CommunicationRequestRelevantHistory::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CommunicationRequestRelevantHistory.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* CommunicationRequestRelevantHistory::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CommunicationRequestRelevantHistory.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* CommunicationRequestRelevantHistory::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CommunicationRequestRelevantHistory.value_reference)
  return value_reference_;
}
inline void CommunicationRequestRelevantHistory::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CommunicationRequestRelevantHistory.value_reference)
}

// -------------------------------------------------------------------

// CommunicationRequestSupportingInfo

// .google.fhir.stu3.proto.String id = 1;
inline bool CommunicationRequestSupportingInfo::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CommunicationRequestSupportingInfo::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CommunicationRequestSupportingInfo::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CommunicationRequestSupportingInfo.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CommunicationRequestSupportingInfo::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CommunicationRequestSupportingInfo.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CommunicationRequestSupportingInfo::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CommunicationRequestSupportingInfo.id)
  return id_;
}
inline void CommunicationRequestSupportingInfo::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CommunicationRequestSupportingInfo.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Resource"];
inline bool CommunicationRequestSupportingInfo::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& CommunicationRequestSupportingInfo::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& CommunicationRequestSupportingInfo::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CommunicationRequestSupportingInfo.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* CommunicationRequestSupportingInfo::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CommunicationRequestSupportingInfo.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* CommunicationRequestSupportingInfo::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CommunicationRequestSupportingInfo.value_reference)
  return value_reference_;
}
inline void CommunicationRequestSupportingInfo::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CommunicationRequestSupportingInfo.value_reference)
}

// -------------------------------------------------------------------

// CompositionOtherConfidentiality

// .google.fhir.stu3.proto.String id = 1;
inline bool CompositionOtherConfidentiality::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CompositionOtherConfidentiality::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CompositionOtherConfidentiality::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CompositionOtherConfidentiality.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CompositionOtherConfidentiality::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CompositionOtherConfidentiality.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CompositionOtherConfidentiality::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CompositionOtherConfidentiality.id)
  return id_;
}
inline void CompositionOtherConfidentiality::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CompositionOtherConfidentiality.id)
}

// .google.fhir.stu3.proto.Coding value_coding = 3;
inline bool CompositionOtherConfidentiality::has_value_coding() const {
  return this != internal_default_instance() && value_coding_ != NULL;
}
inline const ::google::fhir::stu3::proto::Coding& CompositionOtherConfidentiality::_internal_value_coding() const {
  return *value_coding_;
}
inline const ::google::fhir::stu3::proto::Coding& CompositionOtherConfidentiality::value_coding() const {
  const ::google::fhir::stu3::proto::Coding* p = value_coding_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CompositionOtherConfidentiality.value_coding)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Coding*>(
      &::google::fhir::stu3::proto::_Coding_default_instance_);
}
inline ::google::fhir::stu3::proto::Coding* CompositionOtherConfidentiality::release_value_coding() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CompositionOtherConfidentiality.value_coding)
  
  ::google::fhir::stu3::proto::Coding* temp = value_coding_;
  value_coding_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Coding* CompositionOtherConfidentiality::mutable_value_coding() {
  
  if (value_coding_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Coding>(GetArenaNoVirtual());
    value_coding_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CompositionOtherConfidentiality.value_coding)
  return value_coding_;
}
inline void CompositionOtherConfidentiality::set_allocated_value_coding(::google::fhir::stu3::proto::Coding* value_coding) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_coding_);
  }
  if (value_coding) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_coding = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_coding, submessage_arena);
    }
    
  } else {
    
  }
  value_coding_ = value_coding;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CompositionOtherConfidentiality.value_coding)
}

// -------------------------------------------------------------------

// ConceptMapBidirectional

// .google.fhir.stu3.proto.String id = 1;
inline bool ConceptMapBidirectional::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ConceptMapBidirectional::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ConceptMapBidirectional::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConceptMapBidirectional.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ConceptMapBidirectional::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConceptMapBidirectional.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ConceptMapBidirectional::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConceptMapBidirectional.id)
  return id_;
}
inline void ConceptMapBidirectional::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConceptMapBidirectional.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool ConceptMapBidirectional::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& ConceptMapBidirectional::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& ConceptMapBidirectional::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConceptMapBidirectional.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* ConceptMapBidirectional::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConceptMapBidirectional.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* ConceptMapBidirectional::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConceptMapBidirectional.value_boolean)
  return value_boolean_;
}
inline void ConceptMapBidirectional::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConceptMapBidirectional.value_boolean)
}

// -------------------------------------------------------------------

// ConditionBasedOn_Value

// .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ReferralRequest", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ProcedureRequest", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/CarePlan"];
inline bool ConditionBasedOn_Value::has_reference() const {
  return value_case() == kReference;
}
inline void ConditionBasedOn_Value::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline const ::google::fhir::stu3::proto::Reference& ConditionBasedOn_Value::_internal_reference() const {
  return *value_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* ConditionBasedOn_Value::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionBasedOn.Value.reference)
  if (has_reference()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Reference* temp = value_.reference_;
    value_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& ConditionBasedOn_Value::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionBasedOn.Value.reference)
  return has_reference()
      ? *value_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ConditionBasedOn_Value::mutable_reference() {
  if (!has_reference()) {
    clear_value();
    set_has_reference();
    value_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionBasedOn.Value.reference)
  return value_.reference_;
}

inline bool ConditionBasedOn_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ConditionBasedOn_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ConditionBasedOn_Value::ValueCase ConditionBasedOn_Value::value_case() const {
  return ConditionBasedOn_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConditionBasedOn

// .google.fhir.stu3.proto.String id = 1;
inline bool ConditionBasedOn::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ConditionBasedOn::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ConditionBasedOn::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionBasedOn.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ConditionBasedOn::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionBasedOn.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ConditionBasedOn::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionBasedOn.id)
  return id_;
}
inline void ConditionBasedOn::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConditionBasedOn.id)
}

// .google.fhir.stu3.proto.ConditionBasedOn.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool ConditionBasedOn::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void ConditionBasedOn::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::ConditionBasedOn_Value& ConditionBasedOn::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::ConditionBasedOn_Value& ConditionBasedOn::value() const {
  const ::google::fhir::stu3::proto::ConditionBasedOn_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionBasedOn.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::ConditionBasedOn_Value*>(
      &::google::fhir::stu3::proto::_ConditionBasedOn_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::ConditionBasedOn_Value* ConditionBasedOn::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionBasedOn.value)
  
  ::google::fhir::stu3::proto::ConditionBasedOn_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::ConditionBasedOn_Value* ConditionBasedOn::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::ConditionBasedOn_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionBasedOn.value)
  return value_;
}
inline void ConditionBasedOn::set_allocated_value(::google::fhir::stu3::proto::ConditionBasedOn_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConditionBasedOn.value)
}

// -------------------------------------------------------------------

// ConditionCriticality

// .google.fhir.stu3.proto.String id = 1;
inline bool ConditionCriticality::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ConditionCriticality::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ConditionCriticality::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionCriticality.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ConditionCriticality::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionCriticality.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ConditionCriticality::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionCriticality.id)
  return id_;
}
inline void ConditionCriticality::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConditionCriticality.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ConditionCriticality::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ConditionCriticality::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ConditionCriticality::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionCriticality.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ConditionCriticality::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionCriticality.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ConditionCriticality::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionCriticality.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ConditionCriticality::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConditionCriticality.value_codeable_concept)
}

// -------------------------------------------------------------------

// ConditionDefinition

// .google.fhir.stu3.proto.String id = 1;
inline bool ConditionDefinition::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ConditionDefinition::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ConditionDefinition::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionDefinition.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ConditionDefinition::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionDefinition.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ConditionDefinition::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionDefinition.id)
  return id_;
}
inline void ConditionDefinition::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConditionDefinition.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/PlanDefinition"];
inline bool ConditionDefinition::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& ConditionDefinition::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& ConditionDefinition::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionDefinition.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ConditionDefinition::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionDefinition.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* ConditionDefinition::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionDefinition.value_reference)
  return value_reference_;
}
inline void ConditionDefinition::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConditionDefinition.value_reference)
}

// -------------------------------------------------------------------

// ConditionDueTo_Value

// .google.fhir.stu3.proto.CodeableConcept codeable_concept = 1;
inline bool ConditionDueTo_Value::has_codeable_concept() const {
  return value_case() == kCodeableConcept;
}
inline void ConditionDueTo_Value::set_has_codeable_concept() {
  _oneof_case_[0] = kCodeableConcept;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ConditionDueTo_Value::_internal_codeable_concept() const {
  return *value_.codeable_concept_;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ConditionDueTo_Value::release_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionDueTo.Value.codeable_concept)
  if (has_codeable_concept()) {
    clear_has_value();
      ::google::fhir::stu3::proto::CodeableConcept* temp = value_.codeable_concept_;
    value_.codeable_concept_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ConditionDueTo_Value::codeable_concept() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionDueTo.Value.codeable_concept)
  return has_codeable_concept()
      ? *value_.codeable_concept_
      : *reinterpret_cast< ::google::fhir::stu3::proto::CodeableConcept*>(&::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ConditionDueTo_Value::mutable_codeable_concept() {
  if (!has_codeable_concept()) {
    clear_value();
    set_has_codeable_concept();
    value_.codeable_concept_ = CreateMaybeMessage< ::google::fhir::stu3::proto::CodeableConcept >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionDueTo.Value.codeable_concept)
  return value_.codeable_concept_;
}

// .google.fhir.stu3.proto.Reference reference = 2 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Condition", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Procedure", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/MedicationAdministration", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Immunization", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/MedicationStatement"];
inline bool ConditionDueTo_Value::has_reference() const {
  return value_case() == kReference;
}
inline void ConditionDueTo_Value::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline const ::google::fhir::stu3::proto::Reference& ConditionDueTo_Value::_internal_reference() const {
  return *value_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* ConditionDueTo_Value::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionDueTo.Value.reference)
  if (has_reference()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Reference* temp = value_.reference_;
    value_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& ConditionDueTo_Value::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionDueTo.Value.reference)
  return has_reference()
      ? *value_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ConditionDueTo_Value::mutable_reference() {
  if (!has_reference()) {
    clear_value();
    set_has_reference();
    value_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionDueTo.Value.reference)
  return value_.reference_;
}

inline bool ConditionDueTo_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ConditionDueTo_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ConditionDueTo_Value::ValueCase ConditionDueTo_Value::value_case() const {
  return ConditionDueTo_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConditionDueTo

// .google.fhir.stu3.proto.String id = 1;
inline bool ConditionDueTo::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ConditionDueTo::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ConditionDueTo::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionDueTo.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ConditionDueTo::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionDueTo.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ConditionDueTo::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionDueTo.id)
  return id_;
}
inline void ConditionDueTo::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConditionDueTo.id)
}

// .google.fhir.stu3.proto.ConditionDueTo.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool ConditionDueTo::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void ConditionDueTo::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::ConditionDueTo_Value& ConditionDueTo::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::ConditionDueTo_Value& ConditionDueTo::value() const {
  const ::google::fhir::stu3::proto::ConditionDueTo_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionDueTo.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::ConditionDueTo_Value*>(
      &::google::fhir::stu3::proto::_ConditionDueTo_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::ConditionDueTo_Value* ConditionDueTo::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionDueTo.value)
  
  ::google::fhir::stu3::proto::ConditionDueTo_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::ConditionDueTo_Value* ConditionDueTo::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::ConditionDueTo_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionDueTo.value)
  return value_;
}
inline void ConditionDueTo::set_allocated_value(::google::fhir::stu3::proto::ConditionDueTo_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConditionDueTo.value)
}

// -------------------------------------------------------------------

// ConditionOccurredFollowing_Value

// .google.fhir.stu3.proto.CodeableConcept codeable_concept = 1;
inline bool ConditionOccurredFollowing_Value::has_codeable_concept() const {
  return value_case() == kCodeableConcept;
}
inline void ConditionOccurredFollowing_Value::set_has_codeable_concept() {
  _oneof_case_[0] = kCodeableConcept;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ConditionOccurredFollowing_Value::_internal_codeable_concept() const {
  return *value_.codeable_concept_;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ConditionOccurredFollowing_Value::release_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionOccurredFollowing.Value.codeable_concept)
  if (has_codeable_concept()) {
    clear_has_value();
      ::google::fhir::stu3::proto::CodeableConcept* temp = value_.codeable_concept_;
    value_.codeable_concept_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ConditionOccurredFollowing_Value::codeable_concept() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionOccurredFollowing.Value.codeable_concept)
  return has_codeable_concept()
      ? *value_.codeable_concept_
      : *reinterpret_cast< ::google::fhir::stu3::proto::CodeableConcept*>(&::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ConditionOccurredFollowing_Value::mutable_codeable_concept() {
  if (!has_codeable_concept()) {
    clear_value();
    set_has_codeable_concept();
    value_.codeable_concept_ = CreateMaybeMessage< ::google::fhir::stu3::proto::CodeableConcept >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionOccurredFollowing.Value.codeable_concept)
  return value_.codeable_concept_;
}

// .google.fhir.stu3.proto.Reference reference = 2 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Condition", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Procedure", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/MedicationAdministration", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Immunization", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/MedicationStatement"];
inline bool ConditionOccurredFollowing_Value::has_reference() const {
  return value_case() == kReference;
}
inline void ConditionOccurredFollowing_Value::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline const ::google::fhir::stu3::proto::Reference& ConditionOccurredFollowing_Value::_internal_reference() const {
  return *value_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* ConditionOccurredFollowing_Value::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionOccurredFollowing.Value.reference)
  if (has_reference()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Reference* temp = value_.reference_;
    value_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& ConditionOccurredFollowing_Value::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionOccurredFollowing.Value.reference)
  return has_reference()
      ? *value_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ConditionOccurredFollowing_Value::mutable_reference() {
  if (!has_reference()) {
    clear_value();
    set_has_reference();
    value_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionOccurredFollowing.Value.reference)
  return value_.reference_;
}

inline bool ConditionOccurredFollowing_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ConditionOccurredFollowing_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ConditionOccurredFollowing_Value::ValueCase ConditionOccurredFollowing_Value::value_case() const {
  return ConditionOccurredFollowing_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConditionOccurredFollowing

// .google.fhir.stu3.proto.String id = 1;
inline bool ConditionOccurredFollowing::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ConditionOccurredFollowing::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ConditionOccurredFollowing::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionOccurredFollowing.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ConditionOccurredFollowing::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionOccurredFollowing.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ConditionOccurredFollowing::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionOccurredFollowing.id)
  return id_;
}
inline void ConditionOccurredFollowing::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConditionOccurredFollowing.id)
}

// .google.fhir.stu3.proto.ConditionOccurredFollowing.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool ConditionOccurredFollowing::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void ConditionOccurredFollowing::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::ConditionOccurredFollowing_Value& ConditionOccurredFollowing::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::ConditionOccurredFollowing_Value& ConditionOccurredFollowing::value() const {
  const ::google::fhir::stu3::proto::ConditionOccurredFollowing_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionOccurredFollowing.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::ConditionOccurredFollowing_Value*>(
      &::google::fhir::stu3::proto::_ConditionOccurredFollowing_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::ConditionOccurredFollowing_Value* ConditionOccurredFollowing::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionOccurredFollowing.value)
  
  ::google::fhir::stu3::proto::ConditionOccurredFollowing_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::ConditionOccurredFollowing_Value* ConditionOccurredFollowing::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::ConditionOccurredFollowing_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionOccurredFollowing.value)
  return value_;
}
inline void ConditionOccurredFollowing::set_allocated_value(::google::fhir::stu3::proto::ConditionOccurredFollowing_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConditionOccurredFollowing.value)
}

// -------------------------------------------------------------------

// ConditionOutcome

// .google.fhir.stu3.proto.String id = 1;
inline bool ConditionOutcome::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ConditionOutcome::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ConditionOutcome::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionOutcome.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ConditionOutcome::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionOutcome.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ConditionOutcome::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionOutcome.id)
  return id_;
}
inline void ConditionOutcome::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConditionOutcome.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ConditionOutcome::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ConditionOutcome::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ConditionOutcome::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionOutcome.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ConditionOutcome::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionOutcome.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ConditionOutcome::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionOutcome.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ConditionOutcome::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConditionOutcome.value_codeable_concept)
}

// -------------------------------------------------------------------

// ConditionPartOf_Value

// .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Observation", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Procedure", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Condition"];
inline bool ConditionPartOf_Value::has_reference() const {
  return value_case() == kReference;
}
inline void ConditionPartOf_Value::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline const ::google::fhir::stu3::proto::Reference& ConditionPartOf_Value::_internal_reference() const {
  return *value_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* ConditionPartOf_Value::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionPartOf.Value.reference)
  if (has_reference()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Reference* temp = value_.reference_;
    value_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& ConditionPartOf_Value::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionPartOf.Value.reference)
  return has_reference()
      ? *value_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ConditionPartOf_Value::mutable_reference() {
  if (!has_reference()) {
    clear_value();
    set_has_reference();
    value_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionPartOf.Value.reference)
  return value_.reference_;
}

inline bool ConditionPartOf_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ConditionPartOf_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ConditionPartOf_Value::ValueCase ConditionPartOf_Value::value_case() const {
  return ConditionPartOf_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConditionPartOf

// .google.fhir.stu3.proto.String id = 1;
inline bool ConditionPartOf::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ConditionPartOf::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ConditionPartOf::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionPartOf.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ConditionPartOf::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionPartOf.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ConditionPartOf::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionPartOf.id)
  return id_;
}
inline void ConditionPartOf::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConditionPartOf.id)
}

// .google.fhir.stu3.proto.ConditionPartOf.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool ConditionPartOf::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void ConditionPartOf::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::ConditionPartOf_Value& ConditionPartOf::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::ConditionPartOf_Value& ConditionPartOf::value() const {
  const ::google::fhir::stu3::proto::ConditionPartOf_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionPartOf.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::ConditionPartOf_Value*>(
      &::google::fhir::stu3::proto::_ConditionPartOf_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::ConditionPartOf_Value* ConditionPartOf::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionPartOf.value)
  
  ::google::fhir::stu3::proto::ConditionPartOf_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::ConditionPartOf_Value* ConditionPartOf::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::ConditionPartOf_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionPartOf.value)
  return value_;
}
inline void ConditionPartOf::set_allocated_value(::google::fhir::stu3::proto::ConditionPartOf_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConditionPartOf.value)
}

// -------------------------------------------------------------------

// ConditionRuledOut

// .google.fhir.stu3.proto.String id = 1;
inline bool ConditionRuledOut::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ConditionRuledOut::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ConditionRuledOut::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionRuledOut.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ConditionRuledOut::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionRuledOut.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ConditionRuledOut::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionRuledOut.id)
  return id_;
}
inline void ConditionRuledOut::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConditionRuledOut.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Condition"];
inline bool ConditionRuledOut::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& ConditionRuledOut::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& ConditionRuledOut::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionRuledOut.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ConditionRuledOut::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionRuledOut.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* ConditionRuledOut::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionRuledOut.value_reference)
  return value_reference_;
}
inline void ConditionRuledOut::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConditionRuledOut.value_reference)
}

// -------------------------------------------------------------------

// ConditionTargetBodySite

// .google.fhir.stu3.proto.String id = 1;
inline bool ConditionTargetBodySite::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ConditionTargetBodySite::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ConditionTargetBodySite::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionTargetBodySite.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ConditionTargetBodySite::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionTargetBodySite.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ConditionTargetBodySite::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionTargetBodySite.id)
  return id_;
}
inline void ConditionTargetBodySite::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConditionTargetBodySite.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/BodySite"];
inline bool ConditionTargetBodySite::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& ConditionTargetBodySite::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& ConditionTargetBodySite::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConditionTargetBodySite.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ConditionTargetBodySite::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConditionTargetBodySite.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* ConditionTargetBodySite::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConditionTargetBodySite.value_reference)
  return value_reference_;
}
inline void ConditionTargetBodySite::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConditionTargetBodySite.value_reference)
}

// -------------------------------------------------------------------

// ConsentLocation

// .google.fhir.stu3.proto.String id = 1;
inline bool ConsentLocation::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ConsentLocation::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ConsentLocation::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConsentLocation.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ConsentLocation::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConsentLocation.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ConsentLocation::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConsentLocation.id)
  return id_;
}
inline void ConsentLocation::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConsentLocation.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Location"];
inline bool ConsentLocation::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& ConsentLocation::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& ConsentLocation::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConsentLocation.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ConsentLocation::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConsentLocation.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* ConsentLocation::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConsentLocation.value_reference)
  return value_reference_;
}
inline void ConsentLocation::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConsentLocation.value_reference)
}

// -------------------------------------------------------------------

// ConsentNotificationEndpoint

// .google.fhir.stu3.proto.String id = 1;
inline bool ConsentNotificationEndpoint::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ConsentNotificationEndpoint::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ConsentNotificationEndpoint::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConsentNotificationEndpoint.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ConsentNotificationEndpoint::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConsentNotificationEndpoint.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ConsentNotificationEndpoint::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConsentNotificationEndpoint.id)
  return id_;
}
inline void ConsentNotificationEndpoint::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConsentNotificationEndpoint.id)
}

// .google.fhir.stu3.proto.Uri value_uri = 3;
inline bool ConsentNotificationEndpoint::has_value_uri() const {
  return this != internal_default_instance() && value_uri_ != NULL;
}
inline const ::google::fhir::stu3::proto::Uri& ConsentNotificationEndpoint::_internal_value_uri() const {
  return *value_uri_;
}
inline const ::google::fhir::stu3::proto::Uri& ConsentNotificationEndpoint::value_uri() const {
  const ::google::fhir::stu3::proto::Uri* p = value_uri_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConsentNotificationEndpoint.value_uri)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* ConsentNotificationEndpoint::release_value_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConsentNotificationEndpoint.value_uri)
  
  ::google::fhir::stu3::proto::Uri* temp = value_uri_;
  value_uri_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* ConsentNotificationEndpoint::mutable_value_uri() {
  
  if (value_uri_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    value_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConsentNotificationEndpoint.value_uri)
  return value_uri_;
}
inline void ConsentNotificationEndpoint::set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_uri_);
  }
  if (value_uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_uri, submessage_arena);
    }
    
  } else {
    
  }
  value_uri_ = value_uri;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConsentNotificationEndpoint.value_uri)
}

// -------------------------------------------------------------------

// ConsentWitness_Value

// .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Organization", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Patient", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/RelatedPerson"];
inline bool ConsentWitness_Value::has_reference() const {
  return value_case() == kReference;
}
inline void ConsentWitness_Value::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline const ::google::fhir::stu3::proto::Reference& ConsentWitness_Value::_internal_reference() const {
  return *value_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* ConsentWitness_Value::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConsentWitness.Value.reference)
  if (has_reference()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Reference* temp = value_.reference_;
    value_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& ConsentWitness_Value::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConsentWitness.Value.reference)
  return has_reference()
      ? *value_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ConsentWitness_Value::mutable_reference() {
  if (!has_reference()) {
    clear_value();
    set_has_reference();
    value_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConsentWitness.Value.reference)
  return value_.reference_;
}

inline bool ConsentWitness_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ConsentWitness_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ConsentWitness_Value::ValueCase ConsentWitness_Value::value_case() const {
  return ConsentWitness_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConsentWitness

// .google.fhir.stu3.proto.String id = 1;
inline bool ConsentWitness::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ConsentWitness::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ConsentWitness::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConsentWitness.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ConsentWitness::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConsentWitness.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ConsentWitness::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConsentWitness.id)
  return id_;
}
inline void ConsentWitness::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConsentWitness.id)
}

// .google.fhir.stu3.proto.ConsentWitness.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool ConsentWitness::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void ConsentWitness::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::ConsentWitness_Value& ConsentWitness::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::ConsentWitness_Value& ConsentWitness::value() const {
  const ::google::fhir::stu3::proto::ConsentWitness_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ConsentWitness.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::ConsentWitness_Value*>(
      &::google::fhir::stu3::proto::_ConsentWitness_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::ConsentWitness_Value* ConsentWitness::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ConsentWitness.value)
  
  ::google::fhir::stu3::proto::ConsentWitness_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::ConsentWitness_Value* ConsentWitness::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::ConsentWitness_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ConsentWitness.value)
  return value_;
}
inline void ConsentWitness::set_allocated_value(::google::fhir::stu3::proto::ConsentWitness_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ConsentWitness.value)
}

// -------------------------------------------------------------------

// CalculatedValue

// .google.fhir.stu3.proto.String id = 1;
inline bool CalculatedValue::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CalculatedValue::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CalculatedValue::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CalculatedValue.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CalculatedValue::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CalculatedValue.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CalculatedValue::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CalculatedValue.id)
  return id_;
}
inline void CalculatedValue::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CalculatedValue.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool CalculatedValue::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CalculatedValue::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& CalculatedValue::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CalculatedValue.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CalculatedValue::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CalculatedValue.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CalculatedValue::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CalculatedValue.value_string)
  return value_string_;
}
inline void CalculatedValue::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CalculatedValue.value_string)
}

// -------------------------------------------------------------------

// AttachmentCitation

// .google.fhir.stu3.proto.String id = 1;
inline bool AttachmentCitation::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AttachmentCitation::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AttachmentCitation::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AttachmentCitation.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AttachmentCitation::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AttachmentCitation.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AttachmentCitation::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AttachmentCitation.id)
  return id_;
}
inline void AttachmentCitation::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AttachmentCitation.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AttachmentCitation::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AttachmentCitation::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AttachmentCitation::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AttachmentCitation.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AttachmentCitation::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AttachmentCitation.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AttachmentCitation::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AttachmentCitation.value_string)
  return value_string_;
}
inline void AttachmentCitation::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AttachmentCitation.value_string)
}

// -------------------------------------------------------------------

// CqifCondition

// .google.fhir.stu3.proto.String id = 1;
inline bool CqifCondition::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CqifCondition::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CqifCondition::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CqifCondition.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CqifCondition::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CqifCondition.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CqifCondition::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CqifCondition.id)
  return id_;
}
inline void CqifCondition::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CqifCondition.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool CqifCondition::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CqifCondition::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& CqifCondition::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CqifCondition.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CqifCondition::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CqifCondition.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CqifCondition::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CqifCondition.value_string)
  return value_string_;
}
inline void CqifCondition::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CqifCondition.value_string)
}

// -------------------------------------------------------------------

// CqlExpression

// .google.fhir.stu3.proto.String id = 1;
inline bool CqlExpression::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CqlExpression::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CqlExpression::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CqlExpression.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CqlExpression::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CqlExpression.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CqlExpression::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CqlExpression.id)
  return id_;
}
inline void CqlExpression::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CqlExpression.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool CqlExpression::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CqlExpression::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& CqlExpression::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CqlExpression.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CqlExpression::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CqlExpression.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CqlExpression::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CqlExpression.value_string)
  return value_string_;
}
inline void CqlExpression::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CqlExpression.value_string)
}

// -------------------------------------------------------------------

// FhirPathExpression

// .google.fhir.stu3.proto.String id = 1;
inline bool FhirPathExpression::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& FhirPathExpression::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& FhirPathExpression::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FhirPathExpression.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* FhirPathExpression::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FhirPathExpression.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* FhirPathExpression::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FhirPathExpression.id)
  return id_;
}
inline void FhirPathExpression::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.FhirPathExpression.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool FhirPathExpression::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& FhirPathExpression::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& FhirPathExpression::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FhirPathExpression.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* FhirPathExpression::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FhirPathExpression.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* FhirPathExpression::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FhirPathExpression.value_string)
  return value_string_;
}
inline void FhirPathExpression::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.FhirPathExpression.value_string)
}

// -------------------------------------------------------------------

// BasicEncounterClass

// .google.fhir.stu3.proto.String id = 1;
inline bool BasicEncounterClass::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& BasicEncounterClass::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& BasicEncounterClass::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicEncounterClass.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* BasicEncounterClass::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicEncounterClass.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* BasicEncounterClass::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicEncounterClass.id)
  return id_;
}
inline void BasicEncounterClass::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BasicEncounterClass.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool BasicEncounterClass::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& BasicEncounterClass::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& BasicEncounterClass::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicEncounterClass.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* BasicEncounterClass::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicEncounterClass.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* BasicEncounterClass::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicEncounterClass.value_codeable_concept)
  return value_codeable_concept_;
}
inline void BasicEncounterClass::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BasicEncounterClass.value_codeable_concept)
}

// -------------------------------------------------------------------

// BasicEncounterType

// .google.fhir.stu3.proto.String id = 1;
inline bool BasicEncounterType::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& BasicEncounterType::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& BasicEncounterType::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicEncounterType.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* BasicEncounterType::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicEncounterType.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* BasicEncounterType::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicEncounterType.id)
  return id_;
}
inline void BasicEncounterType::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BasicEncounterType.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool BasicEncounterType::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& BasicEncounterType::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& BasicEncounterType::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicEncounterType.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* BasicEncounterType::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicEncounterType.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* BasicEncounterType::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicEncounterType.value_codeable_concept)
  return value_codeable_concept_;
}
inline void BasicEncounterType::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BasicEncounterType.value_codeable_concept)
}

// -------------------------------------------------------------------

// BasicInitiatingOrganization

// .google.fhir.stu3.proto.String id = 1;
inline bool BasicInitiatingOrganization::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& BasicInitiatingOrganization::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& BasicInitiatingOrganization::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicInitiatingOrganization.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* BasicInitiatingOrganization::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicInitiatingOrganization.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* BasicInitiatingOrganization::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicInitiatingOrganization.id)
  return id_;
}
inline void BasicInitiatingOrganization::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BasicInitiatingOrganization.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Organization"];
inline bool BasicInitiatingOrganization::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& BasicInitiatingOrganization::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& BasicInitiatingOrganization::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicInitiatingOrganization.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* BasicInitiatingOrganization::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicInitiatingOrganization.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* BasicInitiatingOrganization::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicInitiatingOrganization.value_reference)
  return value_reference_;
}
inline void BasicInitiatingOrganization::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BasicInitiatingOrganization.value_reference)
}

// -------------------------------------------------------------------

// BasicInitiatingPerson_Value

// .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Person", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Patient", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/RelatedPerson"];
inline bool BasicInitiatingPerson_Value::has_reference() const {
  return value_case() == kReference;
}
inline void BasicInitiatingPerson_Value::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline const ::google::fhir::stu3::proto::Reference& BasicInitiatingPerson_Value::_internal_reference() const {
  return *value_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* BasicInitiatingPerson_Value::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicInitiatingPerson.Value.reference)
  if (has_reference()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Reference* temp = value_.reference_;
    value_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& BasicInitiatingPerson_Value::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicInitiatingPerson.Value.reference)
  return has_reference()
      ? *value_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* BasicInitiatingPerson_Value::mutable_reference() {
  if (!has_reference()) {
    clear_value();
    set_has_reference();
    value_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicInitiatingPerson.Value.reference)
  return value_.reference_;
}

inline bool BasicInitiatingPerson_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void BasicInitiatingPerson_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline BasicInitiatingPerson_Value::ValueCase BasicInitiatingPerson_Value::value_case() const {
  return BasicInitiatingPerson_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BasicInitiatingPerson

// .google.fhir.stu3.proto.String id = 1;
inline bool BasicInitiatingPerson::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& BasicInitiatingPerson::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& BasicInitiatingPerson::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicInitiatingPerson.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* BasicInitiatingPerson::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicInitiatingPerson.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* BasicInitiatingPerson::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicInitiatingPerson.id)
  return id_;
}
inline void BasicInitiatingPerson::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BasicInitiatingPerson.id)
}

// .google.fhir.stu3.proto.BasicInitiatingPerson.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool BasicInitiatingPerson::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void BasicInitiatingPerson::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::BasicInitiatingPerson_Value& BasicInitiatingPerson::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::BasicInitiatingPerson_Value& BasicInitiatingPerson::value() const {
  const ::google::fhir::stu3::proto::BasicInitiatingPerson_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicInitiatingPerson.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::BasicInitiatingPerson_Value*>(
      &::google::fhir::stu3::proto::_BasicInitiatingPerson_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::BasicInitiatingPerson_Value* BasicInitiatingPerson::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicInitiatingPerson.value)
  
  ::google::fhir::stu3::proto::BasicInitiatingPerson_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::BasicInitiatingPerson_Value* BasicInitiatingPerson::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::BasicInitiatingPerson_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicInitiatingPerson.value)
  return value_;
}
inline void BasicInitiatingPerson::set_allocated_value(::google::fhir::stu3::proto::BasicInitiatingPerson_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BasicInitiatingPerson.value)
}

// -------------------------------------------------------------------

// BasicReceivingOrganization

// .google.fhir.stu3.proto.String id = 1;
inline bool BasicReceivingOrganization::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& BasicReceivingOrganization::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& BasicReceivingOrganization::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicReceivingOrganization.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* BasicReceivingOrganization::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicReceivingOrganization.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* BasicReceivingOrganization::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicReceivingOrganization.id)
  return id_;
}
inline void BasicReceivingOrganization::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BasicReceivingOrganization.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Organization"];
inline bool BasicReceivingOrganization::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& BasicReceivingOrganization::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& BasicReceivingOrganization::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicReceivingOrganization.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* BasicReceivingOrganization::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicReceivingOrganization.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* BasicReceivingOrganization::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicReceivingOrganization.value_reference)
  return value_reference_;
}
inline void BasicReceivingOrganization::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BasicReceivingOrganization.value_reference)
}

// -------------------------------------------------------------------

// BasicReceivingPerson_Value

// .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Person", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Patient", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/RelatedPerson"];
inline bool BasicReceivingPerson_Value::has_reference() const {
  return value_case() == kReference;
}
inline void BasicReceivingPerson_Value::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline const ::google::fhir::stu3::proto::Reference& BasicReceivingPerson_Value::_internal_reference() const {
  return *value_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* BasicReceivingPerson_Value::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicReceivingPerson.Value.reference)
  if (has_reference()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Reference* temp = value_.reference_;
    value_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& BasicReceivingPerson_Value::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicReceivingPerson.Value.reference)
  return has_reference()
      ? *value_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* BasicReceivingPerson_Value::mutable_reference() {
  if (!has_reference()) {
    clear_value();
    set_has_reference();
    value_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicReceivingPerson.Value.reference)
  return value_.reference_;
}

inline bool BasicReceivingPerson_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void BasicReceivingPerson_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline BasicReceivingPerson_Value::ValueCase BasicReceivingPerson_Value::value_case() const {
  return BasicReceivingPerson_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BasicReceivingPerson

// .google.fhir.stu3.proto.String id = 1;
inline bool BasicReceivingPerson::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& BasicReceivingPerson::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& BasicReceivingPerson::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicReceivingPerson.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* BasicReceivingPerson::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicReceivingPerson.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* BasicReceivingPerson::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicReceivingPerson.id)
  return id_;
}
inline void BasicReceivingPerson::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BasicReceivingPerson.id)
}

// .google.fhir.stu3.proto.BasicReceivingPerson.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool BasicReceivingPerson::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void BasicReceivingPerson::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::BasicReceivingPerson_Value& BasicReceivingPerson::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::BasicReceivingPerson_Value& BasicReceivingPerson::value() const {
  const ::google::fhir::stu3::proto::BasicReceivingPerson_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicReceivingPerson.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::BasicReceivingPerson_Value*>(
      &::google::fhir::stu3::proto::_BasicReceivingPerson_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::BasicReceivingPerson_Value* BasicReceivingPerson::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicReceivingPerson.value)
  
  ::google::fhir::stu3::proto::BasicReceivingPerson_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::BasicReceivingPerson_Value* BasicReceivingPerson::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::BasicReceivingPerson_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicReceivingPerson.value)
  return value_;
}
inline void BasicReceivingPerson::set_allocated_value(::google::fhir::stu3::proto::BasicReceivingPerson_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BasicReceivingPerson.value)
}

// -------------------------------------------------------------------

// BasicRecipientLanguage

// .google.fhir.stu3.proto.String id = 1;
inline bool BasicRecipientLanguage::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& BasicRecipientLanguage::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& BasicRecipientLanguage::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicRecipientLanguage.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* BasicRecipientLanguage::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicRecipientLanguage.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* BasicRecipientLanguage::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicRecipientLanguage.id)
  return id_;
}
inline void BasicRecipientLanguage::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BasicRecipientLanguage.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool BasicRecipientLanguage::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& BasicRecipientLanguage::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& BasicRecipientLanguage::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicRecipientLanguage.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* BasicRecipientLanguage::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicRecipientLanguage.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* BasicRecipientLanguage::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicRecipientLanguage.value_codeable_concept)
  return value_codeable_concept_;
}
inline void BasicRecipientLanguage::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BasicRecipientLanguage.value_codeable_concept)
}

// -------------------------------------------------------------------

// BasicRecipientType

// .google.fhir.stu3.proto.String id = 1;
inline bool BasicRecipientType::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& BasicRecipientType::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& BasicRecipientType::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicRecipientType.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* BasicRecipientType::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicRecipientType.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* BasicRecipientType::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicRecipientType.id)
  return id_;
}
inline void BasicRecipientType::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BasicRecipientType.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool BasicRecipientType::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& BasicRecipientType::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& BasicRecipientType::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicRecipientType.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* BasicRecipientType::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicRecipientType.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* BasicRecipientType::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicRecipientType.value_codeable_concept)
  return value_codeable_concept_;
}
inline void BasicRecipientType::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BasicRecipientType.value_codeable_concept)
}

// -------------------------------------------------------------------

// BasicSystemUserLanguage

// .google.fhir.stu3.proto.String id = 1;
inline bool BasicSystemUserLanguage::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& BasicSystemUserLanguage::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& BasicSystemUserLanguage::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicSystemUserLanguage.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* BasicSystemUserLanguage::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicSystemUserLanguage.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* BasicSystemUserLanguage::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicSystemUserLanguage.id)
  return id_;
}
inline void BasicSystemUserLanguage::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BasicSystemUserLanguage.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool BasicSystemUserLanguage::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& BasicSystemUserLanguage::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& BasicSystemUserLanguage::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicSystemUserLanguage.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* BasicSystemUserLanguage::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicSystemUserLanguage.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* BasicSystemUserLanguage::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicSystemUserLanguage.value_codeable_concept)
  return value_codeable_concept_;
}
inline void BasicSystemUserLanguage::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BasicSystemUserLanguage.value_codeable_concept)
}

// -------------------------------------------------------------------

// BasicSystemUserTaskContext

// .google.fhir.stu3.proto.String id = 1;
inline bool BasicSystemUserTaskContext::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& BasicSystemUserTaskContext::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& BasicSystemUserTaskContext::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicSystemUserTaskContext.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* BasicSystemUserTaskContext::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicSystemUserTaskContext.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* BasicSystemUserTaskContext::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicSystemUserTaskContext.id)
  return id_;
}
inline void BasicSystemUserTaskContext::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BasicSystemUserTaskContext.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool BasicSystemUserTaskContext::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& BasicSystemUserTaskContext::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& BasicSystemUserTaskContext::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicSystemUserTaskContext.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* BasicSystemUserTaskContext::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicSystemUserTaskContext.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* BasicSystemUserTaskContext::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicSystemUserTaskContext.value_codeable_concept)
  return value_codeable_concept_;
}
inline void BasicSystemUserTaskContext::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BasicSystemUserTaskContext.value_codeable_concept)
}

// -------------------------------------------------------------------

// BasicSystemUserType

// .google.fhir.stu3.proto.String id = 1;
inline bool BasicSystemUserType::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& BasicSystemUserType::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& BasicSystemUserType::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicSystemUserType.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* BasicSystemUserType::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicSystemUserType.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* BasicSystemUserType::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicSystemUserType.id)
  return id_;
}
inline void BasicSystemUserType::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BasicSystemUserType.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool BasicSystemUserType::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& BasicSystemUserType::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& BasicSystemUserType::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BasicSystemUserType.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* BasicSystemUserType::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BasicSystemUserType.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* BasicSystemUserType::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BasicSystemUserType.value_codeable_concept)
  return value_codeable_concept_;
}
inline void BasicSystemUserType::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BasicSystemUserType.value_codeable_concept)
}

// -------------------------------------------------------------------

// InitialValue

// .google.fhir.stu3.proto.String id = 1;
inline bool InitialValue::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& InitialValue::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& InitialValue::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.InitialValue.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* InitialValue::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.InitialValue.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* InitialValue::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.InitialValue.id)
  return id_;
}
inline void InitialValue::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.InitialValue.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool InitialValue::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& InitialValue::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& InitialValue::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.InitialValue.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* InitialValue::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.InitialValue.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* InitialValue::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.InitialValue.value_string)
  return value_string_;
}
inline void InitialValue::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.InitialValue.value_string)
}

// -------------------------------------------------------------------

// CqifLibrary

// .google.fhir.stu3.proto.String id = 1;
inline bool CqifLibrary::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CqifLibrary::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CqifLibrary::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CqifLibrary.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CqifLibrary::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CqifLibrary.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CqifLibrary::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CqifLibrary.id)
  return id_;
}
inline void CqifLibrary::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CqifLibrary.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Library"];
inline bool CqifLibrary::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& CqifLibrary::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& CqifLibrary::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CqifLibrary.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* CqifLibrary::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CqifLibrary.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* CqifLibrary::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CqifLibrary.value_reference)
  return value_reference_;
}
inline void CqifLibrary::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CqifLibrary.value_reference)
}

// -------------------------------------------------------------------

// MeasureInfo

// .google.fhir.stu3.proto.String id = 1;
inline bool MeasureInfo::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& MeasureInfo::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& MeasureInfo::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MeasureInfo.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* MeasureInfo::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MeasureInfo.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* MeasureInfo::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MeasureInfo.id)
  return id_;
}
inline void MeasureInfo::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MeasureInfo.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int MeasureInfo::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* MeasureInfo::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MeasureInfo.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
MeasureInfo::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.MeasureInfo.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& MeasureInfo::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MeasureInfo.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* MeasureInfo::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.MeasureInfo.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
MeasureInfo::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.MeasureInfo.extension)
  return extension_;
}

// .google.fhir.stu3.proto.Reference measure = 4;
inline bool MeasureInfo::has_measure() const {
  return this != internal_default_instance() && measure_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& MeasureInfo::_internal_measure() const {
  return *measure_;
}
inline const ::google::fhir::stu3::proto::Reference& MeasureInfo::measure() const {
  const ::google::fhir::stu3::proto::Reference* p = measure_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MeasureInfo.measure)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* MeasureInfo::release_measure() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MeasureInfo.measure)
  
  ::google::fhir::stu3::proto::Reference* temp = measure_;
  measure_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* MeasureInfo::mutable_measure() {
  
  if (measure_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    measure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MeasureInfo.measure)
  return measure_;
}
inline void MeasureInfo::set_allocated_measure(::google::fhir::stu3::proto::Reference* measure) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(measure_);
  }
  if (measure) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      measure = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, measure, submessage_arena);
    }
    
  } else {
    
  }
  measure_ = measure;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MeasureInfo.measure)
}

// .google.fhir.stu3.proto.Identifier group_identifier = 5;
inline bool MeasureInfo::has_group_identifier() const {
  return this != internal_default_instance() && group_identifier_ != NULL;
}
inline const ::google::fhir::stu3::proto::Identifier& MeasureInfo::_internal_group_identifier() const {
  return *group_identifier_;
}
inline const ::google::fhir::stu3::proto::Identifier& MeasureInfo::group_identifier() const {
  const ::google::fhir::stu3::proto::Identifier* p = group_identifier_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MeasureInfo.group_identifier)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Identifier*>(
      &::google::fhir::stu3::proto::_Identifier_default_instance_);
}
inline ::google::fhir::stu3::proto::Identifier* MeasureInfo::release_group_identifier() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MeasureInfo.group_identifier)
  
  ::google::fhir::stu3::proto::Identifier* temp = group_identifier_;
  group_identifier_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Identifier* MeasureInfo::mutable_group_identifier() {
  
  if (group_identifier_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Identifier>(GetArenaNoVirtual());
    group_identifier_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MeasureInfo.group_identifier)
  return group_identifier_;
}
inline void MeasureInfo::set_allocated_group_identifier(::google::fhir::stu3::proto::Identifier* group_identifier) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(group_identifier_);
  }
  if (group_identifier) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      group_identifier = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, group_identifier, submessage_arena);
    }
    
  } else {
    
  }
  group_identifier_ = group_identifier;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MeasureInfo.group_identifier)
}

// .google.fhir.stu3.proto.Identifier population_identifier = 6;
inline bool MeasureInfo::has_population_identifier() const {
  return this != internal_default_instance() && population_identifier_ != NULL;
}
inline const ::google::fhir::stu3::proto::Identifier& MeasureInfo::_internal_population_identifier() const {
  return *population_identifier_;
}
inline const ::google::fhir::stu3::proto::Identifier& MeasureInfo::population_identifier() const {
  const ::google::fhir::stu3::proto::Identifier* p = population_identifier_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MeasureInfo.population_identifier)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Identifier*>(
      &::google::fhir::stu3::proto::_Identifier_default_instance_);
}
inline ::google::fhir::stu3::proto::Identifier* MeasureInfo::release_population_identifier() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MeasureInfo.population_identifier)
  
  ::google::fhir::stu3::proto::Identifier* temp = population_identifier_;
  population_identifier_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Identifier* MeasureInfo::mutable_population_identifier() {
  
  if (population_identifier_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Identifier>(GetArenaNoVirtual());
    population_identifier_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MeasureInfo.population_identifier)
  return population_identifier_;
}
inline void MeasureInfo::set_allocated_population_identifier(::google::fhir::stu3::proto::Identifier* population_identifier) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(population_identifier_);
  }
  if (population_identifier) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      population_identifier = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, population_identifier, submessage_arena);
    }
    
  } else {
    
  }
  population_identifier_ = population_identifier;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MeasureInfo.population_identifier)
}

// -------------------------------------------------------------------

// QuestionnaireOptionCode

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireOptionCode::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireOptionCode::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireOptionCode::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireOptionCode.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireOptionCode::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireOptionCode.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireOptionCode::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireOptionCode.id)
  return id_;
}
inline void QuestionnaireOptionCode::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireOptionCode.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool QuestionnaireOptionCode::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& QuestionnaireOptionCode::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& QuestionnaireOptionCode::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireOptionCode.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* QuestionnaireOptionCode::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireOptionCode.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* QuestionnaireOptionCode::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireOptionCode.value_codeable_concept)
  return value_codeable_concept_;
}
inline void QuestionnaireOptionCode::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireOptionCode.value_codeable_concept)
}

// -------------------------------------------------------------------

// AttachmentQualityOfEvidence

// .google.fhir.stu3.proto.String id = 1;
inline bool AttachmentQualityOfEvidence::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AttachmentQualityOfEvidence::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AttachmentQualityOfEvidence::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AttachmentQualityOfEvidence.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AttachmentQualityOfEvidence::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AttachmentQualityOfEvidence.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AttachmentQualityOfEvidence::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AttachmentQualityOfEvidence.id)
  return id_;
}
inline void AttachmentQualityOfEvidence::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AttachmentQualityOfEvidence.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool AttachmentQualityOfEvidence::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& AttachmentQualityOfEvidence::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& AttachmentQualityOfEvidence::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AttachmentQualityOfEvidence.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* AttachmentQualityOfEvidence::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AttachmentQualityOfEvidence.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* AttachmentQualityOfEvidence::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AttachmentQualityOfEvidence.value_codeable_concept)
  return value_codeable_concept_;
}
inline void AttachmentQualityOfEvidence::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AttachmentQualityOfEvidence.value_codeable_concept)
}

// -------------------------------------------------------------------

// CodingSourceValueSet

// .google.fhir.stu3.proto.String id = 1;
inline bool CodingSourceValueSet::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodingSourceValueSet::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodingSourceValueSet::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodingSourceValueSet.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodingSourceValueSet::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodingSourceValueSet.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodingSourceValueSet::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodingSourceValueSet.id)
  return id_;
}
inline void CodingSourceValueSet::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodingSourceValueSet.id)
}

// .google.fhir.stu3.proto.Uri value_uri = 3;
inline bool CodingSourceValueSet::has_value_uri() const {
  return this != internal_default_instance() && value_uri_ != NULL;
}
inline const ::google::fhir::stu3::proto::Uri& CodingSourceValueSet::_internal_value_uri() const {
  return *value_uri_;
}
inline const ::google::fhir::stu3::proto::Uri& CodingSourceValueSet::value_uri() const {
  const ::google::fhir::stu3::proto::Uri* p = value_uri_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodingSourceValueSet.value_uri)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* CodingSourceValueSet::release_value_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodingSourceValueSet.value_uri)
  
  ::google::fhir::stu3::proto::Uri* temp = value_uri_;
  value_uri_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* CodingSourceValueSet::mutable_value_uri() {
  
  if (value_uri_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    value_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodingSourceValueSet.value_uri)
  return value_uri_;
}
inline void CodingSourceValueSet::set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_uri_);
  }
  if (value_uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_uri, submessage_arena);
    }
    
  } else {
    
  }
  value_uri_ = value_uri;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodingSourceValueSet.value_uri)
}

// -------------------------------------------------------------------

// AttachmentStrengthOfRecommendation

// .google.fhir.stu3.proto.String id = 1;
inline bool AttachmentStrengthOfRecommendation::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AttachmentStrengthOfRecommendation::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AttachmentStrengthOfRecommendation::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AttachmentStrengthOfRecommendation.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AttachmentStrengthOfRecommendation::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AttachmentStrengthOfRecommendation.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AttachmentStrengthOfRecommendation::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AttachmentStrengthOfRecommendation.id)
  return id_;
}
inline void AttachmentStrengthOfRecommendation::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AttachmentStrengthOfRecommendation.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool AttachmentStrengthOfRecommendation::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& AttachmentStrengthOfRecommendation::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& AttachmentStrengthOfRecommendation::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AttachmentStrengthOfRecommendation.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* AttachmentStrengthOfRecommendation::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AttachmentStrengthOfRecommendation.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* AttachmentStrengthOfRecommendation::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AttachmentStrengthOfRecommendation.value_codeable_concept)
  return value_codeable_concept_;
}
inline void AttachmentStrengthOfRecommendation::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AttachmentStrengthOfRecommendation.value_codeable_concept)
}

// -------------------------------------------------------------------

// DataAbsentReason

// .google.fhir.stu3.proto.String id = 1;
inline bool DataAbsentReason::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DataAbsentReason::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DataAbsentReason::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DataAbsentReason.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DataAbsentReason::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DataAbsentReason.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DataAbsentReason::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DataAbsentReason.id)
  return id_;
}
inline void DataAbsentReason::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DataAbsentReason.id)
}

// .google.fhir.stu3.proto.DataAbsentReasonCode value_code = 3;
inline bool DataAbsentReason::has_value_code() const {
  return this != internal_default_instance() && value_code_ != NULL;
}
inline const ::google::fhir::stu3::proto::DataAbsentReasonCode& DataAbsentReason::_internal_value_code() const {
  return *value_code_;
}
inline const ::google::fhir::stu3::proto::DataAbsentReasonCode& DataAbsentReason::value_code() const {
  const ::google::fhir::stu3::proto::DataAbsentReasonCode* p = value_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DataAbsentReason.value_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::DataAbsentReasonCode*>(
      &::google::fhir::stu3::proto::_DataAbsentReasonCode_default_instance_);
}
inline ::google::fhir::stu3::proto::DataAbsentReasonCode* DataAbsentReason::release_value_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DataAbsentReason.value_code)
  
  ::google::fhir::stu3::proto::DataAbsentReasonCode* temp = value_code_;
  value_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::DataAbsentReasonCode* DataAbsentReason::mutable_value_code() {
  
  if (value_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::DataAbsentReasonCode>(GetArenaNoVirtual());
    value_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DataAbsentReason.value_code)
  return value_code_;
}
inline void DataAbsentReason::set_allocated_value_code(::google::fhir::stu3::proto::DataAbsentReasonCode* value_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_code_);
  }
  if (value_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_code, submessage_arena);
    }
    
  } else {
    
  }
  value_code_ = value_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DataAbsentReason.value_code)
}

// -------------------------------------------------------------------

// StructureDefinitionDatadictionary

// .google.fhir.stu3.proto.String id = 1;
inline bool StructureDefinitionDatadictionary::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& StructureDefinitionDatadictionary::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& StructureDefinitionDatadictionary::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StructureDefinitionDatadictionary.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* StructureDefinitionDatadictionary::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StructureDefinitionDatadictionary.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* StructureDefinitionDatadictionary::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StructureDefinitionDatadictionary.id)
  return id_;
}
inline void StructureDefinitionDatadictionary::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StructureDefinitionDatadictionary.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool StructureDefinitionDatadictionary::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& StructureDefinitionDatadictionary::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& StructureDefinitionDatadictionary::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StructureDefinitionDatadictionary.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* StructureDefinitionDatadictionary::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StructureDefinitionDatadictionary.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* StructureDefinitionDatadictionary::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StructureDefinitionDatadictionary.value_string)
  return value_string_;
}
inline void StructureDefinitionDatadictionary::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StructureDefinitionDatadictionary.value_string)
}

// -------------------------------------------------------------------

// DeviceDin

// .google.fhir.stu3.proto.String id = 1;
inline bool DeviceDin::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DeviceDin::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DeviceDin::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DeviceDin.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DeviceDin::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DeviceDin.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DeviceDin::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DeviceDin.id)
  return id_;
}
inline void DeviceDin::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DeviceDin.id)
}

// .google.fhir.stu3.proto.Identifier value_identifier = 3;
inline bool DeviceDin::has_value_identifier() const {
  return this != internal_default_instance() && value_identifier_ != NULL;
}
inline const ::google::fhir::stu3::proto::Identifier& DeviceDin::_internal_value_identifier() const {
  return *value_identifier_;
}
inline const ::google::fhir::stu3::proto::Identifier& DeviceDin::value_identifier() const {
  const ::google::fhir::stu3::proto::Identifier* p = value_identifier_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DeviceDin.value_identifier)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Identifier*>(
      &::google::fhir::stu3::proto::_Identifier_default_instance_);
}
inline ::google::fhir::stu3::proto::Identifier* DeviceDin::release_value_identifier() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DeviceDin.value_identifier)
  
  ::google::fhir::stu3::proto::Identifier* temp = value_identifier_;
  value_identifier_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Identifier* DeviceDin::mutable_value_identifier() {
  
  if (value_identifier_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Identifier>(GetArenaNoVirtual());
    value_identifier_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DeviceDin.value_identifier)
  return value_identifier_;
}
inline void DeviceDin::set_allocated_value_identifier(::google::fhir::stu3::proto::Identifier* value_identifier) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_identifier_);
  }
  if (value_identifier) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_identifier = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_identifier, submessage_arena);
    }
    
  } else {
    
  }
  value_identifier_ = value_identifier;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DeviceDin.value_identifier)
}

// -------------------------------------------------------------------

// DeviceImplantStatus

// .google.fhir.stu3.proto.String id = 1;
inline bool DeviceImplantStatus::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DeviceImplantStatus::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DeviceImplantStatus::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DeviceImplantStatus.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DeviceImplantStatus::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DeviceImplantStatus.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DeviceImplantStatus::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DeviceImplantStatus.id)
  return id_;
}
inline void DeviceImplantStatus::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DeviceImplantStatus.id)
}

// .google.fhir.stu3.proto.ImplantStatusCode value_code = 3;
inline bool DeviceImplantStatus::has_value_code() const {
  return this != internal_default_instance() && value_code_ != NULL;
}
inline const ::google::fhir::stu3::proto::ImplantStatusCode& DeviceImplantStatus::_internal_value_code() const {
  return *value_code_;
}
inline const ::google::fhir::stu3::proto::ImplantStatusCode& DeviceImplantStatus::value_code() const {
  const ::google::fhir::stu3::proto::ImplantStatusCode* p = value_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DeviceImplantStatus.value_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::ImplantStatusCode*>(
      &::google::fhir::stu3::proto::_ImplantStatusCode_default_instance_);
}
inline ::google::fhir::stu3::proto::ImplantStatusCode* DeviceImplantStatus::release_value_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DeviceImplantStatus.value_code)
  
  ::google::fhir::stu3::proto::ImplantStatusCode* temp = value_code_;
  value_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::ImplantStatusCode* DeviceImplantStatus::mutable_value_code() {
  
  if (value_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::ImplantStatusCode>(GetArenaNoVirtual());
    value_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DeviceImplantStatus.value_code)
  return value_code_;
}
inline void DeviceImplantStatus::set_allocated_value_code(::google::fhir::stu3::proto::ImplantStatusCode* value_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_code_);
  }
  if (value_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_code, submessage_arena);
    }
    
  } else {
    
  }
  value_code_ = value_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DeviceImplantStatus.value_code)
}

// -------------------------------------------------------------------

// DeviceRequestPatientInstruction

// .google.fhir.stu3.proto.String id = 1;
inline bool DeviceRequestPatientInstruction::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DeviceRequestPatientInstruction::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DeviceRequestPatientInstruction::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DeviceRequestPatientInstruction.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DeviceRequestPatientInstruction::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DeviceRequestPatientInstruction.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DeviceRequestPatientInstruction::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DeviceRequestPatientInstruction.id)
  return id_;
}
inline void DeviceRequestPatientInstruction::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DeviceRequestPatientInstruction.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int DeviceRequestPatientInstruction::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* DeviceRequestPatientInstruction::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DeviceRequestPatientInstruction.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
DeviceRequestPatientInstruction::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.DeviceRequestPatientInstruction.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& DeviceRequestPatientInstruction::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DeviceRequestPatientInstruction.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* DeviceRequestPatientInstruction::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.DeviceRequestPatientInstruction.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
DeviceRequestPatientInstruction::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.DeviceRequestPatientInstruction.extension)
  return extension_;
}

// .google.fhir.stu3.proto.LanguageCode lang = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool DeviceRequestPatientInstruction::has_lang() const {
  return this != internal_default_instance() && lang_ != NULL;
}
inline const ::google::fhir::stu3::proto::LanguageCode& DeviceRequestPatientInstruction::_internal_lang() const {
  return *lang_;
}
inline const ::google::fhir::stu3::proto::LanguageCode& DeviceRequestPatientInstruction::lang() const {
  const ::google::fhir::stu3::proto::LanguageCode* p = lang_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DeviceRequestPatientInstruction.lang)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::LanguageCode*>(
      &::google::fhir::stu3::proto::_LanguageCode_default_instance_);
}
inline ::google::fhir::stu3::proto::LanguageCode* DeviceRequestPatientInstruction::release_lang() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DeviceRequestPatientInstruction.lang)
  
  ::google::fhir::stu3::proto::LanguageCode* temp = lang_;
  lang_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::LanguageCode* DeviceRequestPatientInstruction::mutable_lang() {
  
  if (lang_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::LanguageCode>(GetArenaNoVirtual());
    lang_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DeviceRequestPatientInstruction.lang)
  return lang_;
}
inline void DeviceRequestPatientInstruction::set_allocated_lang(::google::fhir::stu3::proto::LanguageCode* lang) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lang_);
  }
  if (lang) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lang = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lang, submessage_arena);
    }
    
  } else {
    
  }
  lang_ = lang;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DeviceRequestPatientInstruction.lang)
}

// .google.fhir.stu3.proto.String content = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool DeviceRequestPatientInstruction::has_content() const {
  return this != internal_default_instance() && content_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DeviceRequestPatientInstruction::_internal_content() const {
  return *content_;
}
inline const ::google::fhir::stu3::proto::String& DeviceRequestPatientInstruction::content() const {
  const ::google::fhir::stu3::proto::String* p = content_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DeviceRequestPatientInstruction.content)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DeviceRequestPatientInstruction::release_content() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DeviceRequestPatientInstruction.content)
  
  ::google::fhir::stu3::proto::String* temp = content_;
  content_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DeviceRequestPatientInstruction::mutable_content() {
  
  if (content_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    content_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DeviceRequestPatientInstruction.content)
  return content_;
}
inline void DeviceRequestPatientInstruction::set_allocated_content(::google::fhir::stu3::proto::String* content) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(content_);
  }
  if (content) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      content = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, content, submessage_arena);
    }
    
  } else {
    
  }
  content_ = content;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DeviceRequestPatientInstruction.content)
}

// -------------------------------------------------------------------

// DeviceRequestReasonRejected

// .google.fhir.stu3.proto.String id = 1;
inline bool DeviceRequestReasonRejected::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DeviceRequestReasonRejected::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DeviceRequestReasonRejected::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DeviceRequestReasonRejected.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DeviceRequestReasonRejected::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DeviceRequestReasonRejected.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DeviceRequestReasonRejected::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DeviceRequestReasonRejected.id)
  return id_;
}
inline void DeviceRequestReasonRejected::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DeviceRequestReasonRejected.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool DeviceRequestReasonRejected::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& DeviceRequestReasonRejected::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& DeviceRequestReasonRejected::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DeviceRequestReasonRejected.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* DeviceRequestReasonRejected::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DeviceRequestReasonRejected.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* DeviceRequestReasonRejected::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DeviceRequestReasonRejected.value_codeable_concept)
  return value_codeable_concept_;
}
inline void DeviceRequestReasonRejected::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DeviceRequestReasonRejected.value_codeable_concept)
}

// -------------------------------------------------------------------

// DiagnosticReportAddendumOf

// .google.fhir.stu3.proto.String id = 1;
inline bool DiagnosticReportAddendumOf::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportAddendumOf::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportAddendumOf::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportAddendumOf.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportAddendumOf::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportAddendumOf.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportAddendumOf::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportAddendumOf.id)
  return id_;
}
inline void DiagnosticReportAddendumOf::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportAddendumOf.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/DiagnosticReport"];
inline bool DiagnosticReportAddendumOf::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& DiagnosticReportAddendumOf::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& DiagnosticReportAddendumOf::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportAddendumOf.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* DiagnosticReportAddendumOf::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportAddendumOf.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* DiagnosticReportAddendumOf::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportAddendumOf.value_reference)
  return value_reference_;
}
inline void DiagnosticReportAddendumOf::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportAddendumOf.value_reference)
}

// -------------------------------------------------------------------

// DiagnosticReportExtends

// .google.fhir.stu3.proto.String id = 1;
inline bool DiagnosticReportExtends::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportExtends::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportExtends::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportExtends.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportExtends::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportExtends.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportExtends::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportExtends.id)
  return id_;
}
inline void DiagnosticReportExtends::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportExtends.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/DiagnosticReport"];
inline bool DiagnosticReportExtends::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& DiagnosticReportExtends::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& DiagnosticReportExtends::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportExtends.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* DiagnosticReportExtends::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportExtends.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* DiagnosticReportExtends::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportExtends.value_reference)
  return value_reference_;
}
inline void DiagnosticReportExtends::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportExtends.value_reference)
}

// -------------------------------------------------------------------

// DiagnosticReportAnalysis

// .google.fhir.stu3.proto.String id = 1;
inline bool DiagnosticReportAnalysis::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportAnalysis::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportAnalysis::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportAnalysis.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportAnalysis::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportAnalysis.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportAnalysis::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportAnalysis.id)
  return id_;
}
inline void DiagnosticReportAnalysis::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportAnalysis.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int DiagnosticReportAnalysis::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* DiagnosticReportAnalysis::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportAnalysis.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
DiagnosticReportAnalysis::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.DiagnosticReportAnalysis.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& DiagnosticReportAnalysis::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportAnalysis.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* DiagnosticReportAnalysis::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.DiagnosticReportAnalysis.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
DiagnosticReportAnalysis::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.DiagnosticReportAnalysis.extension)
  return extension_;
}

// .google.fhir.stu3.proto.CodeableConcept type = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool DiagnosticReportAnalysis::has_type() const {
  return this != internal_default_instance() && type_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& DiagnosticReportAnalysis::_internal_type() const {
  return *type_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& DiagnosticReportAnalysis::type() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = type_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportAnalysis.type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* DiagnosticReportAnalysis::release_type() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportAnalysis.type)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* DiagnosticReportAnalysis::mutable_type() {
  
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportAnalysis.type)
  return type_;
}
inline void DiagnosticReportAnalysis::set_allocated_type(::google::fhir::stu3::proto::CodeableConcept* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportAnalysis.type)
}

// .google.fhir.stu3.proto.CodeableConcept interpretation = 5;
inline bool DiagnosticReportAnalysis::has_interpretation() const {
  return this != internal_default_instance() && interpretation_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& DiagnosticReportAnalysis::_internal_interpretation() const {
  return *interpretation_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& DiagnosticReportAnalysis::interpretation() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = interpretation_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportAnalysis.interpretation)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* DiagnosticReportAnalysis::release_interpretation() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportAnalysis.interpretation)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = interpretation_;
  interpretation_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* DiagnosticReportAnalysis::mutable_interpretation() {
  
  if (interpretation_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    interpretation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportAnalysis.interpretation)
  return interpretation_;
}
inline void DiagnosticReportAnalysis::set_allocated_interpretation(::google::fhir::stu3::proto::CodeableConcept* interpretation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(interpretation_);
  }
  if (interpretation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      interpretation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, interpretation, submessage_arena);
    }
    
  } else {
    
  }
  interpretation_ = interpretation;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportAnalysis.interpretation)
}

// -------------------------------------------------------------------

// DiagnosticReportAssessedCondition

// .google.fhir.stu3.proto.String id = 1;
inline bool DiagnosticReportAssessedCondition::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportAssessedCondition::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportAssessedCondition::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportAssessedCondition.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportAssessedCondition::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportAssessedCondition.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportAssessedCondition::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportAssessedCondition.id)
  return id_;
}
inline void DiagnosticReportAssessedCondition::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportAssessedCondition.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Condition"];
inline bool DiagnosticReportAssessedCondition::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& DiagnosticReportAssessedCondition::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& DiagnosticReportAssessedCondition::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportAssessedCondition.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* DiagnosticReportAssessedCondition::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportAssessedCondition.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* DiagnosticReportAssessedCondition::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportAssessedCondition.value_reference)
  return value_reference_;
}
inline void DiagnosticReportAssessedCondition::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportAssessedCondition.value_reference)
}

// -------------------------------------------------------------------

// DiagnosticReportFamilyMemberHistory

// .google.fhir.stu3.proto.String id = 1;
inline bool DiagnosticReportFamilyMemberHistory::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportFamilyMemberHistory::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportFamilyMemberHistory::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportFamilyMemberHistory.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportFamilyMemberHistory::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportFamilyMemberHistory.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportFamilyMemberHistory::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportFamilyMemberHistory.id)
  return id_;
}
inline void DiagnosticReportFamilyMemberHistory::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportFamilyMemberHistory.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/FamilyMemberHistory"];
inline bool DiagnosticReportFamilyMemberHistory::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& DiagnosticReportFamilyMemberHistory::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& DiagnosticReportFamilyMemberHistory::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportFamilyMemberHistory.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* DiagnosticReportFamilyMemberHistory::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportFamilyMemberHistory.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* DiagnosticReportFamilyMemberHistory::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportFamilyMemberHistory.value_reference)
  return value_reference_;
}
inline void DiagnosticReportFamilyMemberHistory::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportFamilyMemberHistory.value_reference)
}

// -------------------------------------------------------------------

// DiagnosticReportLocationPerformed

// .google.fhir.stu3.proto.String id = 1;
inline bool DiagnosticReportLocationPerformed::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportLocationPerformed::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportLocationPerformed::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportLocationPerformed.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportLocationPerformed::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportLocationPerformed.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportLocationPerformed::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportLocationPerformed.id)
  return id_;
}
inline void DiagnosticReportLocationPerformed::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportLocationPerformed.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Location"];
inline bool DiagnosticReportLocationPerformed::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& DiagnosticReportLocationPerformed::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& DiagnosticReportLocationPerformed::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportLocationPerformed.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* DiagnosticReportLocationPerformed::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportLocationPerformed.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* DiagnosticReportLocationPerformed::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportLocationPerformed.value_reference)
  return value_reference_;
}
inline void DiagnosticReportLocationPerformed::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportLocationPerformed.value_reference)
}

// -------------------------------------------------------------------

// DiagnosticReportReplaces

// .google.fhir.stu3.proto.String id = 1;
inline bool DiagnosticReportReplaces::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportReplaces::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportReplaces::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportReplaces.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportReplaces::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportReplaces.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportReplaces::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportReplaces.id)
  return id_;
}
inline void DiagnosticReportReplaces::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportReplaces.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/DiagnosticReport"];
inline bool DiagnosticReportReplaces::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& DiagnosticReportReplaces::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& DiagnosticReportReplaces::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportReplaces.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* DiagnosticReportReplaces::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportReplaces.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* DiagnosticReportReplaces::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportReplaces.value_reference)
  return value_reference_;
}
inline void DiagnosticReportReplaces::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportReplaces.value_reference)
}

// -------------------------------------------------------------------

// DiagnosticReportSummaryOf

// .google.fhir.stu3.proto.String id = 1;
inline bool DiagnosticReportSummaryOf::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportSummaryOf::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportSummaryOf::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportSummaryOf.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportSummaryOf::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportSummaryOf.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportSummaryOf::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportSummaryOf.id)
  return id_;
}
inline void DiagnosticReportSummaryOf::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportSummaryOf.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/DiagnosticReport"];
inline bool DiagnosticReportSummaryOf::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& DiagnosticReportSummaryOf::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& DiagnosticReportSummaryOf::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportSummaryOf.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* DiagnosticReportSummaryOf::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportSummaryOf.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* DiagnosticReportSummaryOf::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportSummaryOf.value_reference)
  return value_reference_;
}
inline void DiagnosticReportSummaryOf::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportSummaryOf.value_reference)
}

// -------------------------------------------------------------------

// ElementDefinitionAllowedUnits_Value

// .google.fhir.stu3.proto.CodeableConcept codeable_concept = 1;
inline bool ElementDefinitionAllowedUnits_Value::has_codeable_concept() const {
  return value_case() == kCodeableConcept;
}
inline void ElementDefinitionAllowedUnits_Value::set_has_codeable_concept() {
  _oneof_case_[0] = kCodeableConcept;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ElementDefinitionAllowedUnits_Value::_internal_codeable_concept() const {
  return *value_.codeable_concept_;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ElementDefinitionAllowedUnits_Value::release_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionAllowedUnits.Value.codeable_concept)
  if (has_codeable_concept()) {
    clear_has_value();
      ::google::fhir::stu3::proto::CodeableConcept* temp = value_.codeable_concept_;
    value_.codeable_concept_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ElementDefinitionAllowedUnits_Value::codeable_concept() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionAllowedUnits.Value.codeable_concept)
  return has_codeable_concept()
      ? *value_.codeable_concept_
      : *reinterpret_cast< ::google::fhir::stu3::proto::CodeableConcept*>(&::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ElementDefinitionAllowedUnits_Value::mutable_codeable_concept() {
  if (!has_codeable_concept()) {
    clear_value();
    set_has_codeable_concept();
    value_.codeable_concept_ = CreateMaybeMessage< ::google::fhir::stu3::proto::CodeableConcept >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionAllowedUnits.Value.codeable_concept)
  return value_.codeable_concept_;
}

// .google.fhir.stu3.proto.Reference reference = 2 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ValueSet"];
inline bool ElementDefinitionAllowedUnits_Value::has_reference() const {
  return value_case() == kReference;
}
inline void ElementDefinitionAllowedUnits_Value::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline const ::google::fhir::stu3::proto::Reference& ElementDefinitionAllowedUnits_Value::_internal_reference() const {
  return *value_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* ElementDefinitionAllowedUnits_Value::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionAllowedUnits.Value.reference)
  if (has_reference()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Reference* temp = value_.reference_;
    value_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& ElementDefinitionAllowedUnits_Value::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionAllowedUnits.Value.reference)
  return has_reference()
      ? *value_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ElementDefinitionAllowedUnits_Value::mutable_reference() {
  if (!has_reference()) {
    clear_value();
    set_has_reference();
    value_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionAllowedUnits.Value.reference)
  return value_.reference_;
}

inline bool ElementDefinitionAllowedUnits_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ElementDefinitionAllowedUnits_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ElementDefinitionAllowedUnits_Value::ValueCase ElementDefinitionAllowedUnits_Value::value_case() const {
  return ElementDefinitionAllowedUnits_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ElementDefinitionAllowedUnits

// .google.fhir.stu3.proto.String id = 1;
inline bool ElementDefinitionAllowedUnits::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionAllowedUnits::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionAllowedUnits::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionAllowedUnits.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionAllowedUnits::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionAllowedUnits.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionAllowedUnits::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionAllowedUnits.id)
  return id_;
}
inline void ElementDefinitionAllowedUnits::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionAllowedUnits.id)
}

// .google.fhir.stu3.proto.ElementDefinitionAllowedUnits.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool ElementDefinitionAllowedUnits::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void ElementDefinitionAllowedUnits::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::ElementDefinitionAllowedUnits_Value& ElementDefinitionAllowedUnits::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::ElementDefinitionAllowedUnits_Value& ElementDefinitionAllowedUnits::value() const {
  const ::google::fhir::stu3::proto::ElementDefinitionAllowedUnits_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionAllowedUnits.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::ElementDefinitionAllowedUnits_Value*>(
      &::google::fhir::stu3::proto::_ElementDefinitionAllowedUnits_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::ElementDefinitionAllowedUnits_Value* ElementDefinitionAllowedUnits::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionAllowedUnits.value)
  
  ::google::fhir::stu3::proto::ElementDefinitionAllowedUnits_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::ElementDefinitionAllowedUnits_Value* ElementDefinitionAllowedUnits::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionAllowedUnits_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionAllowedUnits.value)
  return value_;
}
inline void ElementDefinitionAllowedUnits::set_allocated_value(::google::fhir::stu3::proto::ElementDefinitionAllowedUnits_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionAllowedUnits.value)
}

// -------------------------------------------------------------------

// ElementDefinitionBestpractice_Value

// .google.fhir.stu3.proto.Boolean boolean = 1;
inline bool ElementDefinitionBestpractice_Value::has_boolean() const {
  return value_case() == kBoolean;
}
inline void ElementDefinitionBestpractice_Value::set_has_boolean() {
  _oneof_case_[0] = kBoolean;
}
inline const ::google::fhir::stu3::proto::Boolean& ElementDefinitionBestpractice_Value::_internal_boolean() const {
  return *value_.boolean_;
}
inline ::google::fhir::stu3::proto::Boolean* ElementDefinitionBestpractice_Value::release_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionBestpractice.Value.boolean)
  if (has_boolean()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Boolean* temp = value_.boolean_;
    value_.boolean_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Boolean& ElementDefinitionBestpractice_Value::boolean() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionBestpractice.Value.boolean)
  return has_boolean()
      ? *value_.boolean_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Boolean*>(&::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* ElementDefinitionBestpractice_Value::mutable_boolean() {
  if (!has_boolean()) {
    clear_value();
    set_has_boolean();
    value_.boolean_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Boolean >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionBestpractice.Value.boolean)
  return value_.boolean_;
}

// .google.fhir.stu3.proto.CodeableConcept codeable_concept = 2;
inline bool ElementDefinitionBestpractice_Value::has_codeable_concept() const {
  return value_case() == kCodeableConcept;
}
inline void ElementDefinitionBestpractice_Value::set_has_codeable_concept() {
  _oneof_case_[0] = kCodeableConcept;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ElementDefinitionBestpractice_Value::_internal_codeable_concept() const {
  return *value_.codeable_concept_;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ElementDefinitionBestpractice_Value::release_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionBestpractice.Value.codeable_concept)
  if (has_codeable_concept()) {
    clear_has_value();
      ::google::fhir::stu3::proto::CodeableConcept* temp = value_.codeable_concept_;
    value_.codeable_concept_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ElementDefinitionBestpractice_Value::codeable_concept() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionBestpractice.Value.codeable_concept)
  return has_codeable_concept()
      ? *value_.codeable_concept_
      : *reinterpret_cast< ::google::fhir::stu3::proto::CodeableConcept*>(&::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ElementDefinitionBestpractice_Value::mutable_codeable_concept() {
  if (!has_codeable_concept()) {
    clear_value();
    set_has_codeable_concept();
    value_.codeable_concept_ = CreateMaybeMessage< ::google::fhir::stu3::proto::CodeableConcept >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionBestpractice.Value.codeable_concept)
  return value_.codeable_concept_;
}

inline bool ElementDefinitionBestpractice_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ElementDefinitionBestpractice_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ElementDefinitionBestpractice_Value::ValueCase ElementDefinitionBestpractice_Value::value_case() const {
  return ElementDefinitionBestpractice_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ElementDefinitionBestpractice

// .google.fhir.stu3.proto.String id = 1;
inline bool ElementDefinitionBestpractice::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionBestpractice::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionBestpractice::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionBestpractice.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionBestpractice::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionBestpractice.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionBestpractice::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionBestpractice.id)
  return id_;
}
inline void ElementDefinitionBestpractice::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionBestpractice.id)
}

// .google.fhir.stu3.proto.ElementDefinitionBestpractice.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool ElementDefinitionBestpractice::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void ElementDefinitionBestpractice::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::ElementDefinitionBestpractice_Value& ElementDefinitionBestpractice::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::ElementDefinitionBestpractice_Value& ElementDefinitionBestpractice::value() const {
  const ::google::fhir::stu3::proto::ElementDefinitionBestpractice_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionBestpractice.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::ElementDefinitionBestpractice_Value*>(
      &::google::fhir::stu3::proto::_ElementDefinitionBestpractice_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::ElementDefinitionBestpractice_Value* ElementDefinitionBestpractice::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionBestpractice.value)
  
  ::google::fhir::stu3::proto::ElementDefinitionBestpractice_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::ElementDefinitionBestpractice_Value* ElementDefinitionBestpractice::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionBestpractice_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionBestpractice.value)
  return value_;
}
inline void ElementDefinitionBestpractice::set_allocated_value(::google::fhir::stu3::proto::ElementDefinitionBestpractice_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionBestpractice.value)
}

// -------------------------------------------------------------------

// ElementDefinitionBindingName

// .google.fhir.stu3.proto.String id = 1;
inline bool ElementDefinitionBindingName::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionBindingName::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionBindingName::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionBindingName.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionBindingName::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionBindingName.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionBindingName::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionBindingName.id)
  return id_;
}
inline void ElementDefinitionBindingName::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionBindingName.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool ElementDefinitionBindingName::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionBindingName::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionBindingName::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionBindingName.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionBindingName::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionBindingName.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionBindingName::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionBindingName.value_string)
  return value_string_;
}
inline void ElementDefinitionBindingName::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionBindingName.value_string)
}

// -------------------------------------------------------------------

// ElementDefinitionEquivalence

// .google.fhir.stu3.proto.String id = 1;
inline bool ElementDefinitionEquivalence::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionEquivalence::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionEquivalence::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionEquivalence.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionEquivalence::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionEquivalence.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionEquivalence::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionEquivalence.id)
  return id_;
}
inline void ElementDefinitionEquivalence::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionEquivalence.id)
}

// .google.fhir.stu3.proto.ConceptMapEquivalenceCode value_code = 3;
inline bool ElementDefinitionEquivalence::has_value_code() const {
  return this != internal_default_instance() && value_code_ != NULL;
}
inline const ::google::fhir::stu3::proto::ConceptMapEquivalenceCode& ElementDefinitionEquivalence::_internal_value_code() const {
  return *value_code_;
}
inline const ::google::fhir::stu3::proto::ConceptMapEquivalenceCode& ElementDefinitionEquivalence::value_code() const {
  const ::google::fhir::stu3::proto::ConceptMapEquivalenceCode* p = value_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionEquivalence.value_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::ConceptMapEquivalenceCode*>(
      &::google::fhir::stu3::proto::_ConceptMapEquivalenceCode_default_instance_);
}
inline ::google::fhir::stu3::proto::ConceptMapEquivalenceCode* ElementDefinitionEquivalence::release_value_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionEquivalence.value_code)
  
  ::google::fhir::stu3::proto::ConceptMapEquivalenceCode* temp = value_code_;
  value_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::ConceptMapEquivalenceCode* ElementDefinitionEquivalence::mutable_value_code() {
  
  if (value_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::ConceptMapEquivalenceCode>(GetArenaNoVirtual());
    value_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionEquivalence.value_code)
  return value_code_;
}
inline void ElementDefinitionEquivalence::set_allocated_value_code(::google::fhir::stu3::proto::ConceptMapEquivalenceCode* value_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_code_);
  }
  if (value_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_code, submessage_arena);
    }
    
  } else {
    
  }
  value_code_ = value_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionEquivalence.value_code)
}

// -------------------------------------------------------------------

// ElementDefinitionIdentifier

// .google.fhir.stu3.proto.String id = 1;
inline bool ElementDefinitionIdentifier::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionIdentifier::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionIdentifier::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionIdentifier.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionIdentifier::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionIdentifier.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionIdentifier::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionIdentifier.id)
  return id_;
}
inline void ElementDefinitionIdentifier::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionIdentifier.id)
}

// .google.fhir.stu3.proto.Identifier value_identifier = 3;
inline bool ElementDefinitionIdentifier::has_value_identifier() const {
  return this != internal_default_instance() && value_identifier_ != NULL;
}
inline const ::google::fhir::stu3::proto::Identifier& ElementDefinitionIdentifier::_internal_value_identifier() const {
  return *value_identifier_;
}
inline const ::google::fhir::stu3::proto::Identifier& ElementDefinitionIdentifier::value_identifier() const {
  const ::google::fhir::stu3::proto::Identifier* p = value_identifier_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionIdentifier.value_identifier)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Identifier*>(
      &::google::fhir::stu3::proto::_Identifier_default_instance_);
}
inline ::google::fhir::stu3::proto::Identifier* ElementDefinitionIdentifier::release_value_identifier() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionIdentifier.value_identifier)
  
  ::google::fhir::stu3::proto::Identifier* temp = value_identifier_;
  value_identifier_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Identifier* ElementDefinitionIdentifier::mutable_value_identifier() {
  
  if (value_identifier_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Identifier>(GetArenaNoVirtual());
    value_identifier_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionIdentifier.value_identifier)
  return value_identifier_;
}
inline void ElementDefinitionIdentifier::set_allocated_value_identifier(::google::fhir::stu3::proto::Identifier* value_identifier) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_identifier_);
  }
  if (value_identifier) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_identifier = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_identifier, submessage_arena);
    }
    
  } else {
    
  }
  value_identifier_ = value_identifier;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionIdentifier.value_identifier)
}

// -------------------------------------------------------------------

// ElementDefinitionInheritedExtensibleValueSet_Value

// .google.fhir.stu3.proto.Uri uri = 1;
inline bool ElementDefinitionInheritedExtensibleValueSet_Value::has_uri() const {
  return value_case() == kUri;
}
inline void ElementDefinitionInheritedExtensibleValueSet_Value::set_has_uri() {
  _oneof_case_[0] = kUri;
}
inline const ::google::fhir::stu3::proto::Uri& ElementDefinitionInheritedExtensibleValueSet_Value::_internal_uri() const {
  return *value_.uri_;
}
inline ::google::fhir::stu3::proto::Uri* ElementDefinitionInheritedExtensibleValueSet_Value::release_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.Value.uri)
  if (has_uri()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Uri* temp = value_.uri_;
    value_.uri_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Uri& ElementDefinitionInheritedExtensibleValueSet_Value::uri() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.Value.uri)
  return has_uri()
      ? *value_.uri_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Uri*>(&::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* ElementDefinitionInheritedExtensibleValueSet_Value::mutable_uri() {
  if (!has_uri()) {
    clear_value();
    set_has_uri();
    value_.uri_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Uri >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.Value.uri)
  return value_.uri_;
}

// .google.fhir.stu3.proto.Reference reference = 2 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ValueSet"];
inline bool ElementDefinitionInheritedExtensibleValueSet_Value::has_reference() const {
  return value_case() == kReference;
}
inline void ElementDefinitionInheritedExtensibleValueSet_Value::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline const ::google::fhir::stu3::proto::Reference& ElementDefinitionInheritedExtensibleValueSet_Value::_internal_reference() const {
  return *value_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* ElementDefinitionInheritedExtensibleValueSet_Value::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.Value.reference)
  if (has_reference()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Reference* temp = value_.reference_;
    value_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& ElementDefinitionInheritedExtensibleValueSet_Value::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.Value.reference)
  return has_reference()
      ? *value_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ElementDefinitionInheritedExtensibleValueSet_Value::mutable_reference() {
  if (!has_reference()) {
    clear_value();
    set_has_reference();
    value_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.Value.reference)
  return value_.reference_;
}

inline bool ElementDefinitionInheritedExtensibleValueSet_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ElementDefinitionInheritedExtensibleValueSet_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ElementDefinitionInheritedExtensibleValueSet_Value::ValueCase ElementDefinitionInheritedExtensibleValueSet_Value::value_case() const {
  return ElementDefinitionInheritedExtensibleValueSet_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ElementDefinitionInheritedExtensibleValueSet

// .google.fhir.stu3.proto.String id = 1;
inline bool ElementDefinitionInheritedExtensibleValueSet::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionInheritedExtensibleValueSet::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionInheritedExtensibleValueSet::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionInheritedExtensibleValueSet::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionInheritedExtensibleValueSet::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.id)
  return id_;
}
inline void ElementDefinitionInheritedExtensibleValueSet::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.id)
}

// .google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool ElementDefinitionInheritedExtensibleValueSet::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void ElementDefinitionInheritedExtensibleValueSet::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::ElementDefinitionInheritedExtensibleValueSet_Value& ElementDefinitionInheritedExtensibleValueSet::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::ElementDefinitionInheritedExtensibleValueSet_Value& ElementDefinitionInheritedExtensibleValueSet::value() const {
  const ::google::fhir::stu3::proto::ElementDefinitionInheritedExtensibleValueSet_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::ElementDefinitionInheritedExtensibleValueSet_Value*>(
      &::google::fhir::stu3::proto::_ElementDefinitionInheritedExtensibleValueSet_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::ElementDefinitionInheritedExtensibleValueSet_Value* ElementDefinitionInheritedExtensibleValueSet::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.value)
  
  ::google::fhir::stu3::proto::ElementDefinitionInheritedExtensibleValueSet_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::ElementDefinitionInheritedExtensibleValueSet_Value* ElementDefinitionInheritedExtensibleValueSet::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionInheritedExtensibleValueSet_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.value)
  return value_;
}
inline void ElementDefinitionInheritedExtensibleValueSet::set_allocated_value(::google::fhir::stu3::proto::ElementDefinitionInheritedExtensibleValueSet_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.value)
}

// -------------------------------------------------------------------

// ElementDefinitionIsCommonBinding

// .google.fhir.stu3.proto.String id = 1;
inline bool ElementDefinitionIsCommonBinding::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionIsCommonBinding::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionIsCommonBinding::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionIsCommonBinding.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionIsCommonBinding::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionIsCommonBinding.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionIsCommonBinding::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionIsCommonBinding.id)
  return id_;
}
inline void ElementDefinitionIsCommonBinding::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionIsCommonBinding.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool ElementDefinitionIsCommonBinding::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& ElementDefinitionIsCommonBinding::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& ElementDefinitionIsCommonBinding::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionIsCommonBinding.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* ElementDefinitionIsCommonBinding::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionIsCommonBinding.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* ElementDefinitionIsCommonBinding::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionIsCommonBinding.value_boolean)
  return value_boolean_;
}
inline void ElementDefinitionIsCommonBinding::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionIsCommonBinding.value_boolean)
}

// -------------------------------------------------------------------

// ElementDefinitionMaxValueSet_Value

// .google.fhir.stu3.proto.Uri uri = 1;
inline bool ElementDefinitionMaxValueSet_Value::has_uri() const {
  return value_case() == kUri;
}
inline void ElementDefinitionMaxValueSet_Value::set_has_uri() {
  _oneof_case_[0] = kUri;
}
inline const ::google::fhir::stu3::proto::Uri& ElementDefinitionMaxValueSet_Value::_internal_uri() const {
  return *value_.uri_;
}
inline ::google::fhir::stu3::proto::Uri* ElementDefinitionMaxValueSet_Value::release_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionMaxValueSet.Value.uri)
  if (has_uri()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Uri* temp = value_.uri_;
    value_.uri_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Uri& ElementDefinitionMaxValueSet_Value::uri() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionMaxValueSet.Value.uri)
  return has_uri()
      ? *value_.uri_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Uri*>(&::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* ElementDefinitionMaxValueSet_Value::mutable_uri() {
  if (!has_uri()) {
    clear_value();
    set_has_uri();
    value_.uri_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Uri >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionMaxValueSet.Value.uri)
  return value_.uri_;
}

// .google.fhir.stu3.proto.Reference reference = 2 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ValueSet"];
inline bool ElementDefinitionMaxValueSet_Value::has_reference() const {
  return value_case() == kReference;
}
inline void ElementDefinitionMaxValueSet_Value::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline const ::google::fhir::stu3::proto::Reference& ElementDefinitionMaxValueSet_Value::_internal_reference() const {
  return *value_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* ElementDefinitionMaxValueSet_Value::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionMaxValueSet.Value.reference)
  if (has_reference()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Reference* temp = value_.reference_;
    value_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& ElementDefinitionMaxValueSet_Value::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionMaxValueSet.Value.reference)
  return has_reference()
      ? *value_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ElementDefinitionMaxValueSet_Value::mutable_reference() {
  if (!has_reference()) {
    clear_value();
    set_has_reference();
    value_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionMaxValueSet.Value.reference)
  return value_.reference_;
}

inline bool ElementDefinitionMaxValueSet_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ElementDefinitionMaxValueSet_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ElementDefinitionMaxValueSet_Value::ValueCase ElementDefinitionMaxValueSet_Value::value_case() const {
  return ElementDefinitionMaxValueSet_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ElementDefinitionMaxValueSet

// .google.fhir.stu3.proto.String id = 1;
inline bool ElementDefinitionMaxValueSet::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionMaxValueSet::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionMaxValueSet::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionMaxValueSet.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionMaxValueSet::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionMaxValueSet.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionMaxValueSet::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionMaxValueSet.id)
  return id_;
}
inline void ElementDefinitionMaxValueSet::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionMaxValueSet.id)
}

// .google.fhir.stu3.proto.ElementDefinitionMaxValueSet.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool ElementDefinitionMaxValueSet::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void ElementDefinitionMaxValueSet::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::ElementDefinitionMaxValueSet_Value& ElementDefinitionMaxValueSet::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::ElementDefinitionMaxValueSet_Value& ElementDefinitionMaxValueSet::value() const {
  const ::google::fhir::stu3::proto::ElementDefinitionMaxValueSet_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionMaxValueSet.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::ElementDefinitionMaxValueSet_Value*>(
      &::google::fhir::stu3::proto::_ElementDefinitionMaxValueSet_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::ElementDefinitionMaxValueSet_Value* ElementDefinitionMaxValueSet::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionMaxValueSet.value)
  
  ::google::fhir::stu3::proto::ElementDefinitionMaxValueSet_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::ElementDefinitionMaxValueSet_Value* ElementDefinitionMaxValueSet::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionMaxValueSet_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionMaxValueSet.value)
  return value_;
}
inline void ElementDefinitionMaxValueSet::set_allocated_value(::google::fhir::stu3::proto::ElementDefinitionMaxValueSet_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionMaxValueSet.value)
}

// -------------------------------------------------------------------

// ElementDefinitionMinValueSet_Value

// .google.fhir.stu3.proto.Uri uri = 1;
inline bool ElementDefinitionMinValueSet_Value::has_uri() const {
  return value_case() == kUri;
}
inline void ElementDefinitionMinValueSet_Value::set_has_uri() {
  _oneof_case_[0] = kUri;
}
inline const ::google::fhir::stu3::proto::Uri& ElementDefinitionMinValueSet_Value::_internal_uri() const {
  return *value_.uri_;
}
inline ::google::fhir::stu3::proto::Uri* ElementDefinitionMinValueSet_Value::release_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionMinValueSet.Value.uri)
  if (has_uri()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Uri* temp = value_.uri_;
    value_.uri_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Uri& ElementDefinitionMinValueSet_Value::uri() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionMinValueSet.Value.uri)
  return has_uri()
      ? *value_.uri_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Uri*>(&::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* ElementDefinitionMinValueSet_Value::mutable_uri() {
  if (!has_uri()) {
    clear_value();
    set_has_uri();
    value_.uri_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Uri >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionMinValueSet.Value.uri)
  return value_.uri_;
}

// .google.fhir.stu3.proto.Reference reference = 2 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ValueSet"];
inline bool ElementDefinitionMinValueSet_Value::has_reference() const {
  return value_case() == kReference;
}
inline void ElementDefinitionMinValueSet_Value::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline const ::google::fhir::stu3::proto::Reference& ElementDefinitionMinValueSet_Value::_internal_reference() const {
  return *value_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* ElementDefinitionMinValueSet_Value::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionMinValueSet.Value.reference)
  if (has_reference()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Reference* temp = value_.reference_;
    value_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& ElementDefinitionMinValueSet_Value::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionMinValueSet.Value.reference)
  return has_reference()
      ? *value_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ElementDefinitionMinValueSet_Value::mutable_reference() {
  if (!has_reference()) {
    clear_value();
    set_has_reference();
    value_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionMinValueSet.Value.reference)
  return value_.reference_;
}

inline bool ElementDefinitionMinValueSet_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ElementDefinitionMinValueSet_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ElementDefinitionMinValueSet_Value::ValueCase ElementDefinitionMinValueSet_Value::value_case() const {
  return ElementDefinitionMinValueSet_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ElementDefinitionMinValueSet

// .google.fhir.stu3.proto.String id = 1;
inline bool ElementDefinitionMinValueSet::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionMinValueSet::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionMinValueSet::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionMinValueSet.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionMinValueSet::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionMinValueSet.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionMinValueSet::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionMinValueSet.id)
  return id_;
}
inline void ElementDefinitionMinValueSet::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionMinValueSet.id)
}

// .google.fhir.stu3.proto.ElementDefinitionMinValueSet.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool ElementDefinitionMinValueSet::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void ElementDefinitionMinValueSet::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::ElementDefinitionMinValueSet_Value& ElementDefinitionMinValueSet::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::ElementDefinitionMinValueSet_Value& ElementDefinitionMinValueSet::value() const {
  const ::google::fhir::stu3::proto::ElementDefinitionMinValueSet_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionMinValueSet.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::ElementDefinitionMinValueSet_Value*>(
      &::google::fhir::stu3::proto::_ElementDefinitionMinValueSet_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::ElementDefinitionMinValueSet_Value* ElementDefinitionMinValueSet::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionMinValueSet.value)
  
  ::google::fhir::stu3::proto::ElementDefinitionMinValueSet_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::ElementDefinitionMinValueSet_Value* ElementDefinitionMinValueSet::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::ElementDefinitionMinValueSet_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionMinValueSet.value)
  return value_;
}
inline void ElementDefinitionMinValueSet::set_allocated_value(::google::fhir::stu3::proto::ElementDefinitionMinValueSet_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionMinValueSet.value)
}

// -------------------------------------------------------------------

// Namespace

// .google.fhir.stu3.proto.String id = 1;
inline bool Namespace::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& Namespace::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Namespace::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Namespace.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Namespace::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Namespace.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Namespace::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Namespace.id)
  return id_;
}
inline void Namespace::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Namespace.id)
}

// .google.fhir.stu3.proto.Uri value_uri = 3;
inline bool Namespace::has_value_uri() const {
  return this != internal_default_instance() && value_uri_ != NULL;
}
inline const ::google::fhir::stu3::proto::Uri& Namespace::_internal_value_uri() const {
  return *value_uri_;
}
inline const ::google::fhir::stu3::proto::Uri& Namespace::value_uri() const {
  const ::google::fhir::stu3::proto::Uri* p = value_uri_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Namespace.value_uri)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* Namespace::release_value_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Namespace.value_uri)
  
  ::google::fhir::stu3::proto::Uri* temp = value_uri_;
  value_uri_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* Namespace::mutable_value_uri() {
  
  if (value_uri_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    value_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Namespace.value_uri)
  return value_uri_;
}
inline void Namespace::set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_uri_);
  }
  if (value_uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_uri, submessage_arena);
    }
    
  } else {
    
  }
  value_uri_ = value_uri;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Namespace.value_uri)
}

// -------------------------------------------------------------------

// ElementDefinitionQuestion

// .google.fhir.stu3.proto.String id = 1;
inline bool ElementDefinitionQuestion::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionQuestion::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionQuestion::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionQuestion.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionQuestion::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionQuestion.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionQuestion::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionQuestion.id)
  return id_;
}
inline void ElementDefinitionQuestion::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionQuestion.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool ElementDefinitionQuestion::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionQuestion::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionQuestion::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionQuestion.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionQuestion::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionQuestion.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionQuestion::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionQuestion.value_string)
  return value_string_;
}
inline void ElementDefinitionQuestion::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionQuestion.value_string)
}

// -------------------------------------------------------------------

// ElementDefinitionSelector

// .google.fhir.stu3.proto.String id = 1;
inline bool ElementDefinitionSelector::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionSelector::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionSelector::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionSelector.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionSelector::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionSelector.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionSelector::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionSelector.id)
  return id_;
}
inline void ElementDefinitionSelector::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionSelector.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool ElementDefinitionSelector::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionSelector::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionSelector::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionSelector.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionSelector::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionSelector.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionSelector::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionSelector.value_string)
  return value_string_;
}
inline void ElementDefinitionSelector::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionSelector.value_string)
}

// -------------------------------------------------------------------

// ElementDefinitionTranslatable

// .google.fhir.stu3.proto.String id = 1;
inline bool ElementDefinitionTranslatable::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionTranslatable::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionTranslatable::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionTranslatable.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionTranslatable::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionTranslatable.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionTranslatable::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionTranslatable.id)
  return id_;
}
inline void ElementDefinitionTranslatable::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionTranslatable.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool ElementDefinitionTranslatable::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& ElementDefinitionTranslatable::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& ElementDefinitionTranslatable::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionTranslatable.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* ElementDefinitionTranslatable::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionTranslatable.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* ElementDefinitionTranslatable::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionTranslatable.value_boolean)
  return value_boolean_;
}
inline void ElementDefinitionTranslatable::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionTranslatable.value_boolean)
}

// -------------------------------------------------------------------

// EncounterAssociatedEncounter

// .google.fhir.stu3.proto.String id = 1;
inline bool EncounterAssociatedEncounter::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& EncounterAssociatedEncounter::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& EncounterAssociatedEncounter::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.EncounterAssociatedEncounter.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* EncounterAssociatedEncounter::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.EncounterAssociatedEncounter.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* EncounterAssociatedEncounter::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.EncounterAssociatedEncounter.id)
  return id_;
}
inline void EncounterAssociatedEncounter::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.EncounterAssociatedEncounter.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Encounter"];
inline bool EncounterAssociatedEncounter::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& EncounterAssociatedEncounter::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& EncounterAssociatedEncounter::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.EncounterAssociatedEncounter.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* EncounterAssociatedEncounter::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.EncounterAssociatedEncounter.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* EncounterAssociatedEncounter::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.EncounterAssociatedEncounter.value_reference)
  return value_reference_;
}
inline void EncounterAssociatedEncounter::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.EncounterAssociatedEncounter.value_reference)
}

// -------------------------------------------------------------------

// EncounterModeOfArrival

// .google.fhir.stu3.proto.String id = 1;
inline bool EncounterModeOfArrival::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& EncounterModeOfArrival::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& EncounterModeOfArrival::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.EncounterModeOfArrival.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* EncounterModeOfArrival::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.EncounterModeOfArrival.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* EncounterModeOfArrival::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.EncounterModeOfArrival.id)
  return id_;
}
inline void EncounterModeOfArrival::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.EncounterModeOfArrival.id)
}

// .google.fhir.stu3.proto.Coding value_coding = 3;
inline bool EncounterModeOfArrival::has_value_coding() const {
  return this != internal_default_instance() && value_coding_ != NULL;
}
inline const ::google::fhir::stu3::proto::Coding& EncounterModeOfArrival::_internal_value_coding() const {
  return *value_coding_;
}
inline const ::google::fhir::stu3::proto::Coding& EncounterModeOfArrival::value_coding() const {
  const ::google::fhir::stu3::proto::Coding* p = value_coding_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.EncounterModeOfArrival.value_coding)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Coding*>(
      &::google::fhir::stu3::proto::_Coding_default_instance_);
}
inline ::google::fhir::stu3::proto::Coding* EncounterModeOfArrival::release_value_coding() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.EncounterModeOfArrival.value_coding)
  
  ::google::fhir::stu3::proto::Coding* temp = value_coding_;
  value_coding_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Coding* EncounterModeOfArrival::mutable_value_coding() {
  
  if (value_coding_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Coding>(GetArenaNoVirtual());
    value_coding_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.EncounterModeOfArrival.value_coding)
  return value_coding_;
}
inline void EncounterModeOfArrival::set_allocated_value_coding(::google::fhir::stu3::proto::Coding* value_coding) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_coding_);
  }
  if (value_coding) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_coding = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_coding, submessage_arena);
    }
    
  } else {
    
  }
  value_coding_ = value_coding;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.EncounterModeOfArrival.value_coding)
}

// -------------------------------------------------------------------

// EncounterPrimaryDiagnosis

// .google.fhir.stu3.proto.String id = 1;
inline bool EncounterPrimaryDiagnosis::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& EncounterPrimaryDiagnosis::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& EncounterPrimaryDiagnosis::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.EncounterPrimaryDiagnosis.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* EncounterPrimaryDiagnosis::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.EncounterPrimaryDiagnosis.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* EncounterPrimaryDiagnosis::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.EncounterPrimaryDiagnosis.id)
  return id_;
}
inline void EncounterPrimaryDiagnosis::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.EncounterPrimaryDiagnosis.id)
}

// .google.fhir.stu3.proto.PositiveInt value_positive_int = 3;
inline bool EncounterPrimaryDiagnosis::has_value_positive_int() const {
  return this != internal_default_instance() && value_positive_int_ != NULL;
}
inline const ::google::fhir::stu3::proto::PositiveInt& EncounterPrimaryDiagnosis::_internal_value_positive_int() const {
  return *value_positive_int_;
}
inline const ::google::fhir::stu3::proto::PositiveInt& EncounterPrimaryDiagnosis::value_positive_int() const {
  const ::google::fhir::stu3::proto::PositiveInt* p = value_positive_int_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.EncounterPrimaryDiagnosis.value_positive_int)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::PositiveInt*>(
      &::google::fhir::stu3::proto::_PositiveInt_default_instance_);
}
inline ::google::fhir::stu3::proto::PositiveInt* EncounterPrimaryDiagnosis::release_value_positive_int() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.EncounterPrimaryDiagnosis.value_positive_int)
  
  ::google::fhir::stu3::proto::PositiveInt* temp = value_positive_int_;
  value_positive_int_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::PositiveInt* EncounterPrimaryDiagnosis::mutable_value_positive_int() {
  
  if (value_positive_int_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::PositiveInt>(GetArenaNoVirtual());
    value_positive_int_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.EncounterPrimaryDiagnosis.value_positive_int)
  return value_positive_int_;
}
inline void EncounterPrimaryDiagnosis::set_allocated_value_positive_int(::google::fhir::stu3::proto::PositiveInt* value_positive_int) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_positive_int_);
  }
  if (value_positive_int) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_positive_int = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_positive_int, submessage_arena);
    }
    
  } else {
    
  }
  value_positive_int_ = value_positive_int;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.EncounterPrimaryDiagnosis.value_positive_int)
}

// -------------------------------------------------------------------

// EncounterReasonCancelled

// .google.fhir.stu3.proto.String id = 1;
inline bool EncounterReasonCancelled::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& EncounterReasonCancelled::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& EncounterReasonCancelled::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.EncounterReasonCancelled.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* EncounterReasonCancelled::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.EncounterReasonCancelled.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* EncounterReasonCancelled::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.EncounterReasonCancelled.id)
  return id_;
}
inline void EncounterReasonCancelled::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.EncounterReasonCancelled.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool EncounterReasonCancelled::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& EncounterReasonCancelled::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& EncounterReasonCancelled::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.EncounterReasonCancelled.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* EncounterReasonCancelled::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.EncounterReasonCancelled.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* EncounterReasonCancelled::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.EncounterReasonCancelled.value_codeable_concept)
  return value_codeable_concept_;
}
inline void EncounterReasonCancelled::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.EncounterReasonCancelled.value_codeable_concept)
}

// -------------------------------------------------------------------

// EntryFormat

// .google.fhir.stu3.proto.String id = 1;
inline bool EntryFormat::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& EntryFormat::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& EntryFormat::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.EntryFormat.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* EntryFormat::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.EntryFormat.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* EntryFormat::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.EntryFormat.id)
  return id_;
}
inline void EntryFormat::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.EntryFormat.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool EntryFormat::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& EntryFormat::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& EntryFormat::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.EntryFormat.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* EntryFormat::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.EntryFormat.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* EntryFormat::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.EntryFormat.value_string)
  return value_string_;
}
inline void EntryFormat::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.EntryFormat.value_string)
}

// -------------------------------------------------------------------

// Definition_Value

// .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ActivityDefinition", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/PlanDefinition"];
inline bool Definition_Value::has_reference() const {
  return value_case() == kReference;
}
inline void Definition_Value::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline const ::google::fhir::stu3::proto::Reference& Definition_Value::_internal_reference() const {
  return *value_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* Definition_Value::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Definition.Value.reference)
  if (has_reference()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Reference* temp = value_.reference_;
    value_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& Definition_Value::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Definition.Value.reference)
  return has_reference()
      ? *value_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* Definition_Value::mutable_reference() {
  if (!has_reference()) {
    clear_value();
    set_has_reference();
    value_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Definition.Value.reference)
  return value_.reference_;
}

inline bool Definition_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Definition_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Definition_Value::ValueCase Definition_Value::value_case() const {
  return Definition_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Definition

// .google.fhir.stu3.proto.String id = 1;
inline bool Definition::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& Definition::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Definition::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Definition.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Definition::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Definition.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Definition::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Definition.id)
  return id_;
}
inline void Definition::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Definition.id)
}

// .google.fhir.stu3.proto.Definition.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool Definition::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void Definition::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::Definition_Value& Definition::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::Definition_Value& Definition::value() const {
  const ::google::fhir::stu3::proto::Definition_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Definition.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Definition_Value*>(
      &::google::fhir::stu3::proto::_Definition_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::Definition_Value* Definition::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Definition.value)
  
  ::google::fhir::stu3::proto::Definition_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Definition_Value* Definition::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Definition_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Definition.value)
  return value_;
}
inline void Definition::set_allocated_value(::google::fhir::stu3::proto::Definition_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Definition.value)
}

// -------------------------------------------------------------------

// DiagnosticReportNotDone

// .google.fhir.stu3.proto.String id = 1;
inline bool DiagnosticReportNotDone::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportNotDone::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportNotDone::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportNotDone.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportNotDone::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportNotDone.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportNotDone::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportNotDone.id)
  return id_;
}
inline void DiagnosticReportNotDone::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportNotDone.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool DiagnosticReportNotDone::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& DiagnosticReportNotDone::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& DiagnosticReportNotDone::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportNotDone.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* DiagnosticReportNotDone::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportNotDone.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* DiagnosticReportNotDone::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportNotDone.value_boolean)
  return value_boolean_;
}
inline void DiagnosticReportNotDone::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportNotDone.value_boolean)
}

// -------------------------------------------------------------------

// OnBehalfOf

// .google.fhir.stu3.proto.String id = 1;
inline bool OnBehalfOf::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& OnBehalfOf::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& OnBehalfOf::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.OnBehalfOf.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* OnBehalfOf::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.OnBehalfOf.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* OnBehalfOf::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.OnBehalfOf.id)
  return id_;
}
inline void OnBehalfOf::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.OnBehalfOf.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Organization"];
inline bool OnBehalfOf::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& OnBehalfOf::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& OnBehalfOf::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.OnBehalfOf.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* OnBehalfOf::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.OnBehalfOf.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* OnBehalfOf::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.OnBehalfOf.value_reference)
  return value_reference_;
}
inline void OnBehalfOf::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.OnBehalfOf.value_reference)
}

// -------------------------------------------------------------------

// PartOf

// .google.fhir.stu3.proto.String id = 1;
inline bool PartOf::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& PartOf::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& PartOf::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PartOf.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PartOf::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PartOf.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PartOf::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PartOf.id)
  return id_;
}
inline void PartOf::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PartOf.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Resource"];
inline bool PartOf::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& PartOf::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& PartOf::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PartOf.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* PartOf::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PartOf.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* PartOf::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PartOf.value_reference)
  return value_reference_;
}
inline void PartOf::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PartOf.value_reference)
}

// -------------------------------------------------------------------

// ObservationPerformerRole

// .google.fhir.stu3.proto.String id = 1;
inline bool ObservationPerformerRole::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ObservationPerformerRole::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ObservationPerformerRole::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationPerformerRole.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ObservationPerformerRole::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationPerformerRole.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ObservationPerformerRole::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationPerformerRole.id)
  return id_;
}
inline void ObservationPerformerRole::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationPerformerRole.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ObservationPerformerRole::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationPerformerRole::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationPerformerRole::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationPerformerRole.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationPerformerRole::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationPerformerRole.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationPerformerRole::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationPerformerRole.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ObservationPerformerRole::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationPerformerRole.value_codeable_concept)
}

// -------------------------------------------------------------------

// ReasonCode

// .google.fhir.stu3.proto.String id = 1;
inline bool ReasonCode::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ReasonCode::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ReasonCode::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ReasonCode.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ReasonCode::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ReasonCode.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ReasonCode::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ReasonCode.id)
  return id_;
}
inline void ReasonCode::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ReasonCode.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ReasonCode::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ReasonCode::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ReasonCode::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ReasonCode.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ReasonCode::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ReasonCode.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ReasonCode::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ReasonCode.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ReasonCode::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ReasonCode.value_codeable_concept)
}

// -------------------------------------------------------------------

// ReasonReference_Value

// .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Condition", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Observation"];
inline bool ReasonReference_Value::has_reference() const {
  return value_case() == kReference;
}
inline void ReasonReference_Value::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline const ::google::fhir::stu3::proto::Reference& ReasonReference_Value::_internal_reference() const {
  return *value_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* ReasonReference_Value::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ReasonReference.Value.reference)
  if (has_reference()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Reference* temp = value_.reference_;
    value_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& ReasonReference_Value::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ReasonReference.Value.reference)
  return has_reference()
      ? *value_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ReasonReference_Value::mutable_reference() {
  if (!has_reference()) {
    clear_value();
    set_has_reference();
    value_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ReasonReference.Value.reference)
  return value_.reference_;
}

inline bool ReasonReference_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ReasonReference_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ReasonReference_Value::ValueCase ReasonReference_Value::value_case() const {
  return ReasonReference_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReasonReference

// .google.fhir.stu3.proto.String id = 1;
inline bool ReasonReference::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ReasonReference::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ReasonReference::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ReasonReference.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ReasonReference::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ReasonReference.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ReasonReference::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ReasonReference.id)
  return id_;
}
inline void ReasonReference::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ReasonReference.id)
}

// .google.fhir.stu3.proto.ReasonReference.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool ReasonReference::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void ReasonReference::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::ReasonReference_Value& ReasonReference::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::ReasonReference_Value& ReasonReference::value() const {
  const ::google::fhir::stu3::proto::ReasonReference_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ReasonReference.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::ReasonReference_Value*>(
      &::google::fhir::stu3::proto::_ReasonReference_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::ReasonReference_Value* ReasonReference::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ReasonReference.value)
  
  ::google::fhir::stu3::proto::ReasonReference_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::ReasonReference_Value* ReasonReference::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::ReasonReference_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ReasonReference.value)
  return value_;
}
inline void ReasonReference::set_allocated_value(::google::fhir::stu3::proto::ReasonReference_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ReasonReference.value)
}

// -------------------------------------------------------------------

// FamilyMemberHistoryObservation

// .google.fhir.stu3.proto.String id = 1;
inline bool FamilyMemberHistoryObservation::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& FamilyMemberHistoryObservation::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& FamilyMemberHistoryObservation::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FamilyMemberHistoryObservation.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* FamilyMemberHistoryObservation::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FamilyMemberHistoryObservation.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* FamilyMemberHistoryObservation::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FamilyMemberHistoryObservation.id)
  return id_;
}
inline void FamilyMemberHistoryObservation::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.FamilyMemberHistoryObservation.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Observation"];
inline bool FamilyMemberHistoryObservation::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& FamilyMemberHistoryObservation::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& FamilyMemberHistoryObservation::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FamilyMemberHistoryObservation.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* FamilyMemberHistoryObservation::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FamilyMemberHistoryObservation.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* FamilyMemberHistoryObservation::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FamilyMemberHistoryObservation.value_reference)
  return value_reference_;
}
inline void FamilyMemberHistoryObservation::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.FamilyMemberHistoryObservation.value_reference)
}

// -------------------------------------------------------------------

// FamilyMemberHistoryParent

// .google.fhir.stu3.proto.String id = 1;
inline bool FamilyMemberHistoryParent::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& FamilyMemberHistoryParent::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& FamilyMemberHistoryParent::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FamilyMemberHistoryParent.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* FamilyMemberHistoryParent::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FamilyMemberHistoryParent.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* FamilyMemberHistoryParent::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FamilyMemberHistoryParent.id)
  return id_;
}
inline void FamilyMemberHistoryParent::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.FamilyMemberHistoryParent.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int FamilyMemberHistoryParent::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* FamilyMemberHistoryParent::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FamilyMemberHistoryParent.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
FamilyMemberHistoryParent::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.FamilyMemberHistoryParent.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& FamilyMemberHistoryParent::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FamilyMemberHistoryParent.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* FamilyMemberHistoryParent::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.FamilyMemberHistoryParent.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
FamilyMemberHistoryParent::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.FamilyMemberHistoryParent.extension)
  return extension_;
}

// .google.fhir.stu3.proto.CodeableConcept type = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool FamilyMemberHistoryParent::has_type() const {
  return this != internal_default_instance() && type_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& FamilyMemberHistoryParent::_internal_type() const {
  return *type_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& FamilyMemberHistoryParent::type() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = type_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FamilyMemberHistoryParent.type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* FamilyMemberHistoryParent::release_type() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FamilyMemberHistoryParent.type)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* FamilyMemberHistoryParent::mutable_type() {
  
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FamilyMemberHistoryParent.type)
  return type_;
}
inline void FamilyMemberHistoryParent::set_allocated_type(::google::fhir::stu3::proto::CodeableConcept* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.FamilyMemberHistoryParent.type)
}

// .google.fhir.stu3.proto.Reference reference = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool FamilyMemberHistoryParent::has_reference() const {
  return this != internal_default_instance() && reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& FamilyMemberHistoryParent::_internal_reference() const {
  return *reference_;
}
inline const ::google::fhir::stu3::proto::Reference& FamilyMemberHistoryParent::reference() const {
  const ::google::fhir::stu3::proto::Reference* p = reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FamilyMemberHistoryParent.reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* FamilyMemberHistoryParent::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FamilyMemberHistoryParent.reference)
  
  ::google::fhir::stu3::proto::Reference* temp = reference_;
  reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* FamilyMemberHistoryParent::mutable_reference() {
  
  if (reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FamilyMemberHistoryParent.reference)
  return reference_;
}
inline void FamilyMemberHistoryParent::set_allocated_reference(::google::fhir::stu3::proto::Reference* reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reference_);
  }
  if (reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reference, submessage_arena);
    }
    
  } else {
    
  }
  reference_ = reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.FamilyMemberHistoryParent.reference)
}

// -------------------------------------------------------------------

// FamilyMemberHistorySibling

// .google.fhir.stu3.proto.String id = 1;
inline bool FamilyMemberHistorySibling::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& FamilyMemberHistorySibling::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& FamilyMemberHistorySibling::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FamilyMemberHistorySibling.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* FamilyMemberHistorySibling::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FamilyMemberHistorySibling.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* FamilyMemberHistorySibling::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FamilyMemberHistorySibling.id)
  return id_;
}
inline void FamilyMemberHistorySibling::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.FamilyMemberHistorySibling.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int FamilyMemberHistorySibling::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* FamilyMemberHistorySibling::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FamilyMemberHistorySibling.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
FamilyMemberHistorySibling::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.FamilyMemberHistorySibling.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& FamilyMemberHistorySibling::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FamilyMemberHistorySibling.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* FamilyMemberHistorySibling::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.FamilyMemberHistorySibling.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
FamilyMemberHistorySibling::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.FamilyMemberHistorySibling.extension)
  return extension_;
}

// .google.fhir.stu3.proto.CodeableConcept type = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool FamilyMemberHistorySibling::has_type() const {
  return this != internal_default_instance() && type_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& FamilyMemberHistorySibling::_internal_type() const {
  return *type_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& FamilyMemberHistorySibling::type() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = type_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FamilyMemberHistorySibling.type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* FamilyMemberHistorySibling::release_type() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FamilyMemberHistorySibling.type)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* FamilyMemberHistorySibling::mutable_type() {
  
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FamilyMemberHistorySibling.type)
  return type_;
}
inline void FamilyMemberHistorySibling::set_allocated_type(::google::fhir::stu3::proto::CodeableConcept* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.FamilyMemberHistorySibling.type)
}

// .google.fhir.stu3.proto.Reference reference = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool FamilyMemberHistorySibling::has_reference() const {
  return this != internal_default_instance() && reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& FamilyMemberHistorySibling::_internal_reference() const {
  return *reference_;
}
inline const ::google::fhir::stu3::proto::Reference& FamilyMemberHistorySibling::reference() const {
  const ::google::fhir::stu3::proto::Reference* p = reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FamilyMemberHistorySibling.reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* FamilyMemberHistorySibling::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FamilyMemberHistorySibling.reference)
  
  ::google::fhir::stu3::proto::Reference* temp = reference_;
  reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* FamilyMemberHistorySibling::mutable_reference() {
  
  if (reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FamilyMemberHistorySibling.reference)
  return reference_;
}
inline void FamilyMemberHistorySibling::set_allocated_reference(::google::fhir::stu3::proto::Reference* reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reference_);
  }
  if (reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reference, submessage_arena);
    }
    
  } else {
    
  }
  reference_ = reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.FamilyMemberHistorySibling.reference)
}

// -------------------------------------------------------------------

// FamilyMemberHistoryAbatement_Value

// .google.fhir.stu3.proto.Date date = 1;
inline bool FamilyMemberHistoryAbatement_Value::has_date() const {
  return value_case() == kDate;
}
inline void FamilyMemberHistoryAbatement_Value::set_has_date() {
  _oneof_case_[0] = kDate;
}
inline const ::google::fhir::stu3::proto::Date& FamilyMemberHistoryAbatement_Value::_internal_date() const {
  return *value_.date_;
}
inline ::google::fhir::stu3::proto::Date* FamilyMemberHistoryAbatement_Value::release_date() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FamilyMemberHistoryAbatement.Value.date)
  if (has_date()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Date* temp = value_.date_;
    value_.date_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Date& FamilyMemberHistoryAbatement_Value::date() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FamilyMemberHistoryAbatement.Value.date)
  return has_date()
      ? *value_.date_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Date*>(&::google::fhir::stu3::proto::_Date_default_instance_);
}
inline ::google::fhir::stu3::proto::Date* FamilyMemberHistoryAbatement_Value::mutable_date() {
  if (!has_date()) {
    clear_value();
    set_has_date();
    value_.date_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Date >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FamilyMemberHistoryAbatement.Value.date)
  return value_.date_;
}

// .google.fhir.stu3.proto.Age age = 2;
inline bool FamilyMemberHistoryAbatement_Value::has_age() const {
  return value_case() == kAge;
}
inline void FamilyMemberHistoryAbatement_Value::set_has_age() {
  _oneof_case_[0] = kAge;
}
inline const ::google::fhir::stu3::proto::Age& FamilyMemberHistoryAbatement_Value::_internal_age() const {
  return *value_.age_;
}
inline ::google::fhir::stu3::proto::Age* FamilyMemberHistoryAbatement_Value::release_age() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FamilyMemberHistoryAbatement.Value.age)
  if (has_age()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Age* temp = value_.age_;
    value_.age_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Age& FamilyMemberHistoryAbatement_Value::age() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FamilyMemberHistoryAbatement.Value.age)
  return has_age()
      ? *value_.age_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Age*>(&::google::fhir::stu3::proto::_Age_default_instance_);
}
inline ::google::fhir::stu3::proto::Age* FamilyMemberHistoryAbatement_Value::mutable_age() {
  if (!has_age()) {
    clear_value();
    set_has_age();
    value_.age_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Age >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FamilyMemberHistoryAbatement.Value.age)
  return value_.age_;
}

// .google.fhir.stu3.proto.Boolean boolean = 3;
inline bool FamilyMemberHistoryAbatement_Value::has_boolean() const {
  return value_case() == kBoolean;
}
inline void FamilyMemberHistoryAbatement_Value::set_has_boolean() {
  _oneof_case_[0] = kBoolean;
}
inline const ::google::fhir::stu3::proto::Boolean& FamilyMemberHistoryAbatement_Value::_internal_boolean() const {
  return *value_.boolean_;
}
inline ::google::fhir::stu3::proto::Boolean* FamilyMemberHistoryAbatement_Value::release_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FamilyMemberHistoryAbatement.Value.boolean)
  if (has_boolean()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Boolean* temp = value_.boolean_;
    value_.boolean_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Boolean& FamilyMemberHistoryAbatement_Value::boolean() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FamilyMemberHistoryAbatement.Value.boolean)
  return has_boolean()
      ? *value_.boolean_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Boolean*>(&::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* FamilyMemberHistoryAbatement_Value::mutable_boolean() {
  if (!has_boolean()) {
    clear_value();
    set_has_boolean();
    value_.boolean_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Boolean >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FamilyMemberHistoryAbatement.Value.boolean)
  return value_.boolean_;
}

inline bool FamilyMemberHistoryAbatement_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void FamilyMemberHistoryAbatement_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline FamilyMemberHistoryAbatement_Value::ValueCase FamilyMemberHistoryAbatement_Value::value_case() const {
  return FamilyMemberHistoryAbatement_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FamilyMemberHistoryAbatement

// .google.fhir.stu3.proto.String id = 1;
inline bool FamilyMemberHistoryAbatement::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& FamilyMemberHistoryAbatement::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& FamilyMemberHistoryAbatement::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FamilyMemberHistoryAbatement.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* FamilyMemberHistoryAbatement::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FamilyMemberHistoryAbatement.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* FamilyMemberHistoryAbatement::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FamilyMemberHistoryAbatement.id)
  return id_;
}
inline void FamilyMemberHistoryAbatement::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.FamilyMemberHistoryAbatement.id)
}

// .google.fhir.stu3.proto.FamilyMemberHistoryAbatement.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool FamilyMemberHistoryAbatement::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void FamilyMemberHistoryAbatement::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::FamilyMemberHistoryAbatement_Value& FamilyMemberHistoryAbatement::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::FamilyMemberHistoryAbatement_Value& FamilyMemberHistoryAbatement::value() const {
  const ::google::fhir::stu3::proto::FamilyMemberHistoryAbatement_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FamilyMemberHistoryAbatement.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::FamilyMemberHistoryAbatement_Value*>(
      &::google::fhir::stu3::proto::_FamilyMemberHistoryAbatement_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::FamilyMemberHistoryAbatement_Value* FamilyMemberHistoryAbatement::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FamilyMemberHistoryAbatement.value)
  
  ::google::fhir::stu3::proto::FamilyMemberHistoryAbatement_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::FamilyMemberHistoryAbatement_Value* FamilyMemberHistoryAbatement::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::FamilyMemberHistoryAbatement_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FamilyMemberHistoryAbatement.value)
  return value_;
}
inline void FamilyMemberHistoryAbatement::set_allocated_value(::google::fhir::stu3::proto::FamilyMemberHistoryAbatement_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.FamilyMemberHistoryAbatement.value)
}

// -------------------------------------------------------------------

// FamilyMemberHistoryPatientRecord

// .google.fhir.stu3.proto.String id = 1;
inline bool FamilyMemberHistoryPatientRecord::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& FamilyMemberHistoryPatientRecord::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& FamilyMemberHistoryPatientRecord::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FamilyMemberHistoryPatientRecord.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* FamilyMemberHistoryPatientRecord::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FamilyMemberHistoryPatientRecord.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* FamilyMemberHistoryPatientRecord::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FamilyMemberHistoryPatientRecord.id)
  return id_;
}
inline void FamilyMemberHistoryPatientRecord::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.FamilyMemberHistoryPatientRecord.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Patient"];
inline bool FamilyMemberHistoryPatientRecord::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& FamilyMemberHistoryPatientRecord::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& FamilyMemberHistoryPatientRecord::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FamilyMemberHistoryPatientRecord.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* FamilyMemberHistoryPatientRecord::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FamilyMemberHistoryPatientRecord.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* FamilyMemberHistoryPatientRecord::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FamilyMemberHistoryPatientRecord.value_reference)
  return value_reference_;
}
inline void FamilyMemberHistoryPatientRecord::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.FamilyMemberHistoryPatientRecord.value_reference)
}

// -------------------------------------------------------------------

// FamilyMemberHistorySeverity

// .google.fhir.stu3.proto.String id = 1;
inline bool FamilyMemberHistorySeverity::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& FamilyMemberHistorySeverity::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& FamilyMemberHistorySeverity::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FamilyMemberHistorySeverity.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* FamilyMemberHistorySeverity::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FamilyMemberHistorySeverity.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* FamilyMemberHistorySeverity::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FamilyMemberHistorySeverity.id)
  return id_;
}
inline void FamilyMemberHistorySeverity::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.FamilyMemberHistorySeverity.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool FamilyMemberHistorySeverity::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& FamilyMemberHistorySeverity::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& FamilyMemberHistorySeverity::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FamilyMemberHistorySeverity.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* FamilyMemberHistorySeverity::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FamilyMemberHistorySeverity.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* FamilyMemberHistorySeverity::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FamilyMemberHistorySeverity.value_codeable_concept)
  return value_codeable_concept_;
}
inline void FamilyMemberHistorySeverity::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.FamilyMemberHistorySeverity.value_codeable_concept)
}

// -------------------------------------------------------------------

// FamilyMemberHistoryType

// .google.fhir.stu3.proto.String id = 1;
inline bool FamilyMemberHistoryType::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& FamilyMemberHistoryType::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& FamilyMemberHistoryType::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FamilyMemberHistoryType.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* FamilyMemberHistoryType::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FamilyMemberHistoryType.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* FamilyMemberHistoryType::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FamilyMemberHistoryType.id)
  return id_;
}
inline void FamilyMemberHistoryType::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.FamilyMemberHistoryType.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool FamilyMemberHistoryType::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& FamilyMemberHistoryType::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& FamilyMemberHistoryType::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FamilyMemberHistoryType.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* FamilyMemberHistoryType::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FamilyMemberHistoryType.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* FamilyMemberHistoryType::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FamilyMemberHistoryType.value_codeable_concept)
  return value_codeable_concept_;
}
inline void FamilyMemberHistoryType::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.FamilyMemberHistoryType.value_codeable_concept)
}

// -------------------------------------------------------------------

// FlagDetail

// .google.fhir.stu3.proto.String id = 1;
inline bool FlagDetail::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& FlagDetail::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& FlagDetail::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FlagDetail.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* FlagDetail::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FlagDetail.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* FlagDetail::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FlagDetail.id)
  return id_;
}
inline void FlagDetail::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.FlagDetail.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Resource"];
inline bool FlagDetail::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& FlagDetail::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& FlagDetail::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FlagDetail.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* FlagDetail::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FlagDetail.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* FlagDetail::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FlagDetail.value_reference)
  return value_reference_;
}
inline void FlagDetail::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.FlagDetail.value_reference)
}

// -------------------------------------------------------------------

// FlagPriority

// .google.fhir.stu3.proto.String id = 1;
inline bool FlagPriority::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& FlagPriority::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& FlagPriority::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FlagPriority.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* FlagPriority::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FlagPriority.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* FlagPriority::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FlagPriority.id)
  return id_;
}
inline void FlagPriority::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.FlagPriority.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool FlagPriority::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& FlagPriority::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& FlagPriority::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.FlagPriority.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* FlagPriority::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.FlagPriority.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* FlagPriority::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.FlagPriority.value_codeable_concept)
  return value_codeable_concept_;
}
inline void FlagPriority::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.FlagPriority.value_codeable_concept)
}

// -------------------------------------------------------------------

// AddressGeolocation

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressGeolocation::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressGeolocation::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressGeolocation::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressGeolocation.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressGeolocation::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressGeolocation.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressGeolocation::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressGeolocation.id)
  return id_;
}
inline void AddressGeolocation::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressGeolocation.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int AddressGeolocation::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* AddressGeolocation::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressGeolocation.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
AddressGeolocation::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.AddressGeolocation.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& AddressGeolocation::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressGeolocation.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* AddressGeolocation::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.AddressGeolocation.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
AddressGeolocation::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.AddressGeolocation.extension)
  return extension_;
}

// .google.fhir.stu3.proto.Decimal latitude = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool AddressGeolocation::has_latitude() const {
  return this != internal_default_instance() && latitude_ != NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& AddressGeolocation::_internal_latitude() const {
  return *latitude_;
}
inline const ::google::fhir::stu3::proto::Decimal& AddressGeolocation::latitude() const {
  const ::google::fhir::stu3::proto::Decimal* p = latitude_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressGeolocation.latitude)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* AddressGeolocation::release_latitude() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressGeolocation.latitude)
  
  ::google::fhir::stu3::proto::Decimal* temp = latitude_;
  latitude_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* AddressGeolocation::mutable_latitude() {
  
  if (latitude_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    latitude_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressGeolocation.latitude)
  return latitude_;
}
inline void AddressGeolocation::set_allocated_latitude(::google::fhir::stu3::proto::Decimal* latitude) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(latitude_);
  }
  if (latitude) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      latitude = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, latitude, submessage_arena);
    }
    
  } else {
    
  }
  latitude_ = latitude;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressGeolocation.latitude)
}

// .google.fhir.stu3.proto.Decimal longitude = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool AddressGeolocation::has_longitude() const {
  return this != internal_default_instance() && longitude_ != NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& AddressGeolocation::_internal_longitude() const {
  return *longitude_;
}
inline const ::google::fhir::stu3::proto::Decimal& AddressGeolocation::longitude() const {
  const ::google::fhir::stu3::proto::Decimal* p = longitude_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressGeolocation.longitude)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* AddressGeolocation::release_longitude() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressGeolocation.longitude)
  
  ::google::fhir::stu3::proto::Decimal* temp = longitude_;
  longitude_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* AddressGeolocation::mutable_longitude() {
  
  if (longitude_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    longitude_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressGeolocation.longitude)
  return longitude_;
}
inline void AddressGeolocation::set_allocated_longitude(::google::fhir::stu3::proto::Decimal* longitude) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(longitude_);
  }
  if (longitude) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      longitude = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, longitude, submessage_arena);
    }
    
  } else {
    
  }
  longitude_ = longitude;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressGeolocation.longitude)
}

// -------------------------------------------------------------------

// GoalAcceptance

// .google.fhir.stu3.proto.String id = 1;
inline bool GoalAcceptance::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& GoalAcceptance::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& GoalAcceptance::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.GoalAcceptance.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* GoalAcceptance::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.GoalAcceptance.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* GoalAcceptance::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.GoalAcceptance.id)
  return id_;
}
inline void GoalAcceptance::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.GoalAcceptance.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int GoalAcceptance::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* GoalAcceptance::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.GoalAcceptance.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
GoalAcceptance::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.GoalAcceptance.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& GoalAcceptance::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.GoalAcceptance.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* GoalAcceptance::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.GoalAcceptance.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
GoalAcceptance::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.GoalAcceptance.extension)
  return extension_;
}

// .google.fhir.stu3.proto.Reference individual = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool GoalAcceptance::has_individual() const {
  return this != internal_default_instance() && individual_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& GoalAcceptance::_internal_individual() const {
  return *individual_;
}
inline const ::google::fhir::stu3::proto::Reference& GoalAcceptance::individual() const {
  const ::google::fhir::stu3::proto::Reference* p = individual_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.GoalAcceptance.individual)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* GoalAcceptance::release_individual() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.GoalAcceptance.individual)
  
  ::google::fhir::stu3::proto::Reference* temp = individual_;
  individual_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* GoalAcceptance::mutable_individual() {
  
  if (individual_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    individual_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.GoalAcceptance.individual)
  return individual_;
}
inline void GoalAcceptance::set_allocated_individual(::google::fhir::stu3::proto::Reference* individual) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(individual_);
  }
  if (individual) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      individual = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, individual, submessage_arena);
    }
    
  } else {
    
  }
  individual_ = individual;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.GoalAcceptance.individual)
}

// .google.fhir.stu3.proto.GoalAcceptanceStatusCode status = 5;
inline bool GoalAcceptance::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline const ::google::fhir::stu3::proto::GoalAcceptanceStatusCode& GoalAcceptance::_internal_status() const {
  return *status_;
}
inline const ::google::fhir::stu3::proto::GoalAcceptanceStatusCode& GoalAcceptance::status() const {
  const ::google::fhir::stu3::proto::GoalAcceptanceStatusCode* p = status_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.GoalAcceptance.status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::GoalAcceptanceStatusCode*>(
      &::google::fhir::stu3::proto::_GoalAcceptanceStatusCode_default_instance_);
}
inline ::google::fhir::stu3::proto::GoalAcceptanceStatusCode* GoalAcceptance::release_status() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.GoalAcceptance.status)
  
  ::google::fhir::stu3::proto::GoalAcceptanceStatusCode* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::GoalAcceptanceStatusCode* GoalAcceptance::mutable_status() {
  
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::GoalAcceptanceStatusCode>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.GoalAcceptance.status)
  return status_;
}
inline void GoalAcceptance::set_allocated_status(::google::fhir::stu3::proto::GoalAcceptanceStatusCode* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.GoalAcceptance.status)
}

// .google.fhir.stu3.proto.CodeableConcept priority = 6;
inline bool GoalAcceptance::has_priority() const {
  return this != internal_default_instance() && priority_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& GoalAcceptance::_internal_priority() const {
  return *priority_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& GoalAcceptance::priority() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = priority_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.GoalAcceptance.priority)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* GoalAcceptance::release_priority() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.GoalAcceptance.priority)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = priority_;
  priority_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* GoalAcceptance::mutable_priority() {
  
  if (priority_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    priority_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.GoalAcceptance.priority)
  return priority_;
}
inline void GoalAcceptance::set_allocated_priority(::google::fhir::stu3::proto::CodeableConcept* priority) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(priority_);
  }
  if (priority) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      priority = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, priority, submessage_arena);
    }
    
  } else {
    
  }
  priority_ = priority;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.GoalAcceptance.priority)
}

// -------------------------------------------------------------------

// ResourcePertainsToGoal

// .google.fhir.stu3.proto.String id = 1;
inline bool ResourcePertainsToGoal::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ResourcePertainsToGoal::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ResourcePertainsToGoal::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ResourcePertainsToGoal.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ResourcePertainsToGoal::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ResourcePertainsToGoal.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ResourcePertainsToGoal::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ResourcePertainsToGoal.id)
  return id_;
}
inline void ResourcePertainsToGoal::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ResourcePertainsToGoal.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Goal"];
inline bool ResourcePertainsToGoal::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& ResourcePertainsToGoal::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& ResourcePertainsToGoal::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ResourcePertainsToGoal.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ResourcePertainsToGoal::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ResourcePertainsToGoal.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* ResourcePertainsToGoal::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ResourcePertainsToGoal.value_reference)
  return value_reference_;
}
inline void ResourcePertainsToGoal::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ResourcePertainsToGoal.value_reference)
}

// -------------------------------------------------------------------

// GoalReasonRejected

// .google.fhir.stu3.proto.String id = 1;
inline bool GoalReasonRejected::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& GoalReasonRejected::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& GoalReasonRejected::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.GoalReasonRejected.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* GoalReasonRejected::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.GoalReasonRejected.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* GoalReasonRejected::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.GoalReasonRejected.id)
  return id_;
}
inline void GoalReasonRejected::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.GoalReasonRejected.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool GoalReasonRejected::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& GoalReasonRejected::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& GoalReasonRejected::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.GoalReasonRejected.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* GoalReasonRejected::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.GoalReasonRejected.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* GoalReasonRejected::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.GoalReasonRejected.value_codeable_concept)
  return value_codeable_concept_;
}
inline void GoalReasonRejected::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.GoalReasonRejected.value_codeable_concept)
}

// -------------------------------------------------------------------

// GoalRelationship

// .google.fhir.stu3.proto.String id = 1;
inline bool GoalRelationship::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& GoalRelationship::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& GoalRelationship::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.GoalRelationship.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* GoalRelationship::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.GoalRelationship.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* GoalRelationship::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.GoalRelationship.id)
  return id_;
}
inline void GoalRelationship::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.GoalRelationship.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int GoalRelationship::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* GoalRelationship::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.GoalRelationship.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
GoalRelationship::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.GoalRelationship.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& GoalRelationship::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.GoalRelationship.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* GoalRelationship::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.GoalRelationship.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
GoalRelationship::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.GoalRelationship.extension)
  return extension_;
}

// .google.fhir.stu3.proto.CodeableConcept type = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool GoalRelationship::has_type() const {
  return this != internal_default_instance() && type_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& GoalRelationship::_internal_type() const {
  return *type_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& GoalRelationship::type() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = type_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.GoalRelationship.type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* GoalRelationship::release_type() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.GoalRelationship.type)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* GoalRelationship::mutable_type() {
  
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.GoalRelationship.type)
  return type_;
}
inline void GoalRelationship::set_allocated_type(::google::fhir::stu3::proto::CodeableConcept* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.GoalRelationship.type)
}

// .google.fhir.stu3.proto.Reference target = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool GoalRelationship::has_target() const {
  return this != internal_default_instance() && target_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& GoalRelationship::_internal_target() const {
  return *target_;
}
inline const ::google::fhir::stu3::proto::Reference& GoalRelationship::target() const {
  const ::google::fhir::stu3::proto::Reference* p = target_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.GoalRelationship.target)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* GoalRelationship::release_target() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.GoalRelationship.target)
  
  ::google::fhir::stu3::proto::Reference* temp = target_;
  target_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* GoalRelationship::mutable_target() {
  
  if (target_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.GoalRelationship.target)
  return target_;
}
inline void GoalRelationship::set_allocated_target(::google::fhir::stu3::proto::Reference* target) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(target_);
  }
  if (target) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.GoalRelationship.target)
}

// -------------------------------------------------------------------

// DiagnosticReportAlleleDatabase

// .google.fhir.stu3.proto.String id = 1;
inline bool DiagnosticReportAlleleDatabase::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportAlleleDatabase::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportAlleleDatabase::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportAlleleDatabase.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportAlleleDatabase::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportAlleleDatabase.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportAlleleDatabase::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportAlleleDatabase.id)
  return id_;
}
inline void DiagnosticReportAlleleDatabase::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportAlleleDatabase.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool DiagnosticReportAlleleDatabase::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& DiagnosticReportAlleleDatabase::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& DiagnosticReportAlleleDatabase::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportAlleleDatabase.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* DiagnosticReportAlleleDatabase::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportAlleleDatabase.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* DiagnosticReportAlleleDatabase::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportAlleleDatabase.value_codeable_concept)
  return value_codeable_concept_;
}
inline void DiagnosticReportAlleleDatabase::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportAlleleDatabase.value_codeable_concept)
}

// -------------------------------------------------------------------

// DiagnosticReportGlstring

// .google.fhir.stu3.proto.String id = 1;
inline bool DiagnosticReportGlstring::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportGlstring::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportGlstring::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportGlstring.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportGlstring::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportGlstring.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportGlstring::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportGlstring.id)
  return id_;
}
inline void DiagnosticReportGlstring::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportGlstring.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int DiagnosticReportGlstring::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* DiagnosticReportGlstring::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportGlstring.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
DiagnosticReportGlstring::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.DiagnosticReportGlstring.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& DiagnosticReportGlstring::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportGlstring.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* DiagnosticReportGlstring::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.DiagnosticReportGlstring.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
DiagnosticReportGlstring::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.DiagnosticReportGlstring.extension)
  return extension_;
}

// .google.fhir.stu3.proto.Uri url = 4;
inline bool DiagnosticReportGlstring::has_url() const {
  return this != internal_default_instance() && url_ != NULL;
}
inline const ::google::fhir::stu3::proto::Uri& DiagnosticReportGlstring::_internal_url() const {
  return *url_;
}
inline const ::google::fhir::stu3::proto::Uri& DiagnosticReportGlstring::url() const {
  const ::google::fhir::stu3::proto::Uri* p = url_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportGlstring.url)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* DiagnosticReportGlstring::release_url() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportGlstring.url)
  
  ::google::fhir::stu3::proto::Uri* temp = url_;
  url_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* DiagnosticReportGlstring::mutable_url() {
  
  if (url_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportGlstring.url)
  return url_;
}
inline void DiagnosticReportGlstring::set_allocated_url(::google::fhir::stu3::proto::Uri* url) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(url_);
  }
  if (url) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      url = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, url, submessage_arena);
    }
    
  } else {
    
  }
  url_ = url;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportGlstring.url)
}

// .google.fhir.stu3.proto.String text = 5;
inline bool DiagnosticReportGlstring::has_text() const {
  return this != internal_default_instance() && text_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportGlstring::_internal_text() const {
  return *text_;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportGlstring::text() const {
  const ::google::fhir::stu3::proto::String* p = text_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportGlstring.text)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportGlstring::release_text() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportGlstring.text)
  
  ::google::fhir::stu3::proto::String* temp = text_;
  text_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportGlstring::mutable_text() {
  
  if (text_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    text_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportGlstring.text)
  return text_;
}
inline void DiagnosticReportGlstring::set_allocated_text(::google::fhir::stu3::proto::String* text) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(text_);
  }
  if (text) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      text = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportGlstring.text)
}

// -------------------------------------------------------------------

// DiagnosticReportHaploid

// .google.fhir.stu3.proto.String id = 1;
inline bool DiagnosticReportHaploid::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportHaploid::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportHaploid::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportHaploid.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportHaploid::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportHaploid.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportHaploid::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportHaploid.id)
  return id_;
}
inline void DiagnosticReportHaploid::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportHaploid.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int DiagnosticReportHaploid::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* DiagnosticReportHaploid::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportHaploid.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
DiagnosticReportHaploid::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.DiagnosticReportHaploid.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& DiagnosticReportHaploid::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportHaploid.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* DiagnosticReportHaploid::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.DiagnosticReportHaploid.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
DiagnosticReportHaploid::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.DiagnosticReportHaploid.extension)
  return extension_;
}

// .google.fhir.stu3.proto.CodeableConcept locus = 4;
inline bool DiagnosticReportHaploid::has_locus() const {
  return this != internal_default_instance() && locus_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& DiagnosticReportHaploid::_internal_locus() const {
  return *locus_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& DiagnosticReportHaploid::locus() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = locus_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportHaploid.locus)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* DiagnosticReportHaploid::release_locus() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportHaploid.locus)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = locus_;
  locus_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* DiagnosticReportHaploid::mutable_locus() {
  
  if (locus_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    locus_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportHaploid.locus)
  return locus_;
}
inline void DiagnosticReportHaploid::set_allocated_locus(::google::fhir::stu3::proto::CodeableConcept* locus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(locus_);
  }
  if (locus) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      locus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, locus, submessage_arena);
    }
    
  } else {
    
  }
  locus_ = locus;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportHaploid.locus)
}

// .google.fhir.stu3.proto.CodeableConcept type = 5;
inline bool DiagnosticReportHaploid::has_type() const {
  return this != internal_default_instance() && type_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& DiagnosticReportHaploid::_internal_type() const {
  return *type_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& DiagnosticReportHaploid::type() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = type_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportHaploid.type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* DiagnosticReportHaploid::release_type() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportHaploid.type)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* DiagnosticReportHaploid::mutable_type() {
  
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportHaploid.type)
  return type_;
}
inline void DiagnosticReportHaploid::set_allocated_type(::google::fhir::stu3::proto::CodeableConcept* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportHaploid.type)
}

// .google.fhir.stu3.proto.CodeableConcept method = 6;
inline bool DiagnosticReportHaploid::has_method() const {
  return this != internal_default_instance() && method_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& DiagnosticReportHaploid::_internal_method() const {
  return *method_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& DiagnosticReportHaploid::method() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = method_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportHaploid.method)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* DiagnosticReportHaploid::release_method() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportHaploid.method)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = method_;
  method_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* DiagnosticReportHaploid::mutable_method() {
  
  if (method_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    method_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportHaploid.method)
  return method_;
}
inline void DiagnosticReportHaploid::set_allocated_method(::google::fhir::stu3::proto::CodeableConcept* method) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(method_);
  }
  if (method) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      method = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, method, submessage_arena);
    }
    
  } else {
    
  }
  method_ = method;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportHaploid.method)
}

// -------------------------------------------------------------------

// DiagnosticReportMethod

// .google.fhir.stu3.proto.String id = 1;
inline bool DiagnosticReportMethod::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportMethod::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportMethod::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportMethod.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportMethod::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportMethod.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportMethod::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportMethod.id)
  return id_;
}
inline void DiagnosticReportMethod::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportMethod.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool DiagnosticReportMethod::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& DiagnosticReportMethod::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& DiagnosticReportMethod::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportMethod.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* DiagnosticReportMethod::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportMethod.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* DiagnosticReportMethod::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportMethod.value_codeable_concept)
  return value_codeable_concept_;
}
inline void DiagnosticReportMethod::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportMethod.value_codeable_concept)
}

// -------------------------------------------------------------------

// BundleHttpResponseHeader

// .google.fhir.stu3.proto.String id = 1;
inline bool BundleHttpResponseHeader::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& BundleHttpResponseHeader::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& BundleHttpResponseHeader::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BundleHttpResponseHeader.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* BundleHttpResponseHeader::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BundleHttpResponseHeader.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* BundleHttpResponseHeader::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BundleHttpResponseHeader.id)
  return id_;
}
inline void BundleHttpResponseHeader::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BundleHttpResponseHeader.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool BundleHttpResponseHeader::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& BundleHttpResponseHeader::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& BundleHttpResponseHeader::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BundleHttpResponseHeader.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* BundleHttpResponseHeader::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BundleHttpResponseHeader.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* BundleHttpResponseHeader::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BundleHttpResponseHeader.value_string)
  return value_string_;
}
inline void BundleHttpResponseHeader::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BundleHttpResponseHeader.value_string)
}

// -------------------------------------------------------------------

// HumanNameAssemblyOrder

// .google.fhir.stu3.proto.String id = 1;
inline bool HumanNameAssemblyOrder::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& HumanNameAssemblyOrder::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& HumanNameAssemblyOrder::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanNameAssemblyOrder.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* HumanNameAssemblyOrder::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanNameAssemblyOrder.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* HumanNameAssemblyOrder::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanNameAssemblyOrder.id)
  return id_;
}
inline void HumanNameAssemblyOrder::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanNameAssemblyOrder.id)
}

// .google.fhir.stu3.proto.HumanNameAssemblyOrderCode value_code = 3;
inline bool HumanNameAssemblyOrder::has_value_code() const {
  return this != internal_default_instance() && value_code_ != NULL;
}
inline const ::google::fhir::stu3::proto::HumanNameAssemblyOrderCode& HumanNameAssemblyOrder::_internal_value_code() const {
  return *value_code_;
}
inline const ::google::fhir::stu3::proto::HumanNameAssemblyOrderCode& HumanNameAssemblyOrder::value_code() const {
  const ::google::fhir::stu3::proto::HumanNameAssemblyOrderCode* p = value_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanNameAssemblyOrder.value_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::HumanNameAssemblyOrderCode*>(
      &::google::fhir::stu3::proto::_HumanNameAssemblyOrderCode_default_instance_);
}
inline ::google::fhir::stu3::proto::HumanNameAssemblyOrderCode* HumanNameAssemblyOrder::release_value_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanNameAssemblyOrder.value_code)
  
  ::google::fhir::stu3::proto::HumanNameAssemblyOrderCode* temp = value_code_;
  value_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::HumanNameAssemblyOrderCode* HumanNameAssemblyOrder::mutable_value_code() {
  
  if (value_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::HumanNameAssemblyOrderCode>(GetArenaNoVirtual());
    value_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanNameAssemblyOrder.value_code)
  return value_code_;
}
inline void HumanNameAssemblyOrder::set_allocated_value_code(::google::fhir::stu3::proto::HumanNameAssemblyOrderCode* value_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_code_);
  }
  if (value_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_code, submessage_arena);
    }
    
  } else {
    
  }
  value_code_ = value_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanNameAssemblyOrder.value_code)
}

// -------------------------------------------------------------------

// HumanNameFathersFamily

// .google.fhir.stu3.proto.String id = 1;
inline bool HumanNameFathersFamily::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& HumanNameFathersFamily::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& HumanNameFathersFamily::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanNameFathersFamily.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* HumanNameFathersFamily::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanNameFathersFamily.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* HumanNameFathersFamily::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanNameFathersFamily.id)
  return id_;
}
inline void HumanNameFathersFamily::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanNameFathersFamily.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool HumanNameFathersFamily::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& HumanNameFathersFamily::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& HumanNameFathersFamily::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanNameFathersFamily.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* HumanNameFathersFamily::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanNameFathersFamily.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* HumanNameFathersFamily::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanNameFathersFamily.value_string)
  return value_string_;
}
inline void HumanNameFathersFamily::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanNameFathersFamily.value_string)
}

// -------------------------------------------------------------------

// HumanNameMothersFamily

// .google.fhir.stu3.proto.String id = 1;
inline bool HumanNameMothersFamily::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& HumanNameMothersFamily::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& HumanNameMothersFamily::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanNameMothersFamily.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* HumanNameMothersFamily::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanNameMothersFamily.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* HumanNameMothersFamily::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanNameMothersFamily.id)
  return id_;
}
inline void HumanNameMothersFamily::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanNameMothersFamily.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool HumanNameMothersFamily::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& HumanNameMothersFamily::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& HumanNameMothersFamily::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanNameMothersFamily.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* HumanNameMothersFamily::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanNameMothersFamily.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* HumanNameMothersFamily::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanNameMothersFamily.value_string)
  return value_string_;
}
inline void HumanNameMothersFamily::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanNameMothersFamily.value_string)
}

// -------------------------------------------------------------------

// HumanNameOwnName

// .google.fhir.stu3.proto.String id = 1;
inline bool HumanNameOwnName::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& HumanNameOwnName::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& HumanNameOwnName::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanNameOwnName.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* HumanNameOwnName::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanNameOwnName.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* HumanNameOwnName::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanNameOwnName.id)
  return id_;
}
inline void HumanNameOwnName::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanNameOwnName.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool HumanNameOwnName::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& HumanNameOwnName::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& HumanNameOwnName::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanNameOwnName.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* HumanNameOwnName::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanNameOwnName.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* HumanNameOwnName::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanNameOwnName.value_string)
  return value_string_;
}
inline void HumanNameOwnName::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanNameOwnName.value_string)
}

// -------------------------------------------------------------------

// HumanNameOwnPrefix

// .google.fhir.stu3.proto.String id = 1;
inline bool HumanNameOwnPrefix::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& HumanNameOwnPrefix::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& HumanNameOwnPrefix::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanNameOwnPrefix.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* HumanNameOwnPrefix::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanNameOwnPrefix.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* HumanNameOwnPrefix::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanNameOwnPrefix.id)
  return id_;
}
inline void HumanNameOwnPrefix::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanNameOwnPrefix.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool HumanNameOwnPrefix::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& HumanNameOwnPrefix::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& HumanNameOwnPrefix::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanNameOwnPrefix.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* HumanNameOwnPrefix::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanNameOwnPrefix.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* HumanNameOwnPrefix::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanNameOwnPrefix.value_string)
  return value_string_;
}
inline void HumanNameOwnPrefix::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanNameOwnPrefix.value_string)
}

// -------------------------------------------------------------------

// HumanNamePartnerName

// .google.fhir.stu3.proto.String id = 1;
inline bool HumanNamePartnerName::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& HumanNamePartnerName::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& HumanNamePartnerName::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanNamePartnerName.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* HumanNamePartnerName::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanNamePartnerName.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* HumanNamePartnerName::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanNamePartnerName.id)
  return id_;
}
inline void HumanNamePartnerName::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanNamePartnerName.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool HumanNamePartnerName::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& HumanNamePartnerName::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& HumanNamePartnerName::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanNamePartnerName.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* HumanNamePartnerName::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanNamePartnerName.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* HumanNamePartnerName::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanNamePartnerName.value_string)
  return value_string_;
}
inline void HumanNamePartnerName::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanNamePartnerName.value_string)
}

// -------------------------------------------------------------------

// HumanNamePartnerPrefix

// .google.fhir.stu3.proto.String id = 1;
inline bool HumanNamePartnerPrefix::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& HumanNamePartnerPrefix::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& HumanNamePartnerPrefix::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanNamePartnerPrefix.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* HumanNamePartnerPrefix::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanNamePartnerPrefix.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* HumanNamePartnerPrefix::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanNamePartnerPrefix.id)
  return id_;
}
inline void HumanNamePartnerPrefix::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanNamePartnerPrefix.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool HumanNamePartnerPrefix::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& HumanNamePartnerPrefix::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& HumanNamePartnerPrefix::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanNamePartnerPrefix.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* HumanNamePartnerPrefix::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanNamePartnerPrefix.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* HumanNamePartnerPrefix::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanNamePartnerPrefix.value_string)
  return value_string_;
}
inline void HumanNamePartnerPrefix::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanNamePartnerPrefix.value_string)
}

// -------------------------------------------------------------------

// IdentifierValidDate

// .google.fhir.stu3.proto.String id = 1;
inline bool IdentifierValidDate::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& IdentifierValidDate::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& IdentifierValidDate::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.IdentifierValidDate.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* IdentifierValidDate::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.IdentifierValidDate.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* IdentifierValidDate::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.IdentifierValidDate.id)
  return id_;
}
inline void IdentifierValidDate::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.IdentifierValidDate.id)
}

// .google.fhir.stu3.proto.DateTime value_date_time = 3;
inline bool IdentifierValidDate::has_value_date_time() const {
  return this != internal_default_instance() && value_date_time_ != NULL;
}
inline const ::google::fhir::stu3::proto::DateTime& IdentifierValidDate::_internal_value_date_time() const {
  return *value_date_time_;
}
inline const ::google::fhir::stu3::proto::DateTime& IdentifierValidDate::value_date_time() const {
  const ::google::fhir::stu3::proto::DateTime* p = value_date_time_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.IdentifierValidDate.value_date_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::DateTime*>(
      &::google::fhir::stu3::proto::_DateTime_default_instance_);
}
inline ::google::fhir::stu3::proto::DateTime* IdentifierValidDate::release_value_date_time() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.IdentifierValidDate.value_date_time)
  
  ::google::fhir::stu3::proto::DateTime* temp = value_date_time_;
  value_date_time_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::DateTime* IdentifierValidDate::mutable_value_date_time() {
  
  if (value_date_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::DateTime>(GetArenaNoVirtual());
    value_date_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.IdentifierValidDate.value_date_time)
  return value_date_time_;
}
inline void IdentifierValidDate::set_allocated_value_date_time(::google::fhir::stu3::proto::DateTime* value_date_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_date_time_);
  }
  if (value_date_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_date_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_date_time, submessage_arena);
    }
    
  } else {
    
  }
  value_date_time_ = value_date_time;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.IdentifierValidDate.value_date_time)
}

// -------------------------------------------------------------------

// ImplementationGuidePage

// .google.fhir.stu3.proto.String id = 1;
inline bool ImplementationGuidePage::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ImplementationGuidePage::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ImplementationGuidePage::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ImplementationGuidePage.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ImplementationGuidePage::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ImplementationGuidePage.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ImplementationGuidePage::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ImplementationGuidePage.id)
  return id_;
}
inline void ImplementationGuidePage::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ImplementationGuidePage.id)
}

// .google.fhir.stu3.proto.Uri value_uri = 3;
inline bool ImplementationGuidePage::has_value_uri() const {
  return this != internal_default_instance() && value_uri_ != NULL;
}
inline const ::google::fhir::stu3::proto::Uri& ImplementationGuidePage::_internal_value_uri() const {
  return *value_uri_;
}
inline const ::google::fhir::stu3::proto::Uri& ImplementationGuidePage::value_uri() const {
  const ::google::fhir::stu3::proto::Uri* p = value_uri_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ImplementationGuidePage.value_uri)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* ImplementationGuidePage::release_value_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ImplementationGuidePage.value_uri)
  
  ::google::fhir::stu3::proto::Uri* temp = value_uri_;
  value_uri_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* ImplementationGuidePage::mutable_value_uri() {
  
  if (value_uri_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    value_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ImplementationGuidePage.value_uri)
  return value_uri_;
}
inline void ImplementationGuidePage::set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_uri_);
  }
  if (value_uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_uri, submessage_arena);
    }
    
  } else {
    
  }
  value_uri_ = value_uri;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ImplementationGuidePage.value_uri)
}

// -------------------------------------------------------------------

// AddressADUse

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADUse::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADUse::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADUse::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADUse.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADUse::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADUse.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADUse::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADUse.id)
  return id_;
}
inline void AddressADUse::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADUse.id)
}

// .google.fhir.stu3.proto.PostalAddressUseTypeCode value_code = 3;
inline bool AddressADUse::has_value_code() const {
  return this != internal_default_instance() && value_code_ != NULL;
}
inline const ::google::fhir::stu3::proto::PostalAddressUseTypeCode& AddressADUse::_internal_value_code() const {
  return *value_code_;
}
inline const ::google::fhir::stu3::proto::PostalAddressUseTypeCode& AddressADUse::value_code() const {
  const ::google::fhir::stu3::proto::PostalAddressUseTypeCode* p = value_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADUse.value_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::PostalAddressUseTypeCode*>(
      &::google::fhir::stu3::proto::_PostalAddressUseTypeCode_default_instance_);
}
inline ::google::fhir::stu3::proto::PostalAddressUseTypeCode* AddressADUse::release_value_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADUse.value_code)
  
  ::google::fhir::stu3::proto::PostalAddressUseTypeCode* temp = value_code_;
  value_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::PostalAddressUseTypeCode* AddressADUse::mutable_value_code() {
  
  if (value_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::PostalAddressUseTypeCode>(GetArenaNoVirtual());
    value_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADUse.value_code)
  return value_code_;
}
inline void AddressADUse::set_allocated_value_code(::google::fhir::stu3::proto::PostalAddressUseTypeCode* value_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_code_);
  }
  if (value_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_code, submessage_arena);
    }
    
  } else {
    
  }
  value_code_ = value_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADUse.value_code)
}

// -------------------------------------------------------------------

// AddressADXPAdditionalLocator

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADXPAdditionalLocator::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPAdditionalLocator::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPAdditionalLocator::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPAdditionalLocator.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPAdditionalLocator::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPAdditionalLocator.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPAdditionalLocator::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPAdditionalLocator.id)
  return id_;
}
inline void AddressADXPAdditionalLocator::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPAdditionalLocator.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AddressADXPAdditionalLocator::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPAdditionalLocator::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPAdditionalLocator::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPAdditionalLocator.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPAdditionalLocator::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPAdditionalLocator.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPAdditionalLocator::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPAdditionalLocator.value_string)
  return value_string_;
}
inline void AddressADXPAdditionalLocator::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPAdditionalLocator.value_string)
}

// -------------------------------------------------------------------

// AddressADXPBuildingNumberSuffix

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADXPBuildingNumberSuffix::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPBuildingNumberSuffix::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPBuildingNumberSuffix::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPBuildingNumberSuffix.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPBuildingNumberSuffix::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPBuildingNumberSuffix.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPBuildingNumberSuffix::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPBuildingNumberSuffix.id)
  return id_;
}
inline void AddressADXPBuildingNumberSuffix::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPBuildingNumberSuffix.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AddressADXPBuildingNumberSuffix::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPBuildingNumberSuffix::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPBuildingNumberSuffix::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPBuildingNumberSuffix.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPBuildingNumberSuffix::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPBuildingNumberSuffix.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPBuildingNumberSuffix::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPBuildingNumberSuffix.value_string)
  return value_string_;
}
inline void AddressADXPBuildingNumberSuffix::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPBuildingNumberSuffix.value_string)
}

// -------------------------------------------------------------------

// AddressADXPCareOf

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADXPCareOf::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPCareOf::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPCareOf::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPCareOf.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPCareOf::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPCareOf.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPCareOf::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPCareOf.id)
  return id_;
}
inline void AddressADXPCareOf::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPCareOf.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AddressADXPCareOf::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPCareOf::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPCareOf::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPCareOf.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPCareOf::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPCareOf.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPCareOf::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPCareOf.value_string)
  return value_string_;
}
inline void AddressADXPCareOf::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPCareOf.value_string)
}

// -------------------------------------------------------------------

// AddressADXPCensusTract

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADXPCensusTract::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPCensusTract::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPCensusTract::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPCensusTract.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPCensusTract::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPCensusTract.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPCensusTract::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPCensusTract.id)
  return id_;
}
inline void AddressADXPCensusTract::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPCensusTract.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AddressADXPCensusTract::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPCensusTract::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPCensusTract::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPCensusTract.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPCensusTract::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPCensusTract.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPCensusTract::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPCensusTract.value_string)
  return value_string_;
}
inline void AddressADXPCensusTract::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPCensusTract.value_string)
}

// -------------------------------------------------------------------

// AddressADXPDelimiter

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADXPDelimiter::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDelimiter::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDelimiter::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPDelimiter.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPDelimiter::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPDelimiter.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPDelimiter::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPDelimiter.id)
  return id_;
}
inline void AddressADXPDelimiter::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPDelimiter.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AddressADXPDelimiter::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDelimiter::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDelimiter::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPDelimiter.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPDelimiter::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPDelimiter.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPDelimiter::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPDelimiter.value_string)
  return value_string_;
}
inline void AddressADXPDelimiter::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPDelimiter.value_string)
}

// -------------------------------------------------------------------

// AddressADXPDeliveryAddressLine

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADXPDeliveryAddressLine::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryAddressLine::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryAddressLine::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPDeliveryAddressLine.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryAddressLine::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPDeliveryAddressLine.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryAddressLine::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPDeliveryAddressLine.id)
  return id_;
}
inline void AddressADXPDeliveryAddressLine::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPDeliveryAddressLine.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AddressADXPDeliveryAddressLine::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryAddressLine::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryAddressLine::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPDeliveryAddressLine.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryAddressLine::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPDeliveryAddressLine.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryAddressLine::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPDeliveryAddressLine.value_string)
  return value_string_;
}
inline void AddressADXPDeliveryAddressLine::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPDeliveryAddressLine.value_string)
}

// -------------------------------------------------------------------

// AddressADXPDeliveryInstallationArea

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADXPDeliveryInstallationArea::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryInstallationArea::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryInstallationArea::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPDeliveryInstallationArea.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryInstallationArea::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPDeliveryInstallationArea.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryInstallationArea::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPDeliveryInstallationArea.id)
  return id_;
}
inline void AddressADXPDeliveryInstallationArea::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPDeliveryInstallationArea.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AddressADXPDeliveryInstallationArea::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryInstallationArea::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryInstallationArea::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPDeliveryInstallationArea.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryInstallationArea::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPDeliveryInstallationArea.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryInstallationArea::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPDeliveryInstallationArea.value_string)
  return value_string_;
}
inline void AddressADXPDeliveryInstallationArea::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPDeliveryInstallationArea.value_string)
}

// -------------------------------------------------------------------

// AddressADXPDeliveryInstallationQualifier

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADXPDeliveryInstallationQualifier::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryInstallationQualifier::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryInstallationQualifier::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPDeliveryInstallationQualifier.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryInstallationQualifier::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPDeliveryInstallationQualifier.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryInstallationQualifier::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPDeliveryInstallationQualifier.id)
  return id_;
}
inline void AddressADXPDeliveryInstallationQualifier::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPDeliveryInstallationQualifier.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AddressADXPDeliveryInstallationQualifier::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryInstallationQualifier::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryInstallationQualifier::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPDeliveryInstallationQualifier.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryInstallationQualifier::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPDeliveryInstallationQualifier.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryInstallationQualifier::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPDeliveryInstallationQualifier.value_string)
  return value_string_;
}
inline void AddressADXPDeliveryInstallationQualifier::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPDeliveryInstallationQualifier.value_string)
}

// -------------------------------------------------------------------

// AddressADXPDeliveryInstallationType

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADXPDeliveryInstallationType::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryInstallationType::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryInstallationType::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPDeliveryInstallationType.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryInstallationType::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPDeliveryInstallationType.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryInstallationType::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPDeliveryInstallationType.id)
  return id_;
}
inline void AddressADXPDeliveryInstallationType::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPDeliveryInstallationType.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AddressADXPDeliveryInstallationType::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryInstallationType::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryInstallationType::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPDeliveryInstallationType.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryInstallationType::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPDeliveryInstallationType.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryInstallationType::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPDeliveryInstallationType.value_string)
  return value_string_;
}
inline void AddressADXPDeliveryInstallationType::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPDeliveryInstallationType.value_string)
}

// -------------------------------------------------------------------

// AddressADXPDeliveryMode

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADXPDeliveryMode::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryMode::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryMode::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPDeliveryMode.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryMode::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPDeliveryMode.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryMode::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPDeliveryMode.id)
  return id_;
}
inline void AddressADXPDeliveryMode::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPDeliveryMode.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AddressADXPDeliveryMode::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryMode::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryMode::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPDeliveryMode.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryMode::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPDeliveryMode.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryMode::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPDeliveryMode.value_string)
  return value_string_;
}
inline void AddressADXPDeliveryMode::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPDeliveryMode.value_string)
}

// -------------------------------------------------------------------

// AddressADXPDeliveryModeIdentifier

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADXPDeliveryModeIdentifier::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryModeIdentifier::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryModeIdentifier::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPDeliveryModeIdentifier.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryModeIdentifier::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPDeliveryModeIdentifier.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryModeIdentifier::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPDeliveryModeIdentifier.id)
  return id_;
}
inline void AddressADXPDeliveryModeIdentifier::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPDeliveryModeIdentifier.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AddressADXPDeliveryModeIdentifier::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryModeIdentifier::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDeliveryModeIdentifier::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPDeliveryModeIdentifier.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryModeIdentifier::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPDeliveryModeIdentifier.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPDeliveryModeIdentifier::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPDeliveryModeIdentifier.value_string)
  return value_string_;
}
inline void AddressADXPDeliveryModeIdentifier::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPDeliveryModeIdentifier.value_string)
}

// -------------------------------------------------------------------

// AddressADXPDirection

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADXPDirection::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDirection::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDirection::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPDirection.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPDirection::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPDirection.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPDirection::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPDirection.id)
  return id_;
}
inline void AddressADXPDirection::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPDirection.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AddressADXPDirection::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDirection::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPDirection::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPDirection.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPDirection::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPDirection.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPDirection::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPDirection.value_string)
  return value_string_;
}
inline void AddressADXPDirection::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPDirection.value_string)
}

// -------------------------------------------------------------------

// AddressADXPHouseNumber

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADXPHouseNumber::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPHouseNumber::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPHouseNumber::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPHouseNumber.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPHouseNumber::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPHouseNumber.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPHouseNumber::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPHouseNumber.id)
  return id_;
}
inline void AddressADXPHouseNumber::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPHouseNumber.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AddressADXPHouseNumber::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPHouseNumber::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPHouseNumber::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPHouseNumber.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPHouseNumber::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPHouseNumber.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPHouseNumber::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPHouseNumber.value_string)
  return value_string_;
}
inline void AddressADXPHouseNumber::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPHouseNumber.value_string)
}

// -------------------------------------------------------------------

// AddressADXPHouseNumberNumeric

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADXPHouseNumberNumeric::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPHouseNumberNumeric::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPHouseNumberNumeric::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPHouseNumberNumeric.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPHouseNumberNumeric::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPHouseNumberNumeric.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPHouseNumberNumeric::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPHouseNumberNumeric.id)
  return id_;
}
inline void AddressADXPHouseNumberNumeric::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPHouseNumberNumeric.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AddressADXPHouseNumberNumeric::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPHouseNumberNumeric::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPHouseNumberNumeric::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPHouseNumberNumeric.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPHouseNumberNumeric::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPHouseNumberNumeric.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPHouseNumberNumeric::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPHouseNumberNumeric.value_string)
  return value_string_;
}
inline void AddressADXPHouseNumberNumeric::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPHouseNumberNumeric.value_string)
}

// -------------------------------------------------------------------

// AddressADXPPostBox

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADXPPostBox::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPPostBox::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPPostBox::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPPostBox.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPPostBox::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPPostBox.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPPostBox::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPPostBox.id)
  return id_;
}
inline void AddressADXPPostBox::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPPostBox.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AddressADXPPostBox::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPPostBox::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPPostBox::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPPostBox.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPPostBox::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPPostBox.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPPostBox::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPPostBox.value_string)
  return value_string_;
}
inline void AddressADXPPostBox::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPPostBox.value_string)
}

// -------------------------------------------------------------------

// AddressADXPPrecinct

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADXPPrecinct::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPPrecinct::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPPrecinct::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPPrecinct.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPPrecinct::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPPrecinct.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPPrecinct::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPPrecinct.id)
  return id_;
}
inline void AddressADXPPrecinct::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPPrecinct.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AddressADXPPrecinct::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPPrecinct::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPPrecinct::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPPrecinct.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPPrecinct::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPPrecinct.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPPrecinct::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPPrecinct.value_string)
  return value_string_;
}
inline void AddressADXPPrecinct::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPPrecinct.value_string)
}

// -------------------------------------------------------------------

// AddressADXPStreetAddressLine

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADXPStreetAddressLine::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPStreetAddressLine::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPStreetAddressLine::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPStreetAddressLine.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPStreetAddressLine::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPStreetAddressLine.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPStreetAddressLine::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPStreetAddressLine.id)
  return id_;
}
inline void AddressADXPStreetAddressLine::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPStreetAddressLine.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AddressADXPStreetAddressLine::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPStreetAddressLine::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPStreetAddressLine::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPStreetAddressLine.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPStreetAddressLine::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPStreetAddressLine.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPStreetAddressLine::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPStreetAddressLine.value_string)
  return value_string_;
}
inline void AddressADXPStreetAddressLine::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPStreetAddressLine.value_string)
}

// -------------------------------------------------------------------

// AddressADXPStreetName

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADXPStreetName::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPStreetName::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPStreetName::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPStreetName.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPStreetName::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPStreetName.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPStreetName::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPStreetName.id)
  return id_;
}
inline void AddressADXPStreetName::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPStreetName.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AddressADXPStreetName::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPStreetName::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPStreetName::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPStreetName.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPStreetName::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPStreetName.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPStreetName::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPStreetName.value_string)
  return value_string_;
}
inline void AddressADXPStreetName::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPStreetName.value_string)
}

// -------------------------------------------------------------------

// AddressADXPStreetNameBase

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADXPStreetNameBase::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPStreetNameBase::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPStreetNameBase::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPStreetNameBase.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPStreetNameBase::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPStreetNameBase.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPStreetNameBase::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPStreetNameBase.id)
  return id_;
}
inline void AddressADXPStreetNameBase::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPStreetNameBase.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AddressADXPStreetNameBase::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPStreetNameBase::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPStreetNameBase::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPStreetNameBase.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPStreetNameBase::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPStreetNameBase.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPStreetNameBase::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPStreetNameBase.value_string)
  return value_string_;
}
inline void AddressADXPStreetNameBase::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPStreetNameBase.value_string)
}

// -------------------------------------------------------------------

// AddressADXPStreetNameType

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADXPStreetNameType::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPStreetNameType::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPStreetNameType::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPStreetNameType.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPStreetNameType::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPStreetNameType.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPStreetNameType::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPStreetNameType.id)
  return id_;
}
inline void AddressADXPStreetNameType::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPStreetNameType.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AddressADXPStreetNameType::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPStreetNameType::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPStreetNameType::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPStreetNameType.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPStreetNameType::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPStreetNameType.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPStreetNameType::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPStreetNameType.value_string)
  return value_string_;
}
inline void AddressADXPStreetNameType::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPStreetNameType.value_string)
}

// -------------------------------------------------------------------

// AddressADXPUnitID

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADXPUnitID::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPUnitID::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPUnitID::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPUnitID.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPUnitID::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPUnitID.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPUnitID::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPUnitID.id)
  return id_;
}
inline void AddressADXPUnitID::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPUnitID.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AddressADXPUnitID::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPUnitID::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPUnitID::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPUnitID.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPUnitID::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPUnitID.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPUnitID::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPUnitID.value_string)
  return value_string_;
}
inline void AddressADXPUnitID::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPUnitID.value_string)
}

// -------------------------------------------------------------------

// AddressADXPUnitType

// .google.fhir.stu3.proto.String id = 1;
inline bool AddressADXPUnitType::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPUnitType::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPUnitType::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPUnitType.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPUnitType::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPUnitType.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPUnitType::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPUnitType.id)
  return id_;
}
inline void AddressADXPUnitType::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPUnitType.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AddressADXPUnitType::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPUnitType::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AddressADXPUnitType::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressADXPUnitType.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressADXPUnitType::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressADXPUnitType.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressADXPUnitType::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressADXPUnitType.value_string)
  return value_string_;
}
inline void AddressADXPUnitType::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressADXPUnitType.value_string)
}

// -------------------------------------------------------------------

// CodingCOValue

// .google.fhir.stu3.proto.String id = 1;
inline bool CodingCOValue::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& CodingCOValue::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodingCOValue::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodingCOValue.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodingCOValue::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodingCOValue.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodingCOValue::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodingCOValue.id)
  return id_;
}
inline void CodingCOValue::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodingCOValue.id)
}

// .google.fhir.stu3.proto.Decimal value_decimal = 3;
inline bool CodingCOValue::has_value_decimal() const {
  return this != internal_default_instance() && value_decimal_ != NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& CodingCOValue::_internal_value_decimal() const {
  return *value_decimal_;
}
inline const ::google::fhir::stu3::proto::Decimal& CodingCOValue::value_decimal() const {
  const ::google::fhir::stu3::proto::Decimal* p = value_decimal_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodingCOValue.value_decimal)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* CodingCOValue::release_value_decimal() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodingCOValue.value_decimal)
  
  ::google::fhir::stu3::proto::Decimal* temp = value_decimal_;
  value_decimal_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* CodingCOValue::mutable_value_decimal() {
  
  if (value_decimal_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    value_decimal_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodingCOValue.value_decimal)
  return value_decimal_;
}
inline void CodingCOValue::set_allocated_value_decimal(::google::fhir::stu3::proto::Decimal* value_decimal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_decimal_);
  }
  if (value_decimal) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_decimal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_decimal, submessage_arena);
    }
    
  } else {
    
  }
  value_decimal_ = value_decimal;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodingCOValue.value_decimal)
}

// -------------------------------------------------------------------

// HumanNameENQualifier

// .google.fhir.stu3.proto.String id = 1;
inline bool HumanNameENQualifier::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& HumanNameENQualifier::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& HumanNameENQualifier::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanNameENQualifier.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* HumanNameENQualifier::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanNameENQualifier.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* HumanNameENQualifier::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanNameENQualifier.id)
  return id_;
}
inline void HumanNameENQualifier::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanNameENQualifier.id)
}

// .google.fhir.stu3.proto.EntityNamePartQualifierCode value_code = 3;
inline bool HumanNameENQualifier::has_value_code() const {
  return this != internal_default_instance() && value_code_ != NULL;
}
inline const ::google::fhir::stu3::proto::EntityNamePartQualifierCode& HumanNameENQualifier::_internal_value_code() const {
  return *value_code_;
}
inline const ::google::fhir::stu3::proto::EntityNamePartQualifierCode& HumanNameENQualifier::value_code() const {
  const ::google::fhir::stu3::proto::EntityNamePartQualifierCode* p = value_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanNameENQualifier.value_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::EntityNamePartQualifierCode*>(
      &::google::fhir::stu3::proto::_EntityNamePartQualifierCode_default_instance_);
}
inline ::google::fhir::stu3::proto::EntityNamePartQualifierCode* HumanNameENQualifier::release_value_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanNameENQualifier.value_code)
  
  ::google::fhir::stu3::proto::EntityNamePartQualifierCode* temp = value_code_;
  value_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::EntityNamePartQualifierCode* HumanNameENQualifier::mutable_value_code() {
  
  if (value_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::EntityNamePartQualifierCode>(GetArenaNoVirtual());
    value_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanNameENQualifier.value_code)
  return value_code_;
}
inline void HumanNameENQualifier::set_allocated_value_code(::google::fhir::stu3::proto::EntityNamePartQualifierCode* value_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_code_);
  }
  if (value_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_code, submessage_arena);
    }
    
  } else {
    
  }
  value_code_ = value_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanNameENQualifier.value_code)
}

// -------------------------------------------------------------------

// HumanNameENRepresentation

// .google.fhir.stu3.proto.String id = 1;
inline bool HumanNameENRepresentation::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& HumanNameENRepresentation::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& HumanNameENRepresentation::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanNameENRepresentation.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* HumanNameENRepresentation::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanNameENRepresentation.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* HumanNameENRepresentation::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanNameENRepresentation.id)
  return id_;
}
inline void HumanNameENRepresentation::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanNameENRepresentation.id)
}

// .google.fhir.stu3.proto.NameRepresentationUseCode value_code = 3;
inline bool HumanNameENRepresentation::has_value_code() const {
  return this != internal_default_instance() && value_code_ != NULL;
}
inline const ::google::fhir::stu3::proto::NameRepresentationUseCode& HumanNameENRepresentation::_internal_value_code() const {
  return *value_code_;
}
inline const ::google::fhir::stu3::proto::NameRepresentationUseCode& HumanNameENRepresentation::value_code() const {
  const ::google::fhir::stu3::proto::NameRepresentationUseCode* p = value_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanNameENRepresentation.value_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::NameRepresentationUseCode*>(
      &::google::fhir::stu3::proto::_NameRepresentationUseCode_default_instance_);
}
inline ::google::fhir::stu3::proto::NameRepresentationUseCode* HumanNameENRepresentation::release_value_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanNameENRepresentation.value_code)
  
  ::google::fhir::stu3::proto::NameRepresentationUseCode* temp = value_code_;
  value_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::NameRepresentationUseCode* HumanNameENRepresentation::mutable_value_code() {
  
  if (value_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::NameRepresentationUseCode>(GetArenaNoVirtual());
    value_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanNameENRepresentation.value_code)
  return value_code_;
}
inline void HumanNameENRepresentation::set_allocated_value_code(::google::fhir::stu3::proto::NameRepresentationUseCode* value_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_code_);
  }
  if (value_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_code, submessage_arena);
    }
    
  } else {
    
  }
  value_code_ = value_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanNameENRepresentation.value_code)
}

// -------------------------------------------------------------------

// AnyNullFlavor

// .google.fhir.stu3.proto.String id = 1;
inline bool AnyNullFlavor::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AnyNullFlavor::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AnyNullFlavor::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AnyNullFlavor.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AnyNullFlavor::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AnyNullFlavor.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AnyNullFlavor::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AnyNullFlavor.id)
  return id_;
}
inline void AnyNullFlavor::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AnyNullFlavor.id)
}

// .google.fhir.stu3.proto.NullFlavorCode value_code = 3;
inline bool AnyNullFlavor::has_value_code() const {
  return this != internal_default_instance() && value_code_ != NULL;
}
inline const ::google::fhir::stu3::proto::NullFlavorCode& AnyNullFlavor::_internal_value_code() const {
  return *value_code_;
}
inline const ::google::fhir::stu3::proto::NullFlavorCode& AnyNullFlavor::value_code() const {
  const ::google::fhir::stu3::proto::NullFlavorCode* p = value_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AnyNullFlavor.value_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::NullFlavorCode*>(
      &::google::fhir::stu3::proto::_NullFlavorCode_default_instance_);
}
inline ::google::fhir::stu3::proto::NullFlavorCode* AnyNullFlavor::release_value_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AnyNullFlavor.value_code)
  
  ::google::fhir::stu3::proto::NullFlavorCode* temp = value_code_;
  value_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::NullFlavorCode* AnyNullFlavor::mutable_value_code() {
  
  if (value_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::NullFlavorCode>(GetArenaNoVirtual());
    value_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AnyNullFlavor.value_code)
  return value_code_;
}
inline void AnyNullFlavor::set_allocated_value_code(::google::fhir::stu3::proto::NullFlavorCode* value_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_code_);
  }
  if (value_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_code, submessage_arena);
    }
    
  } else {
    
  }
  value_code_ = value_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AnyNullFlavor.value_code)
}

// -------------------------------------------------------------------

// AnyPreferred

// .google.fhir.stu3.proto.String id = 1;
inline bool AnyPreferred::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AnyPreferred::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AnyPreferred::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AnyPreferred.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AnyPreferred::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AnyPreferred.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AnyPreferred::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AnyPreferred.id)
  return id_;
}
inline void AnyPreferred::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AnyPreferred.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool AnyPreferred::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& AnyPreferred::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& AnyPreferred::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AnyPreferred.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* AnyPreferred::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AnyPreferred.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* AnyPreferred::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AnyPreferred.value_boolean)
  return value_boolean_;
}
inline void AnyPreferred::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AnyPreferred.value_boolean)
}

// -------------------------------------------------------------------

// StringSCCoding

// .google.fhir.stu3.proto.String id = 1;
inline bool StringSCCoding::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& StringSCCoding::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& StringSCCoding::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StringSCCoding.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* StringSCCoding::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StringSCCoding.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* StringSCCoding::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StringSCCoding.id)
  return id_;
}
inline void StringSCCoding::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StringSCCoding.id)
}

// .google.fhir.stu3.proto.Coding value_coding = 3;
inline bool StringSCCoding::has_value_coding() const {
  return this != internal_default_instance() && value_coding_ != NULL;
}
inline const ::google::fhir::stu3::proto::Coding& StringSCCoding::_internal_value_coding() const {
  return *value_coding_;
}
inline const ::google::fhir::stu3::proto::Coding& StringSCCoding::value_coding() const {
  const ::google::fhir::stu3::proto::Coding* p = value_coding_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StringSCCoding.value_coding)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Coding*>(
      &::google::fhir::stu3::proto::_Coding_default_instance_);
}
inline ::google::fhir::stu3::proto::Coding* StringSCCoding::release_value_coding() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StringSCCoding.value_coding)
  
  ::google::fhir::stu3::proto::Coding* temp = value_coding_;
  value_coding_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Coding* StringSCCoding::mutable_value_coding() {
  
  if (value_coding_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Coding>(GetArenaNoVirtual());
    value_coding_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StringSCCoding.value_coding)
  return value_coding_;
}
inline void StringSCCoding::set_allocated_value_coding(::google::fhir::stu3::proto::Coding* value_coding) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_coding_);
  }
  if (value_coding) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_coding = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_coding, submessage_arena);
    }
    
  } else {
    
  }
  value_coding_ = value_coding;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StringSCCoding.value_coding)
}

// -------------------------------------------------------------------

// ContactPointTELAddress

// .google.fhir.stu3.proto.String id = 1;
inline bool ContactPointTELAddress::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ContactPointTELAddress::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ContactPointTELAddress::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ContactPointTELAddress.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ContactPointTELAddress::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ContactPointTELAddress.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ContactPointTELAddress::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ContactPointTELAddress.id)
  return id_;
}
inline void ContactPointTELAddress::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ContactPointTELAddress.id)
}

// .google.fhir.stu3.proto.Uri value_uri = 3;
inline bool ContactPointTELAddress::has_value_uri() const {
  return this != internal_default_instance() && value_uri_ != NULL;
}
inline const ::google::fhir::stu3::proto::Uri& ContactPointTELAddress::_internal_value_uri() const {
  return *value_uri_;
}
inline const ::google::fhir::stu3::proto::Uri& ContactPointTELAddress::value_uri() const {
  const ::google::fhir::stu3::proto::Uri* p = value_uri_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ContactPointTELAddress.value_uri)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* ContactPointTELAddress::release_value_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ContactPointTELAddress.value_uri)
  
  ::google::fhir::stu3::proto::Uri* temp = value_uri_;
  value_uri_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* ContactPointTELAddress::mutable_value_uri() {
  
  if (value_uri_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    value_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ContactPointTELAddress.value_uri)
  return value_uri_;
}
inline void ContactPointTELAddress::set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_uri_);
  }
  if (value_uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_uri, submessage_arena);
    }
    
  } else {
    
  }
  value_uri_ = value_uri;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ContactPointTELAddress.value_uri)
}

// -------------------------------------------------------------------

// QuantityUncertainty

// .google.fhir.stu3.proto.String id = 1;
inline bool QuantityUncertainty::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuantityUncertainty::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuantityUncertainty::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuantityUncertainty.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuantityUncertainty::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuantityUncertainty.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuantityUncertainty::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuantityUncertainty.id)
  return id_;
}
inline void QuantityUncertainty::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuantityUncertainty.id)
}

// .google.fhir.stu3.proto.Decimal value_decimal = 3;
inline bool QuantityUncertainty::has_value_decimal() const {
  return this != internal_default_instance() && value_decimal_ != NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& QuantityUncertainty::_internal_value_decimal() const {
  return *value_decimal_;
}
inline const ::google::fhir::stu3::proto::Decimal& QuantityUncertainty::value_decimal() const {
  const ::google::fhir::stu3::proto::Decimal* p = value_decimal_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuantityUncertainty.value_decimal)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* QuantityUncertainty::release_value_decimal() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuantityUncertainty.value_decimal)
  
  ::google::fhir::stu3::proto::Decimal* temp = value_decimal_;
  value_decimal_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* QuantityUncertainty::mutable_value_decimal() {
  
  if (value_decimal_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    value_decimal_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuantityUncertainty.value_decimal)
  return value_decimal_;
}
inline void QuantityUncertainty::set_allocated_value_decimal(::google::fhir::stu3::proto::Decimal* value_decimal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_decimal_);
  }
  if (value_decimal) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_decimal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_decimal, submessage_arena);
    }
    
  } else {
    
  }
  value_decimal_ = value_decimal;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuantityUncertainty.value_decimal)
}

// -------------------------------------------------------------------

// QuantityUncertaintyType

// .google.fhir.stu3.proto.String id = 1;
inline bool QuantityUncertaintyType::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuantityUncertaintyType::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuantityUncertaintyType::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuantityUncertaintyType.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuantityUncertaintyType::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuantityUncertaintyType.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuantityUncertaintyType::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuantityUncertaintyType.id)
  return id_;
}
inline void QuantityUncertaintyType::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuantityUncertaintyType.id)
}

// .google.fhir.stu3.proto.ProbabilityDistributionTypeCode value_code = 3;
inline bool QuantityUncertaintyType::has_value_code() const {
  return this != internal_default_instance() && value_code_ != NULL;
}
inline const ::google::fhir::stu3::proto::ProbabilityDistributionTypeCode& QuantityUncertaintyType::_internal_value_code() const {
  return *value_code_;
}
inline const ::google::fhir::stu3::proto::ProbabilityDistributionTypeCode& QuantityUncertaintyType::value_code() const {
  const ::google::fhir::stu3::proto::ProbabilityDistributionTypeCode* p = value_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuantityUncertaintyType.value_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::ProbabilityDistributionTypeCode*>(
      &::google::fhir::stu3::proto::_ProbabilityDistributionTypeCode_default_instance_);
}
inline ::google::fhir::stu3::proto::ProbabilityDistributionTypeCode* QuantityUncertaintyType::release_value_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuantityUncertaintyType.value_code)
  
  ::google::fhir::stu3::proto::ProbabilityDistributionTypeCode* temp = value_code_;
  value_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::ProbabilityDistributionTypeCode* QuantityUncertaintyType::mutable_value_code() {
  
  if (value_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::ProbabilityDistributionTypeCode>(GetArenaNoVirtual());
    value_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuantityUncertaintyType.value_code)
  return value_code_;
}
inline void QuantityUncertaintyType::set_allocated_value_code(::google::fhir::stu3::proto::ProbabilityDistributionTypeCode* value_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_code_);
  }
  if (value_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_code, submessage_arena);
    }
    
  } else {
    
  }
  value_code_ = value_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuantityUncertaintyType.value_code)
}

// -------------------------------------------------------------------

// AnyVerification

// .google.fhir.stu3.proto.String id = 1;
inline bool AnyVerification::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AnyVerification::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AnyVerification::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AnyVerification.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AnyVerification::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AnyVerification.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AnyVerification::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AnyVerification.id)
  return id_;
}
inline void AnyVerification::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AnyVerification.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool AnyVerification::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& AnyVerification::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& AnyVerification::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AnyVerification.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* AnyVerification::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AnyVerification.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* AnyVerification::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AnyVerification.value_codeable_concept)
  return value_codeable_concept_;
}
inline void AnyVerification::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AnyVerification.value_codeable_concept)
}

// -------------------------------------------------------------------

// LocationAlias

// .google.fhir.stu3.proto.String id = 1;
inline bool LocationAlias::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& LocationAlias::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& LocationAlias::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.LocationAlias.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* LocationAlias::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.LocationAlias.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* LocationAlias::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.LocationAlias.id)
  return id_;
}
inline void LocationAlias::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.LocationAlias.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool LocationAlias::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& LocationAlias::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& LocationAlias::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.LocationAlias.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* LocationAlias::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.LocationAlias.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* LocationAlias::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.LocationAlias.value_string)
  return value_string_;
}
inline void LocationAlias::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.LocationAlias.value_string)
}

// -------------------------------------------------------------------

// BundleLocationDistance

// .google.fhir.stu3.proto.String id = 1;
inline bool BundleLocationDistance::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& BundleLocationDistance::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& BundleLocationDistance::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BundleLocationDistance.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* BundleLocationDistance::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BundleLocationDistance.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* BundleLocationDistance::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BundleLocationDistance.id)
  return id_;
}
inline void BundleLocationDistance::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BundleLocationDistance.id)
}

// .google.fhir.stu3.proto.Distance value_distance = 3;
inline bool BundleLocationDistance::has_value_distance() const {
  return this != internal_default_instance() && value_distance_ != NULL;
}
inline const ::google::fhir::stu3::proto::Distance& BundleLocationDistance::_internal_value_distance() const {
  return *value_distance_;
}
inline const ::google::fhir::stu3::proto::Distance& BundleLocationDistance::value_distance() const {
  const ::google::fhir::stu3::proto::Distance* p = value_distance_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BundleLocationDistance.value_distance)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Distance*>(
      &::google::fhir::stu3::proto::_Distance_default_instance_);
}
inline ::google::fhir::stu3::proto::Distance* BundleLocationDistance::release_value_distance() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BundleLocationDistance.value_distance)
  
  ::google::fhir::stu3::proto::Distance* temp = value_distance_;
  value_distance_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Distance* BundleLocationDistance::mutable_value_distance() {
  
  if (value_distance_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Distance>(GetArenaNoVirtual());
    value_distance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BundleLocationDistance.value_distance)
  return value_distance_;
}
inline void BundleLocationDistance::set_allocated_value_distance(::google::fhir::stu3::proto::Distance* value_distance) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_distance_);
  }
  if (value_distance) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_distance = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_distance, submessage_arena);
    }
    
  } else {
    
  }
  value_distance_ = value_distance;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BundleLocationDistance.value_distance)
}

// -------------------------------------------------------------------

// DataElementMapSourcePublisher

// .google.fhir.stu3.proto.String id = 1;
inline bool DataElementMapSourcePublisher::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DataElementMapSourcePublisher::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DataElementMapSourcePublisher::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DataElementMapSourcePublisher.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DataElementMapSourcePublisher::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DataElementMapSourcePublisher.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DataElementMapSourcePublisher::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DataElementMapSourcePublisher.id)
  return id_;
}
inline void DataElementMapSourcePublisher::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DataElementMapSourcePublisher.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool DataElementMapSourcePublisher::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DataElementMapSourcePublisher::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& DataElementMapSourcePublisher::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DataElementMapSourcePublisher.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DataElementMapSourcePublisher::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DataElementMapSourcePublisher.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DataElementMapSourcePublisher::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DataElementMapSourcePublisher.value_string)
  return value_string_;
}
inline void DataElementMapSourcePublisher::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DataElementMapSourcePublisher.value_string)
}

// -------------------------------------------------------------------

// BundleMatchGrade

// .google.fhir.stu3.proto.String id = 1;
inline bool BundleMatchGrade::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& BundleMatchGrade::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& BundleMatchGrade::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BundleMatchGrade.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* BundleMatchGrade::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BundleMatchGrade.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* BundleMatchGrade::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BundleMatchGrade.id)
  return id_;
}
inline void BundleMatchGrade::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BundleMatchGrade.id)
}

// .google.fhir.stu3.proto.MatchGradeCode value_code = 3;
inline bool BundleMatchGrade::has_value_code() const {
  return this != internal_default_instance() && value_code_ != NULL;
}
inline const ::google::fhir::stu3::proto::MatchGradeCode& BundleMatchGrade::_internal_value_code() const {
  return *value_code_;
}
inline const ::google::fhir::stu3::proto::MatchGradeCode& BundleMatchGrade::value_code() const {
  const ::google::fhir::stu3::proto::MatchGradeCode* p = value_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BundleMatchGrade.value_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::MatchGradeCode*>(
      &::google::fhir::stu3::proto::_MatchGradeCode_default_instance_);
}
inline ::google::fhir::stu3::proto::MatchGradeCode* BundleMatchGrade::release_value_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BundleMatchGrade.value_code)
  
  ::google::fhir::stu3::proto::MatchGradeCode* temp = value_code_;
  value_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::MatchGradeCode* BundleMatchGrade::mutable_value_code() {
  
  if (value_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::MatchGradeCode>(GetArenaNoVirtual());
    value_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BundleMatchGrade.value_code)
  return value_code_;
}
inline void BundleMatchGrade::set_allocated_value_code(::google::fhir::stu3::proto::MatchGradeCode* value_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_code_);
  }
  if (value_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_code, submessage_arena);
    }
    
  } else {
    
  }
  value_code_ = value_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BundleMatchGrade.value_code)
}

// -------------------------------------------------------------------

// MaxDecimalPlaces

// .google.fhir.stu3.proto.String id = 1;
inline bool MaxDecimalPlaces::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& MaxDecimalPlaces::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& MaxDecimalPlaces::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MaxDecimalPlaces.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* MaxDecimalPlaces::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MaxDecimalPlaces.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* MaxDecimalPlaces::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MaxDecimalPlaces.id)
  return id_;
}
inline void MaxDecimalPlaces::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MaxDecimalPlaces.id)
}

// .google.fhir.stu3.proto.Integer value_integer = 3;
inline bool MaxDecimalPlaces::has_value_integer() const {
  return this != internal_default_instance() && value_integer_ != NULL;
}
inline const ::google::fhir::stu3::proto::Integer& MaxDecimalPlaces::_internal_value_integer() const {
  return *value_integer_;
}
inline const ::google::fhir::stu3::proto::Integer& MaxDecimalPlaces::value_integer() const {
  const ::google::fhir::stu3::proto::Integer* p = value_integer_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MaxDecimalPlaces.value_integer)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Integer*>(
      &::google::fhir::stu3::proto::_Integer_default_instance_);
}
inline ::google::fhir::stu3::proto::Integer* MaxDecimalPlaces::release_value_integer() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MaxDecimalPlaces.value_integer)
  
  ::google::fhir::stu3::proto::Integer* temp = value_integer_;
  value_integer_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Integer* MaxDecimalPlaces::mutable_value_integer() {
  
  if (value_integer_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Integer>(GetArenaNoVirtual());
    value_integer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MaxDecimalPlaces.value_integer)
  return value_integer_;
}
inline void MaxDecimalPlaces::set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_integer_);
  }
  if (value_integer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_integer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_integer, submessage_arena);
    }
    
  } else {
    
  }
  value_integer_ = value_integer;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MaxDecimalPlaces.value_integer)
}

// -------------------------------------------------------------------

// MaxSize

// .google.fhir.stu3.proto.String id = 1;
inline bool MaxSize::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& MaxSize::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& MaxSize::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MaxSize.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* MaxSize::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MaxSize.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* MaxSize::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MaxSize.id)
  return id_;
}
inline void MaxSize::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MaxSize.id)
}

// .google.fhir.stu3.proto.Decimal value_decimal = 3;
inline bool MaxSize::has_value_decimal() const {
  return this != internal_default_instance() && value_decimal_ != NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& MaxSize::_internal_value_decimal() const {
  return *value_decimal_;
}
inline const ::google::fhir::stu3::proto::Decimal& MaxSize::value_decimal() const {
  const ::google::fhir::stu3::proto::Decimal* p = value_decimal_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MaxSize.value_decimal)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* MaxSize::release_value_decimal() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MaxSize.value_decimal)
  
  ::google::fhir::stu3::proto::Decimal* temp = value_decimal_;
  value_decimal_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* MaxSize::mutable_value_decimal() {
  
  if (value_decimal_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    value_decimal_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MaxSize.value_decimal)
  return value_decimal_;
}
inline void MaxSize::set_allocated_value_decimal(::google::fhir::stu3::proto::Decimal* value_decimal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_decimal_);
  }
  if (value_decimal) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_decimal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_decimal, submessage_arena);
    }
    
  } else {
    
  }
  value_decimal_ = value_decimal;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MaxSize.value_decimal)
}

// -------------------------------------------------------------------

// QuestionnaireMaxValue_Value

// .google.fhir.stu3.proto.Date date = 1;
inline bool QuestionnaireMaxValue_Value::has_date() const {
  return value_case() == kDate;
}
inline void QuestionnaireMaxValue_Value::set_has_date() {
  _oneof_case_[0] = kDate;
}
inline const ::google::fhir::stu3::proto::Date& QuestionnaireMaxValue_Value::_internal_date() const {
  return *value_.date_;
}
inline ::google::fhir::stu3::proto::Date* QuestionnaireMaxValue_Value::release_date() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireMaxValue.Value.date)
  if (has_date()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Date* temp = value_.date_;
    value_.date_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Date& QuestionnaireMaxValue_Value::date() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireMaxValue.Value.date)
  return has_date()
      ? *value_.date_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Date*>(&::google::fhir::stu3::proto::_Date_default_instance_);
}
inline ::google::fhir::stu3::proto::Date* QuestionnaireMaxValue_Value::mutable_date() {
  if (!has_date()) {
    clear_value();
    set_has_date();
    value_.date_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Date >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireMaxValue.Value.date)
  return value_.date_;
}

// .google.fhir.stu3.proto.DateTime date_time = 2;
inline bool QuestionnaireMaxValue_Value::has_date_time() const {
  return value_case() == kDateTime;
}
inline void QuestionnaireMaxValue_Value::set_has_date_time() {
  _oneof_case_[0] = kDateTime;
}
inline const ::google::fhir::stu3::proto::DateTime& QuestionnaireMaxValue_Value::_internal_date_time() const {
  return *value_.date_time_;
}
inline ::google::fhir::stu3::proto::DateTime* QuestionnaireMaxValue_Value::release_date_time() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireMaxValue.Value.date_time)
  if (has_date_time()) {
    clear_has_value();
      ::google::fhir::stu3::proto::DateTime* temp = value_.date_time_;
    value_.date_time_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::DateTime& QuestionnaireMaxValue_Value::date_time() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireMaxValue.Value.date_time)
  return has_date_time()
      ? *value_.date_time_
      : *reinterpret_cast< ::google::fhir::stu3::proto::DateTime*>(&::google::fhir::stu3::proto::_DateTime_default_instance_);
}
inline ::google::fhir::stu3::proto::DateTime* QuestionnaireMaxValue_Value::mutable_date_time() {
  if (!has_date_time()) {
    clear_value();
    set_has_date_time();
    value_.date_time_ = CreateMaybeMessage< ::google::fhir::stu3::proto::DateTime >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireMaxValue.Value.date_time)
  return value_.date_time_;
}

// .google.fhir.stu3.proto.Time time = 3;
inline bool QuestionnaireMaxValue_Value::has_time() const {
  return value_case() == kTime;
}
inline void QuestionnaireMaxValue_Value::set_has_time() {
  _oneof_case_[0] = kTime;
}
inline const ::google::fhir::stu3::proto::Time& QuestionnaireMaxValue_Value::_internal_time() const {
  return *value_.time_;
}
inline ::google::fhir::stu3::proto::Time* QuestionnaireMaxValue_Value::release_time() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireMaxValue.Value.time)
  if (has_time()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Time* temp = value_.time_;
    value_.time_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Time& QuestionnaireMaxValue_Value::time() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireMaxValue.Value.time)
  return has_time()
      ? *value_.time_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Time*>(&::google::fhir::stu3::proto::_Time_default_instance_);
}
inline ::google::fhir::stu3::proto::Time* QuestionnaireMaxValue_Value::mutable_time() {
  if (!has_time()) {
    clear_value();
    set_has_time();
    value_.time_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Time >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireMaxValue.Value.time)
  return value_.time_;
}

// .google.fhir.stu3.proto.Instant instant = 4;
inline bool QuestionnaireMaxValue_Value::has_instant() const {
  return value_case() == kInstant;
}
inline void QuestionnaireMaxValue_Value::set_has_instant() {
  _oneof_case_[0] = kInstant;
}
inline const ::google::fhir::stu3::proto::Instant& QuestionnaireMaxValue_Value::_internal_instant() const {
  return *value_.instant_;
}
inline ::google::fhir::stu3::proto::Instant* QuestionnaireMaxValue_Value::release_instant() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireMaxValue.Value.instant)
  if (has_instant()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Instant* temp = value_.instant_;
    value_.instant_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Instant& QuestionnaireMaxValue_Value::instant() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireMaxValue.Value.instant)
  return has_instant()
      ? *value_.instant_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Instant*>(&::google::fhir::stu3::proto::_Instant_default_instance_);
}
inline ::google::fhir::stu3::proto::Instant* QuestionnaireMaxValue_Value::mutable_instant() {
  if (!has_instant()) {
    clear_value();
    set_has_instant();
    value_.instant_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Instant >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireMaxValue.Value.instant)
  return value_.instant_;
}

// .google.fhir.stu3.proto.Decimal decimal = 5;
inline bool QuestionnaireMaxValue_Value::has_decimal() const {
  return value_case() == kDecimal;
}
inline void QuestionnaireMaxValue_Value::set_has_decimal() {
  _oneof_case_[0] = kDecimal;
}
inline const ::google::fhir::stu3::proto::Decimal& QuestionnaireMaxValue_Value::_internal_decimal() const {
  return *value_.decimal_;
}
inline ::google::fhir::stu3::proto::Decimal* QuestionnaireMaxValue_Value::release_decimal() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireMaxValue.Value.decimal)
  if (has_decimal()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Decimal* temp = value_.decimal_;
    value_.decimal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Decimal& QuestionnaireMaxValue_Value::decimal() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireMaxValue.Value.decimal)
  return has_decimal()
      ? *value_.decimal_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Decimal*>(&::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* QuestionnaireMaxValue_Value::mutable_decimal() {
  if (!has_decimal()) {
    clear_value();
    set_has_decimal();
    value_.decimal_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Decimal >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireMaxValue.Value.decimal)
  return value_.decimal_;
}

// .google.fhir.stu3.proto.Integer integer = 6;
inline bool QuestionnaireMaxValue_Value::has_integer() const {
  return value_case() == kInteger;
}
inline void QuestionnaireMaxValue_Value::set_has_integer() {
  _oneof_case_[0] = kInteger;
}
inline const ::google::fhir::stu3::proto::Integer& QuestionnaireMaxValue_Value::_internal_integer() const {
  return *value_.integer_;
}
inline ::google::fhir::stu3::proto::Integer* QuestionnaireMaxValue_Value::release_integer() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireMaxValue.Value.integer)
  if (has_integer()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Integer* temp = value_.integer_;
    value_.integer_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Integer& QuestionnaireMaxValue_Value::integer() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireMaxValue.Value.integer)
  return has_integer()
      ? *value_.integer_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Integer*>(&::google::fhir::stu3::proto::_Integer_default_instance_);
}
inline ::google::fhir::stu3::proto::Integer* QuestionnaireMaxValue_Value::mutable_integer() {
  if (!has_integer()) {
    clear_value();
    set_has_integer();
    value_.integer_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Integer >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireMaxValue.Value.integer)
  return value_.integer_;
}

inline bool QuestionnaireMaxValue_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void QuestionnaireMaxValue_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline QuestionnaireMaxValue_Value::ValueCase QuestionnaireMaxValue_Value::value_case() const {
  return QuestionnaireMaxValue_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// QuestionnaireMaxValue

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireMaxValue::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireMaxValue::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireMaxValue::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireMaxValue.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireMaxValue::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireMaxValue.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireMaxValue::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireMaxValue.id)
  return id_;
}
inline void QuestionnaireMaxValue::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireMaxValue.id)
}

// .google.fhir.stu3.proto.QuestionnaireMaxValue.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool QuestionnaireMaxValue::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void QuestionnaireMaxValue::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::QuestionnaireMaxValue_Value& QuestionnaireMaxValue::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::QuestionnaireMaxValue_Value& QuestionnaireMaxValue::value() const {
  const ::google::fhir::stu3::proto::QuestionnaireMaxValue_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireMaxValue.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::QuestionnaireMaxValue_Value*>(
      &::google::fhir::stu3::proto::_QuestionnaireMaxValue_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::QuestionnaireMaxValue_Value* QuestionnaireMaxValue::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireMaxValue.value)
  
  ::google::fhir::stu3::proto::QuestionnaireMaxValue_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::QuestionnaireMaxValue_Value* QuestionnaireMaxValue::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireMaxValue_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireMaxValue.value)
  return value_;
}
inline void QuestionnaireMaxValue::set_allocated_value(::google::fhir::stu3::proto::QuestionnaireMaxValue_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireMaxValue.value)
}

// -------------------------------------------------------------------

// MedicationUsualRoute

// .google.fhir.stu3.proto.String id = 1;
inline bool MedicationUsualRoute::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& MedicationUsualRoute::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& MedicationUsualRoute::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MedicationUsualRoute.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* MedicationUsualRoute::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MedicationUsualRoute.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* MedicationUsualRoute::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MedicationUsualRoute.id)
  return id_;
}
inline void MedicationUsualRoute::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MedicationUsualRoute.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool MedicationUsualRoute::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& MedicationUsualRoute::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& MedicationUsualRoute::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MedicationUsualRoute.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* MedicationUsualRoute::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MedicationUsualRoute.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* MedicationUsualRoute::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MedicationUsualRoute.value_codeable_concept)
  return value_codeable_concept_;
}
inline void MedicationUsualRoute::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MedicationUsualRoute.value_codeable_concept)
}

// -------------------------------------------------------------------

// MedicationDispenseValidityPeriod

// .google.fhir.stu3.proto.String id = 1;
inline bool MedicationDispenseValidityPeriod::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& MedicationDispenseValidityPeriod::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& MedicationDispenseValidityPeriod::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MedicationDispenseValidityPeriod.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* MedicationDispenseValidityPeriod::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MedicationDispenseValidityPeriod.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* MedicationDispenseValidityPeriod::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MedicationDispenseValidityPeriod.id)
  return id_;
}
inline void MedicationDispenseValidityPeriod::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MedicationDispenseValidityPeriod.id)
}

// .google.fhir.stu3.proto.Period value_period = 3;
inline bool MedicationDispenseValidityPeriod::has_value_period() const {
  return this != internal_default_instance() && value_period_ != NULL;
}
inline const ::google::fhir::stu3::proto::Period& MedicationDispenseValidityPeriod::_internal_value_period() const {
  return *value_period_;
}
inline const ::google::fhir::stu3::proto::Period& MedicationDispenseValidityPeriod::value_period() const {
  const ::google::fhir::stu3::proto::Period* p = value_period_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MedicationDispenseValidityPeriod.value_period)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Period*>(
      &::google::fhir::stu3::proto::_Period_default_instance_);
}
inline ::google::fhir::stu3::proto::Period* MedicationDispenseValidityPeriod::release_value_period() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MedicationDispenseValidityPeriod.value_period)
  
  ::google::fhir::stu3::proto::Period* temp = value_period_;
  value_period_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Period* MedicationDispenseValidityPeriod::mutable_value_period() {
  
  if (value_period_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Period>(GetArenaNoVirtual());
    value_period_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MedicationDispenseValidityPeriod.value_period)
  return value_period_;
}
inline void MedicationDispenseValidityPeriod::set_allocated_value_period(::google::fhir::stu3::proto::Period* value_period) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_period_);
  }
  if (value_period) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_period = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_period, submessage_arena);
    }
    
  } else {
    
  }
  value_period_ = value_period;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MedicationDispenseValidityPeriod.value_period)
}

// -------------------------------------------------------------------

// MedicationStatementPrescriber

// .google.fhir.stu3.proto.String id = 1;
inline bool MedicationStatementPrescriber::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& MedicationStatementPrescriber::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& MedicationStatementPrescriber::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MedicationStatementPrescriber.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* MedicationStatementPrescriber::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MedicationStatementPrescriber.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* MedicationStatementPrescriber::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MedicationStatementPrescriber.id)
  return id_;
}
inline void MedicationStatementPrescriber::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MedicationStatementPrescriber.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner"];
inline bool MedicationStatementPrescriber::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& MedicationStatementPrescriber::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& MedicationStatementPrescriber::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MedicationStatementPrescriber.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* MedicationStatementPrescriber::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MedicationStatementPrescriber.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* MedicationStatementPrescriber::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MedicationStatementPrescriber.value_reference)
  return value_reference_;
}
inline void MedicationStatementPrescriber::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MedicationStatementPrescriber.value_reference)
}

// -------------------------------------------------------------------

// MessageHeaderMessageheaderResponseRequest

// .google.fhir.stu3.proto.String id = 1;
inline bool MessageHeaderMessageheaderResponseRequest::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& MessageHeaderMessageheaderResponseRequest::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& MessageHeaderMessageheaderResponseRequest::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MessageHeaderMessageheaderResponseRequest.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* MessageHeaderMessageheaderResponseRequest::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MessageHeaderMessageheaderResponseRequest.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* MessageHeaderMessageheaderResponseRequest::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MessageHeaderMessageheaderResponseRequest.id)
  return id_;
}
inline void MessageHeaderMessageheaderResponseRequest::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MessageHeaderMessageheaderResponseRequest.id)
}

// .google.fhir.stu3.proto.MessageHeaderResponseRequestCode value_code = 3;
inline bool MessageHeaderMessageheaderResponseRequest::has_value_code() const {
  return this != internal_default_instance() && value_code_ != NULL;
}
inline const ::google::fhir::stu3::proto::MessageHeaderResponseRequestCode& MessageHeaderMessageheaderResponseRequest::_internal_value_code() const {
  return *value_code_;
}
inline const ::google::fhir::stu3::proto::MessageHeaderResponseRequestCode& MessageHeaderMessageheaderResponseRequest::value_code() const {
  const ::google::fhir::stu3::proto::MessageHeaderResponseRequestCode* p = value_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MessageHeaderMessageheaderResponseRequest.value_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::MessageHeaderResponseRequestCode*>(
      &::google::fhir::stu3::proto::_MessageHeaderResponseRequestCode_default_instance_);
}
inline ::google::fhir::stu3::proto::MessageHeaderResponseRequestCode* MessageHeaderMessageheaderResponseRequest::release_value_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MessageHeaderMessageheaderResponseRequest.value_code)
  
  ::google::fhir::stu3::proto::MessageHeaderResponseRequestCode* temp = value_code_;
  value_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::MessageHeaderResponseRequestCode* MessageHeaderMessageheaderResponseRequest::mutable_value_code() {
  
  if (value_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::MessageHeaderResponseRequestCode>(GetArenaNoVirtual());
    value_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MessageHeaderMessageheaderResponseRequest.value_code)
  return value_code_;
}
inline void MessageHeaderMessageheaderResponseRequest::set_allocated_value_code(::google::fhir::stu3::proto::MessageHeaderResponseRequestCode* value_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_code_);
  }
  if (value_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_code, submessage_arena);
    }
    
  } else {
    
  }
  value_code_ = value_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MessageHeaderMessageheaderResponseRequest.value_code)
}

// -------------------------------------------------------------------

// MimeType

// .google.fhir.stu3.proto.String id = 1;
inline bool MimeType::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& MimeType::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& MimeType::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MimeType.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* MimeType::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MimeType.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* MimeType::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MimeType.id)
  return id_;
}
inline void MimeType::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MimeType.id)
}

// .google.fhir.stu3.proto.MimeTypeCode value_code = 3;
inline bool MimeType::has_value_code() const {
  return this != internal_default_instance() && value_code_ != NULL;
}
inline const ::google::fhir::stu3::proto::MimeTypeCode& MimeType::_internal_value_code() const {
  return *value_code_;
}
inline const ::google::fhir::stu3::proto::MimeTypeCode& MimeType::value_code() const {
  const ::google::fhir::stu3::proto::MimeTypeCode* p = value_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MimeType.value_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::MimeTypeCode*>(
      &::google::fhir::stu3::proto::_MimeTypeCode_default_instance_);
}
inline ::google::fhir::stu3::proto::MimeTypeCode* MimeType::release_value_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MimeType.value_code)
  
  ::google::fhir::stu3::proto::MimeTypeCode* temp = value_code_;
  value_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::MimeTypeCode* MimeType::mutable_value_code() {
  
  if (value_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::MimeTypeCode>(GetArenaNoVirtual());
    value_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MimeType.value_code)
  return value_code_;
}
inline void MimeType::set_allocated_value_code(::google::fhir::stu3::proto::MimeTypeCode* value_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_code_);
  }
  if (value_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_code, submessage_arena);
    }
    
  } else {
    
  }
  value_code_ = value_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MimeType.value_code)
}

// -------------------------------------------------------------------

// MinLength

// .google.fhir.stu3.proto.String id = 1;
inline bool MinLength::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& MinLength::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& MinLength::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MinLength.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* MinLength::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MinLength.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* MinLength::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MinLength.id)
  return id_;
}
inline void MinLength::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MinLength.id)
}

// .google.fhir.stu3.proto.Integer value_integer = 3;
inline bool MinLength::has_value_integer() const {
  return this != internal_default_instance() && value_integer_ != NULL;
}
inline const ::google::fhir::stu3::proto::Integer& MinLength::_internal_value_integer() const {
  return *value_integer_;
}
inline const ::google::fhir::stu3::proto::Integer& MinLength::value_integer() const {
  const ::google::fhir::stu3::proto::Integer* p = value_integer_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MinLength.value_integer)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Integer*>(
      &::google::fhir::stu3::proto::_Integer_default_instance_);
}
inline ::google::fhir::stu3::proto::Integer* MinLength::release_value_integer() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MinLength.value_integer)
  
  ::google::fhir::stu3::proto::Integer* temp = value_integer_;
  value_integer_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Integer* MinLength::mutable_value_integer() {
  
  if (value_integer_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Integer>(GetArenaNoVirtual());
    value_integer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MinLength.value_integer)
  return value_integer_;
}
inline void MinLength::set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_integer_);
  }
  if (value_integer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_integer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_integer, submessage_arena);
    }
    
  } else {
    
  }
  value_integer_ = value_integer;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MinLength.value_integer)
}

// -------------------------------------------------------------------

// QuestionnaireMinValue_Value

// .google.fhir.stu3.proto.Date date = 1;
inline bool QuestionnaireMinValue_Value::has_date() const {
  return value_case() == kDate;
}
inline void QuestionnaireMinValue_Value::set_has_date() {
  _oneof_case_[0] = kDate;
}
inline const ::google::fhir::stu3::proto::Date& QuestionnaireMinValue_Value::_internal_date() const {
  return *value_.date_;
}
inline ::google::fhir::stu3::proto::Date* QuestionnaireMinValue_Value::release_date() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireMinValue.Value.date)
  if (has_date()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Date* temp = value_.date_;
    value_.date_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Date& QuestionnaireMinValue_Value::date() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireMinValue.Value.date)
  return has_date()
      ? *value_.date_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Date*>(&::google::fhir::stu3::proto::_Date_default_instance_);
}
inline ::google::fhir::stu3::proto::Date* QuestionnaireMinValue_Value::mutable_date() {
  if (!has_date()) {
    clear_value();
    set_has_date();
    value_.date_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Date >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireMinValue.Value.date)
  return value_.date_;
}

// .google.fhir.stu3.proto.DateTime date_time = 2;
inline bool QuestionnaireMinValue_Value::has_date_time() const {
  return value_case() == kDateTime;
}
inline void QuestionnaireMinValue_Value::set_has_date_time() {
  _oneof_case_[0] = kDateTime;
}
inline const ::google::fhir::stu3::proto::DateTime& QuestionnaireMinValue_Value::_internal_date_time() const {
  return *value_.date_time_;
}
inline ::google::fhir::stu3::proto::DateTime* QuestionnaireMinValue_Value::release_date_time() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireMinValue.Value.date_time)
  if (has_date_time()) {
    clear_has_value();
      ::google::fhir::stu3::proto::DateTime* temp = value_.date_time_;
    value_.date_time_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::DateTime& QuestionnaireMinValue_Value::date_time() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireMinValue.Value.date_time)
  return has_date_time()
      ? *value_.date_time_
      : *reinterpret_cast< ::google::fhir::stu3::proto::DateTime*>(&::google::fhir::stu3::proto::_DateTime_default_instance_);
}
inline ::google::fhir::stu3::proto::DateTime* QuestionnaireMinValue_Value::mutable_date_time() {
  if (!has_date_time()) {
    clear_value();
    set_has_date_time();
    value_.date_time_ = CreateMaybeMessage< ::google::fhir::stu3::proto::DateTime >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireMinValue.Value.date_time)
  return value_.date_time_;
}

// .google.fhir.stu3.proto.Time time = 3;
inline bool QuestionnaireMinValue_Value::has_time() const {
  return value_case() == kTime;
}
inline void QuestionnaireMinValue_Value::set_has_time() {
  _oneof_case_[0] = kTime;
}
inline const ::google::fhir::stu3::proto::Time& QuestionnaireMinValue_Value::_internal_time() const {
  return *value_.time_;
}
inline ::google::fhir::stu3::proto::Time* QuestionnaireMinValue_Value::release_time() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireMinValue.Value.time)
  if (has_time()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Time* temp = value_.time_;
    value_.time_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Time& QuestionnaireMinValue_Value::time() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireMinValue.Value.time)
  return has_time()
      ? *value_.time_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Time*>(&::google::fhir::stu3::proto::_Time_default_instance_);
}
inline ::google::fhir::stu3::proto::Time* QuestionnaireMinValue_Value::mutable_time() {
  if (!has_time()) {
    clear_value();
    set_has_time();
    value_.time_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Time >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireMinValue.Value.time)
  return value_.time_;
}

// .google.fhir.stu3.proto.Instant instant = 4;
inline bool QuestionnaireMinValue_Value::has_instant() const {
  return value_case() == kInstant;
}
inline void QuestionnaireMinValue_Value::set_has_instant() {
  _oneof_case_[0] = kInstant;
}
inline const ::google::fhir::stu3::proto::Instant& QuestionnaireMinValue_Value::_internal_instant() const {
  return *value_.instant_;
}
inline ::google::fhir::stu3::proto::Instant* QuestionnaireMinValue_Value::release_instant() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireMinValue.Value.instant)
  if (has_instant()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Instant* temp = value_.instant_;
    value_.instant_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Instant& QuestionnaireMinValue_Value::instant() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireMinValue.Value.instant)
  return has_instant()
      ? *value_.instant_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Instant*>(&::google::fhir::stu3::proto::_Instant_default_instance_);
}
inline ::google::fhir::stu3::proto::Instant* QuestionnaireMinValue_Value::mutable_instant() {
  if (!has_instant()) {
    clear_value();
    set_has_instant();
    value_.instant_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Instant >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireMinValue.Value.instant)
  return value_.instant_;
}

// .google.fhir.stu3.proto.Decimal decimal = 5;
inline bool QuestionnaireMinValue_Value::has_decimal() const {
  return value_case() == kDecimal;
}
inline void QuestionnaireMinValue_Value::set_has_decimal() {
  _oneof_case_[0] = kDecimal;
}
inline const ::google::fhir::stu3::proto::Decimal& QuestionnaireMinValue_Value::_internal_decimal() const {
  return *value_.decimal_;
}
inline ::google::fhir::stu3::proto::Decimal* QuestionnaireMinValue_Value::release_decimal() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireMinValue.Value.decimal)
  if (has_decimal()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Decimal* temp = value_.decimal_;
    value_.decimal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Decimal& QuestionnaireMinValue_Value::decimal() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireMinValue.Value.decimal)
  return has_decimal()
      ? *value_.decimal_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Decimal*>(&::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* QuestionnaireMinValue_Value::mutable_decimal() {
  if (!has_decimal()) {
    clear_value();
    set_has_decimal();
    value_.decimal_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Decimal >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireMinValue.Value.decimal)
  return value_.decimal_;
}

// .google.fhir.stu3.proto.Integer integer = 6;
inline bool QuestionnaireMinValue_Value::has_integer() const {
  return value_case() == kInteger;
}
inline void QuestionnaireMinValue_Value::set_has_integer() {
  _oneof_case_[0] = kInteger;
}
inline const ::google::fhir::stu3::proto::Integer& QuestionnaireMinValue_Value::_internal_integer() const {
  return *value_.integer_;
}
inline ::google::fhir::stu3::proto::Integer* QuestionnaireMinValue_Value::release_integer() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireMinValue.Value.integer)
  if (has_integer()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Integer* temp = value_.integer_;
    value_.integer_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Integer& QuestionnaireMinValue_Value::integer() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireMinValue.Value.integer)
  return has_integer()
      ? *value_.integer_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Integer*>(&::google::fhir::stu3::proto::_Integer_default_instance_);
}
inline ::google::fhir::stu3::proto::Integer* QuestionnaireMinValue_Value::mutable_integer() {
  if (!has_integer()) {
    clear_value();
    set_has_integer();
    value_.integer_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Integer >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireMinValue.Value.integer)
  return value_.integer_;
}

inline bool QuestionnaireMinValue_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void QuestionnaireMinValue_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline QuestionnaireMinValue_Value::ValueCase QuestionnaireMinValue_Value::value_case() const {
  return QuestionnaireMinValue_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// QuestionnaireMinValue

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireMinValue::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireMinValue::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireMinValue::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireMinValue.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireMinValue::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireMinValue.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireMinValue::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireMinValue.id)
  return id_;
}
inline void QuestionnaireMinValue::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireMinValue.id)
}

// .google.fhir.stu3.proto.QuestionnaireMinValue.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool QuestionnaireMinValue::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void QuestionnaireMinValue::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::QuestionnaireMinValue_Value& QuestionnaireMinValue::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::QuestionnaireMinValue_Value& QuestionnaireMinValue::value() const {
  const ::google::fhir::stu3::proto::QuestionnaireMinValue_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireMinValue.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::QuestionnaireMinValue_Value*>(
      &::google::fhir::stu3::proto::_QuestionnaireMinValue_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::QuestionnaireMinValue_Value* QuestionnaireMinValue::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireMinValue.value)
  
  ::google::fhir::stu3::proto::QuestionnaireMinValue_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::QuestionnaireMinValue_Value* QuestionnaireMinValue::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireMinValue_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireMinValue.value)
  return value_;
}
inline void QuestionnaireMinValue::set_allocated_value(::google::fhir::stu3::proto::QuestionnaireMinValue_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireMinValue.value)
}

// -------------------------------------------------------------------

// ObservationBodyPosition

// .google.fhir.stu3.proto.String id = 1;
inline bool ObservationBodyPosition::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ObservationBodyPosition::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ObservationBodyPosition::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationBodyPosition.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ObservationBodyPosition::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationBodyPosition.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ObservationBodyPosition::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationBodyPosition.id)
  return id_;
}
inline void ObservationBodyPosition::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationBodyPosition.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ObservationBodyPosition::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationBodyPosition::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationBodyPosition::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationBodyPosition.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationBodyPosition::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationBodyPosition.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationBodyPosition::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationBodyPosition.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ObservationBodyPosition::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationBodyPosition.value_codeable_concept)
}

// -------------------------------------------------------------------

// ObservationDelta

// .google.fhir.stu3.proto.String id = 1;
inline bool ObservationDelta::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ObservationDelta::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ObservationDelta::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationDelta.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ObservationDelta::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationDelta.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ObservationDelta::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationDelta.id)
  return id_;
}
inline void ObservationDelta::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationDelta.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ObservationDelta::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationDelta::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationDelta::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationDelta.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationDelta::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationDelta.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationDelta::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationDelta.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ObservationDelta::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationDelta.value_codeable_concept)
}

// -------------------------------------------------------------------

// ObservationEventTiming

// .google.fhir.stu3.proto.String id = 1;
inline bool ObservationEventTiming::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ObservationEventTiming::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ObservationEventTiming::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationEventTiming.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ObservationEventTiming::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationEventTiming.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ObservationEventTiming::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationEventTiming.id)
  return id_;
}
inline void ObservationEventTiming::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationEventTiming.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int ObservationEventTiming::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* ObservationEventTiming::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationEventTiming.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
ObservationEventTiming::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.ObservationEventTiming.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& ObservationEventTiming::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationEventTiming.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* ObservationEventTiming::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.ObservationEventTiming.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
ObservationEventTiming::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.ObservationEventTiming.extension)
  return extension_;
}

// .google.fhir.stu3.proto.CodeableConcept code = 4;
inline bool ObservationEventTiming::has_code() const {
  return this != internal_default_instance() && code_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationEventTiming::_internal_code() const {
  return *code_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationEventTiming::code() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationEventTiming.code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationEventTiming::release_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationEventTiming.code)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = code_;
  code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationEventTiming::mutable_code() {
  
  if (code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationEventTiming.code)
  return code_;
}
inline void ObservationEventTiming::set_allocated_code(::google::fhir::stu3::proto::CodeableConcept* code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(code_);
  }
  if (code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationEventTiming.code)
}

// .google.fhir.stu3.proto.Quantity offset = 5;
inline bool ObservationEventTiming::has_offset() const {
  return this != internal_default_instance() && offset_ != NULL;
}
inline const ::google::fhir::stu3::proto::Quantity& ObservationEventTiming::_internal_offset() const {
  return *offset_;
}
inline const ::google::fhir::stu3::proto::Quantity& ObservationEventTiming::offset() const {
  const ::google::fhir::stu3::proto::Quantity* p = offset_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationEventTiming.offset)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Quantity*>(
      &::google::fhir::stu3::proto::_Quantity_default_instance_);
}
inline ::google::fhir::stu3::proto::Quantity* ObservationEventTiming::release_offset() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationEventTiming.offset)
  
  ::google::fhir::stu3::proto::Quantity* temp = offset_;
  offset_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Quantity* ObservationEventTiming::mutable_offset() {
  
  if (offset_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Quantity>(GetArenaNoVirtual());
    offset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationEventTiming.offset)
  return offset_;
}
inline void ObservationEventTiming::set_allocated_offset(::google::fhir::stu3::proto::Quantity* offset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(offset_);
  }
  if (offset) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      offset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    
  } else {
    
  }
  offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationEventTiming.offset)
}

// -------------------------------------------------------------------

// ObservationFocalSubject

// .google.fhir.stu3.proto.String id = 1;
inline bool ObservationFocalSubject::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ObservationFocalSubject::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ObservationFocalSubject::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationFocalSubject.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ObservationFocalSubject::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationFocalSubject.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ObservationFocalSubject::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationFocalSubject.id)
  return id_;
}
inline void ObservationFocalSubject::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationFocalSubject.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ObservationFocalSubject::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationFocalSubject::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationFocalSubject::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationFocalSubject.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationFocalSubject::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationFocalSubject.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationFocalSubject::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationFocalSubject.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ObservationFocalSubject::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationFocalSubject.value_codeable_concept)
}

// -------------------------------------------------------------------

// ObservationAlleleName

// .google.fhir.stu3.proto.String id = 1;
inline bool ObservationAlleleName::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ObservationAlleleName::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ObservationAlleleName::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationAlleleName.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ObservationAlleleName::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationAlleleName.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ObservationAlleleName::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationAlleleName.id)
  return id_;
}
inline void ObservationAlleleName::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationAlleleName.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ObservationAlleleName::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationAlleleName::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationAlleleName::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationAlleleName.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationAlleleName::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationAlleleName.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationAlleleName::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationAlleleName.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ObservationAlleleName::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationAlleleName.value_codeable_concept)
}

// -------------------------------------------------------------------

// ObservationAllelicFrequency

// .google.fhir.stu3.proto.String id = 1;
inline bool ObservationAllelicFrequency::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ObservationAllelicFrequency::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ObservationAllelicFrequency::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationAllelicFrequency.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ObservationAllelicFrequency::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationAllelicFrequency.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ObservationAllelicFrequency::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationAllelicFrequency.id)
  return id_;
}
inline void ObservationAllelicFrequency::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationAllelicFrequency.id)
}

// .google.fhir.stu3.proto.Decimal value_decimal = 3;
inline bool ObservationAllelicFrequency::has_value_decimal() const {
  return this != internal_default_instance() && value_decimal_ != NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& ObservationAllelicFrequency::_internal_value_decimal() const {
  return *value_decimal_;
}
inline const ::google::fhir::stu3::proto::Decimal& ObservationAllelicFrequency::value_decimal() const {
  const ::google::fhir::stu3::proto::Decimal* p = value_decimal_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationAllelicFrequency.value_decimal)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* ObservationAllelicFrequency::release_value_decimal() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationAllelicFrequency.value_decimal)
  
  ::google::fhir::stu3::proto::Decimal* temp = value_decimal_;
  value_decimal_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* ObservationAllelicFrequency::mutable_value_decimal() {
  
  if (value_decimal_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    value_decimal_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationAllelicFrequency.value_decimal)
  return value_decimal_;
}
inline void ObservationAllelicFrequency::set_allocated_value_decimal(::google::fhir::stu3::proto::Decimal* value_decimal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_decimal_);
  }
  if (value_decimal) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_decimal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_decimal, submessage_arena);
    }
    
  } else {
    
  }
  value_decimal_ = value_decimal;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationAllelicFrequency.value_decimal)
}

// -------------------------------------------------------------------

// ObservationAllelicState

// .google.fhir.stu3.proto.String id = 1;
inline bool ObservationAllelicState::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ObservationAllelicState::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ObservationAllelicState::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationAllelicState.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ObservationAllelicState::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationAllelicState.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ObservationAllelicState::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationAllelicState.id)
  return id_;
}
inline void ObservationAllelicState::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationAllelicState.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ObservationAllelicState::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationAllelicState::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationAllelicState::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationAllelicState.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationAllelicState::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationAllelicState.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationAllelicState::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationAllelicState.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ObservationAllelicState::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationAllelicState.value_codeable_concept)
}

// -------------------------------------------------------------------

// ObservationAminoAcidChangeName

// .google.fhir.stu3.proto.String id = 1;
inline bool ObservationAminoAcidChangeName::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ObservationAminoAcidChangeName::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ObservationAminoAcidChangeName::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationAminoAcidChangeName.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ObservationAminoAcidChangeName::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationAminoAcidChangeName.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ObservationAminoAcidChangeName::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationAminoAcidChangeName.id)
  return id_;
}
inline void ObservationAminoAcidChangeName::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationAminoAcidChangeName.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ObservationAminoAcidChangeName::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationAminoAcidChangeName::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationAminoAcidChangeName::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationAminoAcidChangeName.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationAminoAcidChangeName::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationAminoAcidChangeName.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationAminoAcidChangeName::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationAminoAcidChangeName.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ObservationAminoAcidChangeName::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationAminoAcidChangeName.value_codeable_concept)
}

// -------------------------------------------------------------------

// ObservationAminoAcidChangeType

// .google.fhir.stu3.proto.String id = 1;
inline bool ObservationAminoAcidChangeType::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ObservationAminoAcidChangeType::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ObservationAminoAcidChangeType::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationAminoAcidChangeType.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ObservationAminoAcidChangeType::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationAminoAcidChangeType.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ObservationAminoAcidChangeType::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationAminoAcidChangeType.id)
  return id_;
}
inline void ObservationAminoAcidChangeType::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationAminoAcidChangeType.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ObservationAminoAcidChangeType::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationAminoAcidChangeType::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationAminoAcidChangeType::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationAminoAcidChangeType.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationAminoAcidChangeType::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationAminoAcidChangeType.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationAminoAcidChangeType::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationAminoAcidChangeType.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ObservationAminoAcidChangeType::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationAminoAcidChangeType.value_codeable_concept)
}

// -------------------------------------------------------------------

// ObservationCopyNumberEvent

// .google.fhir.stu3.proto.String id = 1;
inline bool ObservationCopyNumberEvent::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ObservationCopyNumberEvent::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ObservationCopyNumberEvent::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationCopyNumberEvent.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ObservationCopyNumberEvent::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationCopyNumberEvent.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ObservationCopyNumberEvent::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationCopyNumberEvent.id)
  return id_;
}
inline void ObservationCopyNumberEvent::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationCopyNumberEvent.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ObservationCopyNumberEvent::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationCopyNumberEvent::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationCopyNumberEvent::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationCopyNumberEvent.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationCopyNumberEvent::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationCopyNumberEvent.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationCopyNumberEvent::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationCopyNumberEvent.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ObservationCopyNumberEvent::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationCopyNumberEvent.value_codeable_concept)
}

// -------------------------------------------------------------------

// ObservationDNARegionName

// .google.fhir.stu3.proto.String id = 1;
inline bool ObservationDNARegionName::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ObservationDNARegionName::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ObservationDNARegionName::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationDNARegionName.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ObservationDNARegionName::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationDNARegionName.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ObservationDNARegionName::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationDNARegionName.id)
  return id_;
}
inline void ObservationDNARegionName::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationDNARegionName.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool ObservationDNARegionName::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ObservationDNARegionName::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& ObservationDNARegionName::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationDNARegionName.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ObservationDNARegionName::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationDNARegionName.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ObservationDNARegionName::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationDNARegionName.value_string)
  return value_string_;
}
inline void ObservationDNARegionName::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationDNARegionName.value_string)
}

// -------------------------------------------------------------------

// ObservationDNASequenceVariantName

// .google.fhir.stu3.proto.String id = 1;
inline bool ObservationDNASequenceVariantName::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ObservationDNASequenceVariantName::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ObservationDNASequenceVariantName::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationDNASequenceVariantName.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ObservationDNASequenceVariantName::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationDNASequenceVariantName.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ObservationDNASequenceVariantName::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationDNASequenceVariantName.id)
  return id_;
}
inline void ObservationDNASequenceVariantName::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationDNASequenceVariantName.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ObservationDNASequenceVariantName::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationDNASequenceVariantName::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationDNASequenceVariantName::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationDNASequenceVariantName.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationDNASequenceVariantName::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationDNASequenceVariantName.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationDNASequenceVariantName::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationDNASequenceVariantName.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ObservationDNASequenceVariantName::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationDNASequenceVariantName.value_codeable_concept)
}

// -------------------------------------------------------------------

// ObservationDNASequenceVariantType

// .google.fhir.stu3.proto.String id = 1;
inline bool ObservationDNASequenceVariantType::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ObservationDNASequenceVariantType::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ObservationDNASequenceVariantType::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationDNASequenceVariantType.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ObservationDNASequenceVariantType::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationDNASequenceVariantType.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ObservationDNASequenceVariantType::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationDNASequenceVariantType.id)
  return id_;
}
inline void ObservationDNASequenceVariantType::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationDNASequenceVariantType.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ObservationDNASequenceVariantType::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationDNASequenceVariantType::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationDNASequenceVariantType::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationDNASequenceVariantType.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationDNASequenceVariantType::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationDNASequenceVariantType.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationDNASequenceVariantType::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationDNASequenceVariantType.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ObservationDNASequenceVariantType::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationDNASequenceVariantType.value_codeable_concept)
}

// -------------------------------------------------------------------

// ObservationDNAVariantId

// .google.fhir.stu3.proto.String id = 1;
inline bool ObservationDNAVariantId::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ObservationDNAVariantId::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ObservationDNAVariantId::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationDNAVariantId.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ObservationDNAVariantId::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationDNAVariantId.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ObservationDNAVariantId::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationDNAVariantId.id)
  return id_;
}
inline void ObservationDNAVariantId::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationDNAVariantId.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ObservationDNAVariantId::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationDNAVariantId::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationDNAVariantId::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationDNAVariantId.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationDNAVariantId::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationDNAVariantId.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationDNAVariantId::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationDNAVariantId.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ObservationDNAVariantId::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationDNAVariantId.value_codeable_concept)
}

// -------------------------------------------------------------------

// ObservationGene

// .google.fhir.stu3.proto.String id = 1;
inline bool ObservationGene::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ObservationGene::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ObservationGene::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationGene.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ObservationGene::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationGene.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ObservationGene::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationGene.id)
  return id_;
}
inline void ObservationGene::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationGene.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ObservationGene::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationGene::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationGene::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationGene.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationGene::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationGene.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationGene::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationGene.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ObservationGene::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationGene.value_codeable_concept)
}

// -------------------------------------------------------------------

// ObservationGenomicSourceClass

// .google.fhir.stu3.proto.String id = 1;
inline bool ObservationGenomicSourceClass::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ObservationGenomicSourceClass::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ObservationGenomicSourceClass::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationGenomicSourceClass.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ObservationGenomicSourceClass::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationGenomicSourceClass.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ObservationGenomicSourceClass::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationGenomicSourceClass.id)
  return id_;
}
inline void ObservationGenomicSourceClass::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationGenomicSourceClass.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ObservationGenomicSourceClass::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationGenomicSourceClass::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ObservationGenomicSourceClass::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationGenomicSourceClass.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationGenomicSourceClass::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationGenomicSourceClass.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ObservationGenomicSourceClass::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationGenomicSourceClass.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ObservationGenomicSourceClass::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationGenomicSourceClass.value_codeable_concept)
}

// -------------------------------------------------------------------

// ObservationInterpretation

// .google.fhir.stu3.proto.String id = 1;
inline bool ObservationInterpretation::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ObservationInterpretation::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ObservationInterpretation::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationInterpretation.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ObservationInterpretation::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationInterpretation.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ObservationInterpretation::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationInterpretation.id)
  return id_;
}
inline void ObservationInterpretation::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationInterpretation.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Observation"];
inline bool ObservationInterpretation::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& ObservationInterpretation::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& ObservationInterpretation::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationInterpretation.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ObservationInterpretation::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationInterpretation.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* ObservationInterpretation::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationInterpretation.value_reference)
  return value_reference_;
}
inline void ObservationInterpretation::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationInterpretation.value_reference)
}

// -------------------------------------------------------------------

// ObservationPhaseSet

// .google.fhir.stu3.proto.String id = 1;
inline bool ObservationPhaseSet::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ObservationPhaseSet::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ObservationPhaseSet::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationPhaseSet.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ObservationPhaseSet::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationPhaseSet.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ObservationPhaseSet::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationPhaseSet.id)
  return id_;
}
inline void ObservationPhaseSet::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationPhaseSet.id)
}

// .google.fhir.stu3.proto.Uri value_uri = 3;
inline bool ObservationPhaseSet::has_value_uri() const {
  return this != internal_default_instance() && value_uri_ != NULL;
}
inline const ::google::fhir::stu3::proto::Uri& ObservationPhaseSet::_internal_value_uri() const {
  return *value_uri_;
}
inline const ::google::fhir::stu3::proto::Uri& ObservationPhaseSet::value_uri() const {
  const ::google::fhir::stu3::proto::Uri* p = value_uri_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationPhaseSet.value_uri)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* ObservationPhaseSet::release_value_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationPhaseSet.value_uri)
  
  ::google::fhir::stu3::proto::Uri* temp = value_uri_;
  value_uri_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* ObservationPhaseSet::mutable_value_uri() {
  
  if (value_uri_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    value_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationPhaseSet.value_uri)
  return value_uri_;
}
inline void ObservationPhaseSet::set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_uri_);
  }
  if (value_uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_uri, submessage_arena);
    }
    
  } else {
    
  }
  value_uri_ = value_uri;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationPhaseSet.value_uri)
}

// -------------------------------------------------------------------

// ObservationSequence

// .google.fhir.stu3.proto.String id = 1;
inline bool ObservationSequence::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ObservationSequence::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ObservationSequence::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationSequence.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ObservationSequence::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationSequence.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ObservationSequence::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationSequence.id)
  return id_;
}
inline void ObservationSequence::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationSequence.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Sequence"];
inline bool ObservationSequence::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& ObservationSequence::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& ObservationSequence::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationSequence.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ObservationSequence::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationSequence.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* ObservationSequence::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationSequence.value_reference)
  return value_reference_;
}
inline void ObservationSequence::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationSequence.value_reference)
}

// -------------------------------------------------------------------

// ObservationTimeOffset

// .google.fhir.stu3.proto.String id = 1;
inline bool ObservationTimeOffset::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ObservationTimeOffset::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ObservationTimeOffset::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationTimeOffset.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ObservationTimeOffset::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationTimeOffset.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ObservationTimeOffset::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationTimeOffset.id)
  return id_;
}
inline void ObservationTimeOffset::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationTimeOffset.id)
}

// .google.fhir.stu3.proto.Integer value_integer = 3;
inline bool ObservationTimeOffset::has_value_integer() const {
  return this != internal_default_instance() && value_integer_ != NULL;
}
inline const ::google::fhir::stu3::proto::Integer& ObservationTimeOffset::_internal_value_integer() const {
  return *value_integer_;
}
inline const ::google::fhir::stu3::proto::Integer& ObservationTimeOffset::value_integer() const {
  const ::google::fhir::stu3::proto::Integer* p = value_integer_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ObservationTimeOffset.value_integer)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Integer*>(
      &::google::fhir::stu3::proto::_Integer_default_instance_);
}
inline ::google::fhir::stu3::proto::Integer* ObservationTimeOffset::release_value_integer() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ObservationTimeOffset.value_integer)
  
  ::google::fhir::stu3::proto::Integer* temp = value_integer_;
  value_integer_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Integer* ObservationTimeOffset::mutable_value_integer() {
  
  if (value_integer_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Integer>(GetArenaNoVirtual());
    value_integer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ObservationTimeOffset.value_integer)
  return value_integer_;
}
inline void ObservationTimeOffset::set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_integer_);
  }
  if (value_integer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_integer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_integer, submessage_arena);
    }
    
  } else {
    
  }
  value_integer_ = value_integer;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ObservationTimeOffset.value_integer)
}

// -------------------------------------------------------------------

// AllergyIntoleranceAdministration

// .google.fhir.stu3.proto.String id = 1;
inline bool AllergyIntoleranceAdministration::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceAdministration::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceAdministration::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceAdministration.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceAdministration::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceAdministration.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceAdministration::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceAdministration.id)
  return id_;
}
inline void AllergyIntoleranceAdministration::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceAdministration.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/MedicationAdministration"];
inline bool AllergyIntoleranceAdministration::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& AllergyIntoleranceAdministration::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& AllergyIntoleranceAdministration::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceAdministration.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* AllergyIntoleranceAdministration::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceAdministration.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* AllergyIntoleranceAdministration::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceAdministration.value_reference)
  return value_reference_;
}
inline void AllergyIntoleranceAdministration::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceAdministration.value_reference)
}

// -------------------------------------------------------------------

// AllergyIntoleranceCareplan

// .google.fhir.stu3.proto.String id = 1;
inline bool AllergyIntoleranceCareplan::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceCareplan::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceCareplan::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceCareplan.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceCareplan::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceCareplan.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceCareplan::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceCareplan.id)
  return id_;
}
inline void AllergyIntoleranceCareplan::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceCareplan.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/CarePlan"];
inline bool AllergyIntoleranceCareplan::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& AllergyIntoleranceCareplan::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& AllergyIntoleranceCareplan::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceCareplan.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* AllergyIntoleranceCareplan::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceCareplan.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* AllergyIntoleranceCareplan::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceCareplan.value_reference)
  return value_reference_;
}
inline void AllergyIntoleranceCareplan::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceCareplan.value_reference)
}

// -------------------------------------------------------------------

// AllergyIntoleranceExposureDate

// .google.fhir.stu3.proto.String id = 1;
inline bool AllergyIntoleranceExposureDate::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceExposureDate::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceExposureDate::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceExposureDate.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceExposureDate::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceExposureDate.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceExposureDate::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceExposureDate.id)
  return id_;
}
inline void AllergyIntoleranceExposureDate::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceExposureDate.id)
}

// .google.fhir.stu3.proto.DateTime value_date_time = 3;
inline bool AllergyIntoleranceExposureDate::has_value_date_time() const {
  return this != internal_default_instance() && value_date_time_ != NULL;
}
inline const ::google::fhir::stu3::proto::DateTime& AllergyIntoleranceExposureDate::_internal_value_date_time() const {
  return *value_date_time_;
}
inline const ::google::fhir::stu3::proto::DateTime& AllergyIntoleranceExposureDate::value_date_time() const {
  const ::google::fhir::stu3::proto::DateTime* p = value_date_time_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceExposureDate.value_date_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::DateTime*>(
      &::google::fhir::stu3::proto::_DateTime_default_instance_);
}
inline ::google::fhir::stu3::proto::DateTime* AllergyIntoleranceExposureDate::release_value_date_time() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceExposureDate.value_date_time)
  
  ::google::fhir::stu3::proto::DateTime* temp = value_date_time_;
  value_date_time_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::DateTime* AllergyIntoleranceExposureDate::mutable_value_date_time() {
  
  if (value_date_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::DateTime>(GetArenaNoVirtual());
    value_date_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceExposureDate.value_date_time)
  return value_date_time_;
}
inline void AllergyIntoleranceExposureDate::set_allocated_value_date_time(::google::fhir::stu3::proto::DateTime* value_date_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_date_time_);
  }
  if (value_date_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_date_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_date_time, submessage_arena);
    }
    
  } else {
    
  }
  value_date_time_ = value_date_time;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceExposureDate.value_date_time)
}

// -------------------------------------------------------------------

// AllergyIntoleranceExposureDescription

// .google.fhir.stu3.proto.String id = 1;
inline bool AllergyIntoleranceExposureDescription::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceExposureDescription::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceExposureDescription::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceExposureDescription.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceExposureDescription::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceExposureDescription.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceExposureDescription::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceExposureDescription.id)
  return id_;
}
inline void AllergyIntoleranceExposureDescription::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceExposureDescription.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AllergyIntoleranceExposureDescription::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceExposureDescription::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceExposureDescription::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceExposureDescription.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceExposureDescription::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceExposureDescription.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceExposureDescription::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceExposureDescription.value_string)
  return value_string_;
}
inline void AllergyIntoleranceExposureDescription::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceExposureDescription.value_string)
}

// -------------------------------------------------------------------

// AllergyIntoleranceExposureDuration

// .google.fhir.stu3.proto.String id = 1;
inline bool AllergyIntoleranceExposureDuration::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceExposureDuration::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceExposureDuration::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceExposureDuration.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceExposureDuration::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceExposureDuration.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceExposureDuration::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceExposureDuration.id)
  return id_;
}
inline void AllergyIntoleranceExposureDuration::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceExposureDuration.id)
}

// .google.fhir.stu3.proto.Duration value_duration = 3;
inline bool AllergyIntoleranceExposureDuration::has_value_duration() const {
  return this != internal_default_instance() && value_duration_ != NULL;
}
inline const ::google::fhir::stu3::proto::Duration& AllergyIntoleranceExposureDuration::_internal_value_duration() const {
  return *value_duration_;
}
inline const ::google::fhir::stu3::proto::Duration& AllergyIntoleranceExposureDuration::value_duration() const {
  const ::google::fhir::stu3::proto::Duration* p = value_duration_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceExposureDuration.value_duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Duration*>(
      &::google::fhir::stu3::proto::_Duration_default_instance_);
}
inline ::google::fhir::stu3::proto::Duration* AllergyIntoleranceExposureDuration::release_value_duration() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceExposureDuration.value_duration)
  
  ::google::fhir::stu3::proto::Duration* temp = value_duration_;
  value_duration_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Duration* AllergyIntoleranceExposureDuration::mutable_value_duration() {
  
  if (value_duration_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Duration>(GetArenaNoVirtual());
    value_duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceExposureDuration.value_duration)
  return value_duration_;
}
inline void AllergyIntoleranceExposureDuration::set_allocated_value_duration(::google::fhir::stu3::proto::Duration* value_duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_duration_);
  }
  if (value_duration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_duration, submessage_arena);
    }
    
  } else {
    
  }
  value_duration_ = value_duration;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceExposureDuration.value_duration)
}

// -------------------------------------------------------------------

// AllergyIntoleranceLocation

// .google.fhir.stu3.proto.String id = 1;
inline bool AllergyIntoleranceLocation::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceLocation::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceLocation::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceLocation.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceLocation::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceLocation.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceLocation::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceLocation.id)
  return id_;
}
inline void AllergyIntoleranceLocation::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceLocation.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool AllergyIntoleranceLocation::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& AllergyIntoleranceLocation::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& AllergyIntoleranceLocation::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceLocation.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* AllergyIntoleranceLocation::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceLocation.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* AllergyIntoleranceLocation::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceLocation.value_codeable_concept)
  return value_codeable_concept_;
}
inline void AllergyIntoleranceLocation::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceLocation.value_codeable_concept)
}

// -------------------------------------------------------------------

// AllergyIntoleranceManagement

// .google.fhir.stu3.proto.String id = 1;
inline bool AllergyIntoleranceManagement::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceManagement::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceManagement::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceManagement.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceManagement::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceManagement.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceManagement::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceManagement.id)
  return id_;
}
inline void AllergyIntoleranceManagement::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceManagement.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool AllergyIntoleranceManagement::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceManagement::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceManagement::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceManagement.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceManagement::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceManagement.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceManagement::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceManagement.value_string)
  return value_string_;
}
inline void AllergyIntoleranceManagement::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceManagement.value_string)
}

// -------------------------------------------------------------------

// AllergyIntoleranceTest_Value

// .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Observation", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/DiagnosticReport"];
inline bool AllergyIntoleranceTest_Value::has_reference() const {
  return value_case() == kReference;
}
inline void AllergyIntoleranceTest_Value::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline const ::google::fhir::stu3::proto::Reference& AllergyIntoleranceTest_Value::_internal_reference() const {
  return *value_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* AllergyIntoleranceTest_Value::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceTest.Value.reference)
  if (has_reference()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Reference* temp = value_.reference_;
    value_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& AllergyIntoleranceTest_Value::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceTest.Value.reference)
  return has_reference()
      ? *value_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* AllergyIntoleranceTest_Value::mutable_reference() {
  if (!has_reference()) {
    clear_value();
    set_has_reference();
    value_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceTest.Value.reference)
  return value_.reference_;
}

inline bool AllergyIntoleranceTest_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void AllergyIntoleranceTest_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline AllergyIntoleranceTest_Value::ValueCase AllergyIntoleranceTest_Value::value_case() const {
  return AllergyIntoleranceTest_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AllergyIntoleranceTest

// .google.fhir.stu3.proto.String id = 1;
inline bool AllergyIntoleranceTest::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceTest::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AllergyIntoleranceTest::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceTest.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceTest::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceTest.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AllergyIntoleranceTest::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceTest.id)
  return id_;
}
inline void AllergyIntoleranceTest::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceTest.id)
}

// .google.fhir.stu3.proto.AllergyIntoleranceTest.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool AllergyIntoleranceTest::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void AllergyIntoleranceTest::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::AllergyIntoleranceTest_Value& AllergyIntoleranceTest::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::AllergyIntoleranceTest_Value& AllergyIntoleranceTest::value() const {
  const ::google::fhir::stu3::proto::AllergyIntoleranceTest_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllergyIntoleranceTest.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::AllergyIntoleranceTest_Value*>(
      &::google::fhir::stu3::proto::_AllergyIntoleranceTest_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::AllergyIntoleranceTest_Value* AllergyIntoleranceTest::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllergyIntoleranceTest.value)
  
  ::google::fhir::stu3::proto::AllergyIntoleranceTest_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::AllergyIntoleranceTest_Value* AllergyIntoleranceTest::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::AllergyIntoleranceTest_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllergyIntoleranceTest.value)
  return value_;
}
inline void AllergyIntoleranceTest::set_allocated_value(::google::fhir::stu3::proto::AllergyIntoleranceTest_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllergyIntoleranceTest.value)
}

// -------------------------------------------------------------------

// OperationOutcomeAuthority

// .google.fhir.stu3.proto.String id = 1;
inline bool OperationOutcomeAuthority::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& OperationOutcomeAuthority::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& OperationOutcomeAuthority::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.OperationOutcomeAuthority.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* OperationOutcomeAuthority::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.OperationOutcomeAuthority.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* OperationOutcomeAuthority::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.OperationOutcomeAuthority.id)
  return id_;
}
inline void OperationOutcomeAuthority::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.OperationOutcomeAuthority.id)
}

// .google.fhir.stu3.proto.Uri value_uri = 3;
inline bool OperationOutcomeAuthority::has_value_uri() const {
  return this != internal_default_instance() && value_uri_ != NULL;
}
inline const ::google::fhir::stu3::proto::Uri& OperationOutcomeAuthority::_internal_value_uri() const {
  return *value_uri_;
}
inline const ::google::fhir::stu3::proto::Uri& OperationOutcomeAuthority::value_uri() const {
  const ::google::fhir::stu3::proto::Uri* p = value_uri_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.OperationOutcomeAuthority.value_uri)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* OperationOutcomeAuthority::release_value_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.OperationOutcomeAuthority.value_uri)
  
  ::google::fhir::stu3::proto::Uri* temp = value_uri_;
  value_uri_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* OperationOutcomeAuthority::mutable_value_uri() {
  
  if (value_uri_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    value_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.OperationOutcomeAuthority.value_uri)
  return value_uri_;
}
inline void OperationOutcomeAuthority::set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_uri_);
  }
  if (value_uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_uri, submessage_arena);
    }
    
  } else {
    
  }
  value_uri_ = value_uri;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.OperationOutcomeAuthority.value_uri)
}

// -------------------------------------------------------------------

// OperationOutcomeDetectedIssue

// .google.fhir.stu3.proto.String id = 1;
inline bool OperationOutcomeDetectedIssue::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& OperationOutcomeDetectedIssue::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& OperationOutcomeDetectedIssue::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.OperationOutcomeDetectedIssue.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* OperationOutcomeDetectedIssue::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.OperationOutcomeDetectedIssue.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* OperationOutcomeDetectedIssue::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.OperationOutcomeDetectedIssue.id)
  return id_;
}
inline void OperationOutcomeDetectedIssue::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.OperationOutcomeDetectedIssue.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/DetectedIssue"];
inline bool OperationOutcomeDetectedIssue::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& OperationOutcomeDetectedIssue::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& OperationOutcomeDetectedIssue::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.OperationOutcomeDetectedIssue.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* OperationOutcomeDetectedIssue::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.OperationOutcomeDetectedIssue.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* OperationOutcomeDetectedIssue::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.OperationOutcomeDetectedIssue.value_reference)
  return value_reference_;
}
inline void OperationOutcomeDetectedIssue::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.OperationOutcomeDetectedIssue.value_reference)
}

// -------------------------------------------------------------------

// OperationOutcomeIssueSource

// .google.fhir.stu3.proto.String id = 1;
inline bool OperationOutcomeIssueSource::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& OperationOutcomeIssueSource::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& OperationOutcomeIssueSource::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.OperationOutcomeIssueSource.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* OperationOutcomeIssueSource::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.OperationOutcomeIssueSource.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* OperationOutcomeIssueSource::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.OperationOutcomeIssueSource.id)
  return id_;
}
inline void OperationOutcomeIssueSource::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.OperationOutcomeIssueSource.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool OperationOutcomeIssueSource::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& OperationOutcomeIssueSource::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& OperationOutcomeIssueSource::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.OperationOutcomeIssueSource.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* OperationOutcomeIssueSource::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.OperationOutcomeIssueSource.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* OperationOutcomeIssueSource::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.OperationOutcomeIssueSource.value_string)
  return value_string_;
}
inline void OperationOutcomeIssueSource::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.OperationOutcomeIssueSource.value_string)
}

// -------------------------------------------------------------------

// OrganizationAlias

// .google.fhir.stu3.proto.String id = 1;
inline bool OrganizationAlias::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& OrganizationAlias::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& OrganizationAlias::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.OrganizationAlias.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* OrganizationAlias::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.OrganizationAlias.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* OrganizationAlias::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.OrganizationAlias.id)
  return id_;
}
inline void OrganizationAlias::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.OrganizationAlias.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool OrganizationAlias::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& OrganizationAlias::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& OrganizationAlias::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.OrganizationAlias.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* OrganizationAlias::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.OrganizationAlias.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* OrganizationAlias::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.OrganizationAlias.value_string)
  return value_string_;
}
inline void OrganizationAlias::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.OrganizationAlias.value_string)
}

// -------------------------------------------------------------------

// OrganizationPeriod

// .google.fhir.stu3.proto.String id = 1;
inline bool OrganizationPeriod::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& OrganizationPeriod::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& OrganizationPeriod::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.OrganizationPeriod.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* OrganizationPeriod::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.OrganizationPeriod.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* OrganizationPeriod::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.OrganizationPeriod.id)
  return id_;
}
inline void OrganizationPeriod::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.OrganizationPeriod.id)
}

// .google.fhir.stu3.proto.Period value_period = 3;
inline bool OrganizationPeriod::has_value_period() const {
  return this != internal_default_instance() && value_period_ != NULL;
}
inline const ::google::fhir::stu3::proto::Period& OrganizationPeriod::_internal_value_period() const {
  return *value_period_;
}
inline const ::google::fhir::stu3::proto::Period& OrganizationPeriod::value_period() const {
  const ::google::fhir::stu3::proto::Period* p = value_period_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.OrganizationPeriod.value_period)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Period*>(
      &::google::fhir::stu3::proto::_Period_default_instance_);
}
inline ::google::fhir::stu3::proto::Period* OrganizationPeriod::release_value_period() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.OrganizationPeriod.value_period)
  
  ::google::fhir::stu3::proto::Period* temp = value_period_;
  value_period_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Period* OrganizationPeriod::mutable_value_period() {
  
  if (value_period_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Period>(GetArenaNoVirtual());
    value_period_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.OrganizationPeriod.value_period)
  return value_period_;
}
inline void OrganizationPeriod::set_allocated_value_period(::google::fhir::stu3::proto::Period* value_period) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_period_);
  }
  if (value_period) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_period = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_period, submessage_arena);
    }
    
  } else {
    
  }
  value_period_ = value_period;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.OrganizationPeriod.value_period)
}

// -------------------------------------------------------------------

// OrganizationPreferredContact

// .google.fhir.stu3.proto.String id = 1;
inline bool OrganizationPreferredContact::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& OrganizationPreferredContact::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& OrganizationPreferredContact::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.OrganizationPreferredContact.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* OrganizationPreferredContact::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.OrganizationPreferredContact.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* OrganizationPreferredContact::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.OrganizationPreferredContact.id)
  return id_;
}
inline void OrganizationPreferredContact::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.OrganizationPreferredContact.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool OrganizationPreferredContact::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& OrganizationPreferredContact::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& OrganizationPreferredContact::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.OrganizationPreferredContact.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* OrganizationPreferredContact::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.OrganizationPreferredContact.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* OrganizationPreferredContact::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.OrganizationPreferredContact.value_boolean)
  return value_boolean_;
}
inline void OrganizationPreferredContact::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.OrganizationPreferredContact.value_boolean)
}

// -------------------------------------------------------------------

// PatientAdoptionInfo

// .google.fhir.stu3.proto.String id = 1;
inline bool PatientAdoptionInfo::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& PatientAdoptionInfo::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& PatientAdoptionInfo::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientAdoptionInfo.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PatientAdoptionInfo::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientAdoptionInfo.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PatientAdoptionInfo::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientAdoptionInfo.id)
  return id_;
}
inline void PatientAdoptionInfo::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientAdoptionInfo.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool PatientAdoptionInfo::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& PatientAdoptionInfo::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& PatientAdoptionInfo::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientAdoptionInfo.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* PatientAdoptionInfo::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientAdoptionInfo.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* PatientAdoptionInfo::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientAdoptionInfo.value_codeable_concept)
  return value_codeable_concept_;
}
inline void PatientAdoptionInfo::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientAdoptionInfo.value_codeable_concept)
}

// -------------------------------------------------------------------

// PatientBirthTime

// .google.fhir.stu3.proto.String id = 1;
inline bool PatientBirthTime::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& PatientBirthTime::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& PatientBirthTime::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientBirthTime.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PatientBirthTime::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientBirthTime.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PatientBirthTime::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientBirthTime.id)
  return id_;
}
inline void PatientBirthTime::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientBirthTime.id)
}

// .google.fhir.stu3.proto.DateTime value_date_time = 3;
inline bool PatientBirthTime::has_value_date_time() const {
  return this != internal_default_instance() && value_date_time_ != NULL;
}
inline const ::google::fhir::stu3::proto::DateTime& PatientBirthTime::_internal_value_date_time() const {
  return *value_date_time_;
}
inline const ::google::fhir::stu3::proto::DateTime& PatientBirthTime::value_date_time() const {
  const ::google::fhir::stu3::proto::DateTime* p = value_date_time_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientBirthTime.value_date_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::DateTime*>(
      &::google::fhir::stu3::proto::_DateTime_default_instance_);
}
inline ::google::fhir::stu3::proto::DateTime* PatientBirthTime::release_value_date_time() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientBirthTime.value_date_time)
  
  ::google::fhir::stu3::proto::DateTime* temp = value_date_time_;
  value_date_time_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::DateTime* PatientBirthTime::mutable_value_date_time() {
  
  if (value_date_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::DateTime>(GetArenaNoVirtual());
    value_date_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientBirthTime.value_date_time)
  return value_date_time_;
}
inline void PatientBirthTime::set_allocated_value_date_time(::google::fhir::stu3::proto::DateTime* value_date_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_date_time_);
  }
  if (value_date_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_date_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_date_time, submessage_arena);
    }
    
  } else {
    
  }
  value_date_time_ = value_date_time;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientBirthTime.value_date_time)
}

// -------------------------------------------------------------------

// PatientCadavericDonor

// .google.fhir.stu3.proto.String id = 1;
inline bool PatientCadavericDonor::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& PatientCadavericDonor::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& PatientCadavericDonor::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientCadavericDonor.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PatientCadavericDonor::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientCadavericDonor.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PatientCadavericDonor::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientCadavericDonor.id)
  return id_;
}
inline void PatientCadavericDonor::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientCadavericDonor.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool PatientCadavericDonor::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& PatientCadavericDonor::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& PatientCadavericDonor::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientCadavericDonor.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* PatientCadavericDonor::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientCadavericDonor.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* PatientCadavericDonor::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientCadavericDonor.value_boolean)
  return value_boolean_;
}
inline void PatientCadavericDonor::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientCadavericDonor.value_boolean)
}

// -------------------------------------------------------------------

// PatientCitizenship

// .google.fhir.stu3.proto.String id = 1;
inline bool PatientCitizenship::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& PatientCitizenship::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& PatientCitizenship::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientCitizenship.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PatientCitizenship::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientCitizenship.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PatientCitizenship::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientCitizenship.id)
  return id_;
}
inline void PatientCitizenship::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientCitizenship.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int PatientCitizenship::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* PatientCitizenship::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientCitizenship.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
PatientCitizenship::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.PatientCitizenship.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& PatientCitizenship::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientCitizenship.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* PatientCitizenship::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.PatientCitizenship.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
PatientCitizenship::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.PatientCitizenship.extension)
  return extension_;
}

// .google.fhir.stu3.proto.CodeableConcept code = 4;
inline bool PatientCitizenship::has_code() const {
  return this != internal_default_instance() && code_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& PatientCitizenship::_internal_code() const {
  return *code_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& PatientCitizenship::code() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientCitizenship.code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* PatientCitizenship::release_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientCitizenship.code)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = code_;
  code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* PatientCitizenship::mutable_code() {
  
  if (code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientCitizenship.code)
  return code_;
}
inline void PatientCitizenship::set_allocated_code(::google::fhir::stu3::proto::CodeableConcept* code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(code_);
  }
  if (code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientCitizenship.code)
}

// .google.fhir.stu3.proto.Period period = 5;
inline bool PatientCitizenship::has_period() const {
  return this != internal_default_instance() && period_ != NULL;
}
inline const ::google::fhir::stu3::proto::Period& PatientCitizenship::_internal_period() const {
  return *period_;
}
inline const ::google::fhir::stu3::proto::Period& PatientCitizenship::period() const {
  const ::google::fhir::stu3::proto::Period* p = period_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientCitizenship.period)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Period*>(
      &::google::fhir::stu3::proto::_Period_default_instance_);
}
inline ::google::fhir::stu3::proto::Period* PatientCitizenship::release_period() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientCitizenship.period)
  
  ::google::fhir::stu3::proto::Period* temp = period_;
  period_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Period* PatientCitizenship::mutable_period() {
  
  if (period_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Period>(GetArenaNoVirtual());
    period_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientCitizenship.period)
  return period_;
}
inline void PatientCitizenship::set_allocated_period(::google::fhir::stu3::proto::Period* period) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(period_);
  }
  if (period) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      period = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, period, submessage_arena);
    }
    
  } else {
    
  }
  period_ = period;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientCitizenship.period)
}

// -------------------------------------------------------------------

// PatientClinicalTrial

// .google.fhir.stu3.proto.String id = 1;
inline bool PatientClinicalTrial::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& PatientClinicalTrial::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& PatientClinicalTrial::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientClinicalTrial.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PatientClinicalTrial::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientClinicalTrial.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PatientClinicalTrial::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientClinicalTrial.id)
  return id_;
}
inline void PatientClinicalTrial::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientClinicalTrial.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int PatientClinicalTrial::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* PatientClinicalTrial::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientClinicalTrial.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
PatientClinicalTrial::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.PatientClinicalTrial.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& PatientClinicalTrial::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientClinicalTrial.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* PatientClinicalTrial::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.PatientClinicalTrial.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
PatientClinicalTrial::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.PatientClinicalTrial.extension)
  return extension_;
}

// .google.fhir.stu3.proto.String n_c_t = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.fhir_inlined_extension_url) = "NCT"];
inline bool PatientClinicalTrial::has_n_c_t() const {
  return this != internal_default_instance() && n_c_t_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& PatientClinicalTrial::_internal_n_c_t() const {
  return *n_c_t_;
}
inline const ::google::fhir::stu3::proto::String& PatientClinicalTrial::n_c_t() const {
  const ::google::fhir::stu3::proto::String* p = n_c_t_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientClinicalTrial.n_c_t)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PatientClinicalTrial::release_n_c_t() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientClinicalTrial.n_c_t)
  
  ::google::fhir::stu3::proto::String* temp = n_c_t_;
  n_c_t_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PatientClinicalTrial::mutable_n_c_t() {
  
  if (n_c_t_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    n_c_t_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientClinicalTrial.n_c_t)
  return n_c_t_;
}
inline void PatientClinicalTrial::set_allocated_n_c_t(::google::fhir::stu3::proto::String* n_c_t) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(n_c_t_);
  }
  if (n_c_t) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      n_c_t = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, n_c_t, submessage_arena);
    }
    
  } else {
    
  }
  n_c_t_ = n_c_t;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientClinicalTrial.n_c_t)
}

// .google.fhir.stu3.proto.Period period = 5;
inline bool PatientClinicalTrial::has_period() const {
  return this != internal_default_instance() && period_ != NULL;
}
inline const ::google::fhir::stu3::proto::Period& PatientClinicalTrial::_internal_period() const {
  return *period_;
}
inline const ::google::fhir::stu3::proto::Period& PatientClinicalTrial::period() const {
  const ::google::fhir::stu3::proto::Period* p = period_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientClinicalTrial.period)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Period*>(
      &::google::fhir::stu3::proto::_Period_default_instance_);
}
inline ::google::fhir::stu3::proto::Period* PatientClinicalTrial::release_period() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientClinicalTrial.period)
  
  ::google::fhir::stu3::proto::Period* temp = period_;
  period_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Period* PatientClinicalTrial::mutable_period() {
  
  if (period_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Period>(GetArenaNoVirtual());
    period_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientClinicalTrial.period)
  return period_;
}
inline void PatientClinicalTrial::set_allocated_period(::google::fhir::stu3::proto::Period* period) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(period_);
  }
  if (period) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      period = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, period, submessage_arena);
    }
    
  } else {
    
  }
  period_ = period;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientClinicalTrial.period)
}

// .google.fhir.stu3.proto.CodeableConcept reason = 6;
inline bool PatientClinicalTrial::has_reason() const {
  return this != internal_default_instance() && reason_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& PatientClinicalTrial::_internal_reason() const {
  return *reason_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& PatientClinicalTrial::reason() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = reason_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientClinicalTrial.reason)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* PatientClinicalTrial::release_reason() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientClinicalTrial.reason)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = reason_;
  reason_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* PatientClinicalTrial::mutable_reason() {
  
  if (reason_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    reason_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientClinicalTrial.reason)
  return reason_;
}
inline void PatientClinicalTrial::set_allocated_reason(::google::fhir::stu3::proto::CodeableConcept* reason) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(reason_);
  }
  if (reason) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      reason = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reason, submessage_arena);
    }
    
  } else {
    
  }
  reason_ = reason;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientClinicalTrial.reason)
}

// -------------------------------------------------------------------

// PatientCongregation

// .google.fhir.stu3.proto.String id = 1;
inline bool PatientCongregation::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& PatientCongregation::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& PatientCongregation::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientCongregation.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PatientCongregation::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientCongregation.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PatientCongregation::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientCongregation.id)
  return id_;
}
inline void PatientCongregation::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientCongregation.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool PatientCongregation::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& PatientCongregation::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& PatientCongregation::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientCongregation.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PatientCongregation::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientCongregation.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PatientCongregation::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientCongregation.value_string)
  return value_string_;
}
inline void PatientCongregation::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientCongregation.value_string)
}

// -------------------------------------------------------------------

// PatientDisability

// .google.fhir.stu3.proto.String id = 1;
inline bool PatientDisability::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& PatientDisability::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& PatientDisability::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientDisability.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PatientDisability::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientDisability.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PatientDisability::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientDisability.id)
  return id_;
}
inline void PatientDisability::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientDisability.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool PatientDisability::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& PatientDisability::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& PatientDisability::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientDisability.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* PatientDisability::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientDisability.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* PatientDisability::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientDisability.value_codeable_concept)
  return value_codeable_concept_;
}
inline void PatientDisability::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientDisability.value_codeable_concept)
}

// -------------------------------------------------------------------

// PatientImportance

// .google.fhir.stu3.proto.String id = 1;
inline bool PatientImportance::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& PatientImportance::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& PatientImportance::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientImportance.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PatientImportance::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientImportance.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PatientImportance::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientImportance.id)
  return id_;
}
inline void PatientImportance::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientImportance.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool PatientImportance::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& PatientImportance::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& PatientImportance::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientImportance.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* PatientImportance::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientImportance.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* PatientImportance::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientImportance.value_codeable_concept)
  return value_codeable_concept_;
}
inline void PatientImportance::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientImportance.value_codeable_concept)
}

// -------------------------------------------------------------------

// PatientInterpreterRequired

// .google.fhir.stu3.proto.String id = 1;
inline bool PatientInterpreterRequired::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& PatientInterpreterRequired::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& PatientInterpreterRequired::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientInterpreterRequired.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PatientInterpreterRequired::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientInterpreterRequired.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PatientInterpreterRequired::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientInterpreterRequired.id)
  return id_;
}
inline void PatientInterpreterRequired::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientInterpreterRequired.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool PatientInterpreterRequired::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& PatientInterpreterRequired::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& PatientInterpreterRequired::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientInterpreterRequired.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* PatientInterpreterRequired::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientInterpreterRequired.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* PatientInterpreterRequired::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientInterpreterRequired.value_boolean)
  return value_boolean_;
}
inline void PatientInterpreterRequired::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientInterpreterRequired.value_boolean)
}

// -------------------------------------------------------------------

// PatientMothersMaidenName

// .google.fhir.stu3.proto.String id = 1;
inline bool PatientMothersMaidenName::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& PatientMothersMaidenName::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& PatientMothersMaidenName::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientMothersMaidenName.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PatientMothersMaidenName::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientMothersMaidenName.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PatientMothersMaidenName::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientMothersMaidenName.id)
  return id_;
}
inline void PatientMothersMaidenName::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientMothersMaidenName.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool PatientMothersMaidenName::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& PatientMothersMaidenName::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& PatientMothersMaidenName::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientMothersMaidenName.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PatientMothersMaidenName::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientMothersMaidenName.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PatientMothersMaidenName::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientMothersMaidenName.value_string)
  return value_string_;
}
inline void PatientMothersMaidenName::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientMothersMaidenName.value_string)
}

// -------------------------------------------------------------------

// PatientNationality

// .google.fhir.stu3.proto.String id = 1;
inline bool PatientNationality::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& PatientNationality::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& PatientNationality::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientNationality.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PatientNationality::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientNationality.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PatientNationality::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientNationality.id)
  return id_;
}
inline void PatientNationality::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientNationality.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int PatientNationality::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* PatientNationality::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientNationality.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
PatientNationality::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.PatientNationality.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& PatientNationality::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientNationality.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* PatientNationality::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.PatientNationality.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
PatientNationality::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.PatientNationality.extension)
  return extension_;
}

// .google.fhir.stu3.proto.CodeableConcept code = 4;
inline bool PatientNationality::has_code() const {
  return this != internal_default_instance() && code_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& PatientNationality::_internal_code() const {
  return *code_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& PatientNationality::code() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientNationality.code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* PatientNationality::release_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientNationality.code)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = code_;
  code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* PatientNationality::mutable_code() {
  
  if (code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientNationality.code)
  return code_;
}
inline void PatientNationality::set_allocated_code(::google::fhir::stu3::proto::CodeableConcept* code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(code_);
  }
  if (code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientNationality.code)
}

// .google.fhir.stu3.proto.Period period = 5;
inline bool PatientNationality::has_period() const {
  return this != internal_default_instance() && period_ != NULL;
}
inline const ::google::fhir::stu3::proto::Period& PatientNationality::_internal_period() const {
  return *period_;
}
inline const ::google::fhir::stu3::proto::Period& PatientNationality::period() const {
  const ::google::fhir::stu3::proto::Period* p = period_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientNationality.period)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Period*>(
      &::google::fhir::stu3::proto::_Period_default_instance_);
}
inline ::google::fhir::stu3::proto::Period* PatientNationality::release_period() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientNationality.period)
  
  ::google::fhir::stu3::proto::Period* temp = period_;
  period_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Period* PatientNationality::mutable_period() {
  
  if (period_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Period>(GetArenaNoVirtual());
    period_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientNationality.period)
  return period_;
}
inline void PatientNationality::set_allocated_period(::google::fhir::stu3::proto::Period* period) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(period_);
  }
  if (period) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      period = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, period, submessage_arena);
    }
    
  } else {
    
  }
  period_ = period;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientNationality.period)
}

// -------------------------------------------------------------------

// PatientReligion

// .google.fhir.stu3.proto.String id = 1;
inline bool PatientReligion::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& PatientReligion::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& PatientReligion::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientReligion.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PatientReligion::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientReligion.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PatientReligion::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientReligion.id)
  return id_;
}
inline void PatientReligion::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientReligion.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool PatientReligion::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& PatientReligion::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& PatientReligion::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PatientReligion.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* PatientReligion::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PatientReligion.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* PatientReligion::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PatientReligion.value_codeable_concept)
  return value_codeable_concept_;
}
inline void PatientReligion::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PatientReligion.value_codeable_concept)
}

// -------------------------------------------------------------------

// DoseType

// .google.fhir.stu3.proto.String id = 1;
inline bool DoseType::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DoseType::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DoseType::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DoseType.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DoseType::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DoseType.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DoseType::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DoseType.id)
  return id_;
}
inline void DoseType::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DoseType.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool DoseType::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& DoseType::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& DoseType::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DoseType.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* DoseType::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DoseType.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* DoseType::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DoseType.value_codeable_concept)
  return value_codeable_concept_;
}
inline void DoseType::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DoseType.value_codeable_concept)
}

// -------------------------------------------------------------------

// InfuseOver

// .google.fhir.stu3.proto.String id = 1;
inline bool InfuseOver::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& InfuseOver::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& InfuseOver::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.InfuseOver.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* InfuseOver::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.InfuseOver.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* InfuseOver::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.InfuseOver.id)
  return id_;
}
inline void InfuseOver::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.InfuseOver.id)
}

// .google.fhir.stu3.proto.Duration value_duration = 3;
inline bool InfuseOver::has_value_duration() const {
  return this != internal_default_instance() && value_duration_ != NULL;
}
inline const ::google::fhir::stu3::proto::Duration& InfuseOver::_internal_value_duration() const {
  return *value_duration_;
}
inline const ::google::fhir::stu3::proto::Duration& InfuseOver::value_duration() const {
  const ::google::fhir::stu3::proto::Duration* p = value_duration_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.InfuseOver.value_duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Duration*>(
      &::google::fhir::stu3::proto::_Duration_default_instance_);
}
inline ::google::fhir::stu3::proto::Duration* InfuseOver::release_value_duration() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.InfuseOver.value_duration)
  
  ::google::fhir::stu3::proto::Duration* temp = value_duration_;
  value_duration_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Duration* InfuseOver::mutable_value_duration() {
  
  if (value_duration_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Duration>(GetArenaNoVirtual());
    value_duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.InfuseOver.value_duration)
  return value_duration_;
}
inline void InfuseOver::set_allocated_value_duration(::google::fhir::stu3::proto::Duration* value_duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_duration_);
  }
  if (value_duration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_duration, submessage_arena);
    }
    
  } else {
    
  }
  value_duration_ = value_duration;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.InfuseOver.value_duration)
}

// -------------------------------------------------------------------

// MaxDeliveryRate

// .google.fhir.stu3.proto.String id = 1;
inline bool MaxDeliveryRate::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& MaxDeliveryRate::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& MaxDeliveryRate::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MaxDeliveryRate.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* MaxDeliveryRate::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MaxDeliveryRate.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* MaxDeliveryRate::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MaxDeliveryRate.id)
  return id_;
}
inline void MaxDeliveryRate::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MaxDeliveryRate.id)
}

// .google.fhir.stu3.proto.Ratio value_ratio = 3;
inline bool MaxDeliveryRate::has_value_ratio() const {
  return this != internal_default_instance() && value_ratio_ != NULL;
}
inline const ::google::fhir::stu3::proto::Ratio& MaxDeliveryRate::_internal_value_ratio() const {
  return *value_ratio_;
}
inline const ::google::fhir::stu3::proto::Ratio& MaxDeliveryRate::value_ratio() const {
  const ::google::fhir::stu3::proto::Ratio* p = value_ratio_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MaxDeliveryRate.value_ratio)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Ratio*>(
      &::google::fhir::stu3::proto::_Ratio_default_instance_);
}
inline ::google::fhir::stu3::proto::Ratio* MaxDeliveryRate::release_value_ratio() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MaxDeliveryRate.value_ratio)
  
  ::google::fhir::stu3::proto::Ratio* temp = value_ratio_;
  value_ratio_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Ratio* MaxDeliveryRate::mutable_value_ratio() {
  
  if (value_ratio_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Ratio>(GetArenaNoVirtual());
    value_ratio_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MaxDeliveryRate.value_ratio)
  return value_ratio_;
}
inline void MaxDeliveryRate::set_allocated_value_ratio(::google::fhir::stu3::proto::Ratio* value_ratio) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_ratio_);
  }
  if (value_ratio) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_ratio = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_ratio, submessage_arena);
    }
    
  } else {
    
  }
  value_ratio_ = value_ratio;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MaxDeliveryRate.value_ratio)
}

// -------------------------------------------------------------------

// MaxDeliveryVolume

// .google.fhir.stu3.proto.String id = 1;
inline bool MaxDeliveryVolume::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& MaxDeliveryVolume::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& MaxDeliveryVolume::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MaxDeliveryVolume.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* MaxDeliveryVolume::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MaxDeliveryVolume.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* MaxDeliveryVolume::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MaxDeliveryVolume.id)
  return id_;
}
inline void MaxDeliveryVolume::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MaxDeliveryVolume.id)
}

// .google.fhir.stu3.proto.Quantity value_quantity = 3;
inline bool MaxDeliveryVolume::has_value_quantity() const {
  return this != internal_default_instance() && value_quantity_ != NULL;
}
inline const ::google::fhir::stu3::proto::Quantity& MaxDeliveryVolume::_internal_value_quantity() const {
  return *value_quantity_;
}
inline const ::google::fhir::stu3::proto::Quantity& MaxDeliveryVolume::value_quantity() const {
  const ::google::fhir::stu3::proto::Quantity* p = value_quantity_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MaxDeliveryVolume.value_quantity)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Quantity*>(
      &::google::fhir::stu3::proto::_Quantity_default_instance_);
}
inline ::google::fhir::stu3::proto::Quantity* MaxDeliveryVolume::release_value_quantity() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MaxDeliveryVolume.value_quantity)
  
  ::google::fhir::stu3::proto::Quantity* temp = value_quantity_;
  value_quantity_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Quantity* MaxDeliveryVolume::mutable_value_quantity() {
  
  if (value_quantity_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Quantity>(GetArenaNoVirtual());
    value_quantity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MaxDeliveryVolume.value_quantity)
  return value_quantity_;
}
inline void MaxDeliveryVolume::set_allocated_value_quantity(::google::fhir::stu3::proto::Quantity* value_quantity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_quantity_);
  }
  if (value_quantity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_quantity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_quantity, submessage_arena);
    }
    
  } else {
    
  }
  value_quantity_ = value_quantity;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MaxDeliveryVolume.value_quantity)
}

// -------------------------------------------------------------------

// MinDosePerPeriod

// .google.fhir.stu3.proto.String id = 1;
inline bool MinDosePerPeriod::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& MinDosePerPeriod::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& MinDosePerPeriod::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MinDosePerPeriod.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* MinDosePerPeriod::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MinDosePerPeriod.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* MinDosePerPeriod::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MinDosePerPeriod.id)
  return id_;
}
inline void MinDosePerPeriod::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MinDosePerPeriod.id)
}

// .google.fhir.stu3.proto.Ratio value_ratio = 3;
inline bool MinDosePerPeriod::has_value_ratio() const {
  return this != internal_default_instance() && value_ratio_ != NULL;
}
inline const ::google::fhir::stu3::proto::Ratio& MinDosePerPeriod::_internal_value_ratio() const {
  return *value_ratio_;
}
inline const ::google::fhir::stu3::proto::Ratio& MinDosePerPeriod::value_ratio() const {
  const ::google::fhir::stu3::proto::Ratio* p = value_ratio_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MinDosePerPeriod.value_ratio)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Ratio*>(
      &::google::fhir::stu3::proto::_Ratio_default_instance_);
}
inline ::google::fhir::stu3::proto::Ratio* MinDosePerPeriod::release_value_ratio() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MinDosePerPeriod.value_ratio)
  
  ::google::fhir::stu3::proto::Ratio* temp = value_ratio_;
  value_ratio_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Ratio* MinDosePerPeriod::mutable_value_ratio() {
  
  if (value_ratio_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Ratio>(GetArenaNoVirtual());
    value_ratio_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MinDosePerPeriod.value_ratio)
  return value_ratio_;
}
inline void MinDosePerPeriod::set_allocated_value_ratio(::google::fhir::stu3::proto::Ratio* value_ratio) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_ratio_);
  }
  if (value_ratio) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_ratio = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_ratio, submessage_arena);
    }
    
  } else {
    
  }
  value_ratio_ = value_ratio;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MinDosePerPeriod.value_ratio)
}

// -------------------------------------------------------------------

// RateGoal

// .google.fhir.stu3.proto.String id = 1;
inline bool RateGoal::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& RateGoal::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& RateGoal::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.RateGoal.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* RateGoal::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.RateGoal.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* RateGoal::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.RateGoal.id)
  return id_;
}
inline void RateGoal::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.RateGoal.id)
}

// .google.fhir.stu3.proto.Ratio value_ratio = 3;
inline bool RateGoal::has_value_ratio() const {
  return this != internal_default_instance() && value_ratio_ != NULL;
}
inline const ::google::fhir::stu3::proto::Ratio& RateGoal::_internal_value_ratio() const {
  return *value_ratio_;
}
inline const ::google::fhir::stu3::proto::Ratio& RateGoal::value_ratio() const {
  const ::google::fhir::stu3::proto::Ratio* p = value_ratio_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.RateGoal.value_ratio)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Ratio*>(
      &::google::fhir::stu3::proto::_Ratio_default_instance_);
}
inline ::google::fhir::stu3::proto::Ratio* RateGoal::release_value_ratio() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.RateGoal.value_ratio)
  
  ::google::fhir::stu3::proto::Ratio* temp = value_ratio_;
  value_ratio_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Ratio* RateGoal::mutable_value_ratio() {
  
  if (value_ratio_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Ratio>(GetArenaNoVirtual());
    value_ratio_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.RateGoal.value_ratio)
  return value_ratio_;
}
inline void RateGoal::set_allocated_value_ratio(::google::fhir::stu3::proto::Ratio* value_ratio) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_ratio_);
  }
  if (value_ratio) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_ratio = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_ratio, submessage_arena);
    }
    
  } else {
    
  }
  value_ratio_ = value_ratio;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.RateGoal.value_ratio)
}

// -------------------------------------------------------------------

// RateIncrement

// .google.fhir.stu3.proto.String id = 1;
inline bool RateIncrement::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& RateIncrement::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& RateIncrement::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.RateIncrement.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* RateIncrement::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.RateIncrement.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* RateIncrement::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.RateIncrement.id)
  return id_;
}
inline void RateIncrement::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.RateIncrement.id)
}

// .google.fhir.stu3.proto.Ratio value_ratio = 3;
inline bool RateIncrement::has_value_ratio() const {
  return this != internal_default_instance() && value_ratio_ != NULL;
}
inline const ::google::fhir::stu3::proto::Ratio& RateIncrement::_internal_value_ratio() const {
  return *value_ratio_;
}
inline const ::google::fhir::stu3::proto::Ratio& RateIncrement::value_ratio() const {
  const ::google::fhir::stu3::proto::Ratio* p = value_ratio_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.RateIncrement.value_ratio)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Ratio*>(
      &::google::fhir::stu3::proto::_Ratio_default_instance_);
}
inline ::google::fhir::stu3::proto::Ratio* RateIncrement::release_value_ratio() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.RateIncrement.value_ratio)
  
  ::google::fhir::stu3::proto::Ratio* temp = value_ratio_;
  value_ratio_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Ratio* RateIncrement::mutable_value_ratio() {
  
  if (value_ratio_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Ratio>(GetArenaNoVirtual());
    value_ratio_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.RateIncrement.value_ratio)
  return value_ratio_;
}
inline void RateIncrement::set_allocated_value_ratio(::google::fhir::stu3::proto::Ratio* value_ratio) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_ratio_);
  }
  if (value_ratio) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_ratio = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_ratio, submessage_arena);
    }
    
  } else {
    
  }
  value_ratio_ = value_ratio;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.RateIncrement.value_ratio)
}

// -------------------------------------------------------------------

// RateIncrementInterval

// .google.fhir.stu3.proto.String id = 1;
inline bool RateIncrementInterval::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& RateIncrementInterval::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& RateIncrementInterval::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.RateIncrementInterval.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* RateIncrementInterval::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.RateIncrementInterval.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* RateIncrementInterval::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.RateIncrementInterval.id)
  return id_;
}
inline void RateIncrementInterval::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.RateIncrementInterval.id)
}

// .google.fhir.stu3.proto.Duration value_duration = 3;
inline bool RateIncrementInterval::has_value_duration() const {
  return this != internal_default_instance() && value_duration_ != NULL;
}
inline const ::google::fhir::stu3::proto::Duration& RateIncrementInterval::_internal_value_duration() const {
  return *value_duration_;
}
inline const ::google::fhir::stu3::proto::Duration& RateIncrementInterval::value_duration() const {
  const ::google::fhir::stu3::proto::Duration* p = value_duration_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.RateIncrementInterval.value_duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Duration*>(
      &::google::fhir::stu3::proto::_Duration_default_instance_);
}
inline ::google::fhir::stu3::proto::Duration* RateIncrementInterval::release_value_duration() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.RateIncrementInterval.value_duration)
  
  ::google::fhir::stu3::proto::Duration* temp = value_duration_;
  value_duration_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Duration* RateIncrementInterval::mutable_value_duration() {
  
  if (value_duration_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Duration>(GetArenaNoVirtual());
    value_duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.RateIncrementInterval.value_duration)
  return value_duration_;
}
inline void RateIncrementInterval::set_allocated_value_duration(::google::fhir::stu3::proto::Duration* value_duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_duration_);
  }
  if (value_duration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_duration, submessage_arena);
    }
    
  } else {
    
  }
  value_duration_ = value_duration;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.RateIncrementInterval.value_duration)
}

// -------------------------------------------------------------------

// RefillsRemaining

// .google.fhir.stu3.proto.String id = 1;
inline bool RefillsRemaining::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& RefillsRemaining::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& RefillsRemaining::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.RefillsRemaining.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* RefillsRemaining::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.RefillsRemaining.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* RefillsRemaining::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.RefillsRemaining.id)
  return id_;
}
inline void RefillsRemaining::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.RefillsRemaining.id)
}

// .google.fhir.stu3.proto.Integer value_integer = 3;
inline bool RefillsRemaining::has_value_integer() const {
  return this != internal_default_instance() && value_integer_ != NULL;
}
inline const ::google::fhir::stu3::proto::Integer& RefillsRemaining::_internal_value_integer() const {
  return *value_integer_;
}
inline const ::google::fhir::stu3::proto::Integer& RefillsRemaining::value_integer() const {
  const ::google::fhir::stu3::proto::Integer* p = value_integer_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.RefillsRemaining.value_integer)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Integer*>(
      &::google::fhir::stu3::proto::_Integer_default_instance_);
}
inline ::google::fhir::stu3::proto::Integer* RefillsRemaining::release_value_integer() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.RefillsRemaining.value_integer)
  
  ::google::fhir::stu3::proto::Integer* temp = value_integer_;
  value_integer_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Integer* RefillsRemaining::mutable_value_integer() {
  
  if (value_integer_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Integer>(GetArenaNoVirtual());
    value_integer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.RefillsRemaining.value_integer)
  return value_integer_;
}
inline void RefillsRemaining::set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_integer_);
  }
  if (value_integer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_integer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_integer, submessage_arena);
    }
    
  } else {
    
  }
  value_integer_ = value_integer;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.RefillsRemaining.value_integer)
}

// -------------------------------------------------------------------

// AnimalSpecies

// .google.fhir.stu3.proto.String id = 1;
inline bool AnimalSpecies::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& AnimalSpecies::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AnimalSpecies::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AnimalSpecies.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AnimalSpecies::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AnimalSpecies.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AnimalSpecies::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AnimalSpecies.id)
  return id_;
}
inline void AnimalSpecies::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AnimalSpecies.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool AnimalSpecies::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& AnimalSpecies::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& AnimalSpecies::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AnimalSpecies.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* AnimalSpecies::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AnimalSpecies.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* AnimalSpecies::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AnimalSpecies.value_codeable_concept)
  return value_codeable_concept_;
}
inline void AnimalSpecies::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AnimalSpecies.value_codeable_concept)
}

// -------------------------------------------------------------------

// PractitionerClassification

// .google.fhir.stu3.proto.String id = 1;
inline bool PractitionerClassification::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& PractitionerClassification::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& PractitionerClassification::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PractitionerClassification.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PractitionerClassification::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PractitionerClassification.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PractitionerClassification::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PractitionerClassification.id)
  return id_;
}
inline void PractitionerClassification::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PractitionerClassification.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool PractitionerClassification::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& PractitionerClassification::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& PractitionerClassification::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PractitionerClassification.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* PractitionerClassification::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PractitionerClassification.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* PractitionerClassification::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PractitionerClassification.value_codeable_concept)
  return value_codeable_concept_;
}
inline void PractitionerClassification::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PractitionerClassification.value_codeable_concept)
}

// -------------------------------------------------------------------

// PractitionerRolePrimaryInd

// .google.fhir.stu3.proto.String id = 1;
inline bool PractitionerRolePrimaryInd::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& PractitionerRolePrimaryInd::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& PractitionerRolePrimaryInd::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PractitionerRolePrimaryInd.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PractitionerRolePrimaryInd::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PractitionerRolePrimaryInd.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PractitionerRolePrimaryInd::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PractitionerRolePrimaryInd.id)
  return id_;
}
inline void PractitionerRolePrimaryInd::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PractitionerRolePrimaryInd.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool PractitionerRolePrimaryInd::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& PractitionerRolePrimaryInd::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& PractitionerRolePrimaryInd::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PractitionerRolePrimaryInd.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* PractitionerRolePrimaryInd::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PractitionerRolePrimaryInd.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* PractitionerRolePrimaryInd::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PractitionerRolePrimaryInd.value_boolean)
  return value_boolean_;
}
inline void PractitionerRolePrimaryInd::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PractitionerRolePrimaryInd.value_boolean)
}

// -------------------------------------------------------------------

// ProcedureApproachBodySite

// .google.fhir.stu3.proto.String id = 1;
inline bool ProcedureApproachBodySite::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ProcedureApproachBodySite::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ProcedureApproachBodySite::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureApproachBodySite.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ProcedureApproachBodySite::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureApproachBodySite.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ProcedureApproachBodySite::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureApproachBodySite.id)
  return id_;
}
inline void ProcedureApproachBodySite::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureApproachBodySite.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/BodySite"];
inline bool ProcedureApproachBodySite::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& ProcedureApproachBodySite::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& ProcedureApproachBodySite::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureApproachBodySite.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ProcedureApproachBodySite::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureApproachBodySite.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* ProcedureApproachBodySite::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureApproachBodySite.value_reference)
  return value_reference_;
}
inline void ProcedureApproachBodySite::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureApproachBodySite.value_reference)
}

// -------------------------------------------------------------------

// ProcedureCausedBy_Value

// .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/AllergyIntolerance", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/DiagnosticReport", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/FamilyMemberHistory", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ImagingStudy", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Immunization", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ImmunizationRecommendation", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/MedicationAdministration", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/MedicationRequest", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/MedicationStatement", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Observation", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Procedure"];
inline bool ProcedureCausedBy_Value::has_reference() const {
  return value_case() == kReference;
}
inline void ProcedureCausedBy_Value::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline const ::google::fhir::stu3::proto::Reference& ProcedureCausedBy_Value::_internal_reference() const {
  return *value_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* ProcedureCausedBy_Value::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureCausedBy.Value.reference)
  if (has_reference()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Reference* temp = value_.reference_;
    value_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& ProcedureCausedBy_Value::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureCausedBy.Value.reference)
  return has_reference()
      ? *value_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ProcedureCausedBy_Value::mutable_reference() {
  if (!has_reference()) {
    clear_value();
    set_has_reference();
    value_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureCausedBy.Value.reference)
  return value_.reference_;
}

inline bool ProcedureCausedBy_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void ProcedureCausedBy_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ProcedureCausedBy_Value::ValueCase ProcedureCausedBy_Value::value_case() const {
  return ProcedureCausedBy_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ProcedureCausedBy

// .google.fhir.stu3.proto.String id = 1;
inline bool ProcedureCausedBy::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ProcedureCausedBy::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ProcedureCausedBy::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureCausedBy.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ProcedureCausedBy::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureCausedBy.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ProcedureCausedBy::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureCausedBy.id)
  return id_;
}
inline void ProcedureCausedBy::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureCausedBy.id)
}

// .google.fhir.stu3.proto.ProcedureCausedBy.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool ProcedureCausedBy::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void ProcedureCausedBy::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::ProcedureCausedBy_Value& ProcedureCausedBy::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::ProcedureCausedBy_Value& ProcedureCausedBy::value() const {
  const ::google::fhir::stu3::proto::ProcedureCausedBy_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureCausedBy.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::ProcedureCausedBy_Value*>(
      &::google::fhir::stu3::proto::_ProcedureCausedBy_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::ProcedureCausedBy_Value* ProcedureCausedBy::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureCausedBy.value)
  
  ::google::fhir::stu3::proto::ProcedureCausedBy_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::ProcedureCausedBy_Value* ProcedureCausedBy::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::ProcedureCausedBy_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureCausedBy.value)
  return value_;
}
inline void ProcedureCausedBy::set_allocated_value(::google::fhir::stu3::proto::ProcedureCausedBy_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureCausedBy.value)
}

// -------------------------------------------------------------------

// ProcedureIncisionDateTime

// .google.fhir.stu3.proto.String id = 1;
inline bool ProcedureIncisionDateTime::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ProcedureIncisionDateTime::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ProcedureIncisionDateTime::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureIncisionDateTime.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ProcedureIncisionDateTime::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureIncisionDateTime.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ProcedureIncisionDateTime::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureIncisionDateTime.id)
  return id_;
}
inline void ProcedureIncisionDateTime::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureIncisionDateTime.id)
}

// .google.fhir.stu3.proto.DateTime value_date_time = 3;
inline bool ProcedureIncisionDateTime::has_value_date_time() const {
  return this != internal_default_instance() && value_date_time_ != NULL;
}
inline const ::google::fhir::stu3::proto::DateTime& ProcedureIncisionDateTime::_internal_value_date_time() const {
  return *value_date_time_;
}
inline const ::google::fhir::stu3::proto::DateTime& ProcedureIncisionDateTime::value_date_time() const {
  const ::google::fhir::stu3::proto::DateTime* p = value_date_time_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureIncisionDateTime.value_date_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::DateTime*>(
      &::google::fhir::stu3::proto::_DateTime_default_instance_);
}
inline ::google::fhir::stu3::proto::DateTime* ProcedureIncisionDateTime::release_value_date_time() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureIncisionDateTime.value_date_time)
  
  ::google::fhir::stu3::proto::DateTime* temp = value_date_time_;
  value_date_time_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::DateTime* ProcedureIncisionDateTime::mutable_value_date_time() {
  
  if (value_date_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::DateTime>(GetArenaNoVirtual());
    value_date_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureIncisionDateTime.value_date_time)
  return value_date_time_;
}
inline void ProcedureIncisionDateTime::set_allocated_value_date_time(::google::fhir::stu3::proto::DateTime* value_date_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_date_time_);
  }
  if (value_date_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_date_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_date_time, submessage_arena);
    }
    
  } else {
    
  }
  value_date_time_ = value_date_time;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureIncisionDateTime.value_date_time)
}

// -------------------------------------------------------------------

// ProcedureMethod

// .google.fhir.stu3.proto.String id = 1;
inline bool ProcedureMethod::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ProcedureMethod::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ProcedureMethod::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureMethod.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ProcedureMethod::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureMethod.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ProcedureMethod::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureMethod.id)
  return id_;
}
inline void ProcedureMethod::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureMethod.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ProcedureMethod::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ProcedureMethod::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ProcedureMethod::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureMethod.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ProcedureMethod::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureMethod.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ProcedureMethod::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureMethod.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ProcedureMethod::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureMethod.value_codeable_concept)
}

// -------------------------------------------------------------------

// ProcedureProgressStatus

// .google.fhir.stu3.proto.String id = 1;
inline bool ProcedureProgressStatus::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ProcedureProgressStatus::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ProcedureProgressStatus::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureProgressStatus.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ProcedureProgressStatus::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureProgressStatus.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ProcedureProgressStatus::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureProgressStatus.id)
  return id_;
}
inline void ProcedureProgressStatus::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureProgressStatus.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ProcedureProgressStatus::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ProcedureProgressStatus::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ProcedureProgressStatus::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureProgressStatus.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ProcedureProgressStatus::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureProgressStatus.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ProcedureProgressStatus::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureProgressStatus.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ProcedureProgressStatus::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureProgressStatus.value_codeable_concept)
}

// -------------------------------------------------------------------

// ProcedureSchedule

// .google.fhir.stu3.proto.String id = 1;
inline bool ProcedureSchedule::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ProcedureSchedule::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ProcedureSchedule::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureSchedule.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ProcedureSchedule::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureSchedule.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ProcedureSchedule::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureSchedule.id)
  return id_;
}
inline void ProcedureSchedule::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureSchedule.id)
}

// .google.fhir.stu3.proto.Timing value_timing = 3;
inline bool ProcedureSchedule::has_value_timing() const {
  return this != internal_default_instance() && value_timing_ != NULL;
}
inline const ::google::fhir::stu3::proto::Timing& ProcedureSchedule::_internal_value_timing() const {
  return *value_timing_;
}
inline const ::google::fhir::stu3::proto::Timing& ProcedureSchedule::value_timing() const {
  const ::google::fhir::stu3::proto::Timing* p = value_timing_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureSchedule.value_timing)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Timing*>(
      &::google::fhir::stu3::proto::_Timing_default_instance_);
}
inline ::google::fhir::stu3::proto::Timing* ProcedureSchedule::release_value_timing() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureSchedule.value_timing)
  
  ::google::fhir::stu3::proto::Timing* temp = value_timing_;
  value_timing_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Timing* ProcedureSchedule::mutable_value_timing() {
  
  if (value_timing_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Timing>(GetArenaNoVirtual());
    value_timing_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureSchedule.value_timing)
  return value_timing_;
}
inline void ProcedureSchedule::set_allocated_value_timing(::google::fhir::stu3::proto::Timing* value_timing) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_timing_);
  }
  if (value_timing) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_timing = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_timing, submessage_arena);
    }
    
  } else {
    
  }
  value_timing_ = value_timing;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureSchedule.value_timing)
}

// -------------------------------------------------------------------

// ProcedureTargetBodySite

// .google.fhir.stu3.proto.String id = 1;
inline bool ProcedureTargetBodySite::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ProcedureTargetBodySite::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ProcedureTargetBodySite::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureTargetBodySite.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ProcedureTargetBodySite::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureTargetBodySite.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ProcedureTargetBodySite::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureTargetBodySite.id)
  return id_;
}
inline void ProcedureTargetBodySite::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureTargetBodySite.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/BodySite"];
inline bool ProcedureTargetBodySite::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& ProcedureTargetBodySite::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& ProcedureTargetBodySite::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureTargetBodySite.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ProcedureTargetBodySite::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureTargetBodySite.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* ProcedureTargetBodySite::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureTargetBodySite.value_reference)
  return value_reference_;
}
inline void ProcedureTargetBodySite::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureTargetBodySite.value_reference)
}

// -------------------------------------------------------------------

// ProcedureRequestApproachBodySite

// .google.fhir.stu3.proto.String id = 1;
inline bool ProcedureRequestApproachBodySite::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ProcedureRequestApproachBodySite::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ProcedureRequestApproachBodySite::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureRequestApproachBodySite.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ProcedureRequestApproachBodySite::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureRequestApproachBodySite.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ProcedureRequestApproachBodySite::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureRequestApproachBodySite.id)
  return id_;
}
inline void ProcedureRequestApproachBodySite::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureRequestApproachBodySite.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/BodySite"];
inline bool ProcedureRequestApproachBodySite::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& ProcedureRequestApproachBodySite::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& ProcedureRequestApproachBodySite::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureRequestApproachBodySite.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ProcedureRequestApproachBodySite::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureRequestApproachBodySite.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* ProcedureRequestApproachBodySite::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureRequestApproachBodySite.value_reference)
  return value_reference_;
}
inline void ProcedureRequestApproachBodySite::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureRequestApproachBodySite.value_reference)
}

// -------------------------------------------------------------------

// ProcedureRequestAuthorizedBy

// .google.fhir.stu3.proto.String id = 1;
inline bool ProcedureRequestAuthorizedBy::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ProcedureRequestAuthorizedBy::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ProcedureRequestAuthorizedBy::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureRequestAuthorizedBy.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ProcedureRequestAuthorizedBy::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureRequestAuthorizedBy.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ProcedureRequestAuthorizedBy::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureRequestAuthorizedBy.id)
  return id_;
}
inline void ProcedureRequestAuthorizedBy::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureRequestAuthorizedBy.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner"];
inline bool ProcedureRequestAuthorizedBy::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& ProcedureRequestAuthorizedBy::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& ProcedureRequestAuthorizedBy::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureRequestAuthorizedBy.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ProcedureRequestAuthorizedBy::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureRequestAuthorizedBy.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* ProcedureRequestAuthorizedBy::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureRequestAuthorizedBy.value_reference)
  return value_reference_;
}
inline void ProcedureRequestAuthorizedBy::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureRequestAuthorizedBy.value_reference)
}

// -------------------------------------------------------------------

// DiagnosticReportItem

// .google.fhir.stu3.proto.String id = 1;
inline bool DiagnosticReportItem::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportItem::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DiagnosticReportItem::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportItem.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportItem::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportItem.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DiagnosticReportItem::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportItem.id)
  return id_;
}
inline void DiagnosticReportItem::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportItem.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int DiagnosticReportItem::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* DiagnosticReportItem::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportItem.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
DiagnosticReportItem::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.DiagnosticReportItem.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& DiagnosticReportItem::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportItem.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* DiagnosticReportItem::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.DiagnosticReportItem.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
DiagnosticReportItem::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.DiagnosticReportItem.extension)
  return extension_;
}

// .google.fhir.stu3.proto.CodeableConcept code = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool DiagnosticReportItem::has_code() const {
  return this != internal_default_instance() && code_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& DiagnosticReportItem::_internal_code() const {
  return *code_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& DiagnosticReportItem::code() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportItem.code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* DiagnosticReportItem::release_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportItem.code)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = code_;
  code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* DiagnosticReportItem::mutable_code() {
  
  if (code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportItem.code)
  return code_;
}
inline void DiagnosticReportItem::set_allocated_code(::google::fhir::stu3::proto::CodeableConcept* code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(code_);
  }
  if (code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportItem.code)
}

// .google.fhir.stu3.proto.Reference genetics_observation = 5;
inline bool DiagnosticReportItem::has_genetics_observation() const {
  return this != internal_default_instance() && genetics_observation_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& DiagnosticReportItem::_internal_genetics_observation() const {
  return *genetics_observation_;
}
inline const ::google::fhir::stu3::proto::Reference& DiagnosticReportItem::genetics_observation() const {
  const ::google::fhir::stu3::proto::Reference* p = genetics_observation_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportItem.genetics_observation)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* DiagnosticReportItem::release_genetics_observation() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportItem.genetics_observation)
  
  ::google::fhir::stu3::proto::Reference* temp = genetics_observation_;
  genetics_observation_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* DiagnosticReportItem::mutable_genetics_observation() {
  
  if (genetics_observation_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    genetics_observation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportItem.genetics_observation)
  return genetics_observation_;
}
inline void DiagnosticReportItem::set_allocated_genetics_observation(::google::fhir::stu3::proto::Reference* genetics_observation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(genetics_observation_);
  }
  if (genetics_observation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      genetics_observation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, genetics_observation, submessage_arena);
    }
    
  } else {
    
  }
  genetics_observation_ = genetics_observation;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportItem.genetics_observation)
}

// .google.fhir.stu3.proto.Reference specimen = 6;
inline bool DiagnosticReportItem::has_specimen() const {
  return this != internal_default_instance() && specimen_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& DiagnosticReportItem::_internal_specimen() const {
  return *specimen_;
}
inline const ::google::fhir::stu3::proto::Reference& DiagnosticReportItem::specimen() const {
  const ::google::fhir::stu3::proto::Reference* p = specimen_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportItem.specimen)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* DiagnosticReportItem::release_specimen() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportItem.specimen)
  
  ::google::fhir::stu3::proto::Reference* temp = specimen_;
  specimen_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* DiagnosticReportItem::mutable_specimen() {
  
  if (specimen_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    specimen_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportItem.specimen)
  return specimen_;
}
inline void DiagnosticReportItem::set_allocated_specimen(::google::fhir::stu3::proto::Reference* specimen) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(specimen_);
  }
  if (specimen) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      specimen = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, specimen, submessage_arena);
    }
    
  } else {
    
  }
  specimen_ = specimen;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportItem.specimen)
}

// .google.fhir.stu3.proto.Code status = 7;
inline bool DiagnosticReportItem::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline const ::google::fhir::stu3::proto::Code& DiagnosticReportItem::_internal_status() const {
  return *status_;
}
inline const ::google::fhir::stu3::proto::Code& DiagnosticReportItem::status() const {
  const ::google::fhir::stu3::proto::Code* p = status_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DiagnosticReportItem.status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Code*>(
      &::google::fhir::stu3::proto::_Code_default_instance_);
}
inline ::google::fhir::stu3::proto::Code* DiagnosticReportItem::release_status() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DiagnosticReportItem.status)
  
  ::google::fhir::stu3::proto::Code* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Code* DiagnosticReportItem::mutable_status() {
  
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Code>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DiagnosticReportItem.status)
  return status_;
}
inline void DiagnosticReportItem::set_allocated_status(::google::fhir::stu3::proto::Code* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DiagnosticReportItem.status)
}

// -------------------------------------------------------------------

// ProcedureRequestPrecondition

// .google.fhir.stu3.proto.String id = 1;
inline bool ProcedureRequestPrecondition::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ProcedureRequestPrecondition::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ProcedureRequestPrecondition::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureRequestPrecondition.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ProcedureRequestPrecondition::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureRequestPrecondition.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ProcedureRequestPrecondition::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureRequestPrecondition.id)
  return id_;
}
inline void ProcedureRequestPrecondition::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureRequestPrecondition.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ProcedureRequestPrecondition::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ProcedureRequestPrecondition::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ProcedureRequestPrecondition::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureRequestPrecondition.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ProcedureRequestPrecondition::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureRequestPrecondition.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ProcedureRequestPrecondition::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureRequestPrecondition.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ProcedureRequestPrecondition::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureRequestPrecondition.value_codeable_concept)
}

// -------------------------------------------------------------------

// ProcedureRequestQuestionnaireRequest

// .google.fhir.stu3.proto.String id = 1;
inline bool ProcedureRequestQuestionnaireRequest::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ProcedureRequestQuestionnaireRequest::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ProcedureRequestQuestionnaireRequest::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureRequestQuestionnaireRequest.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ProcedureRequestQuestionnaireRequest::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureRequestQuestionnaireRequest.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ProcedureRequestQuestionnaireRequest::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureRequestQuestionnaireRequest.id)
  return id_;
}
inline void ProcedureRequestQuestionnaireRequest::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureRequestQuestionnaireRequest.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Questionnaire"];
inline bool ProcedureRequestQuestionnaireRequest::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& ProcedureRequestQuestionnaireRequest::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& ProcedureRequestQuestionnaireRequest::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureRequestQuestionnaireRequest.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ProcedureRequestQuestionnaireRequest::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureRequestQuestionnaireRequest.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* ProcedureRequestQuestionnaireRequest::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureRequestQuestionnaireRequest.value_reference)
  return value_reference_;
}
inline void ProcedureRequestQuestionnaireRequest::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureRequestQuestionnaireRequest.value_reference)
}

// -------------------------------------------------------------------

// ProcedureRequestReasonRefused

// .google.fhir.stu3.proto.String id = 1;
inline bool ProcedureRequestReasonRefused::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ProcedureRequestReasonRefused::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ProcedureRequestReasonRefused::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureRequestReasonRefused.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ProcedureRequestReasonRefused::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureRequestReasonRefused.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ProcedureRequestReasonRefused::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureRequestReasonRefused.id)
  return id_;
}
inline void ProcedureRequestReasonRefused::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureRequestReasonRefused.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ProcedureRequestReasonRefused::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ProcedureRequestReasonRefused::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ProcedureRequestReasonRefused::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureRequestReasonRefused.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ProcedureRequestReasonRefused::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureRequestReasonRefused.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ProcedureRequestReasonRefused::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureRequestReasonRefused.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ProcedureRequestReasonRefused::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureRequestReasonRefused.value_codeable_concept)
}

// -------------------------------------------------------------------

// ProcedureRequestReasonRejected

// .google.fhir.stu3.proto.String id = 1;
inline bool ProcedureRequestReasonRejected::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ProcedureRequestReasonRejected::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ProcedureRequestReasonRejected::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureRequestReasonRejected.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ProcedureRequestReasonRejected::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureRequestReasonRejected.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ProcedureRequestReasonRejected::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureRequestReasonRejected.id)
  return id_;
}
inline void ProcedureRequestReasonRejected::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureRequestReasonRejected.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ProcedureRequestReasonRejected::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ProcedureRequestReasonRejected::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ProcedureRequestReasonRejected::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureRequestReasonRejected.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ProcedureRequestReasonRejected::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureRequestReasonRejected.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ProcedureRequestReasonRejected::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureRequestReasonRejected.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ProcedureRequestReasonRejected::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureRequestReasonRejected.value_codeable_concept)
}

// -------------------------------------------------------------------

// ProcedureRequestTargetBodySite

// .google.fhir.stu3.proto.String id = 1;
inline bool ProcedureRequestTargetBodySite::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ProcedureRequestTargetBodySite::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ProcedureRequestTargetBodySite::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureRequestTargetBodySite.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ProcedureRequestTargetBodySite::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureRequestTargetBodySite.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ProcedureRequestTargetBodySite::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureRequestTargetBodySite.id)
  return id_;
}
inline void ProcedureRequestTargetBodySite::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureRequestTargetBodySite.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/BodySite"];
inline bool ProcedureRequestTargetBodySite::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& ProcedureRequestTargetBodySite::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& ProcedureRequestTargetBodySite::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ProcedureRequestTargetBodySite.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ProcedureRequestTargetBodySite::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ProcedureRequestTargetBodySite.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* ProcedureRequestTargetBodySite::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ProcedureRequestTargetBodySite.value_reference)
  return value_reference_;
}
inline void ProcedureRequestTargetBodySite::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ProcedureRequestTargetBodySite.value_reference)
}

// -------------------------------------------------------------------

// QuestionnaireAllowedProfile

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireAllowedProfile::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireAllowedProfile::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireAllowedProfile::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireAllowedProfile.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireAllowedProfile::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireAllowedProfile.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireAllowedProfile::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireAllowedProfile.id)
  return id_;
}
inline void QuestionnaireAllowedProfile::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireAllowedProfile.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/StructureDefinition"];
inline bool QuestionnaireAllowedProfile::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& QuestionnaireAllowedProfile::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& QuestionnaireAllowedProfile::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireAllowedProfile.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* QuestionnaireAllowedProfile::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireAllowedProfile.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* QuestionnaireAllowedProfile::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireAllowedProfile.value_reference)
  return value_reference_;
}
inline void QuestionnaireAllowedProfile::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireAllowedProfile.value_reference)
}

// -------------------------------------------------------------------

// QuestionnaireAllowedResource

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireAllowedResource::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireAllowedResource::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireAllowedResource::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireAllowedResource.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireAllowedResource::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireAllowedResource.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireAllowedResource::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireAllowedResource.id)
  return id_;
}
inline void QuestionnaireAllowedResource::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireAllowedResource.id)
}

// .google.fhir.stu3.proto.ResourceTypeCode value_code = 3;
inline bool QuestionnaireAllowedResource::has_value_code() const {
  return this != internal_default_instance() && value_code_ != NULL;
}
inline const ::google::fhir::stu3::proto::ResourceTypeCode& QuestionnaireAllowedResource::_internal_value_code() const {
  return *value_code_;
}
inline const ::google::fhir::stu3::proto::ResourceTypeCode& QuestionnaireAllowedResource::value_code() const {
  const ::google::fhir::stu3::proto::ResourceTypeCode* p = value_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireAllowedResource.value_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::ResourceTypeCode*>(
      &::google::fhir::stu3::proto::_ResourceTypeCode_default_instance_);
}
inline ::google::fhir::stu3::proto::ResourceTypeCode* QuestionnaireAllowedResource::release_value_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireAllowedResource.value_code)
  
  ::google::fhir::stu3::proto::ResourceTypeCode* temp = value_code_;
  value_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::ResourceTypeCode* QuestionnaireAllowedResource::mutable_value_code() {
  
  if (value_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::ResourceTypeCode>(GetArenaNoVirtual());
    value_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireAllowedResource.value_code)
  return value_code_;
}
inline void QuestionnaireAllowedResource::set_allocated_value_code(::google::fhir::stu3::proto::ResourceTypeCode* value_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_code_);
  }
  if (value_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_code, submessage_arena);
    }
    
  } else {
    
  }
  value_code_ = value_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireAllowedResource.value_code)
}

// -------------------------------------------------------------------

// QuestionnaireBaseType

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireBaseType::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireBaseType::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireBaseType::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireBaseType.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireBaseType::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireBaseType.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireBaseType::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireBaseType.id)
  return id_;
}
inline void QuestionnaireBaseType::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireBaseType.id)
}

// .google.fhir.stu3.proto.DataTypeCode value_code = 3;
inline bool QuestionnaireBaseType::has_value_code() const {
  return this != internal_default_instance() && value_code_ != NULL;
}
inline const ::google::fhir::stu3::proto::DataTypeCode& QuestionnaireBaseType::_internal_value_code() const {
  return *value_code_;
}
inline const ::google::fhir::stu3::proto::DataTypeCode& QuestionnaireBaseType::value_code() const {
  const ::google::fhir::stu3::proto::DataTypeCode* p = value_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireBaseType.value_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::DataTypeCode*>(
      &::google::fhir::stu3::proto::_DataTypeCode_default_instance_);
}
inline ::google::fhir::stu3::proto::DataTypeCode* QuestionnaireBaseType::release_value_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireBaseType.value_code)
  
  ::google::fhir::stu3::proto::DataTypeCode* temp = value_code_;
  value_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::DataTypeCode* QuestionnaireBaseType::mutable_value_code() {
  
  if (value_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::DataTypeCode>(GetArenaNoVirtual());
    value_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireBaseType.value_code)
  return value_code_;
}
inline void QuestionnaireBaseType::set_allocated_value_code(::google::fhir::stu3::proto::DataTypeCode* value_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_code_);
  }
  if (value_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_code, submessage_arena);
    }
    
  } else {
    
  }
  value_code_ = value_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireBaseType.value_code)
}

// -------------------------------------------------------------------

// QuestionnaireChoiceOrientation

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireChoiceOrientation::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireChoiceOrientation::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireChoiceOrientation::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireChoiceOrientation.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireChoiceOrientation::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireChoiceOrientation.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireChoiceOrientation::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireChoiceOrientation.id)
  return id_;
}
inline void QuestionnaireChoiceOrientation::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireChoiceOrientation.id)
}

// .google.fhir.stu3.proto.ChoiceListOrientationCode value_code = 3;
inline bool QuestionnaireChoiceOrientation::has_value_code() const {
  return this != internal_default_instance() && value_code_ != NULL;
}
inline const ::google::fhir::stu3::proto::ChoiceListOrientationCode& QuestionnaireChoiceOrientation::_internal_value_code() const {
  return *value_code_;
}
inline const ::google::fhir::stu3::proto::ChoiceListOrientationCode& QuestionnaireChoiceOrientation::value_code() const {
  const ::google::fhir::stu3::proto::ChoiceListOrientationCode* p = value_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireChoiceOrientation.value_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::ChoiceListOrientationCode*>(
      &::google::fhir::stu3::proto::_ChoiceListOrientationCode_default_instance_);
}
inline ::google::fhir::stu3::proto::ChoiceListOrientationCode* QuestionnaireChoiceOrientation::release_value_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireChoiceOrientation.value_code)
  
  ::google::fhir::stu3::proto::ChoiceListOrientationCode* temp = value_code_;
  value_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::ChoiceListOrientationCode* QuestionnaireChoiceOrientation::mutable_value_code() {
  
  if (value_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::ChoiceListOrientationCode>(GetArenaNoVirtual());
    value_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireChoiceOrientation.value_code)
  return value_code_;
}
inline void QuestionnaireChoiceOrientation::set_allocated_value_code(::google::fhir::stu3::proto::ChoiceListOrientationCode* value_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_code_);
  }
  if (value_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_code, submessage_arena);
    }
    
  } else {
    
  }
  value_code_ = value_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireChoiceOrientation.value_code)
}

// -------------------------------------------------------------------

// QuestionnaireDeMap

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireDeMap::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireDeMap::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireDeMap::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireDeMap.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireDeMap::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireDeMap.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireDeMap::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireDeMap.id)
  return id_;
}
inline void QuestionnaireDeMap::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireDeMap.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ConceptMap"];
inline bool QuestionnaireDeMap::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& QuestionnaireDeMap::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& QuestionnaireDeMap::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireDeMap.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* QuestionnaireDeMap::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireDeMap.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* QuestionnaireDeMap::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireDeMap.value_reference)
  return value_reference_;
}
inline void QuestionnaireDeMap::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireDeMap.value_reference)
}

// -------------------------------------------------------------------

// QuestionnaireDisplayCategory

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireDisplayCategory::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireDisplayCategory::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireDisplayCategory::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireDisplayCategory.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireDisplayCategory::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireDisplayCategory.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireDisplayCategory::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireDisplayCategory.id)
  return id_;
}
inline void QuestionnaireDisplayCategory::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireDisplayCategory.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool QuestionnaireDisplayCategory::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& QuestionnaireDisplayCategory::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& QuestionnaireDisplayCategory::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireDisplayCategory.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* QuestionnaireDisplayCategory::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireDisplayCategory.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* QuestionnaireDisplayCategory::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireDisplayCategory.value_codeable_concept)
  return value_codeable_concept_;
}
inline void QuestionnaireDisplayCategory::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireDisplayCategory.value_codeable_concept)
}

// -------------------------------------------------------------------

// QuestionnaireFhirType

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireFhirType::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireFhirType::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireFhirType::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireFhirType.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireFhirType::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireFhirType.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireFhirType::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireFhirType.id)
  return id_;
}
inline void QuestionnaireFhirType::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireFhirType.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool QuestionnaireFhirType::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireFhirType::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireFhirType::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireFhirType.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireFhirType::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireFhirType.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireFhirType::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireFhirType.value_string)
  return value_string_;
}
inline void QuestionnaireFhirType::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireFhirType.value_string)
}

// -------------------------------------------------------------------

// QuestionnaireHidden

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireHidden::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireHidden::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireHidden::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireHidden.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireHidden::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireHidden.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireHidden::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireHidden.id)
  return id_;
}
inline void QuestionnaireHidden::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireHidden.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool QuestionnaireHidden::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& QuestionnaireHidden::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& QuestionnaireHidden::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireHidden.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* QuestionnaireHidden::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireHidden.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* QuestionnaireHidden::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireHidden.value_boolean)
  return value_boolean_;
}
inline void QuestionnaireHidden::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireHidden.value_boolean)
}

// -------------------------------------------------------------------

// QuestionnaireItemControl

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireItemControl::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireItemControl::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireItemControl::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireItemControl.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireItemControl::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireItemControl.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireItemControl::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireItemControl.id)
  return id_;
}
inline void QuestionnaireItemControl::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireItemControl.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool QuestionnaireItemControl::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& QuestionnaireItemControl::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& QuestionnaireItemControl::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireItemControl.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* QuestionnaireItemControl::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireItemControl.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* QuestionnaireItemControl::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireItemControl.value_codeable_concept)
  return value_codeable_concept_;
}
inline void QuestionnaireItemControl::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireItemControl.value_codeable_concept)
}

// -------------------------------------------------------------------

// QuestionnaireLookupQuestionnaire

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireLookupQuestionnaire::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireLookupQuestionnaire::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireLookupQuestionnaire::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireLookupQuestionnaire.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireLookupQuestionnaire::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireLookupQuestionnaire.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireLookupQuestionnaire::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireLookupQuestionnaire.id)
  return id_;
}
inline void QuestionnaireLookupQuestionnaire::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireLookupQuestionnaire.id)
}

// .google.fhir.stu3.proto.Uri value_uri = 3;
inline bool QuestionnaireLookupQuestionnaire::has_value_uri() const {
  return this != internal_default_instance() && value_uri_ != NULL;
}
inline const ::google::fhir::stu3::proto::Uri& QuestionnaireLookupQuestionnaire::_internal_value_uri() const {
  return *value_uri_;
}
inline const ::google::fhir::stu3::proto::Uri& QuestionnaireLookupQuestionnaire::value_uri() const {
  const ::google::fhir::stu3::proto::Uri* p = value_uri_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireLookupQuestionnaire.value_uri)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* QuestionnaireLookupQuestionnaire::release_value_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireLookupQuestionnaire.value_uri)
  
  ::google::fhir::stu3::proto::Uri* temp = value_uri_;
  value_uri_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* QuestionnaireLookupQuestionnaire::mutable_value_uri() {
  
  if (value_uri_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    value_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireLookupQuestionnaire.value_uri)
  return value_uri_;
}
inline void QuestionnaireLookupQuestionnaire::set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_uri_);
  }
  if (value_uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_uri, submessage_arena);
    }
    
  } else {
    
  }
  value_uri_ = value_uri;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireLookupQuestionnaire.value_uri)
}

// -------------------------------------------------------------------

// QuestionnaireMaxOccurs

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireMaxOccurs::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireMaxOccurs::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireMaxOccurs::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireMaxOccurs.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireMaxOccurs::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireMaxOccurs.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireMaxOccurs::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireMaxOccurs.id)
  return id_;
}
inline void QuestionnaireMaxOccurs::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireMaxOccurs.id)
}

// .google.fhir.stu3.proto.Integer value_integer = 3;
inline bool QuestionnaireMaxOccurs::has_value_integer() const {
  return this != internal_default_instance() && value_integer_ != NULL;
}
inline const ::google::fhir::stu3::proto::Integer& QuestionnaireMaxOccurs::_internal_value_integer() const {
  return *value_integer_;
}
inline const ::google::fhir::stu3::proto::Integer& QuestionnaireMaxOccurs::value_integer() const {
  const ::google::fhir::stu3::proto::Integer* p = value_integer_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireMaxOccurs.value_integer)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Integer*>(
      &::google::fhir::stu3::proto::_Integer_default_instance_);
}
inline ::google::fhir::stu3::proto::Integer* QuestionnaireMaxOccurs::release_value_integer() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireMaxOccurs.value_integer)
  
  ::google::fhir::stu3::proto::Integer* temp = value_integer_;
  value_integer_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Integer* QuestionnaireMaxOccurs::mutable_value_integer() {
  
  if (value_integer_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Integer>(GetArenaNoVirtual());
    value_integer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireMaxOccurs.value_integer)
  return value_integer_;
}
inline void QuestionnaireMaxOccurs::set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_integer_);
  }
  if (value_integer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_integer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_integer, submessage_arena);
    }
    
  } else {
    
  }
  value_integer_ = value_integer;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireMaxOccurs.value_integer)
}

// -------------------------------------------------------------------

// QuestionnaireMinOccurs

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireMinOccurs::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireMinOccurs::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireMinOccurs::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireMinOccurs.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireMinOccurs::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireMinOccurs.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireMinOccurs::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireMinOccurs.id)
  return id_;
}
inline void QuestionnaireMinOccurs::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireMinOccurs.id)
}

// .google.fhir.stu3.proto.Integer value_integer = 3;
inline bool QuestionnaireMinOccurs::has_value_integer() const {
  return this != internal_default_instance() && value_integer_ != NULL;
}
inline const ::google::fhir::stu3::proto::Integer& QuestionnaireMinOccurs::_internal_value_integer() const {
  return *value_integer_;
}
inline const ::google::fhir::stu3::proto::Integer& QuestionnaireMinOccurs::value_integer() const {
  const ::google::fhir::stu3::proto::Integer* p = value_integer_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireMinOccurs.value_integer)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Integer*>(
      &::google::fhir::stu3::proto::_Integer_default_instance_);
}
inline ::google::fhir::stu3::proto::Integer* QuestionnaireMinOccurs::release_value_integer() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireMinOccurs.value_integer)
  
  ::google::fhir::stu3::proto::Integer* temp = value_integer_;
  value_integer_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Integer* QuestionnaireMinOccurs::mutable_value_integer() {
  
  if (value_integer_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Integer>(GetArenaNoVirtual());
    value_integer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireMinOccurs.value_integer)
  return value_integer_;
}
inline void QuestionnaireMinOccurs::set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_integer_);
  }
  if (value_integer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_integer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_integer, submessage_arena);
    }
    
  } else {
    
  }
  value_integer_ = value_integer;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireMinOccurs.value_integer)
}

// -------------------------------------------------------------------

// QuestionnaireOptionExclusive

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireOptionExclusive::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireOptionExclusive::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireOptionExclusive::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireOptionExclusive.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireOptionExclusive::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireOptionExclusive.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireOptionExclusive::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireOptionExclusive.id)
  return id_;
}
inline void QuestionnaireOptionExclusive::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireOptionExclusive.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool QuestionnaireOptionExclusive::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& QuestionnaireOptionExclusive::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& QuestionnaireOptionExclusive::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireOptionExclusive.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* QuestionnaireOptionExclusive::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireOptionExclusive.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* QuestionnaireOptionExclusive::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireOptionExclusive.value_boolean)
  return value_boolean_;
}
inline void QuestionnaireOptionExclusive::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireOptionExclusive.value_boolean)
}

// -------------------------------------------------------------------

// QuestionnaireOptionPrefix

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireOptionPrefix::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireOptionPrefix::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireOptionPrefix::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireOptionPrefix.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireOptionPrefix::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireOptionPrefix.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireOptionPrefix::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireOptionPrefix.id)
  return id_;
}
inline void QuestionnaireOptionPrefix::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireOptionPrefix.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool QuestionnaireOptionPrefix::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireOptionPrefix::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireOptionPrefix::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireOptionPrefix.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireOptionPrefix::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireOptionPrefix.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireOptionPrefix::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireOptionPrefix.value_string)
  return value_string_;
}
inline void QuestionnaireOptionPrefix::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireOptionPrefix.value_string)
}

// -------------------------------------------------------------------

// QuestionnaireOrdinalValue

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireOrdinalValue::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireOrdinalValue::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireOrdinalValue::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireOrdinalValue.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireOrdinalValue::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireOrdinalValue.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireOrdinalValue::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireOrdinalValue.id)
  return id_;
}
inline void QuestionnaireOrdinalValue::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireOrdinalValue.id)
}

// .google.fhir.stu3.proto.Decimal value_decimal = 3;
inline bool QuestionnaireOrdinalValue::has_value_decimal() const {
  return this != internal_default_instance() && value_decimal_ != NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& QuestionnaireOrdinalValue::_internal_value_decimal() const {
  return *value_decimal_;
}
inline const ::google::fhir::stu3::proto::Decimal& QuestionnaireOrdinalValue::value_decimal() const {
  const ::google::fhir::stu3::proto::Decimal* p = value_decimal_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireOrdinalValue.value_decimal)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* QuestionnaireOrdinalValue::release_value_decimal() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireOrdinalValue.value_decimal)
  
  ::google::fhir::stu3::proto::Decimal* temp = value_decimal_;
  value_decimal_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* QuestionnaireOrdinalValue::mutable_value_decimal() {
  
  if (value_decimal_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    value_decimal_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireOrdinalValue.value_decimal)
  return value_decimal_;
}
inline void QuestionnaireOrdinalValue::set_allocated_value_decimal(::google::fhir::stu3::proto::Decimal* value_decimal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_decimal_);
  }
  if (value_decimal) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_decimal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_decimal, submessage_arena);
    }
    
  } else {
    
  }
  value_decimal_ = value_decimal;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireOrdinalValue.value_decimal)
}

// -------------------------------------------------------------------

// QuestionnaireReferenceFilter

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireReferenceFilter::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireReferenceFilter::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireReferenceFilter::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireReferenceFilter.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireReferenceFilter::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireReferenceFilter.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireReferenceFilter::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireReferenceFilter.id)
  return id_;
}
inline void QuestionnaireReferenceFilter::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireReferenceFilter.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool QuestionnaireReferenceFilter::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireReferenceFilter::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireReferenceFilter::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireReferenceFilter.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireReferenceFilter::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireReferenceFilter.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireReferenceFilter::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireReferenceFilter.value_string)
  return value_string_;
}
inline void QuestionnaireReferenceFilter::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireReferenceFilter.value_string)
}

// -------------------------------------------------------------------

// QuestionnaireSourceStructureMap

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireSourceStructureMap::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireSourceStructureMap::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireSourceStructureMap::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireSourceStructureMap.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireSourceStructureMap::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireSourceStructureMap.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireSourceStructureMap::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireSourceStructureMap.id)
  return id_;
}
inline void QuestionnaireSourceStructureMap::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireSourceStructureMap.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/StructureMap"];
inline bool QuestionnaireSourceStructureMap::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& QuestionnaireSourceStructureMap::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& QuestionnaireSourceStructureMap::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireSourceStructureMap.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* QuestionnaireSourceStructureMap::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireSourceStructureMap.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* QuestionnaireSourceStructureMap::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireSourceStructureMap.value_reference)
  return value_reference_;
}
inline void QuestionnaireSourceStructureMap::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireSourceStructureMap.value_reference)
}

// -------------------------------------------------------------------

// QuestionnaireStudyprotocolIdentifier

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireStudyprotocolIdentifier::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireStudyprotocolIdentifier::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireStudyprotocolIdentifier::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireStudyprotocolIdentifier.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireStudyprotocolIdentifier::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireStudyprotocolIdentifier.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireStudyprotocolIdentifier::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireStudyprotocolIdentifier.id)
  return id_;
}
inline void QuestionnaireStudyprotocolIdentifier::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireStudyprotocolIdentifier.id)
}

// .google.fhir.stu3.proto.Identifier value_identifier = 3;
inline bool QuestionnaireStudyprotocolIdentifier::has_value_identifier() const {
  return this != internal_default_instance() && value_identifier_ != NULL;
}
inline const ::google::fhir::stu3::proto::Identifier& QuestionnaireStudyprotocolIdentifier::_internal_value_identifier() const {
  return *value_identifier_;
}
inline const ::google::fhir::stu3::proto::Identifier& QuestionnaireStudyprotocolIdentifier::value_identifier() const {
  const ::google::fhir::stu3::proto::Identifier* p = value_identifier_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireStudyprotocolIdentifier.value_identifier)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Identifier*>(
      &::google::fhir::stu3::proto::_Identifier_default_instance_);
}
inline ::google::fhir::stu3::proto::Identifier* QuestionnaireStudyprotocolIdentifier::release_value_identifier() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireStudyprotocolIdentifier.value_identifier)
  
  ::google::fhir::stu3::proto::Identifier* temp = value_identifier_;
  value_identifier_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Identifier* QuestionnaireStudyprotocolIdentifier::mutable_value_identifier() {
  
  if (value_identifier_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Identifier>(GetArenaNoVirtual());
    value_identifier_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireStudyprotocolIdentifier.value_identifier)
  return value_identifier_;
}
inline void QuestionnaireStudyprotocolIdentifier::set_allocated_value_identifier(::google::fhir::stu3::proto::Identifier* value_identifier) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_identifier_);
  }
  if (value_identifier) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_identifier = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_identifier, submessage_arena);
    }
    
  } else {
    
  }
  value_identifier_ = value_identifier;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireStudyprotocolIdentifier.value_identifier)
}

// -------------------------------------------------------------------

// QuestionnaireSupportLink

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireSupportLink::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireSupportLink::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireSupportLink::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireSupportLink.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireSupportLink::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireSupportLink.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireSupportLink::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireSupportLink.id)
  return id_;
}
inline void QuestionnaireSupportLink::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireSupportLink.id)
}

// .google.fhir.stu3.proto.Uri value_uri = 3;
inline bool QuestionnaireSupportLink::has_value_uri() const {
  return this != internal_default_instance() && value_uri_ != NULL;
}
inline const ::google::fhir::stu3::proto::Uri& QuestionnaireSupportLink::_internal_value_uri() const {
  return *value_uri_;
}
inline const ::google::fhir::stu3::proto::Uri& QuestionnaireSupportLink::value_uri() const {
  const ::google::fhir::stu3::proto::Uri* p = value_uri_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireSupportLink.value_uri)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* QuestionnaireSupportLink::release_value_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireSupportLink.value_uri)
  
  ::google::fhir::stu3::proto::Uri* temp = value_uri_;
  value_uri_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* QuestionnaireSupportLink::mutable_value_uri() {
  
  if (value_uri_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    value_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireSupportLink.value_uri)
  return value_uri_;
}
inline void QuestionnaireSupportLink::set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_uri_);
  }
  if (value_uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_uri, submessage_arena);
    }
    
  } else {
    
  }
  value_uri_ = value_uri;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireSupportLink.value_uri)
}

// -------------------------------------------------------------------

// QuestionnaireTargetStructureMap

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireTargetStructureMap::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireTargetStructureMap::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireTargetStructureMap::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireTargetStructureMap.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireTargetStructureMap::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireTargetStructureMap.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireTargetStructureMap::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireTargetStructureMap.id)
  return id_;
}
inline void QuestionnaireTargetStructureMap::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireTargetStructureMap.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/StructureMap"];
inline bool QuestionnaireTargetStructureMap::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& QuestionnaireTargetStructureMap::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& QuestionnaireTargetStructureMap::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireTargetStructureMap.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* QuestionnaireTargetStructureMap::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireTargetStructureMap.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* QuestionnaireTargetStructureMap::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireTargetStructureMap.value_reference)
  return value_reference_;
}
inline void QuestionnaireTargetStructureMap::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireTargetStructureMap.value_reference)
}

// -------------------------------------------------------------------

// QuestionnaireUnit

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireUnit::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireUnit::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireUnit::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireUnit.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireUnit::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireUnit.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireUnit::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireUnit.id)
  return id_;
}
inline void QuestionnaireUnit::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireUnit.id)
}

// .google.fhir.stu3.proto.Coding value_coding = 3;
inline bool QuestionnaireUnit::has_value_coding() const {
  return this != internal_default_instance() && value_coding_ != NULL;
}
inline const ::google::fhir::stu3::proto::Coding& QuestionnaireUnit::_internal_value_coding() const {
  return *value_coding_;
}
inline const ::google::fhir::stu3::proto::Coding& QuestionnaireUnit::value_coding() const {
  const ::google::fhir::stu3::proto::Coding* p = value_coding_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireUnit.value_coding)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Coding*>(
      &::google::fhir::stu3::proto::_Coding_default_instance_);
}
inline ::google::fhir::stu3::proto::Coding* QuestionnaireUnit::release_value_coding() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireUnit.value_coding)
  
  ::google::fhir::stu3::proto::Coding* temp = value_coding_;
  value_coding_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Coding* QuestionnaireUnit::mutable_value_coding() {
  
  if (value_coding_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Coding>(GetArenaNoVirtual());
    value_coding_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireUnit.value_coding)
  return value_coding_;
}
inline void QuestionnaireUnit::set_allocated_value_coding(::google::fhir::stu3::proto::Coding* value_coding) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_coding_);
  }
  if (value_coding) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_coding = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_coding, submessage_arena);
    }
    
  } else {
    
  }
  value_coding_ = value_coding;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireUnit.value_coding)
}

// -------------------------------------------------------------------

// QuestionnaireUsageMode

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireUsageMode::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireUsageMode::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireUsageMode::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireUsageMode.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireUsageMode::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireUsageMode.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireUsageMode::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireUsageMode.id)
  return id_;
}
inline void QuestionnaireUsageMode::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireUsageMode.id)
}

// .google.fhir.stu3.proto.QuestionnaireItemUsageModeCode value_code = 3;
inline bool QuestionnaireUsageMode::has_value_code() const {
  return this != internal_default_instance() && value_code_ != NULL;
}
inline const ::google::fhir::stu3::proto::QuestionnaireItemUsageModeCode& QuestionnaireUsageMode::_internal_value_code() const {
  return *value_code_;
}
inline const ::google::fhir::stu3::proto::QuestionnaireItemUsageModeCode& QuestionnaireUsageMode::value_code() const {
  const ::google::fhir::stu3::proto::QuestionnaireItemUsageModeCode* p = value_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireUsageMode.value_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::QuestionnaireItemUsageModeCode*>(
      &::google::fhir::stu3::proto::_QuestionnaireItemUsageModeCode_default_instance_);
}
inline ::google::fhir::stu3::proto::QuestionnaireItemUsageModeCode* QuestionnaireUsageMode::release_value_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireUsageMode.value_code)
  
  ::google::fhir::stu3::proto::QuestionnaireItemUsageModeCode* temp = value_code_;
  value_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::QuestionnaireItemUsageModeCode* QuestionnaireUsageMode::mutable_value_code() {
  
  if (value_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireItemUsageModeCode>(GetArenaNoVirtual());
    value_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireUsageMode.value_code)
  return value_code_;
}
inline void QuestionnaireUsageMode::set_allocated_value_code(::google::fhir::stu3::proto::QuestionnaireItemUsageModeCode* value_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_code_);
  }
  if (value_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_code, submessage_arena);
    }
    
  } else {
    
  }
  value_code_ = value_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireUsageMode.value_code)
}

// -------------------------------------------------------------------

// QuestionnaireResponseAuthor_Value

// .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Patient", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/RelatedPerson", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Device", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner"];
inline bool QuestionnaireResponseAuthor_Value::has_reference() const {
  return value_case() == kReference;
}
inline void QuestionnaireResponseAuthor_Value::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline const ::google::fhir::stu3::proto::Reference& QuestionnaireResponseAuthor_Value::_internal_reference() const {
  return *value_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* QuestionnaireResponseAuthor_Value::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireResponseAuthor.Value.reference)
  if (has_reference()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Reference* temp = value_.reference_;
    value_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& QuestionnaireResponseAuthor_Value::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireResponseAuthor.Value.reference)
  return has_reference()
      ? *value_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* QuestionnaireResponseAuthor_Value::mutable_reference() {
  if (!has_reference()) {
    clear_value();
    set_has_reference();
    value_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireResponseAuthor.Value.reference)
  return value_.reference_;
}

inline bool QuestionnaireResponseAuthor_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void QuestionnaireResponseAuthor_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline QuestionnaireResponseAuthor_Value::ValueCase QuestionnaireResponseAuthor_Value::value_case() const {
  return QuestionnaireResponseAuthor_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// QuestionnaireResponseAuthor

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireResponseAuthor::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireResponseAuthor::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireResponseAuthor::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireResponseAuthor.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireResponseAuthor::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireResponseAuthor.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireResponseAuthor::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireResponseAuthor.id)
  return id_;
}
inline void QuestionnaireResponseAuthor::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireResponseAuthor.id)
}

// .google.fhir.stu3.proto.QuestionnaireResponseAuthor.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool QuestionnaireResponseAuthor::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void QuestionnaireResponseAuthor::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::QuestionnaireResponseAuthor_Value& QuestionnaireResponseAuthor::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::QuestionnaireResponseAuthor_Value& QuestionnaireResponseAuthor::value() const {
  const ::google::fhir::stu3::proto::QuestionnaireResponseAuthor_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireResponseAuthor.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::QuestionnaireResponseAuthor_Value*>(
      &::google::fhir::stu3::proto::_QuestionnaireResponseAuthor_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::QuestionnaireResponseAuthor_Value* QuestionnaireResponseAuthor::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireResponseAuthor.value)
  
  ::google::fhir::stu3::proto::QuestionnaireResponseAuthor_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::QuestionnaireResponseAuthor_Value* QuestionnaireResponseAuthor::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::QuestionnaireResponseAuthor_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireResponseAuthor.value)
  return value_;
}
inline void QuestionnaireResponseAuthor::set_allocated_value(::google::fhir::stu3::proto::QuestionnaireResponseAuthor_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireResponseAuthor.value)
}

// -------------------------------------------------------------------

// QuestionnaireResponseNote

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireResponseNote::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireResponseNote::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireResponseNote::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireResponseNote.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireResponseNote::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireResponseNote.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireResponseNote::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireResponseNote.id)
  return id_;
}
inline void QuestionnaireResponseNote::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireResponseNote.id)
}

// .google.fhir.stu3.proto.Annotation value_annotation = 3;
inline bool QuestionnaireResponseNote::has_value_annotation() const {
  return this != internal_default_instance() && value_annotation_ != NULL;
}
inline const ::google::fhir::stu3::proto::Annotation& QuestionnaireResponseNote::_internal_value_annotation() const {
  return *value_annotation_;
}
inline const ::google::fhir::stu3::proto::Annotation& QuestionnaireResponseNote::value_annotation() const {
  const ::google::fhir::stu3::proto::Annotation* p = value_annotation_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireResponseNote.value_annotation)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Annotation*>(
      &::google::fhir::stu3::proto::_Annotation_default_instance_);
}
inline ::google::fhir::stu3::proto::Annotation* QuestionnaireResponseNote::release_value_annotation() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireResponseNote.value_annotation)
  
  ::google::fhir::stu3::proto::Annotation* temp = value_annotation_;
  value_annotation_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Annotation* QuestionnaireResponseNote::mutable_value_annotation() {
  
  if (value_annotation_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Annotation>(GetArenaNoVirtual());
    value_annotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireResponseNote.value_annotation)
  return value_annotation_;
}
inline void QuestionnaireResponseNote::set_allocated_value_annotation(::google::fhir::stu3::proto::Annotation* value_annotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_annotation_);
  }
  if (value_annotation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_annotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_annotation, submessage_arena);
    }
    
  } else {
    
  }
  value_annotation_ = value_annotation;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireResponseNote.value_annotation)
}

// -------------------------------------------------------------------

// QuestionnaireResponseReason

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireResponseReason::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireResponseReason::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireResponseReason::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireResponseReason.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireResponseReason::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireResponseReason.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireResponseReason::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireResponseReason.id)
  return id_;
}
inline void QuestionnaireResponseReason::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireResponseReason.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool QuestionnaireResponseReason::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& QuestionnaireResponseReason::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& QuestionnaireResponseReason::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireResponseReason.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* QuestionnaireResponseReason::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireResponseReason.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* QuestionnaireResponseReason::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireResponseReason.value_codeable_concept)
  return value_codeable_concept_;
}
inline void QuestionnaireResponseReason::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireResponseReason.value_codeable_concept)
}

// -------------------------------------------------------------------

// QuestionnaireResponseReviewer

// .google.fhir.stu3.proto.String id = 1;
inline bool QuestionnaireResponseReviewer::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireResponseReviewer::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuestionnaireResponseReviewer::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireResponseReviewer.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuestionnaireResponseReviewer::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireResponseReviewer.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuestionnaireResponseReviewer::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireResponseReviewer.id)
  return id_;
}
inline void QuestionnaireResponseReviewer::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireResponseReviewer.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner"];
inline bool QuestionnaireResponseReviewer::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& QuestionnaireResponseReviewer::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& QuestionnaireResponseReviewer::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuestionnaireResponseReviewer.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* QuestionnaireResponseReviewer::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuestionnaireResponseReviewer.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* QuestionnaireResponseReviewer::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuestionnaireResponseReviewer.value_reference)
  return value_reference_;
}
inline void QuestionnaireResponseReviewer::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuestionnaireResponseReviewer.value_reference)
}

// -------------------------------------------------------------------

// ReferralRequestReasonRefused

// .google.fhir.stu3.proto.String id = 1;
inline bool ReferralRequestReasonRefused::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ReferralRequestReasonRefused::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ReferralRequestReasonRefused::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ReferralRequestReasonRefused.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ReferralRequestReasonRefused::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ReferralRequestReasonRefused.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ReferralRequestReasonRefused::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ReferralRequestReasonRefused.id)
  return id_;
}
inline void ReferralRequestReasonRefused::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ReferralRequestReasonRefused.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool ReferralRequestReasonRefused::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ReferralRequestReasonRefused::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& ReferralRequestReasonRefused::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ReferralRequestReasonRefused.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* ReferralRequestReasonRefused::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ReferralRequestReasonRefused.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* ReferralRequestReasonRefused::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ReferralRequestReasonRefused.value_codeable_concept)
  return value_codeable_concept_;
}
inline void ReferralRequestReasonRefused::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ReferralRequestReasonRefused.value_codeable_concept)
}

// -------------------------------------------------------------------

// Regex

// .google.fhir.stu3.proto.String id = 1;
inline bool Regex::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& Regex::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Regex::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Regex.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Regex::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Regex.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Regex::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Regex.id)
  return id_;
}
inline void Regex::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Regex.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool Regex::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& Regex::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& Regex::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Regex.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Regex::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Regex.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Regex::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Regex.value_string)
  return value_string_;
}
inline void Regex::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Regex.value_string)
}

// -------------------------------------------------------------------

// RenderedValue

// .google.fhir.stu3.proto.String id = 1;
inline bool RenderedValue::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& RenderedValue::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& RenderedValue::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.RenderedValue.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* RenderedValue::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.RenderedValue.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* RenderedValue::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.RenderedValue.id)
  return id_;
}
inline void RenderedValue::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.RenderedValue.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool RenderedValue::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& RenderedValue::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& RenderedValue::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.RenderedValue.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* RenderedValue::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.RenderedValue.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* RenderedValue::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.RenderedValue.value_string)
  return value_string_;
}
inline void RenderedValue::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.RenderedValue.value_string)
}

// -------------------------------------------------------------------

// StringMarkdown

// .google.fhir.stu3.proto.String id = 1;
inline bool StringMarkdown::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& StringMarkdown::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& StringMarkdown::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StringMarkdown.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* StringMarkdown::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StringMarkdown.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* StringMarkdown::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StringMarkdown.id)
  return id_;
}
inline void StringMarkdown::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StringMarkdown.id)
}

// .google.fhir.stu3.proto.Markdown value_markdown = 3;
inline bool StringMarkdown::has_value_markdown() const {
  return this != internal_default_instance() && value_markdown_ != NULL;
}
inline const ::google::fhir::stu3::proto::Markdown& StringMarkdown::_internal_value_markdown() const {
  return *value_markdown_;
}
inline const ::google::fhir::stu3::proto::Markdown& StringMarkdown::value_markdown() const {
  const ::google::fhir::stu3::proto::Markdown* p = value_markdown_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StringMarkdown.value_markdown)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Markdown*>(
      &::google::fhir::stu3::proto::_Markdown_default_instance_);
}
inline ::google::fhir::stu3::proto::Markdown* StringMarkdown::release_value_markdown() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StringMarkdown.value_markdown)
  
  ::google::fhir::stu3::proto::Markdown* temp = value_markdown_;
  value_markdown_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Markdown* StringMarkdown::mutable_value_markdown() {
  
  if (value_markdown_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Markdown>(GetArenaNoVirtual());
    value_markdown_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StringMarkdown.value_markdown)
  return value_markdown_;
}
inline void StringMarkdown::set_allocated_value_markdown(::google::fhir::stu3::proto::Markdown* value_markdown) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_markdown_);
  }
  if (value_markdown) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_markdown = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_markdown, submessage_arena);
    }
    
  } else {
    
  }
  value_markdown_ = value_markdown;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StringMarkdown.value_markdown)
}

// -------------------------------------------------------------------

// Style

// .google.fhir.stu3.proto.String id = 1;
inline bool Style::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& Style::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Style::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Style.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Style::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Style.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Style::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Style.id)
  return id_;
}
inline void Style::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Style.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool Style::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& Style::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& Style::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Style.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Style::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Style.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Style::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Style.value_string)
  return value_string_;
}
inline void Style::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Style.value_string)
}

// -------------------------------------------------------------------

// StyleSensitive

// .google.fhir.stu3.proto.String id = 1;
inline bool StyleSensitive::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& StyleSensitive::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& StyleSensitive::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StyleSensitive.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* StyleSensitive::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StyleSensitive.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* StyleSensitive::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StyleSensitive.id)
  return id_;
}
inline void StyleSensitive::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StyleSensitive.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool StyleSensitive::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& StyleSensitive::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& StyleSensitive::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StyleSensitive.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* StyleSensitive::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StyleSensitive.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* StyleSensitive::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StyleSensitive.value_boolean)
  return value_boolean_;
}
inline void StyleSensitive::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StyleSensitive.value_boolean)
}

// -------------------------------------------------------------------

// StringXhtml

// .google.fhir.stu3.proto.String id = 1;
inline bool StringXhtml::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& StringXhtml::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& StringXhtml::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StringXhtml.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* StringXhtml::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StringXhtml.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* StringXhtml::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StringXhtml.id)
  return id_;
}
inline void StringXhtml::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StringXhtml.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool StringXhtml::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& StringXhtml::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& StringXhtml::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StringXhtml.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* StringXhtml::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StringXhtml.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* StringXhtml::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StringXhtml.value_string)
  return value_string_;
}
inline void StringXhtml::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StringXhtml.value_string)
}

// -------------------------------------------------------------------

// ApprovalDate

// .google.fhir.stu3.proto.String id = 1;
inline bool ApprovalDate::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ApprovalDate::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ApprovalDate::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ApprovalDate.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ApprovalDate::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ApprovalDate.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ApprovalDate::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ApprovalDate.id)
  return id_;
}
inline void ApprovalDate::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ApprovalDate.id)
}

// .google.fhir.stu3.proto.Date value_date = 3;
inline bool ApprovalDate::has_value_date() const {
  return this != internal_default_instance() && value_date_ != NULL;
}
inline const ::google::fhir::stu3::proto::Date& ApprovalDate::_internal_value_date() const {
  return *value_date_;
}
inline const ::google::fhir::stu3::proto::Date& ApprovalDate::value_date() const {
  const ::google::fhir::stu3::proto::Date* p = value_date_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ApprovalDate.value_date)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Date*>(
      &::google::fhir::stu3::proto::_Date_default_instance_);
}
inline ::google::fhir::stu3::proto::Date* ApprovalDate::release_value_date() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ApprovalDate.value_date)
  
  ::google::fhir::stu3::proto::Date* temp = value_date_;
  value_date_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Date* ApprovalDate::mutable_value_date() {
  
  if (value_date_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Date>(GetArenaNoVirtual());
    value_date_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ApprovalDate.value_date)
  return value_date_;
}
inline void ApprovalDate::set_allocated_value_date(::google::fhir::stu3::proto::Date* value_date) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_date_);
  }
  if (value_date) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_date = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_date, submessage_arena);
    }
    
  } else {
    
  }
  value_date_ = value_date;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ApprovalDate.value_date)
}

// -------------------------------------------------------------------

// EffectivePeriod

// .google.fhir.stu3.proto.String id = 1;
inline bool EffectivePeriod::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& EffectivePeriod::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& EffectivePeriod::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.EffectivePeriod.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* EffectivePeriod::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.EffectivePeriod.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* EffectivePeriod::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.EffectivePeriod.id)
  return id_;
}
inline void EffectivePeriod::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.EffectivePeriod.id)
}

// .google.fhir.stu3.proto.Period value_period = 3;
inline bool EffectivePeriod::has_value_period() const {
  return this != internal_default_instance() && value_period_ != NULL;
}
inline const ::google::fhir::stu3::proto::Period& EffectivePeriod::_internal_value_period() const {
  return *value_period_;
}
inline const ::google::fhir::stu3::proto::Period& EffectivePeriod::value_period() const {
  const ::google::fhir::stu3::proto::Period* p = value_period_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.EffectivePeriod.value_period)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Period*>(
      &::google::fhir::stu3::proto::_Period_default_instance_);
}
inline ::google::fhir::stu3::proto::Period* EffectivePeriod::release_value_period() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.EffectivePeriod.value_period)
  
  ::google::fhir::stu3::proto::Period* temp = value_period_;
  value_period_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Period* EffectivePeriod::mutable_value_period() {
  
  if (value_period_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Period>(GetArenaNoVirtual());
    value_period_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.EffectivePeriod.value_period)
  return value_period_;
}
inline void EffectivePeriod::set_allocated_value_period(::google::fhir::stu3::proto::Period* value_period) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_period_);
  }
  if (value_period) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_period = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_period, submessage_arena);
    }
    
  } else {
    
  }
  value_period_ = value_period;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.EffectivePeriod.value_period)
}

// -------------------------------------------------------------------

// LastReviewDate

// .google.fhir.stu3.proto.String id = 1;
inline bool LastReviewDate::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& LastReviewDate::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& LastReviewDate::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.LastReviewDate.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* LastReviewDate::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.LastReviewDate.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* LastReviewDate::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.LastReviewDate.id)
  return id_;
}
inline void LastReviewDate::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.LastReviewDate.id)
}

// .google.fhir.stu3.proto.Date value_date = 3;
inline bool LastReviewDate::has_value_date() const {
  return this != internal_default_instance() && value_date_ != NULL;
}
inline const ::google::fhir::stu3::proto::Date& LastReviewDate::_internal_value_date() const {
  return *value_date_;
}
inline const ::google::fhir::stu3::proto::Date& LastReviewDate::value_date() const {
  const ::google::fhir::stu3::proto::Date* p = value_date_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.LastReviewDate.value_date)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Date*>(
      &::google::fhir::stu3::proto::_Date_default_instance_);
}
inline ::google::fhir::stu3::proto::Date* LastReviewDate::release_value_date() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.LastReviewDate.value_date)
  
  ::google::fhir::stu3::proto::Date* temp = value_date_;
  value_date_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Date* LastReviewDate::mutable_value_date() {
  
  if (value_date_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Date>(GetArenaNoVirtual());
    value_date_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.LastReviewDate.value_date)
  return value_date_;
}
inline void LastReviewDate::set_allocated_value_date(::google::fhir::stu3::proto::Date* value_date) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_date_);
  }
  if (value_date) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_date = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_date, submessage_arena);
    }
    
  } else {
    
  }
  value_date_ = value_date;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.LastReviewDate.value_date)
}

// -------------------------------------------------------------------

// SpecimenCollectionPriority

// .google.fhir.stu3.proto.String id = 1;
inline bool SpecimenCollectionPriority::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& SpecimenCollectionPriority::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& SpecimenCollectionPriority::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SpecimenCollectionPriority.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* SpecimenCollectionPriority::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SpecimenCollectionPriority.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* SpecimenCollectionPriority::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SpecimenCollectionPriority.id)
  return id_;
}
inline void SpecimenCollectionPriority::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SpecimenCollectionPriority.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool SpecimenCollectionPriority::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& SpecimenCollectionPriority::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& SpecimenCollectionPriority::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SpecimenCollectionPriority.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* SpecimenCollectionPriority::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SpecimenCollectionPriority.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* SpecimenCollectionPriority::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SpecimenCollectionPriority.value_codeable_concept)
  return value_codeable_concept_;
}
inline void SpecimenCollectionPriority::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SpecimenCollectionPriority.value_codeable_concept)
}

// -------------------------------------------------------------------

// SpecimenIsDryWeight

// .google.fhir.stu3.proto.String id = 1;
inline bool SpecimenIsDryWeight::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& SpecimenIsDryWeight::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& SpecimenIsDryWeight::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SpecimenIsDryWeight.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* SpecimenIsDryWeight::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SpecimenIsDryWeight.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* SpecimenIsDryWeight::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SpecimenIsDryWeight.id)
  return id_;
}
inline void SpecimenIsDryWeight::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SpecimenIsDryWeight.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool SpecimenIsDryWeight::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& SpecimenIsDryWeight::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& SpecimenIsDryWeight::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SpecimenIsDryWeight.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* SpecimenIsDryWeight::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SpecimenIsDryWeight.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* SpecimenIsDryWeight::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SpecimenIsDryWeight.value_boolean)
  return value_boolean_;
}
inline void SpecimenIsDryWeight::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SpecimenIsDryWeight.value_boolean)
}

// -------------------------------------------------------------------

// SpecimenProcessingTime_Value

// .google.fhir.stu3.proto.Period period = 1;
inline bool SpecimenProcessingTime_Value::has_period() const {
  return value_case() == kPeriod;
}
inline void SpecimenProcessingTime_Value::set_has_period() {
  _oneof_case_[0] = kPeriod;
}
inline const ::google::fhir::stu3::proto::Period& SpecimenProcessingTime_Value::_internal_period() const {
  return *value_.period_;
}
inline ::google::fhir::stu3::proto::Period* SpecimenProcessingTime_Value::release_period() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SpecimenProcessingTime.Value.period)
  if (has_period()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Period* temp = value_.period_;
    value_.period_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Period& SpecimenProcessingTime_Value::period() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SpecimenProcessingTime.Value.period)
  return has_period()
      ? *value_.period_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Period*>(&::google::fhir::stu3::proto::_Period_default_instance_);
}
inline ::google::fhir::stu3::proto::Period* SpecimenProcessingTime_Value::mutable_period() {
  if (!has_period()) {
    clear_value();
    set_has_period();
    value_.period_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Period >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SpecimenProcessingTime.Value.period)
  return value_.period_;
}

// .google.fhir.stu3.proto.Duration duration = 2;
inline bool SpecimenProcessingTime_Value::has_duration() const {
  return value_case() == kDuration;
}
inline void SpecimenProcessingTime_Value::set_has_duration() {
  _oneof_case_[0] = kDuration;
}
inline const ::google::fhir::stu3::proto::Duration& SpecimenProcessingTime_Value::_internal_duration() const {
  return *value_.duration_;
}
inline ::google::fhir::stu3::proto::Duration* SpecimenProcessingTime_Value::release_duration() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SpecimenProcessingTime.Value.duration)
  if (has_duration()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Duration* temp = value_.duration_;
    value_.duration_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Duration& SpecimenProcessingTime_Value::duration() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SpecimenProcessingTime.Value.duration)
  return has_duration()
      ? *value_.duration_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Duration*>(&::google::fhir::stu3::proto::_Duration_default_instance_);
}
inline ::google::fhir::stu3::proto::Duration* SpecimenProcessingTime_Value::mutable_duration() {
  if (!has_duration()) {
    clear_value();
    set_has_duration();
    value_.duration_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Duration >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SpecimenProcessingTime.Value.duration)
  return value_.duration_;
}

inline bool SpecimenProcessingTime_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void SpecimenProcessingTime_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline SpecimenProcessingTime_Value::ValueCase SpecimenProcessingTime_Value::value_case() const {
  return SpecimenProcessingTime_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SpecimenProcessingTime

// .google.fhir.stu3.proto.String id = 1;
inline bool SpecimenProcessingTime::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& SpecimenProcessingTime::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& SpecimenProcessingTime::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SpecimenProcessingTime.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* SpecimenProcessingTime::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SpecimenProcessingTime.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* SpecimenProcessingTime::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SpecimenProcessingTime.id)
  return id_;
}
inline void SpecimenProcessingTime::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SpecimenProcessingTime.id)
}

// .google.fhir.stu3.proto.SpecimenProcessingTime.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool SpecimenProcessingTime::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void SpecimenProcessingTime::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::SpecimenProcessingTime_Value& SpecimenProcessingTime::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::SpecimenProcessingTime_Value& SpecimenProcessingTime::value() const {
  const ::google::fhir::stu3::proto::SpecimenProcessingTime_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SpecimenProcessingTime.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::SpecimenProcessingTime_Value*>(
      &::google::fhir::stu3::proto::_SpecimenProcessingTime_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::SpecimenProcessingTime_Value* SpecimenProcessingTime::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SpecimenProcessingTime.value)
  
  ::google::fhir::stu3::proto::SpecimenProcessingTime_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::SpecimenProcessingTime_Value* SpecimenProcessingTime::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::SpecimenProcessingTime_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SpecimenProcessingTime.value)
  return value_;
}
inline void SpecimenProcessingTime::set_allocated_value(::google::fhir::stu3::proto::SpecimenProcessingTime_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SpecimenProcessingTime.value)
}

// -------------------------------------------------------------------

// SpecimenSequenceNumber

// .google.fhir.stu3.proto.String id = 1;
inline bool SpecimenSequenceNumber::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& SpecimenSequenceNumber::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& SpecimenSequenceNumber::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SpecimenSequenceNumber.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* SpecimenSequenceNumber::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SpecimenSequenceNumber.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* SpecimenSequenceNumber::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SpecimenSequenceNumber.id)
  return id_;
}
inline void SpecimenSequenceNumber::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SpecimenSequenceNumber.id)
}

// .google.fhir.stu3.proto.Integer value_integer = 3;
inline bool SpecimenSequenceNumber::has_value_integer() const {
  return this != internal_default_instance() && value_integer_ != NULL;
}
inline const ::google::fhir::stu3::proto::Integer& SpecimenSequenceNumber::_internal_value_integer() const {
  return *value_integer_;
}
inline const ::google::fhir::stu3::proto::Integer& SpecimenSequenceNumber::value_integer() const {
  const ::google::fhir::stu3::proto::Integer* p = value_integer_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SpecimenSequenceNumber.value_integer)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Integer*>(
      &::google::fhir::stu3::proto::_Integer_default_instance_);
}
inline ::google::fhir::stu3::proto::Integer* SpecimenSequenceNumber::release_value_integer() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SpecimenSequenceNumber.value_integer)
  
  ::google::fhir::stu3::proto::Integer* temp = value_integer_;
  value_integer_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Integer* SpecimenSequenceNumber::mutable_value_integer() {
  
  if (value_integer_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Integer>(GetArenaNoVirtual());
    value_integer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SpecimenSequenceNumber.value_integer)
  return value_integer_;
}
inline void SpecimenSequenceNumber::set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_integer_);
  }
  if (value_integer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_integer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_integer, submessage_arena);
    }
    
  } else {
    
  }
  value_integer_ = value_integer;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SpecimenSequenceNumber.value_integer)
}

// -------------------------------------------------------------------

// SpecimenSpecialHandling

// .google.fhir.stu3.proto.String id = 1;
inline bool SpecimenSpecialHandling::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& SpecimenSpecialHandling::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& SpecimenSpecialHandling::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SpecimenSpecialHandling.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* SpecimenSpecialHandling::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SpecimenSpecialHandling.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* SpecimenSpecialHandling::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SpecimenSpecialHandling.id)
  return id_;
}
inline void SpecimenSpecialHandling::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SpecimenSpecialHandling.id)
}

// .google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
inline bool SpecimenSpecialHandling::has_value_codeable_concept() const {
  return this != internal_default_instance() && value_codeable_concept_ != NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& SpecimenSpecialHandling::_internal_value_codeable_concept() const {
  return *value_codeable_concept_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& SpecimenSpecialHandling::value_codeable_concept() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = value_codeable_concept_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SpecimenSpecialHandling.value_codeable_concept)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* SpecimenSpecialHandling::release_value_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SpecimenSpecialHandling.value_codeable_concept)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = value_codeable_concept_;
  value_codeable_concept_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* SpecimenSpecialHandling::mutable_value_codeable_concept() {
  
  if (value_codeable_concept_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    value_codeable_concept_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SpecimenSpecialHandling.value_codeable_concept)
  return value_codeable_concept_;
}
inline void SpecimenSpecialHandling::set_allocated_value_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* value_codeable_concept) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_codeable_concept_);
  }
  if (value_codeable_concept) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_codeable_concept = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_codeable_concept, submessage_arena);
    }
    
  } else {
    
  }
  value_codeable_concept_ = value_codeable_concept;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SpecimenSpecialHandling.value_codeable_concept)
}

// -------------------------------------------------------------------

// StructureDefinitionAncestor

// .google.fhir.stu3.proto.String id = 1;
inline bool StructureDefinitionAncestor::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& StructureDefinitionAncestor::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& StructureDefinitionAncestor::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StructureDefinitionAncestor.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* StructureDefinitionAncestor::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StructureDefinitionAncestor.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* StructureDefinitionAncestor::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StructureDefinitionAncestor.id)
  return id_;
}
inline void StructureDefinitionAncestor::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StructureDefinitionAncestor.id)
}

// .google.fhir.stu3.proto.Uri value_uri = 3;
inline bool StructureDefinitionAncestor::has_value_uri() const {
  return this != internal_default_instance() && value_uri_ != NULL;
}
inline const ::google::fhir::stu3::proto::Uri& StructureDefinitionAncestor::_internal_value_uri() const {
  return *value_uri_;
}
inline const ::google::fhir::stu3::proto::Uri& StructureDefinitionAncestor::value_uri() const {
  const ::google::fhir::stu3::proto::Uri* p = value_uri_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StructureDefinitionAncestor.value_uri)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* StructureDefinitionAncestor::release_value_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StructureDefinitionAncestor.value_uri)
  
  ::google::fhir::stu3::proto::Uri* temp = value_uri_;
  value_uri_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* StructureDefinitionAncestor::mutable_value_uri() {
  
  if (value_uri_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    value_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StructureDefinitionAncestor.value_uri)
  return value_uri_;
}
inline void StructureDefinitionAncestor::set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_uri_);
  }
  if (value_uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_uri, submessage_arena);
    }
    
  } else {
    
  }
  value_uri_ = value_uri;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StructureDefinitionAncestor.value_uri)
}

// -------------------------------------------------------------------

// StructureDefinitionAnnotation

// .google.fhir.stu3.proto.String id = 1;
inline bool StructureDefinitionAnnotation::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& StructureDefinitionAnnotation::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& StructureDefinitionAnnotation::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StructureDefinitionAnnotation.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* StructureDefinitionAnnotation::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StructureDefinitionAnnotation.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* StructureDefinitionAnnotation::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StructureDefinitionAnnotation.id)
  return id_;
}
inline void StructureDefinitionAnnotation::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StructureDefinitionAnnotation.id)
}

// .google.fhir.stu3.proto.Annotation value_annotation = 3;
inline bool StructureDefinitionAnnotation::has_value_annotation() const {
  return this != internal_default_instance() && value_annotation_ != NULL;
}
inline const ::google::fhir::stu3::proto::Annotation& StructureDefinitionAnnotation::_internal_value_annotation() const {
  return *value_annotation_;
}
inline const ::google::fhir::stu3::proto::Annotation& StructureDefinitionAnnotation::value_annotation() const {
  const ::google::fhir::stu3::proto::Annotation* p = value_annotation_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StructureDefinitionAnnotation.value_annotation)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Annotation*>(
      &::google::fhir::stu3::proto::_Annotation_default_instance_);
}
inline ::google::fhir::stu3::proto::Annotation* StructureDefinitionAnnotation::release_value_annotation() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StructureDefinitionAnnotation.value_annotation)
  
  ::google::fhir::stu3::proto::Annotation* temp = value_annotation_;
  value_annotation_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Annotation* StructureDefinitionAnnotation::mutable_value_annotation() {
  
  if (value_annotation_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Annotation>(GetArenaNoVirtual());
    value_annotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StructureDefinitionAnnotation.value_annotation)
  return value_annotation_;
}
inline void StructureDefinitionAnnotation::set_allocated_value_annotation(::google::fhir::stu3::proto::Annotation* value_annotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_annotation_);
  }
  if (value_annotation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_annotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_annotation, submessage_arena);
    }
    
  } else {
    
  }
  value_annotation_ = value_annotation;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StructureDefinitionAnnotation.value_annotation)
}

// -------------------------------------------------------------------

// BallotStatus

// .google.fhir.stu3.proto.String id = 1;
inline bool BallotStatus::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& BallotStatus::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& BallotStatus::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BallotStatus.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* BallotStatus::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BallotStatus.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* BallotStatus::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BallotStatus.id)
  return id_;
}
inline void BallotStatus::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BallotStatus.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool BallotStatus::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& BallotStatus::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& BallotStatus::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.BallotStatus.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* BallotStatus::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.BallotStatus.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* BallotStatus::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.BallotStatus.value_string)
  return value_string_;
}
inline void BallotStatus::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.BallotStatus.value_string)
}

// -------------------------------------------------------------------

// StructureDefinitionCategory

// .google.fhir.stu3.proto.String id = 1;
inline bool StructureDefinitionCategory::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& StructureDefinitionCategory::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& StructureDefinitionCategory::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StructureDefinitionCategory.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* StructureDefinitionCategory::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StructureDefinitionCategory.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* StructureDefinitionCategory::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StructureDefinitionCategory.id)
  return id_;
}
inline void StructureDefinitionCategory::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StructureDefinitionCategory.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool StructureDefinitionCategory::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& StructureDefinitionCategory::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& StructureDefinitionCategory::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StructureDefinitionCategory.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* StructureDefinitionCategory::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StructureDefinitionCategory.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* StructureDefinitionCategory::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StructureDefinitionCategory.value_string)
  return value_string_;
}
inline void StructureDefinitionCategory::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StructureDefinitionCategory.value_string)
}

// -------------------------------------------------------------------

// ElementDefinitionDisplayHint

// .google.fhir.stu3.proto.String id = 1;
inline bool ElementDefinitionDisplayHint::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionDisplayHint::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionDisplayHint::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionDisplayHint.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionDisplayHint::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionDisplayHint.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionDisplayHint::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionDisplayHint.id)
  return id_;
}
inline void ElementDefinitionDisplayHint::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionDisplayHint.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool ElementDefinitionDisplayHint::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionDisplayHint::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionDisplayHint::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionDisplayHint.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionDisplayHint::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionDisplayHint.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionDisplayHint::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionDisplayHint.value_string)
  return value_string_;
}
inline void ElementDefinitionDisplayHint::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionDisplayHint.value_string)
}

// -------------------------------------------------------------------

// ElementDefinitionExplicitTypeName

// .google.fhir.stu3.proto.String id = 1;
inline bool ElementDefinitionExplicitTypeName::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionExplicitTypeName::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionExplicitTypeName::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionExplicitTypeName.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionExplicitTypeName::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionExplicitTypeName.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionExplicitTypeName::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionExplicitTypeName.id)
  return id_;
}
inline void ElementDefinitionExplicitTypeName::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionExplicitTypeName.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool ElementDefinitionExplicitTypeName::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionExplicitTypeName::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionExplicitTypeName::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionExplicitTypeName.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionExplicitTypeName::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionExplicitTypeName.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionExplicitTypeName::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionExplicitTypeName.value_string)
  return value_string_;
}
inline void ElementDefinitionExplicitTypeName::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionExplicitTypeName.value_string)
}

// -------------------------------------------------------------------

// StructureDefinitionFmmNoWarnings

// .google.fhir.stu3.proto.String id = 1;
inline bool StructureDefinitionFmmNoWarnings::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& StructureDefinitionFmmNoWarnings::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& StructureDefinitionFmmNoWarnings::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StructureDefinitionFmmNoWarnings.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* StructureDefinitionFmmNoWarnings::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StructureDefinitionFmmNoWarnings.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* StructureDefinitionFmmNoWarnings::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StructureDefinitionFmmNoWarnings.id)
  return id_;
}
inline void StructureDefinitionFmmNoWarnings::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StructureDefinitionFmmNoWarnings.id)
}

// .google.fhir.stu3.proto.Integer value_integer = 3;
inline bool StructureDefinitionFmmNoWarnings::has_value_integer() const {
  return this != internal_default_instance() && value_integer_ != NULL;
}
inline const ::google::fhir::stu3::proto::Integer& StructureDefinitionFmmNoWarnings::_internal_value_integer() const {
  return *value_integer_;
}
inline const ::google::fhir::stu3::proto::Integer& StructureDefinitionFmmNoWarnings::value_integer() const {
  const ::google::fhir::stu3::proto::Integer* p = value_integer_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StructureDefinitionFmmNoWarnings.value_integer)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Integer*>(
      &::google::fhir::stu3::proto::_Integer_default_instance_);
}
inline ::google::fhir::stu3::proto::Integer* StructureDefinitionFmmNoWarnings::release_value_integer() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StructureDefinitionFmmNoWarnings.value_integer)
  
  ::google::fhir::stu3::proto::Integer* temp = value_integer_;
  value_integer_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Integer* StructureDefinitionFmmNoWarnings::mutable_value_integer() {
  
  if (value_integer_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Integer>(GetArenaNoVirtual());
    value_integer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StructureDefinitionFmmNoWarnings.value_integer)
  return value_integer_;
}
inline void StructureDefinitionFmmNoWarnings::set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_integer_);
  }
  if (value_integer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_integer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_integer, submessage_arena);
    }
    
  } else {
    
  }
  value_integer_ = value_integer;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StructureDefinitionFmmNoWarnings.value_integer)
}

// -------------------------------------------------------------------

// Fmm

// .google.fhir.stu3.proto.String id = 1;
inline bool Fmm::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& Fmm::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Fmm::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Fmm.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Fmm::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Fmm.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Fmm::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Fmm.id)
  return id_;
}
inline void Fmm::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Fmm.id)
}

// .google.fhir.stu3.proto.Integer value_integer = 3;
inline bool Fmm::has_value_integer() const {
  return this != internal_default_instance() && value_integer_ != NULL;
}
inline const ::google::fhir::stu3::proto::Integer& Fmm::_internal_value_integer() const {
  return *value_integer_;
}
inline const ::google::fhir::stu3::proto::Integer& Fmm::value_integer() const {
  const ::google::fhir::stu3::proto::Integer* p = value_integer_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Fmm.value_integer)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Integer*>(
      &::google::fhir::stu3::proto::_Integer_default_instance_);
}
inline ::google::fhir::stu3::proto::Integer* Fmm::release_value_integer() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Fmm.value_integer)
  
  ::google::fhir::stu3::proto::Integer* temp = value_integer_;
  value_integer_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Integer* Fmm::mutable_value_integer() {
  
  if (value_integer_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Integer>(GetArenaNoVirtual());
    value_integer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Fmm.value_integer)
  return value_integer_;
}
inline void Fmm::set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_integer_);
  }
  if (value_integer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_integer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_integer, submessage_arena);
    }
    
  } else {
    
  }
  value_integer_ = value_integer;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Fmm.value_integer)
}

// -------------------------------------------------------------------

// ElementDefinitionJsonType

// .google.fhir.stu3.proto.String id = 1;
inline bool ElementDefinitionJsonType::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionJsonType::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionJsonType::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionJsonType.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionJsonType::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionJsonType.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionJsonType::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionJsonType.id)
  return id_;
}
inline void ElementDefinitionJsonType::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionJsonType.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool ElementDefinitionJsonType::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionJsonType::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionJsonType::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionJsonType.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionJsonType::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionJsonType.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionJsonType::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionJsonType.value_string)
  return value_string_;
}
inline void ElementDefinitionJsonType::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionJsonType.value_string)
}

// -------------------------------------------------------------------

// ElementDefinitionRdfType

// .google.fhir.stu3.proto.String id = 1;
inline bool ElementDefinitionRdfType::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionRdfType::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionRdfType::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionRdfType.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionRdfType::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionRdfType.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionRdfType::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionRdfType.id)
  return id_;
}
inline void ElementDefinitionRdfType::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionRdfType.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool ElementDefinitionRdfType::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionRdfType::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionRdfType::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionRdfType.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionRdfType::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionRdfType.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionRdfType::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionRdfType.value_string)
  return value_string_;
}
inline void ElementDefinitionRdfType::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionRdfType.value_string)
}

// -------------------------------------------------------------------

// ElementDefinitionRegex

// .google.fhir.stu3.proto.String id = 1;
inline bool ElementDefinitionRegex::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionRegex::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionRegex::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionRegex.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionRegex::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionRegex.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionRegex::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionRegex.id)
  return id_;
}
inline void ElementDefinitionRegex::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionRegex.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool ElementDefinitionRegex::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionRegex::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionRegex::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionRegex.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionRegex::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionRegex.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionRegex::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionRegex.value_string)
  return value_string_;
}
inline void ElementDefinitionRegex::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionRegex.value_string)
}

// -------------------------------------------------------------------

// StructureDefinitionSummary

// .google.fhir.stu3.proto.String id = 1;
inline bool StructureDefinitionSummary::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& StructureDefinitionSummary::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& StructureDefinitionSummary::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StructureDefinitionSummary.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* StructureDefinitionSummary::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StructureDefinitionSummary.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* StructureDefinitionSummary::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StructureDefinitionSummary.id)
  return id_;
}
inline void StructureDefinitionSummary::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StructureDefinitionSummary.id)
}

// .google.fhir.stu3.proto.Markdown value_markdown = 3;
inline bool StructureDefinitionSummary::has_value_markdown() const {
  return this != internal_default_instance() && value_markdown_ != NULL;
}
inline const ::google::fhir::stu3::proto::Markdown& StructureDefinitionSummary::_internal_value_markdown() const {
  return *value_markdown_;
}
inline const ::google::fhir::stu3::proto::Markdown& StructureDefinitionSummary::value_markdown() const {
  const ::google::fhir::stu3::proto::Markdown* p = value_markdown_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StructureDefinitionSummary.value_markdown)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Markdown*>(
      &::google::fhir::stu3::proto::_Markdown_default_instance_);
}
inline ::google::fhir::stu3::proto::Markdown* StructureDefinitionSummary::release_value_markdown() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StructureDefinitionSummary.value_markdown)
  
  ::google::fhir::stu3::proto::Markdown* temp = value_markdown_;
  value_markdown_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Markdown* StructureDefinitionSummary::mutable_value_markdown() {
  
  if (value_markdown_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Markdown>(GetArenaNoVirtual());
    value_markdown_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StructureDefinitionSummary.value_markdown)
  return value_markdown_;
}
inline void StructureDefinitionSummary::set_allocated_value_markdown(::google::fhir::stu3::proto::Markdown* value_markdown) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_markdown_);
  }
  if (value_markdown) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_markdown = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_markdown, submessage_arena);
    }
    
  } else {
    
  }
  value_markdown_ = value_markdown;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StructureDefinitionSummary.value_markdown)
}

// -------------------------------------------------------------------

// StructureDefinitionTableName

// .google.fhir.stu3.proto.String id = 1;
inline bool StructureDefinitionTableName::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& StructureDefinitionTableName::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& StructureDefinitionTableName::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StructureDefinitionTableName.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* StructureDefinitionTableName::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StructureDefinitionTableName.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* StructureDefinitionTableName::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StructureDefinitionTableName.id)
  return id_;
}
inline void StructureDefinitionTableName::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StructureDefinitionTableName.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool StructureDefinitionTableName::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& StructureDefinitionTableName::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& StructureDefinitionTableName::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StructureDefinitionTableName.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* StructureDefinitionTableName::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StructureDefinitionTableName.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* StructureDefinitionTableName::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StructureDefinitionTableName.value_string)
  return value_string_;
}
inline void StructureDefinitionTableName::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StructureDefinitionTableName.value_string)
}

// -------------------------------------------------------------------

// StructureDefinitionTemplateStatus

// .google.fhir.stu3.proto.String id = 1;
inline bool StructureDefinitionTemplateStatus::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& StructureDefinitionTemplateStatus::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& StructureDefinitionTemplateStatus::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StructureDefinitionTemplateStatus.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* StructureDefinitionTemplateStatus::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StructureDefinitionTemplateStatus.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* StructureDefinitionTemplateStatus::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StructureDefinitionTemplateStatus.id)
  return id_;
}
inline void StructureDefinitionTemplateStatus::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StructureDefinitionTemplateStatus.id)
}

// .google.fhir.stu3.proto.TemplateStatusCodeCode value_code = 3;
inline bool StructureDefinitionTemplateStatus::has_value_code() const {
  return this != internal_default_instance() && value_code_ != NULL;
}
inline const ::google::fhir::stu3::proto::TemplateStatusCodeCode& StructureDefinitionTemplateStatus::_internal_value_code() const {
  return *value_code_;
}
inline const ::google::fhir::stu3::proto::TemplateStatusCodeCode& StructureDefinitionTemplateStatus::value_code() const {
  const ::google::fhir::stu3::proto::TemplateStatusCodeCode* p = value_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.StructureDefinitionTemplateStatus.value_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::TemplateStatusCodeCode*>(
      &::google::fhir::stu3::proto::_TemplateStatusCodeCode_default_instance_);
}
inline ::google::fhir::stu3::proto::TemplateStatusCodeCode* StructureDefinitionTemplateStatus::release_value_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.StructureDefinitionTemplateStatus.value_code)
  
  ::google::fhir::stu3::proto::TemplateStatusCodeCode* temp = value_code_;
  value_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::TemplateStatusCodeCode* StructureDefinitionTemplateStatus::mutable_value_code() {
  
  if (value_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::TemplateStatusCodeCode>(GetArenaNoVirtual());
    value_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.StructureDefinitionTemplateStatus.value_code)
  return value_code_;
}
inline void StructureDefinitionTemplateStatus::set_allocated_value_code(::google::fhir::stu3::proto::TemplateStatusCodeCode* value_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_code_);
  }
  if (value_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_code, submessage_arena);
    }
    
  } else {
    
  }
  value_code_ = value_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.StructureDefinitionTemplateStatus.value_code)
}

// -------------------------------------------------------------------

// Wg

// .google.fhir.stu3.proto.String id = 1;
inline bool Wg::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& Wg::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Wg::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Wg.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Wg::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Wg.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Wg::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Wg.id)
  return id_;
}
inline void Wg::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Wg.id)
}

// .google.fhir.stu3.proto.HL7WorkgroupCode value_code = 3;
inline bool Wg::has_value_code() const {
  return this != internal_default_instance() && value_code_ != NULL;
}
inline const ::google::fhir::stu3::proto::HL7WorkgroupCode& Wg::_internal_value_code() const {
  return *value_code_;
}
inline const ::google::fhir::stu3::proto::HL7WorkgroupCode& Wg::value_code() const {
  const ::google::fhir::stu3::proto::HL7WorkgroupCode* p = value_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Wg.value_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::HL7WorkgroupCode*>(
      &::google::fhir::stu3::proto::_HL7WorkgroupCode_default_instance_);
}
inline ::google::fhir::stu3::proto::HL7WorkgroupCode* Wg::release_value_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Wg.value_code)
  
  ::google::fhir::stu3::proto::HL7WorkgroupCode* temp = value_code_;
  value_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::HL7WorkgroupCode* Wg::mutable_value_code() {
  
  if (value_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::HL7WorkgroupCode>(GetArenaNoVirtual());
    value_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Wg.value_code)
  return value_code_;
}
inline void Wg::set_allocated_value_code(::google::fhir::stu3::proto::HL7WorkgroupCode* value_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_code_);
  }
  if (value_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_code, submessage_arena);
    }
    
  } else {
    
  }
  value_code_ = value_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Wg.value_code)
}

// -------------------------------------------------------------------

// ElementDefinitionXmlType

// .google.fhir.stu3.proto.String id = 1;
inline bool ElementDefinitionXmlType::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionXmlType::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionXmlType::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionXmlType.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionXmlType::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionXmlType.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionXmlType::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionXmlType.id)
  return id_;
}
inline void ElementDefinitionXmlType::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionXmlType.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool ElementDefinitionXmlType::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionXmlType::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& ElementDefinitionXmlType::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ElementDefinitionXmlType.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionXmlType::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ElementDefinitionXmlType.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ElementDefinitionXmlType::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ElementDefinitionXmlType.value_string)
  return value_string_;
}
inline void ElementDefinitionXmlType::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ElementDefinitionXmlType.value_string)
}

// -------------------------------------------------------------------

// TaskCandidateList_Value

// .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Device", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Organization", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Patient", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/RelatedPerson"];
inline bool TaskCandidateList_Value::has_reference() const {
  return value_case() == kReference;
}
inline void TaskCandidateList_Value::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline const ::google::fhir::stu3::proto::Reference& TaskCandidateList_Value::_internal_reference() const {
  return *value_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* TaskCandidateList_Value::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.TaskCandidateList.Value.reference)
  if (has_reference()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Reference* temp = value_.reference_;
    value_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& TaskCandidateList_Value::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.TaskCandidateList.Value.reference)
  return has_reference()
      ? *value_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* TaskCandidateList_Value::mutable_reference() {
  if (!has_reference()) {
    clear_value();
    set_has_reference();
    value_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.TaskCandidateList.Value.reference)
  return value_.reference_;
}

inline bool TaskCandidateList_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void TaskCandidateList_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline TaskCandidateList_Value::ValueCase TaskCandidateList_Value::value_case() const {
  return TaskCandidateList_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TaskCandidateList

// .google.fhir.stu3.proto.String id = 1;
inline bool TaskCandidateList::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& TaskCandidateList::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& TaskCandidateList::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.TaskCandidateList.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* TaskCandidateList::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.TaskCandidateList.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* TaskCandidateList::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.TaskCandidateList.id)
  return id_;
}
inline void TaskCandidateList::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.TaskCandidateList.id)
}

// .google.fhir.stu3.proto.TaskCandidateList.Value value = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool TaskCandidateList::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void TaskCandidateList::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::TaskCandidateList_Value& TaskCandidateList::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::TaskCandidateList_Value& TaskCandidateList::value() const {
  const ::google::fhir::stu3::proto::TaskCandidateList_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.TaskCandidateList.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::TaskCandidateList_Value*>(
      &::google::fhir::stu3::proto::_TaskCandidateList_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::TaskCandidateList_Value* TaskCandidateList::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.TaskCandidateList.value)
  
  ::google::fhir::stu3::proto::TaskCandidateList_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::TaskCandidateList_Value* TaskCandidateList::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::TaskCandidateList_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.TaskCandidateList.value)
  return value_;
}
inline void TaskCandidateList::set_allocated_value(::google::fhir::stu3::proto::TaskCandidateList_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.TaskCandidateList.value)
}

// -------------------------------------------------------------------

// TaskReplaces

// .google.fhir.stu3.proto.String id = 1;
inline bool TaskReplaces::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& TaskReplaces::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& TaskReplaces::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.TaskReplaces.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* TaskReplaces::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.TaskReplaces.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* TaskReplaces::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.TaskReplaces.id)
  return id_;
}
inline void TaskReplaces::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.TaskReplaces.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Task"];
inline bool TaskReplaces::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& TaskReplaces::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& TaskReplaces::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.TaskReplaces.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* TaskReplaces::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.TaskReplaces.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* TaskReplaces::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.TaskReplaces.value_reference)
  return value_reference_;
}
inline void TaskReplaces::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.TaskReplaces.value_reference)
}

// -------------------------------------------------------------------

// DaysOfCycle

// .google.fhir.stu3.proto.String id = 1;
inline bool DaysOfCycle::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& DaysOfCycle::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DaysOfCycle::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DaysOfCycle.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DaysOfCycle::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DaysOfCycle.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DaysOfCycle::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DaysOfCycle.id)
  return id_;
}
inline void DaysOfCycle::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DaysOfCycle.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int DaysOfCycle::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* DaysOfCycle::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DaysOfCycle.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
DaysOfCycle::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.DaysOfCycle.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& DaysOfCycle::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DaysOfCycle.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* DaysOfCycle::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.DaysOfCycle.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
DaysOfCycle::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.DaysOfCycle.extension)
  return extension_;
}

// repeated .google.fhir.stu3.proto.Integer day = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline int DaysOfCycle::day_size() const {
  return day_.size();
}
inline ::google::fhir::stu3::proto::Integer* DaysOfCycle::mutable_day(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DaysOfCycle.day)
  return day_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Integer >*
DaysOfCycle::mutable_day() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.DaysOfCycle.day)
  return &day_;
}
inline const ::google::fhir::stu3::proto::Integer& DaysOfCycle::day(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DaysOfCycle.day)
  return day_.Get(index);
}
inline ::google::fhir::stu3::proto::Integer* DaysOfCycle::add_day() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.DaysOfCycle.day)
  return day_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Integer >&
DaysOfCycle::day() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.DaysOfCycle.day)
  return day_;
}

// -------------------------------------------------------------------

// TimingExact

// .google.fhir.stu3.proto.String id = 1;
inline bool TimingExact::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& TimingExact::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& TimingExact::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.TimingExact.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* TimingExact::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.TimingExact.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* TimingExact::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.TimingExact.id)
  return id_;
}
inline void TimingExact::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.TimingExact.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool TimingExact::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& TimingExact::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& TimingExact::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.TimingExact.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* TimingExact::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.TimingExact.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* TimingExact::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.TimingExact.value_boolean)
  return value_boolean_;
}
inline void TimingExact::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.TimingExact.value_boolean)
}

// -------------------------------------------------------------------

// Translation_Content

// .google.fhir.stu3.proto.String string_value = 1[json_name = "string"];
inline bool Translation_Content::has_string_value() const {
  return content_case() == kStringValue;
}
inline void Translation_Content::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline const ::google::fhir::stu3::proto::String& Translation_Content::_internal_string_value() const {
  return *content_.string_value_;
}
inline ::google::fhir::stu3::proto::String* Translation_Content::release_string_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Translation.Content.string_value)
  if (has_string_value()) {
    clear_has_content();
      ::google::fhir::stu3::proto::String* temp = content_.string_value_;
    content_.string_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::String& Translation_Content::string_value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Translation.Content.string_value)
  return has_string_value()
      ? *content_.string_value_
      : *reinterpret_cast< ::google::fhir::stu3::proto::String*>(&::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Translation_Content::mutable_string_value() {
  if (!has_string_value()) {
    clear_content();
    set_has_string_value();
    content_.string_value_ = CreateMaybeMessage< ::google::fhir::stu3::proto::String >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Translation.Content.string_value)
  return content_.string_value_;
}

// .google.fhir.stu3.proto.Markdown markdown = 2;
inline bool Translation_Content::has_markdown() const {
  return content_case() == kMarkdown;
}
inline void Translation_Content::set_has_markdown() {
  _oneof_case_[0] = kMarkdown;
}
inline const ::google::fhir::stu3::proto::Markdown& Translation_Content::_internal_markdown() const {
  return *content_.markdown_;
}
inline ::google::fhir::stu3::proto::Markdown* Translation_Content::release_markdown() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Translation.Content.markdown)
  if (has_markdown()) {
    clear_has_content();
      ::google::fhir::stu3::proto::Markdown* temp = content_.markdown_;
    content_.markdown_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Markdown& Translation_Content::markdown() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Translation.Content.markdown)
  return has_markdown()
      ? *content_.markdown_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Markdown*>(&::google::fhir::stu3::proto::_Markdown_default_instance_);
}
inline ::google::fhir::stu3::proto::Markdown* Translation_Content::mutable_markdown() {
  if (!has_markdown()) {
    clear_content();
    set_has_markdown();
    content_.markdown_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Markdown >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Translation.Content.markdown)
  return content_.markdown_;
}

inline bool Translation_Content::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void Translation_Content::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline Translation_Content::ContentCase Translation_Content::content_case() const {
  return Translation_Content::ContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Translation

// .google.fhir.stu3.proto.String id = 1;
inline bool Translation::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& Translation::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Translation::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Translation.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Translation::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Translation.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Translation::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Translation.id)
  return id_;
}
inline void Translation::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Translation.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int Translation::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* Translation::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Translation.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Translation::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Translation.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Translation::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Translation.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Translation::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Translation.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Translation::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Translation.extension)
  return extension_;
}

// .google.fhir.stu3.proto.LanguageCode lang = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool Translation::has_lang() const {
  return this != internal_default_instance() && lang_ != NULL;
}
inline const ::google::fhir::stu3::proto::LanguageCode& Translation::_internal_lang() const {
  return *lang_;
}
inline const ::google::fhir::stu3::proto::LanguageCode& Translation::lang() const {
  const ::google::fhir::stu3::proto::LanguageCode* p = lang_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Translation.lang)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::LanguageCode*>(
      &::google::fhir::stu3::proto::_LanguageCode_default_instance_);
}
inline ::google::fhir::stu3::proto::LanguageCode* Translation::release_lang() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Translation.lang)
  
  ::google::fhir::stu3::proto::LanguageCode* temp = lang_;
  lang_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::LanguageCode* Translation::mutable_lang() {
  
  if (lang_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::LanguageCode>(GetArenaNoVirtual());
    lang_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Translation.lang)
  return lang_;
}
inline void Translation::set_allocated_lang(::google::fhir::stu3::proto::LanguageCode* lang) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lang_);
  }
  if (lang) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lang = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lang, submessage_arena);
    }
    
  } else {
    
  }
  lang_ = lang;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Translation.lang)
}

// .google.fhir.stu3.proto.Translation.Content content = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool Translation::has_content() const {
  return this != internal_default_instance() && content_ != NULL;
}
inline void Translation::clear_content() {
  if (GetArenaNoVirtual() == NULL && content_ != NULL) {
    delete content_;
  }
  content_ = NULL;
}
inline const ::google::fhir::stu3::proto::Translation_Content& Translation::_internal_content() const {
  return *content_;
}
inline const ::google::fhir::stu3::proto::Translation_Content& Translation::content() const {
  const ::google::fhir::stu3::proto::Translation_Content* p = content_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Translation.content)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Translation_Content*>(
      &::google::fhir::stu3::proto::_Translation_Content_default_instance_);
}
inline ::google::fhir::stu3::proto::Translation_Content* Translation::release_content() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Translation.content)
  
  ::google::fhir::stu3::proto::Translation_Content* temp = content_;
  content_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Translation_Content* Translation::mutable_content() {
  
  if (content_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Translation_Content>(GetArenaNoVirtual());
    content_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Translation.content)
  return content_;
}
inline void Translation::set_allocated_content(::google::fhir::stu3::proto::Translation_Content* content) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete content_;
  }
  if (content) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      content = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, content, submessage_arena);
    }
    
  } else {
    
  }
  content_ = content;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Translation.content)
}

// -------------------------------------------------------------------

// UsageContextGroup

// .google.fhir.stu3.proto.String id = 1;
inline bool UsageContextGroup::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& UsageContextGroup::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& UsageContextGroup::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.UsageContextGroup.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* UsageContextGroup::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.UsageContextGroup.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* UsageContextGroup::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.UsageContextGroup.id)
  return id_;
}
inline void UsageContextGroup::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.UsageContextGroup.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool UsageContextGroup::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& UsageContextGroup::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& UsageContextGroup::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.UsageContextGroup.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* UsageContextGroup::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.UsageContextGroup.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* UsageContextGroup::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.UsageContextGroup.value_string)
  return value_string_;
}
inline void UsageContextGroup::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.UsageContextGroup.value_string)
}

// -------------------------------------------------------------------

// ValueSetAuthor

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetAuthor::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetAuthor::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetAuthor::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetAuthor.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetAuthor::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetAuthor.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetAuthor::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetAuthor.id)
  return id_;
}
inline void ValueSetAuthor::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetAuthor.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool ValueSetAuthor::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetAuthor::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetAuthor::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetAuthor.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetAuthor::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetAuthor.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetAuthor::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetAuthor.value_string)
  return value_string_;
}
inline void ValueSetAuthor::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetAuthor.value_string)
}

// -------------------------------------------------------------------

// ValueSetCaseSensitive

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetCaseSensitive::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetCaseSensitive::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetCaseSensitive::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetCaseSensitive.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetCaseSensitive::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetCaseSensitive.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetCaseSensitive::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetCaseSensitive.id)
  return id_;
}
inline void ValueSetCaseSensitive::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetCaseSensitive.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool ValueSetCaseSensitive::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& ValueSetCaseSensitive::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& ValueSetCaseSensitive::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetCaseSensitive.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* ValueSetCaseSensitive::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetCaseSensitive.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* ValueSetCaseSensitive::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetCaseSensitive.value_boolean)
  return value_boolean_;
}
inline void ValueSetCaseSensitive::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetCaseSensitive.value_boolean)
}

// -------------------------------------------------------------------

// ValueSetComment

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetComment::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetComment::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetComment::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetComment.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetComment::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetComment.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetComment::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetComment.id)
  return id_;
}
inline void ValueSetComment::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetComment.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int ValueSetComment::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* ValueSetComment::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetComment.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
ValueSetComment::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.ValueSetComment.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& ValueSetComment::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetComment.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* ValueSetComment::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.ValueSetComment.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
ValueSetComment::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.ValueSetComment.extension)
  return extension_;
}

// .google.fhir.stu3.proto.String content = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool ValueSetComment::has_content() const {
  return this != internal_default_instance() && content_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetComment::_internal_content() const {
  return *content_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetComment::content() const {
  const ::google::fhir::stu3::proto::String* p = content_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetComment.content)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetComment::release_content() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetComment.content)
  
  ::google::fhir::stu3::proto::String* temp = content_;
  content_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetComment::mutable_content() {
  
  if (content_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    content_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetComment.content)
  return content_;
}
inline void ValueSetComment::set_allocated_content(::google::fhir::stu3::proto::String* content) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(content_);
  }
  if (content) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      content = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, content, submessage_arena);
    }
    
  } else {
    
  }
  content_ = content;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetComment.content)
}

// .google.fhir.stu3.proto.Instant timestamp = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool ValueSetComment::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::google::fhir::stu3::proto::Instant& ValueSetComment::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::google::fhir::stu3::proto::Instant& ValueSetComment::timestamp() const {
  const ::google::fhir::stu3::proto::Instant* p = timestamp_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetComment.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Instant*>(
      &::google::fhir::stu3::proto::_Instant_default_instance_);
}
inline ::google::fhir::stu3::proto::Instant* ValueSetComment::release_timestamp() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetComment.timestamp)
  
  ::google::fhir::stu3::proto::Instant* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Instant* ValueSetComment::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Instant>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetComment.timestamp)
  return timestamp_;
}
inline void ValueSetComment::set_allocated_timestamp(::google::fhir::stu3::proto::Instant* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetComment.timestamp)
}

// -------------------------------------------------------------------

// ValueSetComments

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetComments::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetComments::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetComments::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetComments.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetComments::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetComments.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetComments::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetComments.id)
  return id_;
}
inline void ValueSetComments::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetComments.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool ValueSetComments::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetComments::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetComments::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetComments.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetComments::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetComments.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetComments::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetComments.value_string)
  return value_string_;
}
inline void ValueSetComments::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetComments.value_string)
}

// -------------------------------------------------------------------

// ValueSetConceptOrder

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetConceptOrder::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetConceptOrder::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetConceptOrder::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetConceptOrder.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetConceptOrder::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetConceptOrder.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetConceptOrder::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetConceptOrder.id)
  return id_;
}
inline void ValueSetConceptOrder::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetConceptOrder.id)
}

// .google.fhir.stu3.proto.Integer value_integer = 3;
inline bool ValueSetConceptOrder::has_value_integer() const {
  return this != internal_default_instance() && value_integer_ != NULL;
}
inline const ::google::fhir::stu3::proto::Integer& ValueSetConceptOrder::_internal_value_integer() const {
  return *value_integer_;
}
inline const ::google::fhir::stu3::proto::Integer& ValueSetConceptOrder::value_integer() const {
  const ::google::fhir::stu3::proto::Integer* p = value_integer_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetConceptOrder.value_integer)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Integer*>(
      &::google::fhir::stu3::proto::_Integer_default_instance_);
}
inline ::google::fhir::stu3::proto::Integer* ValueSetConceptOrder::release_value_integer() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetConceptOrder.value_integer)
  
  ::google::fhir::stu3::proto::Integer* temp = value_integer_;
  value_integer_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Integer* ValueSetConceptOrder::mutable_value_integer() {
  
  if (value_integer_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Integer>(GetArenaNoVirtual());
    value_integer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetConceptOrder.value_integer)
  return value_integer_;
}
inline void ValueSetConceptOrder::set_allocated_value_integer(::google::fhir::stu3::proto::Integer* value_integer) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_integer_);
  }
  if (value_integer) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_integer = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_integer, submessage_arena);
    }
    
  } else {
    
  }
  value_integer_ = value_integer;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetConceptOrder.value_integer)
}

// -------------------------------------------------------------------

// ValueSetDefinition

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetDefinition::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetDefinition::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetDefinition::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetDefinition.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetDefinition::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetDefinition.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetDefinition::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetDefinition.id)
  return id_;
}
inline void ValueSetDefinition::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetDefinition.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool ValueSetDefinition::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetDefinition::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetDefinition::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetDefinition.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetDefinition::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetDefinition.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetDefinition::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetDefinition.value_string)
  return value_string_;
}
inline void ValueSetDefinition::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetDefinition.value_string)
}

// -------------------------------------------------------------------

// ValueSetEffectiveDate

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetEffectiveDate::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetEffectiveDate::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetEffectiveDate::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetEffectiveDate.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetEffectiveDate::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetEffectiveDate.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetEffectiveDate::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetEffectiveDate.id)
  return id_;
}
inline void ValueSetEffectiveDate::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetEffectiveDate.id)
}

// .google.fhir.stu3.proto.Date value_date = 3;
inline bool ValueSetEffectiveDate::has_value_date() const {
  return this != internal_default_instance() && value_date_ != NULL;
}
inline const ::google::fhir::stu3::proto::Date& ValueSetEffectiveDate::_internal_value_date() const {
  return *value_date_;
}
inline const ::google::fhir::stu3::proto::Date& ValueSetEffectiveDate::value_date() const {
  const ::google::fhir::stu3::proto::Date* p = value_date_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetEffectiveDate.value_date)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Date*>(
      &::google::fhir::stu3::proto::_Date_default_instance_);
}
inline ::google::fhir::stu3::proto::Date* ValueSetEffectiveDate::release_value_date() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetEffectiveDate.value_date)
  
  ::google::fhir::stu3::proto::Date* temp = value_date_;
  value_date_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Date* ValueSetEffectiveDate::mutable_value_date() {
  
  if (value_date_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Date>(GetArenaNoVirtual());
    value_date_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetEffectiveDate.value_date)
  return value_date_;
}
inline void ValueSetEffectiveDate::set_allocated_value_date(::google::fhir::stu3::proto::Date* value_date) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_date_);
  }
  if (value_date) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_date = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_date, submessage_arena);
    }
    
  } else {
    
  }
  value_date_ = value_date;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetEffectiveDate.value_date)
}

// -------------------------------------------------------------------

// ValueSetExpansionSource

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetExpansionSource::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetExpansionSource::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetExpansionSource::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetExpansionSource.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetExpansionSource::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetExpansionSource.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetExpansionSource::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetExpansionSource.id)
  return id_;
}
inline void ValueSetExpansionSource::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetExpansionSource.id)
}

// .google.fhir.stu3.proto.Uri value_uri = 3;
inline bool ValueSetExpansionSource::has_value_uri() const {
  return this != internal_default_instance() && value_uri_ != NULL;
}
inline const ::google::fhir::stu3::proto::Uri& ValueSetExpansionSource::_internal_value_uri() const {
  return *value_uri_;
}
inline const ::google::fhir::stu3::proto::Uri& ValueSetExpansionSource::value_uri() const {
  const ::google::fhir::stu3::proto::Uri* p = value_uri_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetExpansionSource.value_uri)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* ValueSetExpansionSource::release_value_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetExpansionSource.value_uri)
  
  ::google::fhir::stu3::proto::Uri* temp = value_uri_;
  value_uri_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* ValueSetExpansionSource::mutable_value_uri() {
  
  if (value_uri_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    value_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetExpansionSource.value_uri)
  return value_uri_;
}
inline void ValueSetExpansionSource::set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_uri_);
  }
  if (value_uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_uri, submessage_arena);
    }
    
  } else {
    
  }
  value_uri_ = value_uri;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetExpansionSource.value_uri)
}

// -------------------------------------------------------------------

// ValueSetExpirationDate

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetExpirationDate::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetExpirationDate::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetExpirationDate::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetExpirationDate.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetExpirationDate::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetExpirationDate.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetExpirationDate::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetExpirationDate.id)
  return id_;
}
inline void ValueSetExpirationDate::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetExpirationDate.id)
}

// .google.fhir.stu3.proto.Date value_date = 3;
inline bool ValueSetExpirationDate::has_value_date() const {
  return this != internal_default_instance() && value_date_ != NULL;
}
inline const ::google::fhir::stu3::proto::Date& ValueSetExpirationDate::_internal_value_date() const {
  return *value_date_;
}
inline const ::google::fhir::stu3::proto::Date& ValueSetExpirationDate::value_date() const {
  const ::google::fhir::stu3::proto::Date* p = value_date_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetExpirationDate.value_date)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Date*>(
      &::google::fhir::stu3::proto::_Date_default_instance_);
}
inline ::google::fhir::stu3::proto::Date* ValueSetExpirationDate::release_value_date() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetExpirationDate.value_date)
  
  ::google::fhir::stu3::proto::Date* temp = value_date_;
  value_date_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Date* ValueSetExpirationDate::mutable_value_date() {
  
  if (value_date_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Date>(GetArenaNoVirtual());
    value_date_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetExpirationDate.value_date)
  return value_date_;
}
inline void ValueSetExpirationDate::set_allocated_value_date(::google::fhir::stu3::proto::Date* value_date) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_date_);
  }
  if (value_date) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_date = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_date, submessage_arena);
    }
    
  } else {
    
  }
  value_date_ = value_date;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetExpirationDate.value_date)
}

// -------------------------------------------------------------------

// ValueSetHistory_Revision

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetHistory_Revision::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetHistory_Revision::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetHistory_Revision::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetHistory.Revision.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetHistory_Revision::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetHistory.Revision.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetHistory_Revision::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetHistory.Revision.id)
  return id_;
}
inline void ValueSetHistory_Revision::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetHistory.Revision.id)
}

// .google.fhir.stu3.proto.DateTime date = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool ValueSetHistory_Revision::has_date() const {
  return this != internal_default_instance() && date_ != NULL;
}
inline const ::google::fhir::stu3::proto::DateTime& ValueSetHistory_Revision::_internal_date() const {
  return *date_;
}
inline const ::google::fhir::stu3::proto::DateTime& ValueSetHistory_Revision::date() const {
  const ::google::fhir::stu3::proto::DateTime* p = date_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetHistory.Revision.date)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::DateTime*>(
      &::google::fhir::stu3::proto::_DateTime_default_instance_);
}
inline ::google::fhir::stu3::proto::DateTime* ValueSetHistory_Revision::release_date() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetHistory.Revision.date)
  
  ::google::fhir::stu3::proto::DateTime* temp = date_;
  date_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::DateTime* ValueSetHistory_Revision::mutable_date() {
  
  if (date_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::DateTime>(GetArenaNoVirtual());
    date_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetHistory.Revision.date)
  return date_;
}
inline void ValueSetHistory_Revision::set_allocated_date(::google::fhir::stu3::proto::DateTime* date) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(date_);
  }
  if (date) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      date = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    
  } else {
    
  }
  date_ = date;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetHistory.Revision.date)
}

// .google.fhir.stu3.proto.String id_slice = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.fhir_inlined_extension_url) = "id"];
inline bool ValueSetHistory_Revision::has_id_slice() const {
  return this != internal_default_instance() && id_slice_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetHistory_Revision::_internal_id_slice() const {
  return *id_slice_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetHistory_Revision::id_slice() const {
  const ::google::fhir::stu3::proto::String* p = id_slice_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetHistory.Revision.id_slice)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetHistory_Revision::release_id_slice() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetHistory.Revision.id_slice)
  
  ::google::fhir::stu3::proto::String* temp = id_slice_;
  id_slice_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetHistory_Revision::mutable_id_slice() {
  
  if (id_slice_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_slice_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetHistory.Revision.id_slice)
  return id_slice_;
}
inline void ValueSetHistory_Revision::set_allocated_id_slice(::google::fhir::stu3::proto::String* id_slice) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_slice_);
  }
  if (id_slice) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id_slice = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id_slice, submessage_arena);
    }
    
  } else {
    
  }
  id_slice_ = id_slice;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetHistory.Revision.id_slice)
}

// .google.fhir.stu3.proto.String author = 6 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool ValueSetHistory_Revision::has_author() const {
  return this != internal_default_instance() && author_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetHistory_Revision::_internal_author() const {
  return *author_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetHistory_Revision::author() const {
  const ::google::fhir::stu3::proto::String* p = author_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetHistory.Revision.author)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetHistory_Revision::release_author() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetHistory.Revision.author)
  
  ::google::fhir::stu3::proto::String* temp = author_;
  author_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetHistory_Revision::mutable_author() {
  
  if (author_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    author_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetHistory.Revision.author)
  return author_;
}
inline void ValueSetHistory_Revision::set_allocated_author(::google::fhir::stu3::proto::String* author) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(author_);
  }
  if (author) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      author = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    
  } else {
    
  }
  author_ = author;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetHistory.Revision.author)
}

// .google.fhir.stu3.proto.String notes = 7;
inline bool ValueSetHistory_Revision::has_notes() const {
  return this != internal_default_instance() && notes_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetHistory_Revision::_internal_notes() const {
  return *notes_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetHistory_Revision::notes() const {
  const ::google::fhir::stu3::proto::String* p = notes_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetHistory.Revision.notes)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetHistory_Revision::release_notes() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetHistory.Revision.notes)
  
  ::google::fhir::stu3::proto::String* temp = notes_;
  notes_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetHistory_Revision::mutable_notes() {
  
  if (notes_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    notes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetHistory.Revision.notes)
  return notes_;
}
inline void ValueSetHistory_Revision::set_allocated_notes(::google::fhir::stu3::proto::String* notes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(notes_);
  }
  if (notes) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      notes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, notes, submessage_arena);
    }
    
  } else {
    
  }
  notes_ = notes;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetHistory.Revision.notes)
}

// -------------------------------------------------------------------

// ValueSetHistory

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetHistory::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetHistory::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetHistory::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetHistory.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetHistory::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetHistory.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetHistory::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetHistory.id)
  return id_;
}
inline void ValueSetHistory::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetHistory.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int ValueSetHistory::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* ValueSetHistory::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetHistory.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
ValueSetHistory::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.ValueSetHistory.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& ValueSetHistory::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetHistory.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* ValueSetHistory::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.ValueSetHistory.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
ValueSetHistory::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.ValueSetHistory.extension)
  return extension_;
}

// .google.fhir.stu3.proto.String name = 4;
inline bool ValueSetHistory::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetHistory::_internal_name() const {
  return *name_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetHistory::name() const {
  const ::google::fhir::stu3::proto::String* p = name_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetHistory.name)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetHistory::release_name() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetHistory.name)
  
  ::google::fhir::stu3::proto::String* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetHistory::mutable_name() {
  
  if (name_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetHistory.name)
  return name_;
}
inline void ValueSetHistory::set_allocated_name(::google::fhir::stu3::proto::String* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetHistory.name)
}

// repeated .google.fhir.stu3.proto.ValueSetHistory.Revision revision = 5;
inline int ValueSetHistory::revision_size() const {
  return revision_.size();
}
inline void ValueSetHistory::clear_revision() {
  revision_.Clear();
}
inline ::google::fhir::stu3::proto::ValueSetHistory_Revision* ValueSetHistory::mutable_revision(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetHistory.revision)
  return revision_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::ValueSetHistory_Revision >*
ValueSetHistory::mutable_revision() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.ValueSetHistory.revision)
  return &revision_;
}
inline const ::google::fhir::stu3::proto::ValueSetHistory_Revision& ValueSetHistory::revision(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetHistory.revision)
  return revision_.Get(index);
}
inline ::google::fhir::stu3::proto::ValueSetHistory_Revision* ValueSetHistory::add_revision() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.ValueSetHistory.revision)
  return revision_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::ValueSetHistory_Revision >&
ValueSetHistory::revision() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.ValueSetHistory.revision)
  return revision_;
}

// -------------------------------------------------------------------

// ValueSetKeyWord

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetKeyWord::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetKeyWord::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetKeyWord::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetKeyWord.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetKeyWord::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetKeyWord.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetKeyWord::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetKeyWord.id)
  return id_;
}
inline void ValueSetKeyWord::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetKeyWord.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool ValueSetKeyWord::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetKeyWord::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetKeyWord::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetKeyWord.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetKeyWord::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetKeyWord.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetKeyWord::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetKeyWord.value_string)
  return value_string_;
}
inline void ValueSetKeyWord::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetKeyWord.value_string)
}

// -------------------------------------------------------------------

// ValueSetLabel

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetLabel::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetLabel::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetLabel::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetLabel.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetLabel::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetLabel.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetLabel::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetLabel.id)
  return id_;
}
inline void ValueSetLabel::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetLabel.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool ValueSetLabel::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetLabel::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetLabel::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetLabel.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetLabel::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetLabel.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetLabel::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetLabel.value_string)
  return value_string_;
}
inline void ValueSetLabel::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetLabel.value_string)
}

// -------------------------------------------------------------------

// ValueSetMap

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetMap::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetMap::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetMap::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetMap.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetMap::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetMap.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetMap::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetMap.id)
  return id_;
}
inline void ValueSetMap::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetMap.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/ConceptMap"];
inline bool ValueSetMap::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& ValueSetMap::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& ValueSetMap::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetMap.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ValueSetMap::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetMap.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* ValueSetMap::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetMap.value_reference)
  return value_reference_;
}
inline void ValueSetMap::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetMap.value_reference)
}

// -------------------------------------------------------------------

// ValueSetOrdinalValue

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetOrdinalValue::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetOrdinalValue::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetOrdinalValue::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetOrdinalValue.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetOrdinalValue::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetOrdinalValue.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetOrdinalValue::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetOrdinalValue.id)
  return id_;
}
inline void ValueSetOrdinalValue::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetOrdinalValue.id)
}

// .google.fhir.stu3.proto.Decimal value_decimal = 3;
inline bool ValueSetOrdinalValue::has_value_decimal() const {
  return this != internal_default_instance() && value_decimal_ != NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& ValueSetOrdinalValue::_internal_value_decimal() const {
  return *value_decimal_;
}
inline const ::google::fhir::stu3::proto::Decimal& ValueSetOrdinalValue::value_decimal() const {
  const ::google::fhir::stu3::proto::Decimal* p = value_decimal_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetOrdinalValue.value_decimal)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* ValueSetOrdinalValue::release_value_decimal() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetOrdinalValue.value_decimal)
  
  ::google::fhir::stu3::proto::Decimal* temp = value_decimal_;
  value_decimal_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* ValueSetOrdinalValue::mutable_value_decimal() {
  
  if (value_decimal_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    value_decimal_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetOrdinalValue.value_decimal)
  return value_decimal_;
}
inline void ValueSetOrdinalValue::set_allocated_value_decimal(::google::fhir::stu3::proto::Decimal* value_decimal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_decimal_);
  }
  if (value_decimal) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_decimal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_decimal, submessage_arena);
    }
    
  } else {
    
  }
  value_decimal_ = value_decimal;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetOrdinalValue.value_decimal)
}

// -------------------------------------------------------------------

// ValueSetOtherName

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetOtherName::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetOtherName::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetOtherName::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetOtherName.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetOtherName::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetOtherName.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetOtherName::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetOtherName.id)
  return id_;
}
inline void ValueSetOtherName::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetOtherName.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int ValueSetOtherName::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* ValueSetOtherName::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetOtherName.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
ValueSetOtherName::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.ValueSetOtherName.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& ValueSetOtherName::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetOtherName.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* ValueSetOtherName::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.ValueSetOtherName.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
ValueSetOtherName::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.ValueSetOtherName.extension)
  return extension_;
}

// .google.fhir.stu3.proto.String name = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool ValueSetOtherName::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetOtherName::_internal_name() const {
  return *name_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetOtherName::name() const {
  const ::google::fhir::stu3::proto::String* p = name_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetOtherName.name)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetOtherName::release_name() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetOtherName.name)
  
  ::google::fhir::stu3::proto::String* temp = name_;
  name_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetOtherName::mutable_name() {
  
  if (name_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetOtherName.name)
  return name_;
}
inline void ValueSetOtherName::set_allocated_name(::google::fhir::stu3::proto::String* name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(name_);
  }
  if (name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetOtherName.name)
}

// .google.fhir.stu3.proto.Boolean preferred = 5;
inline bool ValueSetOtherName::has_preferred() const {
  return this != internal_default_instance() && preferred_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& ValueSetOtherName::_internal_preferred() const {
  return *preferred_;
}
inline const ::google::fhir::stu3::proto::Boolean& ValueSetOtherName::preferred() const {
  const ::google::fhir::stu3::proto::Boolean* p = preferred_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetOtherName.preferred)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* ValueSetOtherName::release_preferred() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetOtherName.preferred)
  
  ::google::fhir::stu3::proto::Boolean* temp = preferred_;
  preferred_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* ValueSetOtherName::mutable_preferred() {
  
  if (preferred_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    preferred_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetOtherName.preferred)
  return preferred_;
}
inline void ValueSetOtherName::set_allocated_preferred(::google::fhir::stu3::proto::Boolean* preferred) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(preferred_);
  }
  if (preferred) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      preferred = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, preferred, submessage_arena);
    }
    
  } else {
    
  }
  preferred_ = preferred;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetOtherName.preferred)
}

// -------------------------------------------------------------------

// ValueSetReference

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetReference::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetReference::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetReference::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetReference.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetReference::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetReference.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetReference::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetReference.id)
  return id_;
}
inline void ValueSetReference::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetReference.id)
}

// .google.fhir.stu3.proto.Uri value_uri = 3;
inline bool ValueSetReference::has_value_uri() const {
  return this != internal_default_instance() && value_uri_ != NULL;
}
inline const ::google::fhir::stu3::proto::Uri& ValueSetReference::_internal_value_uri() const {
  return *value_uri_;
}
inline const ::google::fhir::stu3::proto::Uri& ValueSetReference::value_uri() const {
  const ::google::fhir::stu3::proto::Uri* p = value_uri_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetReference.value_uri)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* ValueSetReference::release_value_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetReference.value_uri)
  
  ::google::fhir::stu3::proto::Uri* temp = value_uri_;
  value_uri_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* ValueSetReference::mutable_value_uri() {
  
  if (value_uri_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    value_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetReference.value_uri)
  return value_uri_;
}
inline void ValueSetReference::set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_uri_);
  }
  if (value_uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_uri, submessage_arena);
    }
    
  } else {
    
  }
  value_uri_ = value_uri;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetReference.value_uri)
}

// -------------------------------------------------------------------

// ValueSetSourceReference

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetSourceReference::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetSourceReference::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetSourceReference::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetSourceReference.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetSourceReference::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetSourceReference.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetSourceReference::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetSourceReference.id)
  return id_;
}
inline void ValueSetSourceReference::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetSourceReference.id)
}

// .google.fhir.stu3.proto.Uri value_uri = 3;
inline bool ValueSetSourceReference::has_value_uri() const {
  return this != internal_default_instance() && value_uri_ != NULL;
}
inline const ::google::fhir::stu3::proto::Uri& ValueSetSourceReference::_internal_value_uri() const {
  return *value_uri_;
}
inline const ::google::fhir::stu3::proto::Uri& ValueSetSourceReference::value_uri() const {
  const ::google::fhir::stu3::proto::Uri* p = value_uri_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetSourceReference.value_uri)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* ValueSetSourceReference::release_value_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetSourceReference.value_uri)
  
  ::google::fhir::stu3::proto::Uri* temp = value_uri_;
  value_uri_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* ValueSetSourceReference::mutable_value_uri() {
  
  if (value_uri_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    value_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetSourceReference.value_uri)
  return value_uri_;
}
inline void ValueSetSourceReference::set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_uri_);
  }
  if (value_uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_uri, submessage_arena);
    }
    
  } else {
    
  }
  value_uri_ = value_uri;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetSourceReference.value_uri)
}

// -------------------------------------------------------------------

// ValueSetSystem

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetSystem::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetSystem::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetSystem::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetSystem.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetSystem::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetSystem.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetSystem::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetSystem.id)
  return id_;
}
inline void ValueSetSystem::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetSystem.id)
}

// .google.fhir.stu3.proto.Reference value_reference = 3 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/CodeSystem"];
inline bool ValueSetSystem::has_value_reference() const {
  return this != internal_default_instance() && value_reference_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& ValueSetSystem::_internal_value_reference() const {
  return *value_reference_;
}
inline const ::google::fhir::stu3::proto::Reference& ValueSetSystem::value_reference() const {
  const ::google::fhir::stu3::proto::Reference* p = value_reference_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetSystem.value_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* ValueSetSystem::release_value_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetSystem.value_reference)
  
  ::google::fhir::stu3::proto::Reference* temp = value_reference_;
  value_reference_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* ValueSetSystem::mutable_value_reference() {
  
  if (value_reference_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    value_reference_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetSystem.value_reference)
  return value_reference_;
}
inline void ValueSetSystem::set_allocated_value_reference(::google::fhir::stu3::proto::Reference* value_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_reference_);
  }
  if (value_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_reference, submessage_arena);
    }
    
  } else {
    
  }
  value_reference_ = value_reference;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetSystem.value_reference)
}

// -------------------------------------------------------------------

// ValueSetSystemName

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetSystemName::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetSystemName::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetSystemName::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetSystemName.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetSystemName::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetSystemName.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetSystemName::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetSystemName.id)
  return id_;
}
inline void ValueSetSystemName::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetSystemName.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool ValueSetSystemName::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetSystemName::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetSystemName::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetSystemName.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetSystemName::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetSystemName.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetSystemName::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetSystemName.value_string)
  return value_string_;
}
inline void ValueSetSystemName::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetSystemName.value_string)
}

// -------------------------------------------------------------------

// ValueSetSystemRef

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetSystemRef::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetSystemRef::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetSystemRef::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetSystemRef.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetSystemRef::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetSystemRef.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetSystemRef::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetSystemRef.id)
  return id_;
}
inline void ValueSetSystemRef::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetSystemRef.id)
}

// .google.fhir.stu3.proto.Uri value_uri = 3;
inline bool ValueSetSystemRef::has_value_uri() const {
  return this != internal_default_instance() && value_uri_ != NULL;
}
inline const ::google::fhir::stu3::proto::Uri& ValueSetSystemRef::_internal_value_uri() const {
  return *value_uri_;
}
inline const ::google::fhir::stu3::proto::Uri& ValueSetSystemRef::value_uri() const {
  const ::google::fhir::stu3::proto::Uri* p = value_uri_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetSystemRef.value_uri)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* ValueSetSystemRef::release_value_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetSystemRef.value_uri)
  
  ::google::fhir::stu3::proto::Uri* temp = value_uri_;
  value_uri_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* ValueSetSystemRef::mutable_value_uri() {
  
  if (value_uri_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    value_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetSystemRef.value_uri)
  return value_uri_;
}
inline void ValueSetSystemRef::set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_uri_);
  }
  if (value_uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_uri, submessage_arena);
    }
    
  } else {
    
  }
  value_uri_ = value_uri;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetSystemRef.value_uri)
}

// -------------------------------------------------------------------

// ValueSetToocostly

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetToocostly::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetToocostly::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetToocostly::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetToocostly.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetToocostly::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetToocostly.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetToocostly::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetToocostly.id)
  return id_;
}
inline void ValueSetToocostly::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetToocostly.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool ValueSetToocostly::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& ValueSetToocostly::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& ValueSetToocostly::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetToocostly.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* ValueSetToocostly::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetToocostly.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* ValueSetToocostly::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetToocostly.value_boolean)
  return value_boolean_;
}
inline void ValueSetToocostly::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetToocostly.value_boolean)
}

// -------------------------------------------------------------------

// ValueSetTrustedExpansion

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetTrustedExpansion::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetTrustedExpansion::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetTrustedExpansion::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetTrustedExpansion.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetTrustedExpansion::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetTrustedExpansion.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetTrustedExpansion::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetTrustedExpansion.id)
  return id_;
}
inline void ValueSetTrustedExpansion::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetTrustedExpansion.id)
}

// .google.fhir.stu3.proto.Uri value_uri = 3;
inline bool ValueSetTrustedExpansion::has_value_uri() const {
  return this != internal_default_instance() && value_uri_ != NULL;
}
inline const ::google::fhir::stu3::proto::Uri& ValueSetTrustedExpansion::_internal_value_uri() const {
  return *value_uri_;
}
inline const ::google::fhir::stu3::proto::Uri& ValueSetTrustedExpansion::value_uri() const {
  const ::google::fhir::stu3::proto::Uri* p = value_uri_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetTrustedExpansion.value_uri)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* ValueSetTrustedExpansion::release_value_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetTrustedExpansion.value_uri)
  
  ::google::fhir::stu3::proto::Uri* temp = value_uri_;
  value_uri_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* ValueSetTrustedExpansion::mutable_value_uri() {
  
  if (value_uri_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    value_uri_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetTrustedExpansion.value_uri)
  return value_uri_;
}
inline void ValueSetTrustedExpansion::set_allocated_value_uri(::google::fhir::stu3::proto::Uri* value_uri) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_uri_);
  }
  if (value_uri) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_uri = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_uri, submessage_arena);
    }
    
  } else {
    
  }
  value_uri_ = value_uri;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetTrustedExpansion.value_uri)
}

// -------------------------------------------------------------------

// ValueSetUnclosed

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetUnclosed::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetUnclosed::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetUnclosed::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetUnclosed.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetUnclosed::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetUnclosed.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetUnclosed::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetUnclosed.id)
  return id_;
}
inline void ValueSetUnclosed::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetUnclosed.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool ValueSetUnclosed::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& ValueSetUnclosed::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& ValueSetUnclosed::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetUnclosed.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* ValueSetUnclosed::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetUnclosed.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* ValueSetUnclosed::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetUnclosed.value_boolean)
  return value_boolean_;
}
inline void ValueSetUnclosed::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetUnclosed.value_boolean)
}

// -------------------------------------------------------------------

// ValueSetUsage

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetUsage::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetUsage::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetUsage::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetUsage.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetUsage::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetUsage.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetUsage::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetUsage.id)
  return id_;
}
inline void ValueSetUsage::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetUsage.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int ValueSetUsage::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* ValueSetUsage::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetUsage.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
ValueSetUsage::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.ValueSetUsage.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& ValueSetUsage::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetUsage.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* ValueSetUsage::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.ValueSetUsage.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
ValueSetUsage::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.ValueSetUsage.extension)
  return extension_;
}

// .google.fhir.stu3.proto.String user = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool ValueSetUsage::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetUsage::_internal_user() const {
  return *user_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetUsage::user() const {
  const ::google::fhir::stu3::proto::String* p = user_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetUsage.user)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetUsage::release_user() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetUsage.user)
  
  ::google::fhir::stu3::proto::String* temp = user_;
  user_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetUsage::mutable_user() {
  
  if (user_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    user_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetUsage.user)
  return user_;
}
inline void ValueSetUsage::set_allocated_user(::google::fhir::stu3::proto::String* user) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_);
  }
  if (user) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    
  } else {
    
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetUsage.user)
}

// .google.fhir.stu3.proto.String use = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool ValueSetUsage::has_use() const {
  return this != internal_default_instance() && use_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetUsage::_internal_use() const {
  return *use_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetUsage::use() const {
  const ::google::fhir::stu3::proto::String* p = use_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetUsage.use)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetUsage::release_use() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetUsage.use)
  
  ::google::fhir::stu3::proto::String* temp = use_;
  use_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetUsage::mutable_use() {
  
  if (use_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    use_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetUsage.use)
  return use_;
}
inline void ValueSetUsage::set_allocated_use(::google::fhir::stu3::proto::String* use) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(use_);
  }
  if (use) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      use = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, use, submessage_arena);
    }
    
  } else {
    
  }
  use_ = use;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetUsage.use)
}

// -------------------------------------------------------------------

// ValueSetWarning

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetWarning::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetWarning::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetWarning::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetWarning.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetWarning::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetWarning.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetWarning::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetWarning.id)
  return id_;
}
inline void ValueSetWarning::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetWarning.id)
}

// .google.fhir.stu3.proto.Markdown value_markdown = 3;
inline bool ValueSetWarning::has_value_markdown() const {
  return this != internal_default_instance() && value_markdown_ != NULL;
}
inline const ::google::fhir::stu3::proto::Markdown& ValueSetWarning::_internal_value_markdown() const {
  return *value_markdown_;
}
inline const ::google::fhir::stu3::proto::Markdown& ValueSetWarning::value_markdown() const {
  const ::google::fhir::stu3::proto::Markdown* p = value_markdown_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetWarning.value_markdown)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Markdown*>(
      &::google::fhir::stu3::proto::_Markdown_default_instance_);
}
inline ::google::fhir::stu3::proto::Markdown* ValueSetWarning::release_value_markdown() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetWarning.value_markdown)
  
  ::google::fhir::stu3::proto::Markdown* temp = value_markdown_;
  value_markdown_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Markdown* ValueSetWarning::mutable_value_markdown() {
  
  if (value_markdown_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Markdown>(GetArenaNoVirtual());
    value_markdown_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetWarning.value_markdown)
  return value_markdown_;
}
inline void ValueSetWarning::set_allocated_value_markdown(::google::fhir::stu3::proto::Markdown* value_markdown) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_markdown_);
  }
  if (value_markdown) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_markdown = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_markdown, submessage_arena);
    }
    
  } else {
    
  }
  value_markdown_ = value_markdown;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetWarning.value_markdown)
}

// -------------------------------------------------------------------

// ValueSetWorkflowStatus

// .google.fhir.stu3.proto.String id = 1;
inline bool ValueSetWorkflowStatus::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetWorkflowStatus::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetWorkflowStatus::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetWorkflowStatus.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetWorkflowStatus::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetWorkflowStatus.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetWorkflowStatus::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetWorkflowStatus.id)
  return id_;
}
inline void ValueSetWorkflowStatus::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetWorkflowStatus.id)
}

// .google.fhir.stu3.proto.String value_string = 3;
inline bool ValueSetWorkflowStatus::has_value_string() const {
  return this != internal_default_instance() && value_string_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& ValueSetWorkflowStatus::_internal_value_string() const {
  return *value_string_;
}
inline const ::google::fhir::stu3::proto::String& ValueSetWorkflowStatus::value_string() const {
  const ::google::fhir::stu3::proto::String* p = value_string_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ValueSetWorkflowStatus.value_string)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ValueSetWorkflowStatus::release_value_string() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ValueSetWorkflowStatus.value_string)
  
  ::google::fhir::stu3::proto::String* temp = value_string_;
  value_string_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ValueSetWorkflowStatus::mutable_value_string() {
  
  if (value_string_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_string_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ValueSetWorkflowStatus.value_string)
  return value_string_;
}
inline void ValueSetWorkflowStatus::set_allocated_value_string(::google::fhir::stu3::proto::String* value_string) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_string_);
  }
  if (value_string) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_string = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_string, submessage_arena);
    }
    
  } else {
    
  }
  value_string_ = value_string;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ValueSetWorkflowStatus.value_string)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace stu3
}  // namespace fhir
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2fstu3_2fextensions_2eproto

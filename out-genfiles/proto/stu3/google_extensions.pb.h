// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/stu3/google_extensions.proto

#ifndef PROTOBUF_INCLUDED_proto_2fstu3_2fgoogle_5fextensions_2eproto
#define PROTOBUF_INCLUDED_proto_2fstu3_2fgoogle_5fextensions_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/stu3/annotations.pb.h"
#include "proto/stu3/datatypes.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fstu3_2fgoogle_5fextensions_2eproto 

namespace protobuf_proto_2fstu3_2fgoogle_5fextensions_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2fstu3_2fgoogle_5fextensions_2eproto
namespace google {
namespace fhir {
namespace stu3 {
namespace google {
class Base64BinarySeparatorStride;
class Base64BinarySeparatorStrideDefaultTypeInternal;
extern Base64BinarySeparatorStrideDefaultTypeInternal _Base64BinarySeparatorStride_default_instance_;
class EventLabel;
class EventLabelDefaultTypeInternal;
extern EventLabelDefaultTypeInternal _EventLabel_default_instance_;
class EventLabel_Label;
class EventLabel_LabelDefaultTypeInternal;
extern EventLabel_LabelDefaultTypeInternal _EventLabel_Label_default_instance_;
class EventLabel_Label_ClassValue;
class EventLabel_Label_ClassValueDefaultTypeInternal;
extern EventLabel_Label_ClassValueDefaultTypeInternal _EventLabel_Label_ClassValue_default_instance_;
class EventTrigger;
class EventTriggerDefaultTypeInternal;
extern EventTriggerDefaultTypeInternal _EventTrigger_default_instance_;
class PrimitiveHasNoValue;
class PrimitiveHasNoValueDefaultTypeInternal;
extern PrimitiveHasNoValueDefaultTypeInternal _PrimitiveHasNoValue_default_instance_;
}  // namespace google
}  // namespace stu3
}  // namespace fhir
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::fhir::stu3::google::Base64BinarySeparatorStride* Arena::CreateMaybeMessage<::google::fhir::stu3::google::Base64BinarySeparatorStride>(Arena*);
template<> ::google::fhir::stu3::google::EventLabel* Arena::CreateMaybeMessage<::google::fhir::stu3::google::EventLabel>(Arena*);
template<> ::google::fhir::stu3::google::EventLabel_Label* Arena::CreateMaybeMessage<::google::fhir::stu3::google::EventLabel_Label>(Arena*);
template<> ::google::fhir::stu3::google::EventLabel_Label_ClassValue* Arena::CreateMaybeMessage<::google::fhir::stu3::google::EventLabel_Label_ClassValue>(Arena*);
template<> ::google::fhir::stu3::google::EventTrigger* Arena::CreateMaybeMessage<::google::fhir::stu3::google::EventTrigger>(Arena*);
template<> ::google::fhir::stu3::google::PrimitiveHasNoValue* Arena::CreateMaybeMessage<::google::fhir::stu3::google::PrimitiveHasNoValue>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace fhir {
namespace stu3 {
namespace google {

// ===================================================================

class Base64BinarySeparatorStride : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.google.Base64BinarySeparatorStride) */ {
 public:
  Base64BinarySeparatorStride();
  virtual ~Base64BinarySeparatorStride();

  Base64BinarySeparatorStride(const Base64BinarySeparatorStride& from);

  inline Base64BinarySeparatorStride& operator=(const Base64BinarySeparatorStride& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Base64BinarySeparatorStride(Base64BinarySeparatorStride&& from) noexcept
    : Base64BinarySeparatorStride() {
    *this = ::std::move(from);
  }

  inline Base64BinarySeparatorStride& operator=(Base64BinarySeparatorStride&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Base64BinarySeparatorStride& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Base64BinarySeparatorStride* internal_default_instance() {
    return reinterpret_cast<const Base64BinarySeparatorStride*>(
               &_Base64BinarySeparatorStride_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Base64BinarySeparatorStride* other);
  friend void swap(Base64BinarySeparatorStride& a, Base64BinarySeparatorStride& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Base64BinarySeparatorStride* New() const final {
    return CreateMaybeMessage<Base64BinarySeparatorStride>(NULL);
  }

  Base64BinarySeparatorStride* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Base64BinarySeparatorStride>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Base64BinarySeparatorStride& from);
  void MergeFrom(const Base64BinarySeparatorStride& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Base64BinarySeparatorStride* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String separator = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_separator() const;
  void clear_separator();
  static const int kSeparatorFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::String& _internal_separator() const;
  public:
  const ::google::fhir::stu3::proto::String& separator() const;
  ::google::fhir::stu3::proto::String* release_separator();
  ::google::fhir::stu3::proto::String* mutable_separator();
  void set_allocated_separator(::google::fhir::stu3::proto::String* separator);

  // .google.fhir.stu3.proto.PositiveInt stride = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::PositiveInt& _internal_stride() const;
  public:
  const ::google::fhir::stu3::proto::PositiveInt& stride() const;
  ::google::fhir::stu3::proto::PositiveInt* release_stride();
  ::google::fhir::stu3::proto::PositiveInt* mutable_stride();
  void set_allocated_stride(::google::fhir::stu3::proto::PositiveInt* stride);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.google.Base64BinarySeparatorStride)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* separator_;
  ::google::fhir::stu3::proto::PositiveInt* stride_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fgoogle_5fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventLabel_Label_ClassValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.google.EventLabel.Label.ClassValue) */ {
 public:
  EventLabel_Label_ClassValue();
  virtual ~EventLabel_Label_ClassValue();

  EventLabel_Label_ClassValue(const EventLabel_Label_ClassValue& from);

  inline EventLabel_Label_ClassValue& operator=(const EventLabel_Label_ClassValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventLabel_Label_ClassValue(EventLabel_Label_ClassValue&& from) noexcept
    : EventLabel_Label_ClassValue() {
    *this = ::std::move(from);
  }

  inline EventLabel_Label_ClassValue& operator=(EventLabel_Label_ClassValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventLabel_Label_ClassValue& default_instance();

  enum ClassValueCase {
    kBoolean = 1,
    kDecimal = 2,
    kInteger = 3,
    kStringValue = 4,
    CLASS_VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventLabel_Label_ClassValue* internal_default_instance() {
    return reinterpret_cast<const EventLabel_Label_ClassValue*>(
               &_EventLabel_Label_ClassValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(EventLabel_Label_ClassValue* other);
  friend void swap(EventLabel_Label_ClassValue& a, EventLabel_Label_ClassValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventLabel_Label_ClassValue* New() const final {
    return CreateMaybeMessage<EventLabel_Label_ClassValue>(NULL);
  }

  EventLabel_Label_ClassValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventLabel_Label_ClassValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventLabel_Label_ClassValue& from);
  void MergeFrom(const EventLabel_Label_ClassValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventLabel_Label_ClassValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Boolean boolean = 1;
  bool has_boolean() const;
  void clear_boolean();
  static const int kBooleanFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_boolean();
  void set_allocated_boolean(::google::fhir::stu3::proto::Boolean* boolean);

  // .google.fhir.stu3.proto.Decimal decimal = 2;
  bool has_decimal() const;
  void clear_decimal();
  static const int kDecimalFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_decimal() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& decimal() const;
  ::google::fhir::stu3::proto::Decimal* release_decimal();
  ::google::fhir::stu3::proto::Decimal* mutable_decimal();
  void set_allocated_decimal(::google::fhir::stu3::proto::Decimal* decimal);

  // .google.fhir.stu3.proto.Integer integer = 3;
  bool has_integer() const;
  void clear_integer();
  static const int kIntegerFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Integer& _internal_integer() const;
  public:
  const ::google::fhir::stu3::proto::Integer& integer() const;
  ::google::fhir::stu3::proto::Integer* release_integer();
  ::google::fhir::stu3::proto::Integer* mutable_integer();
  void set_allocated_integer(::google::fhir::stu3::proto::Integer* integer);

  // .google.fhir.stu3.proto.String string_value = 4[json_name = "string"];
  bool has_string_value() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::String& _internal_string_value() const;
  public:
  const ::google::fhir::stu3::proto::String& string_value() const;
  ::google::fhir::stu3::proto::String* release_string_value();
  ::google::fhir::stu3::proto::String* mutable_string_value();
  void set_allocated_string_value(::google::fhir::stu3::proto::String* string_value);

  void clear_class_value();
  ClassValueCase class_value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.google.EventLabel.Label.ClassValue)
 private:
  void set_has_boolean();
  void set_has_decimal();
  void set_has_integer();
  void set_has_string_value();

  inline bool has_class_value() const;
  inline void clear_has_class_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ClassValueUnion {
    ClassValueUnion() {}
    ::google::fhir::stu3::proto::Boolean* boolean_;
    ::google::fhir::stu3::proto::Decimal* decimal_;
    ::google::fhir::stu3::proto::Integer* integer_;
    ::google::fhir::stu3::proto::String* string_value_;
  } class_value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fgoogle_5fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventLabel_Label : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.google.EventLabel.Label) */ {
 public:
  EventLabel_Label();
  virtual ~EventLabel_Label();

  EventLabel_Label(const EventLabel_Label& from);

  inline EventLabel_Label& operator=(const EventLabel_Label& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventLabel_Label(EventLabel_Label&& from) noexcept
    : EventLabel_Label() {
    *this = ::std::move(from);
  }

  inline EventLabel_Label& operator=(EventLabel_Label&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventLabel_Label& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventLabel_Label* internal_default_instance() {
    return reinterpret_cast<const EventLabel_Label*>(
               &_EventLabel_Label_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(EventLabel_Label* other);
  friend void swap(EventLabel_Label& a, EventLabel_Label& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventLabel_Label* New() const final {
    return CreateMaybeMessage<EventLabel_Label>(NULL);
  }

  EventLabel_Label* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventLabel_Label>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventLabel_Label& from);
  void MergeFrom(const EventLabel_Label& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventLabel_Label* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EventLabel_Label_ClassValue ClassValue;

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Coding class_name = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_class_name() const;
  void clear_class_name();
  static const int kClassNameFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::Coding& _internal_class_name() const;
  public:
  const ::google::fhir::stu3::proto::Coding& class_name() const;
  ::google::fhir::stu3::proto::Coding* release_class_name();
  ::google::fhir::stu3::proto::Coding* mutable_class_name();
  void set_allocated_class_name(::google::fhir::stu3::proto::Coding* class_name);

  // .google.fhir.stu3.google.EventLabel.Label.ClassValue class_value = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_class_value() const;
  void clear_class_value();
  static const int kClassValueFieldNumber = 5;
  private:
  const ::google::fhir::stu3::google::EventLabel_Label_ClassValue& _internal_class_value() const;
  public:
  const ::google::fhir::stu3::google::EventLabel_Label_ClassValue& class_value() const;
  ::google::fhir::stu3::google::EventLabel_Label_ClassValue* release_class_value();
  ::google::fhir::stu3::google::EventLabel_Label_ClassValue* mutable_class_value();
  void set_allocated_class_value(::google::fhir::stu3::google::EventLabel_Label_ClassValue* class_value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.google.EventLabel.Label)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Coding* class_name_;
  ::google::fhir::stu3::google::EventLabel_Label_ClassValue* class_value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fgoogle_5fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventLabel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.google.EventLabel) */ {
 public:
  EventLabel();
  virtual ~EventLabel();

  EventLabel(const EventLabel& from);

  inline EventLabel& operator=(const EventLabel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventLabel(EventLabel&& from) noexcept
    : EventLabel() {
    *this = ::std::move(from);
  }

  inline EventLabel& operator=(EventLabel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventLabel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventLabel* internal_default_instance() {
    return reinterpret_cast<const EventLabel*>(
               &_EventLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(EventLabel* other);
  friend void swap(EventLabel& a, EventLabel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventLabel* New() const final {
    return CreateMaybeMessage<EventLabel>(NULL);
  }

  EventLabel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventLabel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventLabel& from);
  void MergeFrom(const EventLabel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventLabel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EventLabel_Label Label;

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // repeated .google.fhir.stu3.google.EventLabel.Label label = 8;
  int label_size() const;
  void clear_label();
  static const int kLabelFieldNumber = 8;
  ::google::fhir::stu3::google::EventLabel_Label* mutable_label(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::google::EventLabel_Label >*
      mutable_label();
  const ::google::fhir::stu3::google::EventLabel_Label& label(int index) const;
  ::google::fhir::stu3::google::EventLabel_Label* add_label();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::google::EventLabel_Label >&
      label() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Reference patient = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_patient() const;
  void clear_patient();
  static const int kPatientFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_patient() const;
  public:
  const ::google::fhir::stu3::proto::Reference& patient() const;
  ::google::fhir::stu3::proto::Reference* release_patient();
  ::google::fhir::stu3::proto::Reference* mutable_patient();
  void set_allocated_patient(::google::fhir::stu3::proto::Reference* patient);

  // .google.fhir.stu3.proto.Coding type = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Coding& _internal_type() const;
  public:
  const ::google::fhir::stu3::proto::Coding& type() const;
  ::google::fhir::stu3::proto::Coding* release_type();
  ::google::fhir::stu3::proto::Coding* mutable_type();
  void set_allocated_type(::google::fhir::stu3::proto::Coding* type);

  // .google.fhir.stu3.proto.DateTime event_time = 6;
  bool has_event_time() const;
  void clear_event_time();
  static const int kEventTimeFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::DateTime& _internal_event_time() const;
  public:
  const ::google::fhir::stu3::proto::DateTime& event_time() const;
  ::google::fhir::stu3::proto::DateTime* release_event_time();
  ::google::fhir::stu3::proto::DateTime* mutable_event_time();
  void set_allocated_event_time(::google::fhir::stu3::proto::DateTime* event_time);

  // .google.fhir.stu3.proto.Reference source = 7;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_source() const;
  public:
  const ::google::fhir::stu3::proto::Reference& source() const;
  ::google::fhir::stu3::proto::Reference* release_source();
  ::google::fhir::stu3::proto::Reference* mutable_source();
  void set_allocated_source(::google::fhir::stu3::proto::Reference* source);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.google.EventLabel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::google::EventLabel_Label > label_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Reference* patient_;
  ::google::fhir::stu3::proto::Coding* type_;
  ::google::fhir::stu3::proto::DateTime* event_time_;
  ::google::fhir::stu3::proto::Reference* source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fgoogle_5fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventTrigger : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.google.EventTrigger) */ {
 public:
  EventTrigger();
  virtual ~EventTrigger();

  EventTrigger(const EventTrigger& from);

  inline EventTrigger& operator=(const EventTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventTrigger(EventTrigger&& from) noexcept
    : EventTrigger() {
    *this = ::std::move(from);
  }

  inline EventTrigger& operator=(EventTrigger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventTrigger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventTrigger* internal_default_instance() {
    return reinterpret_cast<const EventTrigger*>(
               &_EventTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(EventTrigger* other);
  friend void swap(EventTrigger& a, EventTrigger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventTrigger* New() const final {
    return CreateMaybeMessage<EventTrigger>(NULL);
  }

  EventTrigger* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventTrigger>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventTrigger& from);
  void MergeFrom(const EventTrigger& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventTrigger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Coding type = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::Coding& _internal_type() const;
  public:
  const ::google::fhir::stu3::proto::Coding& type() const;
  ::google::fhir::stu3::proto::Coding* release_type();
  ::google::fhir::stu3::proto::Coding* mutable_type();
  void set_allocated_type(::google::fhir::stu3::proto::Coding* type);

  // .google.fhir.stu3.proto.DateTime event_time = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_event_time() const;
  void clear_event_time();
  static const int kEventTimeFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::DateTime& _internal_event_time() const;
  public:
  const ::google::fhir::stu3::proto::DateTime& event_time() const;
  ::google::fhir::stu3::proto::DateTime* release_event_time();
  ::google::fhir::stu3::proto::DateTime* mutable_event_time();
  void set_allocated_event_time(::google::fhir::stu3::proto::DateTime* event_time);

  // .google.fhir.stu3.proto.Reference source = 6;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_source() const;
  public:
  const ::google::fhir::stu3::proto::Reference& source() const;
  ::google::fhir::stu3::proto::Reference* release_source();
  ::google::fhir::stu3::proto::Reference* mutable_source();
  void set_allocated_source(::google::fhir::stu3::proto::Reference* source);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.google.EventTrigger)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Coding* type_;
  ::google::fhir::stu3::proto::DateTime* event_time_;
  ::google::fhir::stu3::proto::Reference* source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fgoogle_5fextensions_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PrimitiveHasNoValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.google.PrimitiveHasNoValue) */ {
 public:
  PrimitiveHasNoValue();
  virtual ~PrimitiveHasNoValue();

  PrimitiveHasNoValue(const PrimitiveHasNoValue& from);

  inline PrimitiveHasNoValue& operator=(const PrimitiveHasNoValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrimitiveHasNoValue(PrimitiveHasNoValue&& from) noexcept
    : PrimitiveHasNoValue() {
    *this = ::std::move(from);
  }

  inline PrimitiveHasNoValue& operator=(PrimitiveHasNoValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PrimitiveHasNoValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrimitiveHasNoValue* internal_default_instance() {
    return reinterpret_cast<const PrimitiveHasNoValue*>(
               &_PrimitiveHasNoValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PrimitiveHasNoValue* other);
  friend void swap(PrimitiveHasNoValue& a, PrimitiveHasNoValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrimitiveHasNoValue* New() const final {
    return CreateMaybeMessage<PrimitiveHasNoValue>(NULL);
  }

  PrimitiveHasNoValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrimitiveHasNoValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrimitiveHasNoValue& from);
  void MergeFrom(const PrimitiveHasNoValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrimitiveHasNoValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Boolean value_boolean = 3;
  bool has_value_boolean() const;
  void clear_value_boolean();
  static const int kValueBooleanFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_value_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& value_boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_value_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_value_boolean();
  void set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.google.PrimitiveHasNoValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Boolean* value_boolean_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fgoogle_5fextensions_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Base64BinarySeparatorStride

// .google.fhir.stu3.proto.String id = 1;
inline bool Base64BinarySeparatorStride::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& Base64BinarySeparatorStride::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Base64BinarySeparatorStride::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.Base64BinarySeparatorStride.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Base64BinarySeparatorStride::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.google.Base64BinarySeparatorStride.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Base64BinarySeparatorStride::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.Base64BinarySeparatorStride.id)
  return id_;
}
inline void Base64BinarySeparatorStride::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.google.Base64BinarySeparatorStride.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int Base64BinarySeparatorStride::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* Base64BinarySeparatorStride::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.Base64BinarySeparatorStride.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Base64BinarySeparatorStride::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.google.Base64BinarySeparatorStride.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Base64BinarySeparatorStride::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.Base64BinarySeparatorStride.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Base64BinarySeparatorStride::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.google.Base64BinarySeparatorStride.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Base64BinarySeparatorStride::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.google.Base64BinarySeparatorStride.extension)
  return extension_;
}

// .google.fhir.stu3.proto.String separator = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool Base64BinarySeparatorStride::has_separator() const {
  return this != internal_default_instance() && separator_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& Base64BinarySeparatorStride::_internal_separator() const {
  return *separator_;
}
inline const ::google::fhir::stu3::proto::String& Base64BinarySeparatorStride::separator() const {
  const ::google::fhir::stu3::proto::String* p = separator_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.Base64BinarySeparatorStride.separator)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Base64BinarySeparatorStride::release_separator() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.google.Base64BinarySeparatorStride.separator)
  
  ::google::fhir::stu3::proto::String* temp = separator_;
  separator_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Base64BinarySeparatorStride::mutable_separator() {
  
  if (separator_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    separator_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.Base64BinarySeparatorStride.separator)
  return separator_;
}
inline void Base64BinarySeparatorStride::set_allocated_separator(::google::fhir::stu3::proto::String* separator) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(separator_);
  }
  if (separator) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      separator = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, separator, submessage_arena);
    }
    
  } else {
    
  }
  separator_ = separator;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.google.Base64BinarySeparatorStride.separator)
}

// .google.fhir.stu3.proto.PositiveInt stride = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool Base64BinarySeparatorStride::has_stride() const {
  return this != internal_default_instance() && stride_ != NULL;
}
inline const ::google::fhir::stu3::proto::PositiveInt& Base64BinarySeparatorStride::_internal_stride() const {
  return *stride_;
}
inline const ::google::fhir::stu3::proto::PositiveInt& Base64BinarySeparatorStride::stride() const {
  const ::google::fhir::stu3::proto::PositiveInt* p = stride_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.Base64BinarySeparatorStride.stride)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::PositiveInt*>(
      &::google::fhir::stu3::proto::_PositiveInt_default_instance_);
}
inline ::google::fhir::stu3::proto::PositiveInt* Base64BinarySeparatorStride::release_stride() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.google.Base64BinarySeparatorStride.stride)
  
  ::google::fhir::stu3::proto::PositiveInt* temp = stride_;
  stride_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::PositiveInt* Base64BinarySeparatorStride::mutable_stride() {
  
  if (stride_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::PositiveInt>(GetArenaNoVirtual());
    stride_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.Base64BinarySeparatorStride.stride)
  return stride_;
}
inline void Base64BinarySeparatorStride::set_allocated_stride(::google::fhir::stu3::proto::PositiveInt* stride) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stride_);
  }
  if (stride) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stride = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stride, submessage_arena);
    }
    
  } else {
    
  }
  stride_ = stride;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.google.Base64BinarySeparatorStride.stride)
}

// -------------------------------------------------------------------

// EventLabel_Label_ClassValue

// .google.fhir.stu3.proto.Boolean boolean = 1;
inline bool EventLabel_Label_ClassValue::has_boolean() const {
  return class_value_case() == kBoolean;
}
inline void EventLabel_Label_ClassValue::set_has_boolean() {
  _oneof_case_[0] = kBoolean;
}
inline const ::google::fhir::stu3::proto::Boolean& EventLabel_Label_ClassValue::_internal_boolean() const {
  return *class_value_.boolean_;
}
inline ::google::fhir::stu3::proto::Boolean* EventLabel_Label_ClassValue::release_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.google.EventLabel.Label.ClassValue.boolean)
  if (has_boolean()) {
    clear_has_class_value();
      ::google::fhir::stu3::proto::Boolean* temp = class_value_.boolean_;
    class_value_.boolean_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Boolean& EventLabel_Label_ClassValue::boolean() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.EventLabel.Label.ClassValue.boolean)
  return has_boolean()
      ? *class_value_.boolean_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Boolean*>(&::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* EventLabel_Label_ClassValue::mutable_boolean() {
  if (!has_boolean()) {
    clear_class_value();
    set_has_boolean();
    class_value_.boolean_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Boolean >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.EventLabel.Label.ClassValue.boolean)
  return class_value_.boolean_;
}

// .google.fhir.stu3.proto.Decimal decimal = 2;
inline bool EventLabel_Label_ClassValue::has_decimal() const {
  return class_value_case() == kDecimal;
}
inline void EventLabel_Label_ClassValue::set_has_decimal() {
  _oneof_case_[0] = kDecimal;
}
inline const ::google::fhir::stu3::proto::Decimal& EventLabel_Label_ClassValue::_internal_decimal() const {
  return *class_value_.decimal_;
}
inline ::google::fhir::stu3::proto::Decimal* EventLabel_Label_ClassValue::release_decimal() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.google.EventLabel.Label.ClassValue.decimal)
  if (has_decimal()) {
    clear_has_class_value();
      ::google::fhir::stu3::proto::Decimal* temp = class_value_.decimal_;
    class_value_.decimal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Decimal& EventLabel_Label_ClassValue::decimal() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.EventLabel.Label.ClassValue.decimal)
  return has_decimal()
      ? *class_value_.decimal_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Decimal*>(&::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* EventLabel_Label_ClassValue::mutable_decimal() {
  if (!has_decimal()) {
    clear_class_value();
    set_has_decimal();
    class_value_.decimal_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Decimal >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.EventLabel.Label.ClassValue.decimal)
  return class_value_.decimal_;
}

// .google.fhir.stu3.proto.Integer integer = 3;
inline bool EventLabel_Label_ClassValue::has_integer() const {
  return class_value_case() == kInteger;
}
inline void EventLabel_Label_ClassValue::set_has_integer() {
  _oneof_case_[0] = kInteger;
}
inline const ::google::fhir::stu3::proto::Integer& EventLabel_Label_ClassValue::_internal_integer() const {
  return *class_value_.integer_;
}
inline ::google::fhir::stu3::proto::Integer* EventLabel_Label_ClassValue::release_integer() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.google.EventLabel.Label.ClassValue.integer)
  if (has_integer()) {
    clear_has_class_value();
      ::google::fhir::stu3::proto::Integer* temp = class_value_.integer_;
    class_value_.integer_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Integer& EventLabel_Label_ClassValue::integer() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.EventLabel.Label.ClassValue.integer)
  return has_integer()
      ? *class_value_.integer_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Integer*>(&::google::fhir::stu3::proto::_Integer_default_instance_);
}
inline ::google::fhir::stu3::proto::Integer* EventLabel_Label_ClassValue::mutable_integer() {
  if (!has_integer()) {
    clear_class_value();
    set_has_integer();
    class_value_.integer_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Integer >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.EventLabel.Label.ClassValue.integer)
  return class_value_.integer_;
}

// .google.fhir.stu3.proto.String string_value = 4[json_name = "string"];
inline bool EventLabel_Label_ClassValue::has_string_value() const {
  return class_value_case() == kStringValue;
}
inline void EventLabel_Label_ClassValue::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline const ::google::fhir::stu3::proto::String& EventLabel_Label_ClassValue::_internal_string_value() const {
  return *class_value_.string_value_;
}
inline ::google::fhir::stu3::proto::String* EventLabel_Label_ClassValue::release_string_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.google.EventLabel.Label.ClassValue.string_value)
  if (has_string_value()) {
    clear_has_class_value();
      ::google::fhir::stu3::proto::String* temp = class_value_.string_value_;
    class_value_.string_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::String& EventLabel_Label_ClassValue::string_value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.EventLabel.Label.ClassValue.string_value)
  return has_string_value()
      ? *class_value_.string_value_
      : *reinterpret_cast< ::google::fhir::stu3::proto::String*>(&::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* EventLabel_Label_ClassValue::mutable_string_value() {
  if (!has_string_value()) {
    clear_class_value();
    set_has_string_value();
    class_value_.string_value_ = CreateMaybeMessage< ::google::fhir::stu3::proto::String >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.EventLabel.Label.ClassValue.string_value)
  return class_value_.string_value_;
}

inline bool EventLabel_Label_ClassValue::has_class_value() const {
  return class_value_case() != CLASS_VALUE_NOT_SET;
}
inline void EventLabel_Label_ClassValue::clear_has_class_value() {
  _oneof_case_[0] = CLASS_VALUE_NOT_SET;
}
inline EventLabel_Label_ClassValue::ClassValueCase EventLabel_Label_ClassValue::class_value_case() const {
  return EventLabel_Label_ClassValue::ClassValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EventLabel_Label

// .google.fhir.stu3.proto.String id = 1;
inline bool EventLabel_Label::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& EventLabel_Label::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& EventLabel_Label::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.EventLabel.Label.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* EventLabel_Label::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.google.EventLabel.Label.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* EventLabel_Label::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.EventLabel.Label.id)
  return id_;
}
inline void EventLabel_Label::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.google.EventLabel.Label.id)
}

// .google.fhir.stu3.proto.Coding class_name = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool EventLabel_Label::has_class_name() const {
  return this != internal_default_instance() && class_name_ != NULL;
}
inline const ::google::fhir::stu3::proto::Coding& EventLabel_Label::_internal_class_name() const {
  return *class_name_;
}
inline const ::google::fhir::stu3::proto::Coding& EventLabel_Label::class_name() const {
  const ::google::fhir::stu3::proto::Coding* p = class_name_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.EventLabel.Label.class_name)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Coding*>(
      &::google::fhir::stu3::proto::_Coding_default_instance_);
}
inline ::google::fhir::stu3::proto::Coding* EventLabel_Label::release_class_name() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.google.EventLabel.Label.class_name)
  
  ::google::fhir::stu3::proto::Coding* temp = class_name_;
  class_name_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Coding* EventLabel_Label::mutable_class_name() {
  
  if (class_name_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Coding>(GetArenaNoVirtual());
    class_name_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.EventLabel.Label.class_name)
  return class_name_;
}
inline void EventLabel_Label::set_allocated_class_name(::google::fhir::stu3::proto::Coding* class_name) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(class_name_);
  }
  if (class_name) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      class_name = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, class_name, submessage_arena);
    }
    
  } else {
    
  }
  class_name_ = class_name;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.google.EventLabel.Label.class_name)
}

// .google.fhir.stu3.google.EventLabel.Label.ClassValue class_value = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool EventLabel_Label::has_class_value() const {
  return this != internal_default_instance() && class_value_ != NULL;
}
inline void EventLabel_Label::clear_class_value() {
  if (GetArenaNoVirtual() == NULL && class_value_ != NULL) {
    delete class_value_;
  }
  class_value_ = NULL;
}
inline const ::google::fhir::stu3::google::EventLabel_Label_ClassValue& EventLabel_Label::_internal_class_value() const {
  return *class_value_;
}
inline const ::google::fhir::stu3::google::EventLabel_Label_ClassValue& EventLabel_Label::class_value() const {
  const ::google::fhir::stu3::google::EventLabel_Label_ClassValue* p = class_value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.EventLabel.Label.class_value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::google::EventLabel_Label_ClassValue*>(
      &::google::fhir::stu3::google::_EventLabel_Label_ClassValue_default_instance_);
}
inline ::google::fhir::stu3::google::EventLabel_Label_ClassValue* EventLabel_Label::release_class_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.google.EventLabel.Label.class_value)
  
  ::google::fhir::stu3::google::EventLabel_Label_ClassValue* temp = class_value_;
  class_value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::google::EventLabel_Label_ClassValue* EventLabel_Label::mutable_class_value() {
  
  if (class_value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::google::EventLabel_Label_ClassValue>(GetArenaNoVirtual());
    class_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.EventLabel.Label.class_value)
  return class_value_;
}
inline void EventLabel_Label::set_allocated_class_value(::google::fhir::stu3::google::EventLabel_Label_ClassValue* class_value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete class_value_;
  }
  if (class_value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      class_value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, class_value, submessage_arena);
    }
    
  } else {
    
  }
  class_value_ = class_value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.google.EventLabel.Label.class_value)
}

// -------------------------------------------------------------------

// EventLabel

// .google.fhir.stu3.proto.String id = 1;
inline bool EventLabel::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& EventLabel::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& EventLabel::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.EventLabel.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* EventLabel::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.google.EventLabel.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* EventLabel::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.EventLabel.id)
  return id_;
}
inline void EventLabel::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.google.EventLabel.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int EventLabel::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* EventLabel::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.EventLabel.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
EventLabel::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.google.EventLabel.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& EventLabel::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.EventLabel.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* EventLabel::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.google.EventLabel.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
EventLabel::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.google.EventLabel.extension)
  return extension_;
}

// .google.fhir.stu3.proto.Reference patient = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool EventLabel::has_patient() const {
  return this != internal_default_instance() && patient_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& EventLabel::_internal_patient() const {
  return *patient_;
}
inline const ::google::fhir::stu3::proto::Reference& EventLabel::patient() const {
  const ::google::fhir::stu3::proto::Reference* p = patient_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.EventLabel.patient)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* EventLabel::release_patient() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.google.EventLabel.patient)
  
  ::google::fhir::stu3::proto::Reference* temp = patient_;
  patient_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* EventLabel::mutable_patient() {
  
  if (patient_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    patient_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.EventLabel.patient)
  return patient_;
}
inline void EventLabel::set_allocated_patient(::google::fhir::stu3::proto::Reference* patient) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(patient_);
  }
  if (patient) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      patient = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, patient, submessage_arena);
    }
    
  } else {
    
  }
  patient_ = patient;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.google.EventLabel.patient)
}

// .google.fhir.stu3.proto.Coding type = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool EventLabel::has_type() const {
  return this != internal_default_instance() && type_ != NULL;
}
inline const ::google::fhir::stu3::proto::Coding& EventLabel::_internal_type() const {
  return *type_;
}
inline const ::google::fhir::stu3::proto::Coding& EventLabel::type() const {
  const ::google::fhir::stu3::proto::Coding* p = type_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.EventLabel.type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Coding*>(
      &::google::fhir::stu3::proto::_Coding_default_instance_);
}
inline ::google::fhir::stu3::proto::Coding* EventLabel::release_type() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.google.EventLabel.type)
  
  ::google::fhir::stu3::proto::Coding* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Coding* EventLabel::mutable_type() {
  
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Coding>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.EventLabel.type)
  return type_;
}
inline void EventLabel::set_allocated_type(::google::fhir::stu3::proto::Coding* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.google.EventLabel.type)
}

// .google.fhir.stu3.proto.DateTime event_time = 6;
inline bool EventLabel::has_event_time() const {
  return this != internal_default_instance() && event_time_ != NULL;
}
inline const ::google::fhir::stu3::proto::DateTime& EventLabel::_internal_event_time() const {
  return *event_time_;
}
inline const ::google::fhir::stu3::proto::DateTime& EventLabel::event_time() const {
  const ::google::fhir::stu3::proto::DateTime* p = event_time_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.EventLabel.event_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::DateTime*>(
      &::google::fhir::stu3::proto::_DateTime_default_instance_);
}
inline ::google::fhir::stu3::proto::DateTime* EventLabel::release_event_time() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.google.EventLabel.event_time)
  
  ::google::fhir::stu3::proto::DateTime* temp = event_time_;
  event_time_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::DateTime* EventLabel::mutable_event_time() {
  
  if (event_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::DateTime>(GetArenaNoVirtual());
    event_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.EventLabel.event_time)
  return event_time_;
}
inline void EventLabel::set_allocated_event_time(::google::fhir::stu3::proto::DateTime* event_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(event_time_);
  }
  if (event_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      event_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event_time, submessage_arena);
    }
    
  } else {
    
  }
  event_time_ = event_time;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.google.EventLabel.event_time)
}

// .google.fhir.stu3.proto.Reference source = 7;
inline bool EventLabel::has_source() const {
  return this != internal_default_instance() && source_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& EventLabel::_internal_source() const {
  return *source_;
}
inline const ::google::fhir::stu3::proto::Reference& EventLabel::source() const {
  const ::google::fhir::stu3::proto::Reference* p = source_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.EventLabel.source)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* EventLabel::release_source() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.google.EventLabel.source)
  
  ::google::fhir::stu3::proto::Reference* temp = source_;
  source_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* EventLabel::mutable_source() {
  
  if (source_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.EventLabel.source)
  return source_;
}
inline void EventLabel::set_allocated_source(::google::fhir::stu3::proto::Reference* source) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(source_);
  }
  if (source) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.google.EventLabel.source)
}

// repeated .google.fhir.stu3.google.EventLabel.Label label = 8;
inline int EventLabel::label_size() const {
  return label_.size();
}
inline void EventLabel::clear_label() {
  label_.Clear();
}
inline ::google::fhir::stu3::google::EventLabel_Label* EventLabel::mutable_label(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.EventLabel.label)
  return label_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::google::EventLabel_Label >*
EventLabel::mutable_label() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.google.EventLabel.label)
  return &label_;
}
inline const ::google::fhir::stu3::google::EventLabel_Label& EventLabel::label(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.EventLabel.label)
  return label_.Get(index);
}
inline ::google::fhir::stu3::google::EventLabel_Label* EventLabel::add_label() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.google.EventLabel.label)
  return label_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::google::EventLabel_Label >&
EventLabel::label() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.google.EventLabel.label)
  return label_;
}

// -------------------------------------------------------------------

// EventTrigger

// .google.fhir.stu3.proto.String id = 1;
inline bool EventTrigger::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& EventTrigger::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& EventTrigger::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.EventTrigger.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* EventTrigger::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.google.EventTrigger.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* EventTrigger::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.EventTrigger.id)
  return id_;
}
inline void EventTrigger::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.google.EventTrigger.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int EventTrigger::extension_size() const {
  return extension_.size();
}
inline ::google::fhir::stu3::proto::Extension* EventTrigger::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.EventTrigger.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
EventTrigger::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.google.EventTrigger.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& EventTrigger::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.EventTrigger.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* EventTrigger::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.google.EventTrigger.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
EventTrigger::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.google.EventTrigger.extension)
  return extension_;
}

// .google.fhir.stu3.proto.Coding type = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool EventTrigger::has_type() const {
  return this != internal_default_instance() && type_ != NULL;
}
inline const ::google::fhir::stu3::proto::Coding& EventTrigger::_internal_type() const {
  return *type_;
}
inline const ::google::fhir::stu3::proto::Coding& EventTrigger::type() const {
  const ::google::fhir::stu3::proto::Coding* p = type_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.EventTrigger.type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Coding*>(
      &::google::fhir::stu3::proto::_Coding_default_instance_);
}
inline ::google::fhir::stu3::proto::Coding* EventTrigger::release_type() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.google.EventTrigger.type)
  
  ::google::fhir::stu3::proto::Coding* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Coding* EventTrigger::mutable_type() {
  
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Coding>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.EventTrigger.type)
  return type_;
}
inline void EventTrigger::set_allocated_type(::google::fhir::stu3::proto::Coding* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(type_);
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.google.EventTrigger.type)
}

// .google.fhir.stu3.proto.DateTime event_time = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool EventTrigger::has_event_time() const {
  return this != internal_default_instance() && event_time_ != NULL;
}
inline const ::google::fhir::stu3::proto::DateTime& EventTrigger::_internal_event_time() const {
  return *event_time_;
}
inline const ::google::fhir::stu3::proto::DateTime& EventTrigger::event_time() const {
  const ::google::fhir::stu3::proto::DateTime* p = event_time_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.EventTrigger.event_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::DateTime*>(
      &::google::fhir::stu3::proto::_DateTime_default_instance_);
}
inline ::google::fhir::stu3::proto::DateTime* EventTrigger::release_event_time() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.google.EventTrigger.event_time)
  
  ::google::fhir::stu3::proto::DateTime* temp = event_time_;
  event_time_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::DateTime* EventTrigger::mutable_event_time() {
  
  if (event_time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::DateTime>(GetArenaNoVirtual());
    event_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.EventTrigger.event_time)
  return event_time_;
}
inline void EventTrigger::set_allocated_event_time(::google::fhir::stu3::proto::DateTime* event_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(event_time_);
  }
  if (event_time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      event_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event_time, submessage_arena);
    }
    
  } else {
    
  }
  event_time_ = event_time;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.google.EventTrigger.event_time)
}

// .google.fhir.stu3.proto.Reference source = 6;
inline bool EventTrigger::has_source() const {
  return this != internal_default_instance() && source_ != NULL;
}
inline const ::google::fhir::stu3::proto::Reference& EventTrigger::_internal_source() const {
  return *source_;
}
inline const ::google::fhir::stu3::proto::Reference& EventTrigger::source() const {
  const ::google::fhir::stu3::proto::Reference* p = source_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.EventTrigger.source)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* EventTrigger::release_source() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.google.EventTrigger.source)
  
  ::google::fhir::stu3::proto::Reference* temp = source_;
  source_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* EventTrigger::mutable_source() {
  
  if (source_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.EventTrigger.source)
  return source_;
}
inline void EventTrigger::set_allocated_source(::google::fhir::stu3::proto::Reference* source) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(source_);
  }
  if (source) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.google.EventTrigger.source)
}

// -------------------------------------------------------------------

// PrimitiveHasNoValue

// .google.fhir.stu3.proto.String id = 1;
inline bool PrimitiveHasNoValue::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline const ::google::fhir::stu3::proto::String& PrimitiveHasNoValue::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& PrimitiveHasNoValue::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.PrimitiveHasNoValue.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PrimitiveHasNoValue::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.google.PrimitiveHasNoValue.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PrimitiveHasNoValue::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.PrimitiveHasNoValue.id)
  return id_;
}
inline void PrimitiveHasNoValue::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.google.PrimitiveHasNoValue.id)
}

// .google.fhir.stu3.proto.Boolean value_boolean = 3;
inline bool PrimitiveHasNoValue::has_value_boolean() const {
  return this != internal_default_instance() && value_boolean_ != NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& PrimitiveHasNoValue::_internal_value_boolean() const {
  return *value_boolean_;
}
inline const ::google::fhir::stu3::proto::Boolean& PrimitiveHasNoValue::value_boolean() const {
  const ::google::fhir::stu3::proto::Boolean* p = value_boolean_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.google.PrimitiveHasNoValue.value_boolean)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* PrimitiveHasNoValue::release_value_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.google.PrimitiveHasNoValue.value_boolean)
  
  ::google::fhir::stu3::proto::Boolean* temp = value_boolean_;
  value_boolean_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* PrimitiveHasNoValue::mutable_value_boolean() {
  
  if (value_boolean_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    value_boolean_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.google.PrimitiveHasNoValue.value_boolean)
  return value_boolean_;
}
inline void PrimitiveHasNoValue::set_allocated_value_boolean(::google::fhir::stu3::proto::Boolean* value_boolean) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_boolean_);
  }
  if (value_boolean) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value_boolean = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value_boolean, submessage_arena);
    }
    
  } else {
    
  }
  value_boolean_ = value_boolean;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.google.PrimitiveHasNoValue.value_boolean)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace google
}  // namespace stu3
}  // namespace fhir
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2fstu3_2fgoogle_5fextensions_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/stu3/profile_config.proto

#ifndef PROTOBUF_INCLUDED_proto_2fstu3_2fprofile_5fconfig_2eproto
#define PROTOBUF_INCLUDED_proto_2fstu3_2fprofile_5fconfig_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/stu3/codes.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fstu3_2fprofile_5fconfig_2eproto 

namespace protobuf_proto_2fstu3_2fprofile_5fconfig_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2fstu3_2fprofile_5fconfig_2eproto
namespace google {
namespace fhir {
namespace proto {
class CodeData;
class CodeDataDefaultTypeInternal;
extern CodeDataDefaultTypeInternal _CodeData_default_instance_;
class CodeableConceptSlice;
class CodeableConceptSliceDefaultTypeInternal;
extern CodeableConceptSliceDefaultTypeInternal _CodeableConceptSlice_default_instance_;
class CodeableConceptSlice_CodingSlice;
class CodeableConceptSlice_CodingSliceDefaultTypeInternal;
extern CodeableConceptSlice_CodingSliceDefaultTypeInternal _CodeableConceptSlice_CodingSlice_default_instance_;
class ComplexExtension;
class ComplexExtensionDefaultTypeInternal;
extern ComplexExtensionDefaultTypeInternal _ComplexExtension_default_instance_;
class ElementData;
class ElementDataDefaultTypeInternal;
extern ElementDataDefaultTypeInternal _ElementData_default_instance_;
class ExtensionSlice;
class ExtensionSliceDefaultTypeInternal;
extern ExtensionSliceDefaultTypeInternal _ExtensionSlice_default_instance_;
class Extensions;
class ExtensionsDefaultTypeInternal;
extern ExtensionsDefaultTypeInternal _Extensions_default_instance_;
class FieldRestriction;
class FieldRestrictionDefaultTypeInternal;
extern FieldRestrictionDefaultTypeInternal _FieldRestriction_default_instance_;
class PackageInfo;
class PackageInfoDefaultTypeInternal;
extern PackageInfoDefaultTypeInternal _PackageInfo_default_instance_;
class Profile;
class ProfileDefaultTypeInternal;
extern ProfileDefaultTypeInternal _Profile_default_instance_;
class Profiles;
class ProfilesDefaultTypeInternal;
extern ProfilesDefaultTypeInternal _Profiles_default_instance_;
class SimpleExtension;
class SimpleExtensionDefaultTypeInternal;
extern SimpleExtensionDefaultTypeInternal _SimpleExtension_default_instance_;
}  // namespace proto
}  // namespace fhir
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::fhir::proto::CodeData* Arena::CreateMaybeMessage<::google::fhir::proto::CodeData>(Arena*);
template<> ::google::fhir::proto::CodeableConceptSlice* Arena::CreateMaybeMessage<::google::fhir::proto::CodeableConceptSlice>(Arena*);
template<> ::google::fhir::proto::CodeableConceptSlice_CodingSlice* Arena::CreateMaybeMessage<::google::fhir::proto::CodeableConceptSlice_CodingSlice>(Arena*);
template<> ::google::fhir::proto::ComplexExtension* Arena::CreateMaybeMessage<::google::fhir::proto::ComplexExtension>(Arena*);
template<> ::google::fhir::proto::ElementData* Arena::CreateMaybeMessage<::google::fhir::proto::ElementData>(Arena*);
template<> ::google::fhir::proto::ExtensionSlice* Arena::CreateMaybeMessage<::google::fhir::proto::ExtensionSlice>(Arena*);
template<> ::google::fhir::proto::Extensions* Arena::CreateMaybeMessage<::google::fhir::proto::Extensions>(Arena*);
template<> ::google::fhir::proto::FieldRestriction* Arena::CreateMaybeMessage<::google::fhir::proto::FieldRestriction>(Arena*);
template<> ::google::fhir::proto::PackageInfo* Arena::CreateMaybeMessage<::google::fhir::proto::PackageInfo>(Arena*);
template<> ::google::fhir::proto::Profile* Arena::CreateMaybeMessage<::google::fhir::proto::Profile>(Arena*);
template<> ::google::fhir::proto::Profiles* Arena::CreateMaybeMessage<::google::fhir::proto::Profiles>(Arena*);
template<> ::google::fhir::proto::SimpleExtension* Arena::CreateMaybeMessage<::google::fhir::proto::SimpleExtension>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace fhir {
namespace proto {

enum SizeRestriction {
  UNKNOWN = 0,
  ABSENT = 1,
  REQUIRED = 2,
  OPTIONAL = 3,
  AT_LEAST_ONE = 4,
  REPEATED = 5,
  SizeRestriction_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SizeRestriction_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SizeRestriction_IsValid(int value);
const SizeRestriction SizeRestriction_MIN = UNKNOWN;
const SizeRestriction SizeRestriction_MAX = REPEATED;
const int SizeRestriction_ARRAYSIZE = SizeRestriction_MAX + 1;

const ::google::protobuf::EnumDescriptor* SizeRestriction_descriptor();
inline const ::std::string& SizeRestriction_Name(SizeRestriction value) {
  return ::google::protobuf::internal::NameOfEnum(
    SizeRestriction_descriptor(), value);
}
inline bool SizeRestriction_Parse(
    const ::std::string& name, SizeRestriction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SizeRestriction>(
    SizeRestriction_descriptor(), name, value);
}
// ===================================================================

class PackageInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.proto.PackageInfo) */ {
 public:
  PackageInfo();
  virtual ~PackageInfo();

  PackageInfo(const PackageInfo& from);

  inline PackageInfo& operator=(const PackageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PackageInfo(PackageInfo&& from) noexcept
    : PackageInfo() {
    *this = ::std::move(from);
  }

  inline PackageInfo& operator=(PackageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PackageInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackageInfo* internal_default_instance() {
    return reinterpret_cast<const PackageInfo*>(
               &_PackageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PackageInfo* other);
  friend void swap(PackageInfo& a, PackageInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PackageInfo* New() const final {
    return CreateMaybeMessage<PackageInfo>(NULL);
  }

  PackageInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PackageInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PackageInfo& from);
  void MergeFrom(const PackageInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string base_url = 1;
  void clear_base_url();
  static const int kBaseUrlFieldNumber = 1;
  const ::std::string& base_url() const;
  void set_base_url(const ::std::string& value);
  #if LANG_CXX11
  void set_base_url(::std::string&& value);
  #endif
  void set_base_url(const char* value);
  void set_base_url(const char* value, size_t size);
  ::std::string* mutable_base_url();
  ::std::string* release_base_url();
  void set_allocated_base_url(::std::string* base_url);

  // string proto_package = 2;
  void clear_proto_package();
  static const int kProtoPackageFieldNumber = 2;
  const ::std::string& proto_package() const;
  void set_proto_package(const ::std::string& value);
  #if LANG_CXX11
  void set_proto_package(::std::string&& value);
  #endif
  void set_proto_package(const char* value);
  void set_proto_package(const char* value, size_t size);
  ::std::string* mutable_proto_package();
  ::std::string* release_proto_package();
  void set_allocated_proto_package(::std::string* proto_package);

  // string java_proto_package = 3;
  void clear_java_proto_package();
  static const int kJavaProtoPackageFieldNumber = 3;
  const ::std::string& java_proto_package() const;
  void set_java_proto_package(const ::std::string& value);
  #if LANG_CXX11
  void set_java_proto_package(::std::string&& value);
  #endif
  void set_java_proto_package(const char* value);
  void set_java_proto_package(const char* value, size_t size);
  ::std::string* mutable_java_proto_package();
  ::std::string* release_java_proto_package();
  void set_allocated_java_proto_package(::std::string* java_proto_package);

  // string go_proto_package = 4;
  void clear_go_proto_package();
  static const int kGoProtoPackageFieldNumber = 4;
  const ::std::string& go_proto_package() const;
  void set_go_proto_package(const ::std::string& value);
  #if LANG_CXX11
  void set_go_proto_package(::std::string&& value);
  #endif
  void set_go_proto_package(const char* value);
  void set_go_proto_package(const char* value, size_t size);
  ::std::string* mutable_go_proto_package();
  ::std::string* release_go_proto_package();
  void set_allocated_go_proto_package(::std::string* go_proto_package);

  // string publisher = 5;
  void clear_publisher();
  static const int kPublisherFieldNumber = 5;
  const ::std::string& publisher() const;
  void set_publisher(const ::std::string& value);
  #if LANG_CXX11
  void set_publisher(::std::string&& value);
  #endif
  void set_publisher(const char* value);
  void set_publisher(const char* value, size_t size);
  ::std::string* mutable_publisher();
  ::std::string* release_publisher();
  void set_allocated_publisher(::std::string* publisher);

  // string fhir_version = 6;
  void clear_fhir_version();
  static const int kFhirVersionFieldNumber = 6;
  const ::std::string& fhir_version() const;
  void set_fhir_version(const ::std::string& value);
  #if LANG_CXX11
  void set_fhir_version(::std::string&& value);
  #endif
  void set_fhir_version(const char* value);
  void set_fhir_version(const char* value, size_t size);
  ::std::string* mutable_fhir_version();
  ::std::string* release_fhir_version();
  void set_allocated_fhir_version(::std::string* fhir_version);

  // string telcom_url = 7;
  void clear_telcom_url();
  static const int kTelcomUrlFieldNumber = 7;
  const ::std::string& telcom_url() const;
  void set_telcom_url(const ::std::string& value);
  #if LANG_CXX11
  void set_telcom_url(::std::string&& value);
  #endif
  void set_telcom_url(const char* value);
  void set_telcom_url(const char* value, size_t size);
  ::std::string* mutable_telcom_url();
  ::std::string* release_telcom_url();
  void set_allocated_telcom_url(::std::string* telcom_url);

  // @@protoc_insertion_point(class_scope:google.fhir.proto.PackageInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr base_url_;
  ::google::protobuf::internal::ArenaStringPtr proto_package_;
  ::google::protobuf::internal::ArenaStringPtr java_proto_package_;
  ::google::protobuf::internal::ArenaStringPtr go_proto_package_;
  ::google::protobuf::internal::ArenaStringPtr publisher_;
  ::google::protobuf::internal::ArenaStringPtr fhir_version_;
  ::google::protobuf::internal::ArenaStringPtr telcom_url_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fprofile_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Profiles : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.proto.Profiles) */ {
 public:
  Profiles();
  virtual ~Profiles();

  Profiles(const Profiles& from);

  inline Profiles& operator=(const Profiles& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Profiles(Profiles&& from) noexcept
    : Profiles() {
    *this = ::std::move(from);
  }

  inline Profiles& operator=(Profiles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Profiles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Profiles* internal_default_instance() {
    return reinterpret_cast<const Profiles*>(
               &_Profiles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Profiles* other);
  friend void swap(Profiles& a, Profiles& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Profiles* New() const final {
    return CreateMaybeMessage<Profiles>(NULL);
  }

  Profiles* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Profiles>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Profiles& from);
  void MergeFrom(const Profiles& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Profiles* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.proto.Profile profile = 2;
  int profile_size() const;
  void clear_profile();
  static const int kProfileFieldNumber = 2;
  ::google::fhir::proto::Profile* mutable_profile(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::Profile >*
      mutable_profile();
  const ::google::fhir::proto::Profile& profile(int index) const;
  ::google::fhir::proto::Profile* add_profile();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::Profile >&
      profile() const;

  // @@protoc_insertion_point(class_scope:google.fhir.proto.Profiles)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::Profile > profile_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fprofile_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Extensions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.proto.Extensions) */ {
 public:
  Extensions();
  virtual ~Extensions();

  Extensions(const Extensions& from);

  inline Extensions& operator=(const Extensions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Extensions(Extensions&& from) noexcept
    : Extensions() {
    *this = ::std::move(from);
  }

  inline Extensions& operator=(Extensions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Extensions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Extensions* internal_default_instance() {
    return reinterpret_cast<const Extensions*>(
               &_Extensions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Extensions* other);
  friend void swap(Extensions& a, Extensions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Extensions* New() const final {
    return CreateMaybeMessage<Extensions>(NULL);
  }

  Extensions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Extensions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Extensions& from);
  void MergeFrom(const Extensions& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extensions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.proto.SimpleExtension simple_extension = 2;
  int simple_extension_size() const;
  void clear_simple_extension();
  static const int kSimpleExtensionFieldNumber = 2;
  ::google::fhir::proto::SimpleExtension* mutable_simple_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::SimpleExtension >*
      mutable_simple_extension();
  const ::google::fhir::proto::SimpleExtension& simple_extension(int index) const;
  ::google::fhir::proto::SimpleExtension* add_simple_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::SimpleExtension >&
      simple_extension() const;

  // repeated .google.fhir.proto.ComplexExtension complex_extension = 3;
  int complex_extension_size() const;
  void clear_complex_extension();
  static const int kComplexExtensionFieldNumber = 3;
  ::google::fhir::proto::ComplexExtension* mutable_complex_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::ComplexExtension >*
      mutable_complex_extension();
  const ::google::fhir::proto::ComplexExtension& complex_extension(int index) const;
  ::google::fhir::proto::ComplexExtension* add_complex_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::ComplexExtension >&
      complex_extension() const;

  // @@protoc_insertion_point(class_scope:google.fhir.proto.Extensions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::SimpleExtension > simple_extension_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::ComplexExtension > complex_extension_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fprofile_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Profile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.proto.Profile) */ {
 public:
  Profile();
  virtual ~Profile();

  Profile(const Profile& from);

  inline Profile& operator=(const Profile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Profile(Profile&& from) noexcept
    : Profile() {
    *this = ::std::move(from);
  }

  inline Profile& operator=(Profile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Profile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Profile* internal_default_instance() {
    return reinterpret_cast<const Profile*>(
               &_Profile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Profile* other);
  friend void swap(Profile& a, Profile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Profile* New() const final {
    return CreateMaybeMessage<Profile>(NULL);
  }

  Profile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Profile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Profile& from);
  void MergeFrom(const Profile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Profile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.proto.FieldRestriction restriction = 3;
  int restriction_size() const;
  void clear_restriction();
  static const int kRestrictionFieldNumber = 3;
  ::google::fhir::proto::FieldRestriction* mutable_restriction(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::FieldRestriction >*
      mutable_restriction();
  const ::google::fhir::proto::FieldRestriction& restriction(int index) const;
  ::google::fhir::proto::FieldRestriction* add_restriction();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::FieldRestriction >&
      restriction() const;

  // repeated .google.fhir.proto.ExtensionSlice extension_slice = 4;
  int extension_slice_size() const;
  void clear_extension_slice();
  static const int kExtensionSliceFieldNumber = 4;
  ::google::fhir::proto::ExtensionSlice* mutable_extension_slice(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::ExtensionSlice >*
      mutable_extension_slice();
  const ::google::fhir::proto::ExtensionSlice& extension_slice(int index) const;
  ::google::fhir::proto::ExtensionSlice* add_extension_slice();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::ExtensionSlice >&
      extension_slice() const;

  // repeated .google.fhir.proto.CodeableConceptSlice codeable_concept_slice = 5;
  int codeable_concept_slice_size() const;
  void clear_codeable_concept_slice();
  static const int kCodeableConceptSliceFieldNumber = 5;
  ::google::fhir::proto::CodeableConceptSlice* mutable_codeable_concept_slice(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::CodeableConceptSlice >*
      mutable_codeable_concept_slice();
  const ::google::fhir::proto::CodeableConceptSlice& codeable_concept_slice(int index) const;
  ::google::fhir::proto::CodeableConceptSlice* add_codeable_concept_slice();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::CodeableConceptSlice >&
      codeable_concept_slice() const;

  // string base_url = 2;
  void clear_base_url();
  static const int kBaseUrlFieldNumber = 2;
  const ::std::string& base_url() const;
  void set_base_url(const ::std::string& value);
  #if LANG_CXX11
  void set_base_url(::std::string&& value);
  #endif
  void set_base_url(const char* value);
  void set_base_url(const char* value, size_t size);
  ::std::string* mutable_base_url();
  ::std::string* release_base_url();
  void set_allocated_base_url(::std::string* base_url);

  // .google.fhir.proto.ElementData element_data = 1;
  bool has_element_data() const;
  void clear_element_data();
  static const int kElementDataFieldNumber = 1;
  private:
  const ::google::fhir::proto::ElementData& _internal_element_data() const;
  public:
  const ::google::fhir::proto::ElementData& element_data() const;
  ::google::fhir::proto::ElementData* release_element_data();
  ::google::fhir::proto::ElementData* mutable_element_data();
  void set_allocated_element_data(::google::fhir::proto::ElementData* element_data);

  // @@protoc_insertion_point(class_scope:google.fhir.proto.Profile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::FieldRestriction > restriction_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::ExtensionSlice > extension_slice_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::CodeableConceptSlice > codeable_concept_slice_;
  ::google::protobuf::internal::ArenaStringPtr base_url_;
  ::google::fhir::proto::ElementData* element_data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fprofile_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FieldRestriction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.proto.FieldRestriction) */ {
 public:
  FieldRestriction();
  virtual ~FieldRestriction();

  FieldRestriction(const FieldRestriction& from);

  inline FieldRestriction& operator=(const FieldRestriction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FieldRestriction(FieldRestriction&& from) noexcept
    : FieldRestriction() {
    *this = ::std::move(from);
  }

  inline FieldRestriction& operator=(FieldRestriction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FieldRestriction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FieldRestriction* internal_default_instance() {
    return reinterpret_cast<const FieldRestriction*>(
               &_FieldRestriction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(FieldRestriction* other);
  friend void swap(FieldRestriction& a, FieldRestriction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FieldRestriction* New() const final {
    return CreateMaybeMessage<FieldRestriction>(NULL);
  }

  FieldRestriction* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FieldRestriction>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FieldRestriction& from);
  void MergeFrom(const FieldRestriction& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldRestriction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string field_id = 1;
  void clear_field_id();
  static const int kFieldIdFieldNumber = 1;
  const ::std::string& field_id() const;
  void set_field_id(const ::std::string& value);
  #if LANG_CXX11
  void set_field_id(::std::string&& value);
  #endif
  void set_field_id(const char* value);
  void set_field_id(const char* value, size_t size);
  ::std::string* mutable_field_id();
  ::std::string* release_field_id();
  void set_allocated_field_id(::std::string* field_id);

  // .google.fhir.proto.SizeRestriction size_restriction = 2;
  void clear_size_restriction();
  static const int kSizeRestrictionFieldNumber = 2;
  ::google::fhir::proto::SizeRestriction size_restriction() const;
  void set_size_restriction(::google::fhir::proto::SizeRestriction value);

  // @@protoc_insertion_point(class_scope:google.fhir.proto.FieldRestriction)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr field_id_;
  int size_restriction_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fprofile_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExtensionSlice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.proto.ExtensionSlice) */ {
 public:
  ExtensionSlice();
  virtual ~ExtensionSlice();

  ExtensionSlice(const ExtensionSlice& from);

  inline ExtensionSlice& operator=(const ExtensionSlice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExtensionSlice(ExtensionSlice&& from) noexcept
    : ExtensionSlice() {
    *this = ::std::move(from);
  }

  inline ExtensionSlice& operator=(ExtensionSlice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtensionSlice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtensionSlice* internal_default_instance() {
    return reinterpret_cast<const ExtensionSlice*>(
               &_ExtensionSlice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ExtensionSlice* other);
  friend void swap(ExtensionSlice& a, ExtensionSlice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExtensionSlice* New() const final {
    return CreateMaybeMessage<ExtensionSlice>(NULL);
  }

  ExtensionSlice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExtensionSlice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExtensionSlice& from);
  void MergeFrom(const ExtensionSlice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtensionSlice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string field_id = 1;
  void clear_field_id();
  static const int kFieldIdFieldNumber = 1;
  const ::std::string& field_id() const;
  void set_field_id(const ::std::string& value);
  #if LANG_CXX11
  void set_field_id(::std::string&& value);
  #endif
  void set_field_id(const char* value);
  void set_field_id(const char* value, size_t size);
  ::std::string* mutable_field_id();
  ::std::string* release_field_id();
  void set_allocated_field_id(::std::string* field_id);

  // string url = 3;
  void clear_url();
  static const int kUrlFieldNumber = 3;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // .google.fhir.proto.ElementData element_data = 2;
  bool has_element_data() const;
  void clear_element_data();
  static const int kElementDataFieldNumber = 2;
  private:
  const ::google::fhir::proto::ElementData& _internal_element_data() const;
  public:
  const ::google::fhir::proto::ElementData& element_data() const;
  ::google::fhir::proto::ElementData* release_element_data();
  ::google::fhir::proto::ElementData* mutable_element_data();
  void set_allocated_element_data(::google::fhir::proto::ElementData* element_data);

  // @@protoc_insertion_point(class_scope:google.fhir.proto.ExtensionSlice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr field_id_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::fhir::proto::ElementData* element_data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fprofile_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeableConceptSlice_CodingSlice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.proto.CodeableConceptSlice.CodingSlice) */ {
 public:
  CodeableConceptSlice_CodingSlice();
  virtual ~CodeableConceptSlice_CodingSlice();

  CodeableConceptSlice_CodingSlice(const CodeableConceptSlice_CodingSlice& from);

  inline CodeableConceptSlice_CodingSlice& operator=(const CodeableConceptSlice_CodingSlice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeableConceptSlice_CodingSlice(CodeableConceptSlice_CodingSlice&& from) noexcept
    : CodeableConceptSlice_CodingSlice() {
    *this = ::std::move(from);
  }

  inline CodeableConceptSlice_CodingSlice& operator=(CodeableConceptSlice_CodingSlice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeableConceptSlice_CodingSlice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeableConceptSlice_CodingSlice* internal_default_instance() {
    return reinterpret_cast<const CodeableConceptSlice_CodingSlice*>(
               &_CodeableConceptSlice_CodingSlice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(CodeableConceptSlice_CodingSlice* other);
  friend void swap(CodeableConceptSlice_CodingSlice& a, CodeableConceptSlice_CodingSlice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeableConceptSlice_CodingSlice* New() const final {
    return CreateMaybeMessage<CodeableConceptSlice_CodingSlice>(NULL);
  }

  CodeableConceptSlice_CodingSlice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeableConceptSlice_CodingSlice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeableConceptSlice_CodingSlice& from);
  void MergeFrom(const CodeableConceptSlice_CodingSlice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeableConceptSlice_CodingSlice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.proto.ElementData element_data = 1;
  bool has_element_data() const;
  void clear_element_data();
  static const int kElementDataFieldNumber = 1;
  private:
  const ::google::fhir::proto::ElementData& _internal_element_data() const;
  public:
  const ::google::fhir::proto::ElementData& element_data() const;
  ::google::fhir::proto::ElementData* release_element_data();
  ::google::fhir::proto::ElementData* mutable_element_data();
  void set_allocated_element_data(::google::fhir::proto::ElementData* element_data);

  // .google.fhir.proto.CodeData code_data = 2;
  bool has_code_data() const;
  void clear_code_data();
  static const int kCodeDataFieldNumber = 2;
  private:
  const ::google::fhir::proto::CodeData& _internal_code_data() const;
  public:
  const ::google::fhir::proto::CodeData& code_data() const;
  ::google::fhir::proto::CodeData* release_code_data();
  ::google::fhir::proto::CodeData* mutable_code_data();
  void set_allocated_code_data(::google::fhir::proto::CodeData* code_data);

  // @@protoc_insertion_point(class_scope:google.fhir.proto.CodeableConceptSlice.CodingSlice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::fhir::proto::ElementData* element_data_;
  ::google::fhir::proto::CodeData* code_data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fprofile_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeableConceptSlice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.proto.CodeableConceptSlice) */ {
 public:
  CodeableConceptSlice();
  virtual ~CodeableConceptSlice();

  CodeableConceptSlice(const CodeableConceptSlice& from);

  inline CodeableConceptSlice& operator=(const CodeableConceptSlice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeableConceptSlice(CodeableConceptSlice&& from) noexcept
    : CodeableConceptSlice() {
    *this = ::std::move(from);
  }

  inline CodeableConceptSlice& operator=(CodeableConceptSlice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeableConceptSlice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeableConceptSlice* internal_default_instance() {
    return reinterpret_cast<const CodeableConceptSlice*>(
               &_CodeableConceptSlice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(CodeableConceptSlice* other);
  friend void swap(CodeableConceptSlice& a, CodeableConceptSlice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeableConceptSlice* New() const final {
    return CreateMaybeMessage<CodeableConceptSlice>(NULL);
  }

  CodeableConceptSlice* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeableConceptSlice>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeableConceptSlice& from);
  void MergeFrom(const CodeableConceptSlice& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeableConceptSlice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CodeableConceptSlice_CodingSlice CodingSlice;

  // accessors -------------------------------------------------------

  // repeated .google.fhir.proto.CodeableConceptSlice.CodingSlice coding_slice = 2;
  int coding_slice_size() const;
  void clear_coding_slice();
  static const int kCodingSliceFieldNumber = 2;
  ::google::fhir::proto::CodeableConceptSlice_CodingSlice* mutable_coding_slice(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::CodeableConceptSlice_CodingSlice >*
      mutable_coding_slice();
  const ::google::fhir::proto::CodeableConceptSlice_CodingSlice& coding_slice(int index) const;
  ::google::fhir::proto::CodeableConceptSlice_CodingSlice* add_coding_slice();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::CodeableConceptSlice_CodingSlice >&
      coding_slice() const;

  // string field_id = 1;
  void clear_field_id();
  static const int kFieldIdFieldNumber = 1;
  const ::std::string& field_id() const;
  void set_field_id(const ::std::string& value);
  #if LANG_CXX11
  void set_field_id(::std::string&& value);
  #endif
  void set_field_id(const char* value);
  void set_field_id(const char* value, size_t size);
  ::std::string* mutable_field_id();
  ::std::string* release_field_id();
  void set_allocated_field_id(::std::string* field_id);

  // .google.fhir.stu3.proto.SlicingRulesCode.Value rules = 4;
  void clear_rules();
  static const int kRulesFieldNumber = 4;
  ::google::fhir::stu3::proto::SlicingRulesCode_Value rules() const;
  void set_rules(::google::fhir::stu3::proto::SlicingRulesCode_Value value);

  // @@protoc_insertion_point(class_scope:google.fhir.proto.CodeableConceptSlice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::CodeableConceptSlice_CodingSlice > coding_slice_;
  ::google::protobuf::internal::ArenaStringPtr field_id_;
  int rules_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fprofile_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ComplexExtension : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.proto.ComplexExtension) */ {
 public:
  ComplexExtension();
  virtual ~ComplexExtension();

  ComplexExtension(const ComplexExtension& from);

  inline ComplexExtension& operator=(const ComplexExtension& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ComplexExtension(ComplexExtension&& from) noexcept
    : ComplexExtension() {
    *this = ::std::move(from);
  }

  inline ComplexExtension& operator=(ComplexExtension&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ComplexExtension& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ComplexExtension* internal_default_instance() {
    return reinterpret_cast<const ComplexExtension*>(
               &_ComplexExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ComplexExtension* other);
  friend void swap(ComplexExtension& a, ComplexExtension& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ComplexExtension* New() const final {
    return CreateMaybeMessage<ComplexExtension>(NULL);
  }

  ComplexExtension* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ComplexExtension>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ComplexExtension& from);
  void MergeFrom(const ComplexExtension& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComplexExtension* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.proto.SimpleExtension simple_field = 3;
  int simple_field_size() const;
  void clear_simple_field();
  static const int kSimpleFieldFieldNumber = 3;
  ::google::fhir::proto::SimpleExtension* mutable_simple_field(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::SimpleExtension >*
      mutable_simple_field();
  const ::google::fhir::proto::SimpleExtension& simple_field(int index) const;
  ::google::fhir::proto::SimpleExtension* add_simple_field();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::SimpleExtension >&
      simple_field() const;

  // repeated .google.fhir.proto.ComplexExtension complex_field = 4;
  int complex_field_size() const;
  void clear_complex_field();
  static const int kComplexFieldFieldNumber = 4;
  ::google::fhir::proto::ComplexExtension* mutable_complex_field(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::ComplexExtension >*
      mutable_complex_field();
  const ::google::fhir::proto::ComplexExtension& complex_field(int index) const;
  ::google::fhir::proto::ComplexExtension* add_complex_field();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::ComplexExtension >&
      complex_field() const;

  // .google.fhir.proto.ElementData element_data = 1;
  bool has_element_data() const;
  void clear_element_data();
  static const int kElementDataFieldNumber = 1;
  private:
  const ::google::fhir::proto::ElementData& _internal_element_data() const;
  public:
  const ::google::fhir::proto::ElementData& element_data() const;
  ::google::fhir::proto::ElementData* release_element_data();
  ::google::fhir::proto::ElementData* mutable_element_data();
  void set_allocated_element_data(::google::fhir::proto::ElementData* element_data);

  // bool can_have_additional_extensions = 2;
  void clear_can_have_additional_extensions();
  static const int kCanHaveAdditionalExtensionsFieldNumber = 2;
  bool can_have_additional_extensions() const;
  void set_can_have_additional_extensions(bool value);

  // @@protoc_insertion_point(class_scope:google.fhir.proto.ComplexExtension)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::SimpleExtension > simple_field_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::ComplexExtension > complex_field_;
  ::google::fhir::proto::ElementData* element_data_;
  bool can_have_additional_extensions_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fprofile_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimpleExtension : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.proto.SimpleExtension) */ {
 public:
  SimpleExtension();
  virtual ~SimpleExtension();

  SimpleExtension(const SimpleExtension& from);

  inline SimpleExtension& operator=(const SimpleExtension& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleExtension(SimpleExtension&& from) noexcept
    : SimpleExtension() {
    *this = ::std::move(from);
  }

  inline SimpleExtension& operator=(SimpleExtension&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleExtension& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleExtension* internal_default_instance() {
    return reinterpret_cast<const SimpleExtension*>(
               &_SimpleExtension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(SimpleExtension* other);
  friend void swap(SimpleExtension& a, SimpleExtension& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleExtension* New() const final {
    return CreateMaybeMessage<SimpleExtension>(NULL);
  }

  SimpleExtension* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleExtension>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleExtension& from);
  void MergeFrom(const SimpleExtension& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleExtension* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string type = 2;
  int type_size() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type(int index) const;
  ::std::string* mutable_type(int index);
  void set_type(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_type(int index, ::std::string&& value);
  #endif
  void set_type(int index, const char* value);
  void set_type(int index, const char* value, size_t size);
  ::std::string* add_type();
  void add_type(const ::std::string& value);
  #if LANG_CXX11
  void add_type(::std::string&& value);
  #endif
  void add_type(const char* value);
  void add_type(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& type() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_type();

  // .google.fhir.proto.ElementData element_data = 1;
  bool has_element_data() const;
  void clear_element_data();
  static const int kElementDataFieldNumber = 1;
  private:
  const ::google::fhir::proto::ElementData& _internal_element_data() const;
  public:
  const ::google::fhir::proto::ElementData& element_data() const;
  ::google::fhir::proto::ElementData* release_element_data();
  ::google::fhir::proto::ElementData* mutable_element_data();
  void set_allocated_element_data(::google::fhir::proto::ElementData* element_data);

  // .google.fhir.proto.CodeData code_type = 3;
  bool has_code_type() const;
  void clear_code_type();
  static const int kCodeTypeFieldNumber = 3;
  private:
  const ::google::fhir::proto::CodeData& _internal_code_type() const;
  public:
  const ::google::fhir::proto::CodeData& code_type() const;
  ::google::fhir::proto::CodeData* release_code_type();
  ::google::fhir::proto::CodeData* mutable_code_type();
  void set_allocated_code_type(::google::fhir::proto::CodeData* code_type);

  // bool can_have_extensions = 4;
  void clear_can_have_extensions();
  static const int kCanHaveExtensionsFieldNumber = 4;
  bool can_have_extensions() const;
  void set_can_have_extensions(bool value);

  // @@protoc_insertion_point(class_scope:google.fhir.proto.SimpleExtension)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> type_;
  ::google::fhir::proto::ElementData* element_data_;
  ::google::fhir::proto::CodeData* code_type_;
  bool can_have_extensions_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fprofile_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ElementData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.proto.ElementData) */ {
 public:
  ElementData();
  virtual ~ElementData();

  ElementData(const ElementData& from);

  inline ElementData& operator=(const ElementData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ElementData(ElementData&& from) noexcept
    : ElementData() {
    *this = ::std::move(from);
  }

  inline ElementData& operator=(ElementData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ElementData* internal_default_instance() {
    return reinterpret_cast<const ElementData*>(
               &_ElementData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(ElementData* other);
  friend void swap(ElementData& a, ElementData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ElementData* New() const final {
    return CreateMaybeMessage<ElementData>(NULL);
  }

  ElementData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ElementData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ElementData& from);
  void MergeFrom(const ElementData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ElementData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string short = 4;
  void clear_short_();
  static const int kShortFieldNumber = 4;
  const ::std::string& short_() const;
  void set_short_(const ::std::string& value);
  #if LANG_CXX11
  void set_short_(::std::string&& value);
  #endif
  void set_short_(const char* value);
  void set_short_(const char* value, size_t size);
  ::std::string* mutable_short_();
  ::std::string* release_short_();
  void set_allocated_short_(::std::string* short_);

  // string comment = 5;
  void clear_comment();
  static const int kCommentFieldNumber = 5;
  const ::std::string& comment() const;
  void set_comment(const ::std::string& value);
  #if LANG_CXX11
  void set_comment(::std::string&& value);
  #endif
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  ::std::string* mutable_comment();
  ::std::string* release_comment();
  void set_allocated_comment(::std::string* comment);

  // string url_override = 6;
  void clear_url_override();
  static const int kUrlOverrideFieldNumber = 6;
  const ::std::string& url_override() const;
  void set_url_override(const ::std::string& value);
  #if LANG_CXX11
  void set_url_override(::std::string&& value);
  #endif
  void set_url_override(const char* value);
  void set_url_override(const char* value, size_t size);
  ::std::string* mutable_url_override();
  ::std::string* release_url_override();
  void set_allocated_url_override(::std::string* url_override);

  // .google.fhir.proto.SizeRestriction size_restriction = 2;
  void clear_size_restriction();
  static const int kSizeRestrictionFieldNumber = 2;
  ::google::fhir::proto::SizeRestriction size_restriction() const;
  void set_size_restriction(::google::fhir::proto::SizeRestriction value);

  // @@protoc_insertion_point(class_scope:google.fhir.proto.ElementData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr short__;
  ::google::protobuf::internal::ArenaStringPtr comment_;
  ::google::protobuf::internal::ArenaStringPtr url_override_;
  int size_restriction_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fprofile_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.proto.CodeData) */ {
 public:
  CodeData();
  virtual ~CodeData();

  CodeData(const CodeData& from);

  inline CodeData& operator=(const CodeData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeData(CodeData&& from) noexcept
    : CodeData() {
    *this = ::std::move(from);
  }

  inline CodeData& operator=(CodeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeData* internal_default_instance() {
    return reinterpret_cast<const CodeData*>(
               &_CodeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CodeData* other);
  friend void swap(CodeData& a, CodeData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeData* New() const final {
    return CreateMaybeMessage<CodeData>(NULL);
  }

  CodeData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeData& from);
  void MergeFrom(const CodeData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string system = 1;
  void clear_system();
  static const int kSystemFieldNumber = 1;
  const ::std::string& system() const;
  void set_system(const ::std::string& value);
  #if LANG_CXX11
  void set_system(::std::string&& value);
  #endif
  void set_system(const char* value);
  void set_system(const char* value, size_t size);
  ::std::string* mutable_system();
  ::std::string* release_system();
  void set_allocated_system(::std::string* system);

  // string binding_name = 2;
  void clear_binding_name();
  static const int kBindingNameFieldNumber = 2;
  const ::std::string& binding_name() const;
  void set_binding_name(const ::std::string& value);
  #if LANG_CXX11
  void set_binding_name(::std::string&& value);
  #endif
  void set_binding_name(const char* value);
  void set_binding_name(const char* value, size_t size);
  ::std::string* mutable_binding_name();
  ::std::string* release_binding_name();
  void set_allocated_binding_name(::std::string* binding_name);

  // string fixed_value = 4;
  void clear_fixed_value();
  static const int kFixedValueFieldNumber = 4;
  const ::std::string& fixed_value() const;
  void set_fixed_value(const ::std::string& value);
  #if LANG_CXX11
  void set_fixed_value(::std::string&& value);
  #endif
  void set_fixed_value(const char* value);
  void set_fixed_value(const char* value, size_t size);
  ::std::string* mutable_fixed_value();
  ::std::string* release_fixed_value();
  void set_allocated_fixed_value(::std::string* fixed_value);

  // .google.fhir.stu3.proto.BindingStrengthCode.Value binding_strength = 3;
  void clear_binding_strength();
  static const int kBindingStrengthFieldNumber = 3;
  ::google::fhir::stu3::proto::BindingStrengthCode_Value binding_strength() const;
  void set_binding_strength(::google::fhir::stu3::proto::BindingStrengthCode_Value value);

  // @@protoc_insertion_point(class_scope:google.fhir.proto.CodeData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr system_;
  ::google::protobuf::internal::ArenaStringPtr binding_name_;
  ::google::protobuf::internal::ArenaStringPtr fixed_value_;
  int binding_strength_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fprofile_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PackageInfo

// string base_url = 1;
inline void PackageInfo::clear_base_url() {
  base_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageInfo::base_url() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.PackageInfo.base_url)
  return base_url_.GetNoArena();
}
inline void PackageInfo::set_base_url(const ::std::string& value) {
  
  base_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.proto.PackageInfo.base_url)
}
#if LANG_CXX11
inline void PackageInfo::set_base_url(::std::string&& value) {
  
  base_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.proto.PackageInfo.base_url)
}
#endif
inline void PackageInfo::set_base_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  base_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.proto.PackageInfo.base_url)
}
inline void PackageInfo::set_base_url(const char* value, size_t size) {
  
  base_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.proto.PackageInfo.base_url)
}
inline ::std::string* PackageInfo::mutable_base_url() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.PackageInfo.base_url)
  return base_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageInfo::release_base_url() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.PackageInfo.base_url)
  
  return base_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageInfo::set_allocated_base_url(::std::string* base_url) {
  if (base_url != NULL) {
    
  } else {
    
  }
  base_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_url);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.PackageInfo.base_url)
}

// string proto_package = 2;
inline void PackageInfo::clear_proto_package() {
  proto_package_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageInfo::proto_package() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.PackageInfo.proto_package)
  return proto_package_.GetNoArena();
}
inline void PackageInfo::set_proto_package(const ::std::string& value) {
  
  proto_package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.proto.PackageInfo.proto_package)
}
#if LANG_CXX11
inline void PackageInfo::set_proto_package(::std::string&& value) {
  
  proto_package_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.proto.PackageInfo.proto_package)
}
#endif
inline void PackageInfo::set_proto_package(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  proto_package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.proto.PackageInfo.proto_package)
}
inline void PackageInfo::set_proto_package(const char* value, size_t size) {
  
  proto_package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.proto.PackageInfo.proto_package)
}
inline ::std::string* PackageInfo::mutable_proto_package() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.PackageInfo.proto_package)
  return proto_package_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageInfo::release_proto_package() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.PackageInfo.proto_package)
  
  return proto_package_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageInfo::set_allocated_proto_package(::std::string* proto_package) {
  if (proto_package != NULL) {
    
  } else {
    
  }
  proto_package_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proto_package);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.PackageInfo.proto_package)
}

// string java_proto_package = 3;
inline void PackageInfo::clear_java_proto_package() {
  java_proto_package_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageInfo::java_proto_package() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.PackageInfo.java_proto_package)
  return java_proto_package_.GetNoArena();
}
inline void PackageInfo::set_java_proto_package(const ::std::string& value) {
  
  java_proto_package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.proto.PackageInfo.java_proto_package)
}
#if LANG_CXX11
inline void PackageInfo::set_java_proto_package(::std::string&& value) {
  
  java_proto_package_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.proto.PackageInfo.java_proto_package)
}
#endif
inline void PackageInfo::set_java_proto_package(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  java_proto_package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.proto.PackageInfo.java_proto_package)
}
inline void PackageInfo::set_java_proto_package(const char* value, size_t size) {
  
  java_proto_package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.proto.PackageInfo.java_proto_package)
}
inline ::std::string* PackageInfo::mutable_java_proto_package() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.PackageInfo.java_proto_package)
  return java_proto_package_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageInfo::release_java_proto_package() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.PackageInfo.java_proto_package)
  
  return java_proto_package_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageInfo::set_allocated_java_proto_package(::std::string* java_proto_package) {
  if (java_proto_package != NULL) {
    
  } else {
    
  }
  java_proto_package_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), java_proto_package);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.PackageInfo.java_proto_package)
}

// string go_proto_package = 4;
inline void PackageInfo::clear_go_proto_package() {
  go_proto_package_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageInfo::go_proto_package() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.PackageInfo.go_proto_package)
  return go_proto_package_.GetNoArena();
}
inline void PackageInfo::set_go_proto_package(const ::std::string& value) {
  
  go_proto_package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.proto.PackageInfo.go_proto_package)
}
#if LANG_CXX11
inline void PackageInfo::set_go_proto_package(::std::string&& value) {
  
  go_proto_package_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.proto.PackageInfo.go_proto_package)
}
#endif
inline void PackageInfo::set_go_proto_package(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  go_proto_package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.proto.PackageInfo.go_proto_package)
}
inline void PackageInfo::set_go_proto_package(const char* value, size_t size) {
  
  go_proto_package_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.proto.PackageInfo.go_proto_package)
}
inline ::std::string* PackageInfo::mutable_go_proto_package() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.PackageInfo.go_proto_package)
  return go_proto_package_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageInfo::release_go_proto_package() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.PackageInfo.go_proto_package)
  
  return go_proto_package_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageInfo::set_allocated_go_proto_package(::std::string* go_proto_package) {
  if (go_proto_package != NULL) {
    
  } else {
    
  }
  go_proto_package_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), go_proto_package);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.PackageInfo.go_proto_package)
}

// string publisher = 5;
inline void PackageInfo::clear_publisher() {
  publisher_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageInfo::publisher() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.PackageInfo.publisher)
  return publisher_.GetNoArena();
}
inline void PackageInfo::set_publisher(const ::std::string& value) {
  
  publisher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.proto.PackageInfo.publisher)
}
#if LANG_CXX11
inline void PackageInfo::set_publisher(::std::string&& value) {
  
  publisher_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.proto.PackageInfo.publisher)
}
#endif
inline void PackageInfo::set_publisher(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  publisher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.proto.PackageInfo.publisher)
}
inline void PackageInfo::set_publisher(const char* value, size_t size) {
  
  publisher_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.proto.PackageInfo.publisher)
}
inline ::std::string* PackageInfo::mutable_publisher() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.PackageInfo.publisher)
  return publisher_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageInfo::release_publisher() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.PackageInfo.publisher)
  
  return publisher_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageInfo::set_allocated_publisher(::std::string* publisher) {
  if (publisher != NULL) {
    
  } else {
    
  }
  publisher_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publisher);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.PackageInfo.publisher)
}

// string fhir_version = 6;
inline void PackageInfo::clear_fhir_version() {
  fhir_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageInfo::fhir_version() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.PackageInfo.fhir_version)
  return fhir_version_.GetNoArena();
}
inline void PackageInfo::set_fhir_version(const ::std::string& value) {
  
  fhir_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.proto.PackageInfo.fhir_version)
}
#if LANG_CXX11
inline void PackageInfo::set_fhir_version(::std::string&& value) {
  
  fhir_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.proto.PackageInfo.fhir_version)
}
#endif
inline void PackageInfo::set_fhir_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fhir_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.proto.PackageInfo.fhir_version)
}
inline void PackageInfo::set_fhir_version(const char* value, size_t size) {
  
  fhir_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.proto.PackageInfo.fhir_version)
}
inline ::std::string* PackageInfo::mutable_fhir_version() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.PackageInfo.fhir_version)
  return fhir_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageInfo::release_fhir_version() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.PackageInfo.fhir_version)
  
  return fhir_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageInfo::set_allocated_fhir_version(::std::string* fhir_version) {
  if (fhir_version != NULL) {
    
  } else {
    
  }
  fhir_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fhir_version);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.PackageInfo.fhir_version)
}

// string telcom_url = 7;
inline void PackageInfo::clear_telcom_url() {
  telcom_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackageInfo::telcom_url() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.PackageInfo.telcom_url)
  return telcom_url_.GetNoArena();
}
inline void PackageInfo::set_telcom_url(const ::std::string& value) {
  
  telcom_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.proto.PackageInfo.telcom_url)
}
#if LANG_CXX11
inline void PackageInfo::set_telcom_url(::std::string&& value) {
  
  telcom_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.proto.PackageInfo.telcom_url)
}
#endif
inline void PackageInfo::set_telcom_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  telcom_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.proto.PackageInfo.telcom_url)
}
inline void PackageInfo::set_telcom_url(const char* value, size_t size) {
  
  telcom_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.proto.PackageInfo.telcom_url)
}
inline ::std::string* PackageInfo::mutable_telcom_url() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.PackageInfo.telcom_url)
  return telcom_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackageInfo::release_telcom_url() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.PackageInfo.telcom_url)
  
  return telcom_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackageInfo::set_allocated_telcom_url(::std::string* telcom_url) {
  if (telcom_url != NULL) {
    
  } else {
    
  }
  telcom_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), telcom_url);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.PackageInfo.telcom_url)
}

// -------------------------------------------------------------------

// Profiles

// repeated .google.fhir.proto.Profile profile = 2;
inline int Profiles::profile_size() const {
  return profile_.size();
}
inline void Profiles::clear_profile() {
  profile_.Clear();
}
inline ::google::fhir::proto::Profile* Profiles::mutable_profile(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.Profiles.profile)
  return profile_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::Profile >*
Profiles::mutable_profile() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.proto.Profiles.profile)
  return &profile_;
}
inline const ::google::fhir::proto::Profile& Profiles::profile(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.Profiles.profile)
  return profile_.Get(index);
}
inline ::google::fhir::proto::Profile* Profiles::add_profile() {
  // @@protoc_insertion_point(field_add:google.fhir.proto.Profiles.profile)
  return profile_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::Profile >&
Profiles::profile() const {
  // @@protoc_insertion_point(field_list:google.fhir.proto.Profiles.profile)
  return profile_;
}

// -------------------------------------------------------------------

// Extensions

// repeated .google.fhir.proto.SimpleExtension simple_extension = 2;
inline int Extensions::simple_extension_size() const {
  return simple_extension_.size();
}
inline void Extensions::clear_simple_extension() {
  simple_extension_.Clear();
}
inline ::google::fhir::proto::SimpleExtension* Extensions::mutable_simple_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.Extensions.simple_extension)
  return simple_extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::SimpleExtension >*
Extensions::mutable_simple_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.proto.Extensions.simple_extension)
  return &simple_extension_;
}
inline const ::google::fhir::proto::SimpleExtension& Extensions::simple_extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.Extensions.simple_extension)
  return simple_extension_.Get(index);
}
inline ::google::fhir::proto::SimpleExtension* Extensions::add_simple_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.proto.Extensions.simple_extension)
  return simple_extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::SimpleExtension >&
Extensions::simple_extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.proto.Extensions.simple_extension)
  return simple_extension_;
}

// repeated .google.fhir.proto.ComplexExtension complex_extension = 3;
inline int Extensions::complex_extension_size() const {
  return complex_extension_.size();
}
inline void Extensions::clear_complex_extension() {
  complex_extension_.Clear();
}
inline ::google::fhir::proto::ComplexExtension* Extensions::mutable_complex_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.Extensions.complex_extension)
  return complex_extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::ComplexExtension >*
Extensions::mutable_complex_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.proto.Extensions.complex_extension)
  return &complex_extension_;
}
inline const ::google::fhir::proto::ComplexExtension& Extensions::complex_extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.Extensions.complex_extension)
  return complex_extension_.Get(index);
}
inline ::google::fhir::proto::ComplexExtension* Extensions::add_complex_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.proto.Extensions.complex_extension)
  return complex_extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::ComplexExtension >&
Extensions::complex_extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.proto.Extensions.complex_extension)
  return complex_extension_;
}

// -------------------------------------------------------------------

// Profile

// .google.fhir.proto.ElementData element_data = 1;
inline bool Profile::has_element_data() const {
  return this != internal_default_instance() && element_data_ != NULL;
}
inline void Profile::clear_element_data() {
  if (GetArenaNoVirtual() == NULL && element_data_ != NULL) {
    delete element_data_;
  }
  element_data_ = NULL;
}
inline const ::google::fhir::proto::ElementData& Profile::_internal_element_data() const {
  return *element_data_;
}
inline const ::google::fhir::proto::ElementData& Profile::element_data() const {
  const ::google::fhir::proto::ElementData* p = element_data_;
  // @@protoc_insertion_point(field_get:google.fhir.proto.Profile.element_data)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::proto::ElementData*>(
      &::google::fhir::proto::_ElementData_default_instance_);
}
inline ::google::fhir::proto::ElementData* Profile::release_element_data() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.Profile.element_data)
  
  ::google::fhir::proto::ElementData* temp = element_data_;
  element_data_ = NULL;
  return temp;
}
inline ::google::fhir::proto::ElementData* Profile::mutable_element_data() {
  
  if (element_data_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::proto::ElementData>(GetArenaNoVirtual());
    element_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.Profile.element_data)
  return element_data_;
}
inline void Profile::set_allocated_element_data(::google::fhir::proto::ElementData* element_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete element_data_;
  }
  if (element_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      element_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, element_data, submessage_arena);
    }
    
  } else {
    
  }
  element_data_ = element_data;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.Profile.element_data)
}

// string base_url = 2;
inline void Profile::clear_base_url() {
  base_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Profile::base_url() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.Profile.base_url)
  return base_url_.GetNoArena();
}
inline void Profile::set_base_url(const ::std::string& value) {
  
  base_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.proto.Profile.base_url)
}
#if LANG_CXX11
inline void Profile::set_base_url(::std::string&& value) {
  
  base_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.proto.Profile.base_url)
}
#endif
inline void Profile::set_base_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  base_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.proto.Profile.base_url)
}
inline void Profile::set_base_url(const char* value, size_t size) {
  
  base_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.proto.Profile.base_url)
}
inline ::std::string* Profile::mutable_base_url() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.Profile.base_url)
  return base_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Profile::release_base_url() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.Profile.base_url)
  
  return base_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Profile::set_allocated_base_url(::std::string* base_url) {
  if (base_url != NULL) {
    
  } else {
    
  }
  base_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), base_url);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.Profile.base_url)
}

// repeated .google.fhir.proto.FieldRestriction restriction = 3;
inline int Profile::restriction_size() const {
  return restriction_.size();
}
inline void Profile::clear_restriction() {
  restriction_.Clear();
}
inline ::google::fhir::proto::FieldRestriction* Profile::mutable_restriction(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.Profile.restriction)
  return restriction_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::FieldRestriction >*
Profile::mutable_restriction() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.proto.Profile.restriction)
  return &restriction_;
}
inline const ::google::fhir::proto::FieldRestriction& Profile::restriction(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.Profile.restriction)
  return restriction_.Get(index);
}
inline ::google::fhir::proto::FieldRestriction* Profile::add_restriction() {
  // @@protoc_insertion_point(field_add:google.fhir.proto.Profile.restriction)
  return restriction_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::FieldRestriction >&
Profile::restriction() const {
  // @@protoc_insertion_point(field_list:google.fhir.proto.Profile.restriction)
  return restriction_;
}

// repeated .google.fhir.proto.ExtensionSlice extension_slice = 4;
inline int Profile::extension_slice_size() const {
  return extension_slice_.size();
}
inline void Profile::clear_extension_slice() {
  extension_slice_.Clear();
}
inline ::google::fhir::proto::ExtensionSlice* Profile::mutable_extension_slice(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.Profile.extension_slice)
  return extension_slice_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::ExtensionSlice >*
Profile::mutable_extension_slice() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.proto.Profile.extension_slice)
  return &extension_slice_;
}
inline const ::google::fhir::proto::ExtensionSlice& Profile::extension_slice(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.Profile.extension_slice)
  return extension_slice_.Get(index);
}
inline ::google::fhir::proto::ExtensionSlice* Profile::add_extension_slice() {
  // @@protoc_insertion_point(field_add:google.fhir.proto.Profile.extension_slice)
  return extension_slice_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::ExtensionSlice >&
Profile::extension_slice() const {
  // @@protoc_insertion_point(field_list:google.fhir.proto.Profile.extension_slice)
  return extension_slice_;
}

// repeated .google.fhir.proto.CodeableConceptSlice codeable_concept_slice = 5;
inline int Profile::codeable_concept_slice_size() const {
  return codeable_concept_slice_.size();
}
inline void Profile::clear_codeable_concept_slice() {
  codeable_concept_slice_.Clear();
}
inline ::google::fhir::proto::CodeableConceptSlice* Profile::mutable_codeable_concept_slice(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.Profile.codeable_concept_slice)
  return codeable_concept_slice_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::CodeableConceptSlice >*
Profile::mutable_codeable_concept_slice() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.proto.Profile.codeable_concept_slice)
  return &codeable_concept_slice_;
}
inline const ::google::fhir::proto::CodeableConceptSlice& Profile::codeable_concept_slice(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.Profile.codeable_concept_slice)
  return codeable_concept_slice_.Get(index);
}
inline ::google::fhir::proto::CodeableConceptSlice* Profile::add_codeable_concept_slice() {
  // @@protoc_insertion_point(field_add:google.fhir.proto.Profile.codeable_concept_slice)
  return codeable_concept_slice_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::CodeableConceptSlice >&
Profile::codeable_concept_slice() const {
  // @@protoc_insertion_point(field_list:google.fhir.proto.Profile.codeable_concept_slice)
  return codeable_concept_slice_;
}

// -------------------------------------------------------------------

// FieldRestriction

// string field_id = 1;
inline void FieldRestriction::clear_field_id() {
  field_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FieldRestriction::field_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.FieldRestriction.field_id)
  return field_id_.GetNoArena();
}
inline void FieldRestriction::set_field_id(const ::std::string& value) {
  
  field_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.proto.FieldRestriction.field_id)
}
#if LANG_CXX11
inline void FieldRestriction::set_field_id(::std::string&& value) {
  
  field_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.proto.FieldRestriction.field_id)
}
#endif
inline void FieldRestriction::set_field_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  field_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.proto.FieldRestriction.field_id)
}
inline void FieldRestriction::set_field_id(const char* value, size_t size) {
  
  field_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.proto.FieldRestriction.field_id)
}
inline ::std::string* FieldRestriction::mutable_field_id() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.FieldRestriction.field_id)
  return field_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FieldRestriction::release_field_id() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.FieldRestriction.field_id)
  
  return field_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FieldRestriction::set_allocated_field_id(::std::string* field_id) {
  if (field_id != NULL) {
    
  } else {
    
  }
  field_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_id);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.FieldRestriction.field_id)
}

// .google.fhir.proto.SizeRestriction size_restriction = 2;
inline void FieldRestriction::clear_size_restriction() {
  size_restriction_ = 0;
}
inline ::google::fhir::proto::SizeRestriction FieldRestriction::size_restriction() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.FieldRestriction.size_restriction)
  return static_cast< ::google::fhir::proto::SizeRestriction >(size_restriction_);
}
inline void FieldRestriction::set_size_restriction(::google::fhir::proto::SizeRestriction value) {
  
  size_restriction_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.proto.FieldRestriction.size_restriction)
}

// -------------------------------------------------------------------

// ExtensionSlice

// string field_id = 1;
inline void ExtensionSlice::clear_field_id() {
  field_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExtensionSlice::field_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.ExtensionSlice.field_id)
  return field_id_.GetNoArena();
}
inline void ExtensionSlice::set_field_id(const ::std::string& value) {
  
  field_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.proto.ExtensionSlice.field_id)
}
#if LANG_CXX11
inline void ExtensionSlice::set_field_id(::std::string&& value) {
  
  field_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.proto.ExtensionSlice.field_id)
}
#endif
inline void ExtensionSlice::set_field_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  field_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.proto.ExtensionSlice.field_id)
}
inline void ExtensionSlice::set_field_id(const char* value, size_t size) {
  
  field_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.proto.ExtensionSlice.field_id)
}
inline ::std::string* ExtensionSlice::mutable_field_id() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.ExtensionSlice.field_id)
  return field_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExtensionSlice::release_field_id() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.ExtensionSlice.field_id)
  
  return field_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExtensionSlice::set_allocated_field_id(::std::string* field_id) {
  if (field_id != NULL) {
    
  } else {
    
  }
  field_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_id);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.ExtensionSlice.field_id)
}

// .google.fhir.proto.ElementData element_data = 2;
inline bool ExtensionSlice::has_element_data() const {
  return this != internal_default_instance() && element_data_ != NULL;
}
inline void ExtensionSlice::clear_element_data() {
  if (GetArenaNoVirtual() == NULL && element_data_ != NULL) {
    delete element_data_;
  }
  element_data_ = NULL;
}
inline const ::google::fhir::proto::ElementData& ExtensionSlice::_internal_element_data() const {
  return *element_data_;
}
inline const ::google::fhir::proto::ElementData& ExtensionSlice::element_data() const {
  const ::google::fhir::proto::ElementData* p = element_data_;
  // @@protoc_insertion_point(field_get:google.fhir.proto.ExtensionSlice.element_data)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::proto::ElementData*>(
      &::google::fhir::proto::_ElementData_default_instance_);
}
inline ::google::fhir::proto::ElementData* ExtensionSlice::release_element_data() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.ExtensionSlice.element_data)
  
  ::google::fhir::proto::ElementData* temp = element_data_;
  element_data_ = NULL;
  return temp;
}
inline ::google::fhir::proto::ElementData* ExtensionSlice::mutable_element_data() {
  
  if (element_data_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::proto::ElementData>(GetArenaNoVirtual());
    element_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.ExtensionSlice.element_data)
  return element_data_;
}
inline void ExtensionSlice::set_allocated_element_data(::google::fhir::proto::ElementData* element_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete element_data_;
  }
  if (element_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      element_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, element_data, submessage_arena);
    }
    
  } else {
    
  }
  element_data_ = element_data;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.ExtensionSlice.element_data)
}

// string url = 3;
inline void ExtensionSlice::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExtensionSlice::url() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.ExtensionSlice.url)
  return url_.GetNoArena();
}
inline void ExtensionSlice::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.proto.ExtensionSlice.url)
}
#if LANG_CXX11
inline void ExtensionSlice::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.proto.ExtensionSlice.url)
}
#endif
inline void ExtensionSlice::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.proto.ExtensionSlice.url)
}
inline void ExtensionSlice::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.proto.ExtensionSlice.url)
}
inline ::std::string* ExtensionSlice::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.ExtensionSlice.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExtensionSlice::release_url() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.ExtensionSlice.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExtensionSlice::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.ExtensionSlice.url)
}

// -------------------------------------------------------------------

// CodeableConceptSlice_CodingSlice

// .google.fhir.proto.ElementData element_data = 1;
inline bool CodeableConceptSlice_CodingSlice::has_element_data() const {
  return this != internal_default_instance() && element_data_ != NULL;
}
inline void CodeableConceptSlice_CodingSlice::clear_element_data() {
  if (GetArenaNoVirtual() == NULL && element_data_ != NULL) {
    delete element_data_;
  }
  element_data_ = NULL;
}
inline const ::google::fhir::proto::ElementData& CodeableConceptSlice_CodingSlice::_internal_element_data() const {
  return *element_data_;
}
inline const ::google::fhir::proto::ElementData& CodeableConceptSlice_CodingSlice::element_data() const {
  const ::google::fhir::proto::ElementData* p = element_data_;
  // @@protoc_insertion_point(field_get:google.fhir.proto.CodeableConceptSlice.CodingSlice.element_data)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::proto::ElementData*>(
      &::google::fhir::proto::_ElementData_default_instance_);
}
inline ::google::fhir::proto::ElementData* CodeableConceptSlice_CodingSlice::release_element_data() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.CodeableConceptSlice.CodingSlice.element_data)
  
  ::google::fhir::proto::ElementData* temp = element_data_;
  element_data_ = NULL;
  return temp;
}
inline ::google::fhir::proto::ElementData* CodeableConceptSlice_CodingSlice::mutable_element_data() {
  
  if (element_data_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::proto::ElementData>(GetArenaNoVirtual());
    element_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.CodeableConceptSlice.CodingSlice.element_data)
  return element_data_;
}
inline void CodeableConceptSlice_CodingSlice::set_allocated_element_data(::google::fhir::proto::ElementData* element_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete element_data_;
  }
  if (element_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      element_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, element_data, submessage_arena);
    }
    
  } else {
    
  }
  element_data_ = element_data;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.CodeableConceptSlice.CodingSlice.element_data)
}

// .google.fhir.proto.CodeData code_data = 2;
inline bool CodeableConceptSlice_CodingSlice::has_code_data() const {
  return this != internal_default_instance() && code_data_ != NULL;
}
inline void CodeableConceptSlice_CodingSlice::clear_code_data() {
  if (GetArenaNoVirtual() == NULL && code_data_ != NULL) {
    delete code_data_;
  }
  code_data_ = NULL;
}
inline const ::google::fhir::proto::CodeData& CodeableConceptSlice_CodingSlice::_internal_code_data() const {
  return *code_data_;
}
inline const ::google::fhir::proto::CodeData& CodeableConceptSlice_CodingSlice::code_data() const {
  const ::google::fhir::proto::CodeData* p = code_data_;
  // @@protoc_insertion_point(field_get:google.fhir.proto.CodeableConceptSlice.CodingSlice.code_data)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::proto::CodeData*>(
      &::google::fhir::proto::_CodeData_default_instance_);
}
inline ::google::fhir::proto::CodeData* CodeableConceptSlice_CodingSlice::release_code_data() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.CodeableConceptSlice.CodingSlice.code_data)
  
  ::google::fhir::proto::CodeData* temp = code_data_;
  code_data_ = NULL;
  return temp;
}
inline ::google::fhir::proto::CodeData* CodeableConceptSlice_CodingSlice::mutable_code_data() {
  
  if (code_data_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::proto::CodeData>(GetArenaNoVirtual());
    code_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.CodeableConceptSlice.CodingSlice.code_data)
  return code_data_;
}
inline void CodeableConceptSlice_CodingSlice::set_allocated_code_data(::google::fhir::proto::CodeData* code_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete code_data_;
  }
  if (code_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      code_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, code_data, submessage_arena);
    }
    
  } else {
    
  }
  code_data_ = code_data;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.CodeableConceptSlice.CodingSlice.code_data)
}

// -------------------------------------------------------------------

// CodeableConceptSlice

// string field_id = 1;
inline void CodeableConceptSlice::clear_field_id() {
  field_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CodeableConceptSlice::field_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.CodeableConceptSlice.field_id)
  return field_id_.GetNoArena();
}
inline void CodeableConceptSlice::set_field_id(const ::std::string& value) {
  
  field_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.proto.CodeableConceptSlice.field_id)
}
#if LANG_CXX11
inline void CodeableConceptSlice::set_field_id(::std::string&& value) {
  
  field_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.proto.CodeableConceptSlice.field_id)
}
#endif
inline void CodeableConceptSlice::set_field_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  field_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.proto.CodeableConceptSlice.field_id)
}
inline void CodeableConceptSlice::set_field_id(const char* value, size_t size) {
  
  field_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.proto.CodeableConceptSlice.field_id)
}
inline ::std::string* CodeableConceptSlice::mutable_field_id() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.CodeableConceptSlice.field_id)
  return field_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CodeableConceptSlice::release_field_id() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.CodeableConceptSlice.field_id)
  
  return field_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CodeableConceptSlice::set_allocated_field_id(::std::string* field_id) {
  if (field_id != NULL) {
    
  } else {
    
  }
  field_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_id);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.CodeableConceptSlice.field_id)
}

// repeated .google.fhir.proto.CodeableConceptSlice.CodingSlice coding_slice = 2;
inline int CodeableConceptSlice::coding_slice_size() const {
  return coding_slice_.size();
}
inline void CodeableConceptSlice::clear_coding_slice() {
  coding_slice_.Clear();
}
inline ::google::fhir::proto::CodeableConceptSlice_CodingSlice* CodeableConceptSlice::mutable_coding_slice(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.CodeableConceptSlice.coding_slice)
  return coding_slice_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::CodeableConceptSlice_CodingSlice >*
CodeableConceptSlice::mutable_coding_slice() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.proto.CodeableConceptSlice.coding_slice)
  return &coding_slice_;
}
inline const ::google::fhir::proto::CodeableConceptSlice_CodingSlice& CodeableConceptSlice::coding_slice(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.CodeableConceptSlice.coding_slice)
  return coding_slice_.Get(index);
}
inline ::google::fhir::proto::CodeableConceptSlice_CodingSlice* CodeableConceptSlice::add_coding_slice() {
  // @@protoc_insertion_point(field_add:google.fhir.proto.CodeableConceptSlice.coding_slice)
  return coding_slice_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::CodeableConceptSlice_CodingSlice >&
CodeableConceptSlice::coding_slice() const {
  // @@protoc_insertion_point(field_list:google.fhir.proto.CodeableConceptSlice.coding_slice)
  return coding_slice_;
}

// .google.fhir.stu3.proto.SlicingRulesCode.Value rules = 4;
inline void CodeableConceptSlice::clear_rules() {
  rules_ = 0;
}
inline ::google::fhir::stu3::proto::SlicingRulesCode_Value CodeableConceptSlice::rules() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.CodeableConceptSlice.rules)
  return static_cast< ::google::fhir::stu3::proto::SlicingRulesCode_Value >(rules_);
}
inline void CodeableConceptSlice::set_rules(::google::fhir::stu3::proto::SlicingRulesCode_Value value) {
  
  rules_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.proto.CodeableConceptSlice.rules)
}

// -------------------------------------------------------------------

// ComplexExtension

// .google.fhir.proto.ElementData element_data = 1;
inline bool ComplexExtension::has_element_data() const {
  return this != internal_default_instance() && element_data_ != NULL;
}
inline void ComplexExtension::clear_element_data() {
  if (GetArenaNoVirtual() == NULL && element_data_ != NULL) {
    delete element_data_;
  }
  element_data_ = NULL;
}
inline const ::google::fhir::proto::ElementData& ComplexExtension::_internal_element_data() const {
  return *element_data_;
}
inline const ::google::fhir::proto::ElementData& ComplexExtension::element_data() const {
  const ::google::fhir::proto::ElementData* p = element_data_;
  // @@protoc_insertion_point(field_get:google.fhir.proto.ComplexExtension.element_data)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::proto::ElementData*>(
      &::google::fhir::proto::_ElementData_default_instance_);
}
inline ::google::fhir::proto::ElementData* ComplexExtension::release_element_data() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.ComplexExtension.element_data)
  
  ::google::fhir::proto::ElementData* temp = element_data_;
  element_data_ = NULL;
  return temp;
}
inline ::google::fhir::proto::ElementData* ComplexExtension::mutable_element_data() {
  
  if (element_data_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::proto::ElementData>(GetArenaNoVirtual());
    element_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.ComplexExtension.element_data)
  return element_data_;
}
inline void ComplexExtension::set_allocated_element_data(::google::fhir::proto::ElementData* element_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete element_data_;
  }
  if (element_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      element_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, element_data, submessage_arena);
    }
    
  } else {
    
  }
  element_data_ = element_data;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.ComplexExtension.element_data)
}

// bool can_have_additional_extensions = 2;
inline void ComplexExtension::clear_can_have_additional_extensions() {
  can_have_additional_extensions_ = false;
}
inline bool ComplexExtension::can_have_additional_extensions() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.ComplexExtension.can_have_additional_extensions)
  return can_have_additional_extensions_;
}
inline void ComplexExtension::set_can_have_additional_extensions(bool value) {
  
  can_have_additional_extensions_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.proto.ComplexExtension.can_have_additional_extensions)
}

// repeated .google.fhir.proto.SimpleExtension simple_field = 3;
inline int ComplexExtension::simple_field_size() const {
  return simple_field_.size();
}
inline void ComplexExtension::clear_simple_field() {
  simple_field_.Clear();
}
inline ::google::fhir::proto::SimpleExtension* ComplexExtension::mutable_simple_field(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.ComplexExtension.simple_field)
  return simple_field_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::SimpleExtension >*
ComplexExtension::mutable_simple_field() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.proto.ComplexExtension.simple_field)
  return &simple_field_;
}
inline const ::google::fhir::proto::SimpleExtension& ComplexExtension::simple_field(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.ComplexExtension.simple_field)
  return simple_field_.Get(index);
}
inline ::google::fhir::proto::SimpleExtension* ComplexExtension::add_simple_field() {
  // @@protoc_insertion_point(field_add:google.fhir.proto.ComplexExtension.simple_field)
  return simple_field_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::SimpleExtension >&
ComplexExtension::simple_field() const {
  // @@protoc_insertion_point(field_list:google.fhir.proto.ComplexExtension.simple_field)
  return simple_field_;
}

// repeated .google.fhir.proto.ComplexExtension complex_field = 4;
inline int ComplexExtension::complex_field_size() const {
  return complex_field_.size();
}
inline void ComplexExtension::clear_complex_field() {
  complex_field_.Clear();
}
inline ::google::fhir::proto::ComplexExtension* ComplexExtension::mutable_complex_field(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.ComplexExtension.complex_field)
  return complex_field_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::ComplexExtension >*
ComplexExtension::mutable_complex_field() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.proto.ComplexExtension.complex_field)
  return &complex_field_;
}
inline const ::google::fhir::proto::ComplexExtension& ComplexExtension::complex_field(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.ComplexExtension.complex_field)
  return complex_field_.Get(index);
}
inline ::google::fhir::proto::ComplexExtension* ComplexExtension::add_complex_field() {
  // @@protoc_insertion_point(field_add:google.fhir.proto.ComplexExtension.complex_field)
  return complex_field_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::proto::ComplexExtension >&
ComplexExtension::complex_field() const {
  // @@protoc_insertion_point(field_list:google.fhir.proto.ComplexExtension.complex_field)
  return complex_field_;
}

// -------------------------------------------------------------------

// SimpleExtension

// .google.fhir.proto.ElementData element_data = 1;
inline bool SimpleExtension::has_element_data() const {
  return this != internal_default_instance() && element_data_ != NULL;
}
inline void SimpleExtension::clear_element_data() {
  if (GetArenaNoVirtual() == NULL && element_data_ != NULL) {
    delete element_data_;
  }
  element_data_ = NULL;
}
inline const ::google::fhir::proto::ElementData& SimpleExtension::_internal_element_data() const {
  return *element_data_;
}
inline const ::google::fhir::proto::ElementData& SimpleExtension::element_data() const {
  const ::google::fhir::proto::ElementData* p = element_data_;
  // @@protoc_insertion_point(field_get:google.fhir.proto.SimpleExtension.element_data)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::proto::ElementData*>(
      &::google::fhir::proto::_ElementData_default_instance_);
}
inline ::google::fhir::proto::ElementData* SimpleExtension::release_element_data() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.SimpleExtension.element_data)
  
  ::google::fhir::proto::ElementData* temp = element_data_;
  element_data_ = NULL;
  return temp;
}
inline ::google::fhir::proto::ElementData* SimpleExtension::mutable_element_data() {
  
  if (element_data_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::proto::ElementData>(GetArenaNoVirtual());
    element_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.SimpleExtension.element_data)
  return element_data_;
}
inline void SimpleExtension::set_allocated_element_data(::google::fhir::proto::ElementData* element_data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete element_data_;
  }
  if (element_data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      element_data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, element_data, submessage_arena);
    }
    
  } else {
    
  }
  element_data_ = element_data;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.SimpleExtension.element_data)
}

// repeated string type = 2;
inline int SimpleExtension::type_size() const {
  return type_.size();
}
inline void SimpleExtension::clear_type() {
  type_.Clear();
}
inline const ::std::string& SimpleExtension::type(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.SimpleExtension.type)
  return type_.Get(index);
}
inline ::std::string* SimpleExtension::mutable_type(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.SimpleExtension.type)
  return type_.Mutable(index);
}
inline void SimpleExtension::set_type(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.fhir.proto.SimpleExtension.type)
  type_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SimpleExtension::set_type(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.fhir.proto.SimpleExtension.type)
  type_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SimpleExtension::set_type(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  type_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.fhir.proto.SimpleExtension.type)
}
inline void SimpleExtension::set_type(int index, const char* value, size_t size) {
  type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.fhir.proto.SimpleExtension.type)
}
inline ::std::string* SimpleExtension::add_type() {
  // @@protoc_insertion_point(field_add_mutable:google.fhir.proto.SimpleExtension.type)
  return type_.Add();
}
inline void SimpleExtension::add_type(const ::std::string& value) {
  type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.fhir.proto.SimpleExtension.type)
}
#if LANG_CXX11
inline void SimpleExtension::add_type(::std::string&& value) {
  type_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.fhir.proto.SimpleExtension.type)
}
#endif
inline void SimpleExtension::add_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.fhir.proto.SimpleExtension.type)
}
inline void SimpleExtension::add_type(const char* value, size_t size) {
  type_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.fhir.proto.SimpleExtension.type)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SimpleExtension::type() const {
  // @@protoc_insertion_point(field_list:google.fhir.proto.SimpleExtension.type)
  return type_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SimpleExtension::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.proto.SimpleExtension.type)
  return &type_;
}

// .google.fhir.proto.CodeData code_type = 3;
inline bool SimpleExtension::has_code_type() const {
  return this != internal_default_instance() && code_type_ != NULL;
}
inline void SimpleExtension::clear_code_type() {
  if (GetArenaNoVirtual() == NULL && code_type_ != NULL) {
    delete code_type_;
  }
  code_type_ = NULL;
}
inline const ::google::fhir::proto::CodeData& SimpleExtension::_internal_code_type() const {
  return *code_type_;
}
inline const ::google::fhir::proto::CodeData& SimpleExtension::code_type() const {
  const ::google::fhir::proto::CodeData* p = code_type_;
  // @@protoc_insertion_point(field_get:google.fhir.proto.SimpleExtension.code_type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::proto::CodeData*>(
      &::google::fhir::proto::_CodeData_default_instance_);
}
inline ::google::fhir::proto::CodeData* SimpleExtension::release_code_type() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.SimpleExtension.code_type)
  
  ::google::fhir::proto::CodeData* temp = code_type_;
  code_type_ = NULL;
  return temp;
}
inline ::google::fhir::proto::CodeData* SimpleExtension::mutable_code_type() {
  
  if (code_type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::proto::CodeData>(GetArenaNoVirtual());
    code_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.SimpleExtension.code_type)
  return code_type_;
}
inline void SimpleExtension::set_allocated_code_type(::google::fhir::proto::CodeData* code_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete code_type_;
  }
  if (code_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      code_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, code_type, submessage_arena);
    }
    
  } else {
    
  }
  code_type_ = code_type;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.SimpleExtension.code_type)
}

// bool can_have_extensions = 4;
inline void SimpleExtension::clear_can_have_extensions() {
  can_have_extensions_ = false;
}
inline bool SimpleExtension::can_have_extensions() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.SimpleExtension.can_have_extensions)
  return can_have_extensions_;
}
inline void SimpleExtension::set_can_have_extensions(bool value) {
  
  can_have_extensions_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.proto.SimpleExtension.can_have_extensions)
}

// -------------------------------------------------------------------

// ElementData

// string name = 1;
inline void ElementData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ElementData::name() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.ElementData.name)
  return name_.GetNoArena();
}
inline void ElementData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.proto.ElementData.name)
}
#if LANG_CXX11
inline void ElementData::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.proto.ElementData.name)
}
#endif
inline void ElementData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.proto.ElementData.name)
}
inline void ElementData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.proto.ElementData.name)
}
inline ::std::string* ElementData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.ElementData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ElementData::release_name() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.ElementData.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ElementData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.ElementData.name)
}

// .google.fhir.proto.SizeRestriction size_restriction = 2;
inline void ElementData::clear_size_restriction() {
  size_restriction_ = 0;
}
inline ::google::fhir::proto::SizeRestriction ElementData::size_restriction() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.ElementData.size_restriction)
  return static_cast< ::google::fhir::proto::SizeRestriction >(size_restriction_);
}
inline void ElementData::set_size_restriction(::google::fhir::proto::SizeRestriction value) {
  
  size_restriction_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.proto.ElementData.size_restriction)
}

// string description = 3;
inline void ElementData::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ElementData::description() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.ElementData.description)
  return description_.GetNoArena();
}
inline void ElementData::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.proto.ElementData.description)
}
#if LANG_CXX11
inline void ElementData::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.proto.ElementData.description)
}
#endif
inline void ElementData::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.proto.ElementData.description)
}
inline void ElementData::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.proto.ElementData.description)
}
inline ::std::string* ElementData::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.ElementData.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ElementData::release_description() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.ElementData.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ElementData::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.ElementData.description)
}

// string short = 4;
inline void ElementData::clear_short_() {
  short__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ElementData::short_() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.ElementData.short)
  return short__.GetNoArena();
}
inline void ElementData::set_short_(const ::std::string& value) {
  
  short__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.proto.ElementData.short)
}
#if LANG_CXX11
inline void ElementData::set_short_(::std::string&& value) {
  
  short__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.proto.ElementData.short)
}
#endif
inline void ElementData::set_short_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  short__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.proto.ElementData.short)
}
inline void ElementData::set_short_(const char* value, size_t size) {
  
  short__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.proto.ElementData.short)
}
inline ::std::string* ElementData::mutable_short_() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.ElementData.short)
  return short__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ElementData::release_short_() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.ElementData.short)
  
  return short__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ElementData::set_allocated_short_(::std::string* short_) {
  if (short_ != NULL) {
    
  } else {
    
  }
  short__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), short_);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.ElementData.short)
}

// string comment = 5;
inline void ElementData::clear_comment() {
  comment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ElementData::comment() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.ElementData.comment)
  return comment_.GetNoArena();
}
inline void ElementData::set_comment(const ::std::string& value) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.proto.ElementData.comment)
}
#if LANG_CXX11
inline void ElementData::set_comment(::std::string&& value) {
  
  comment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.proto.ElementData.comment)
}
#endif
inline void ElementData::set_comment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.proto.ElementData.comment)
}
inline void ElementData::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.proto.ElementData.comment)
}
inline ::std::string* ElementData::mutable_comment() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.ElementData.comment)
  return comment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ElementData::release_comment() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.ElementData.comment)
  
  return comment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ElementData::set_allocated_comment(::std::string* comment) {
  if (comment != NULL) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.ElementData.comment)
}

// string url_override = 6;
inline void ElementData::clear_url_override() {
  url_override_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ElementData::url_override() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.ElementData.url_override)
  return url_override_.GetNoArena();
}
inline void ElementData::set_url_override(const ::std::string& value) {
  
  url_override_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.proto.ElementData.url_override)
}
#if LANG_CXX11
inline void ElementData::set_url_override(::std::string&& value) {
  
  url_override_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.proto.ElementData.url_override)
}
#endif
inline void ElementData::set_url_override(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_override_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.proto.ElementData.url_override)
}
inline void ElementData::set_url_override(const char* value, size_t size) {
  
  url_override_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.proto.ElementData.url_override)
}
inline ::std::string* ElementData::mutable_url_override() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.ElementData.url_override)
  return url_override_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ElementData::release_url_override() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.ElementData.url_override)
  
  return url_override_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ElementData::set_allocated_url_override(::std::string* url_override) {
  if (url_override != NULL) {
    
  } else {
    
  }
  url_override_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url_override);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.ElementData.url_override)
}

// -------------------------------------------------------------------

// CodeData

// string system = 1;
inline void CodeData::clear_system() {
  system_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CodeData::system() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.CodeData.system)
  return system_.GetNoArena();
}
inline void CodeData::set_system(const ::std::string& value) {
  
  system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.proto.CodeData.system)
}
#if LANG_CXX11
inline void CodeData::set_system(::std::string&& value) {
  
  system_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.proto.CodeData.system)
}
#endif
inline void CodeData::set_system(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.proto.CodeData.system)
}
inline void CodeData::set_system(const char* value, size_t size) {
  
  system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.proto.CodeData.system)
}
inline ::std::string* CodeData::mutable_system() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.CodeData.system)
  return system_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CodeData::release_system() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.CodeData.system)
  
  return system_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CodeData::set_allocated_system(::std::string* system) {
  if (system != NULL) {
    
  } else {
    
  }
  system_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), system);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.CodeData.system)
}

// string binding_name = 2;
inline void CodeData::clear_binding_name() {
  binding_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CodeData::binding_name() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.CodeData.binding_name)
  return binding_name_.GetNoArena();
}
inline void CodeData::set_binding_name(const ::std::string& value) {
  
  binding_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.proto.CodeData.binding_name)
}
#if LANG_CXX11
inline void CodeData::set_binding_name(::std::string&& value) {
  
  binding_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.proto.CodeData.binding_name)
}
#endif
inline void CodeData::set_binding_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  binding_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.proto.CodeData.binding_name)
}
inline void CodeData::set_binding_name(const char* value, size_t size) {
  
  binding_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.proto.CodeData.binding_name)
}
inline ::std::string* CodeData::mutable_binding_name() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.CodeData.binding_name)
  return binding_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CodeData::release_binding_name() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.CodeData.binding_name)
  
  return binding_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CodeData::set_allocated_binding_name(::std::string* binding_name) {
  if (binding_name != NULL) {
    
  } else {
    
  }
  binding_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binding_name);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.CodeData.binding_name)
}

// .google.fhir.stu3.proto.BindingStrengthCode.Value binding_strength = 3;
inline void CodeData::clear_binding_strength() {
  binding_strength_ = 0;
}
inline ::google::fhir::stu3::proto::BindingStrengthCode_Value CodeData::binding_strength() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.CodeData.binding_strength)
  return static_cast< ::google::fhir::stu3::proto::BindingStrengthCode_Value >(binding_strength_);
}
inline void CodeData::set_binding_strength(::google::fhir::stu3::proto::BindingStrengthCode_Value value) {
  
  binding_strength_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.proto.CodeData.binding_strength)
}

// string fixed_value = 4;
inline void CodeData::clear_fixed_value() {
  fixed_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CodeData::fixed_value() const {
  // @@protoc_insertion_point(field_get:google.fhir.proto.CodeData.fixed_value)
  return fixed_value_.GetNoArena();
}
inline void CodeData::set_fixed_value(const ::std::string& value) {
  
  fixed_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.proto.CodeData.fixed_value)
}
#if LANG_CXX11
inline void CodeData::set_fixed_value(::std::string&& value) {
  
  fixed_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.proto.CodeData.fixed_value)
}
#endif
inline void CodeData::set_fixed_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fixed_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.proto.CodeData.fixed_value)
}
inline void CodeData::set_fixed_value(const char* value, size_t size) {
  
  fixed_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.proto.CodeData.fixed_value)
}
inline ::std::string* CodeData::mutable_fixed_value() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.proto.CodeData.fixed_value)
  return fixed_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CodeData::release_fixed_value() {
  // @@protoc_insertion_point(field_release:google.fhir.proto.CodeData.fixed_value)
  
  return fixed_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CodeData::set_allocated_fixed_value(::std::string* fixed_value) {
  if (fixed_value != NULL) {
    
  } else {
    
  }
  fixed_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fixed_value);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.proto.CodeData.fixed_value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace fhir
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::fhir::proto::SizeRestriction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::fhir::proto::SizeRestriction>() {
  return ::google::fhir::proto::SizeRestriction_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2fstu3_2fprofile_5fconfig_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/stu3/datatypes.proto

#ifndef PROTOBUF_INCLUDED_proto_2fstu3_2fdatatypes_2eproto
#define PROTOBUF_INCLUDED_proto_2fstu3_2fdatatypes_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/stu3/annotations.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fstu3_2fdatatypes_2eproto 

namespace protobuf_proto_2fstu3_2fdatatypes_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[68];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2fstu3_2fdatatypes_2eproto
namespace google {
namespace fhir {
namespace stu3 {
namespace proto {
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class AddressTypeCode;
class AddressTypeCodeDefaultTypeInternal;
extern AddressTypeCodeDefaultTypeInternal _AddressTypeCode_default_instance_;
class AddressUseCode;
class AddressUseCodeDefaultTypeInternal;
extern AddressUseCodeDefaultTypeInternal _AddressUseCode_default_instance_;
class Age;
class AgeDefaultTypeInternal;
extern AgeDefaultTypeInternal _Age_default_instance_;
class AllLanguageCode;
class AllLanguageCodeDefaultTypeInternal;
extern AllLanguageCodeDefaultTypeInternal _AllLanguageCode_default_instance_;
class Annotation;
class AnnotationDefaultTypeInternal;
extern AnnotationDefaultTypeInternal _Annotation_default_instance_;
class Annotation_Author;
class Annotation_AuthorDefaultTypeInternal;
extern Annotation_AuthorDefaultTypeInternal _Annotation_Author_default_instance_;
class Attachment;
class AttachmentDefaultTypeInternal;
extern AttachmentDefaultTypeInternal _Attachment_default_instance_;
class Base64Binary;
class Base64BinaryDefaultTypeInternal;
extern Base64BinaryDefaultTypeInternal _Base64Binary_default_instance_;
class Boolean;
class BooleanDefaultTypeInternal;
extern BooleanDefaultTypeInternal _Boolean_default_instance_;
class Code;
class CodeDefaultTypeInternal;
extern CodeDefaultTypeInternal _Code_default_instance_;
class CodeableConcept;
class CodeableConceptDefaultTypeInternal;
extern CodeableConceptDefaultTypeInternal _CodeableConcept_default_instance_;
class Coding;
class CodingDefaultTypeInternal;
extern CodingDefaultTypeInternal _Coding_default_instance_;
class CodingWithFixedCode;
class CodingWithFixedCodeDefaultTypeInternal;
extern CodingWithFixedCodeDefaultTypeInternal _CodingWithFixedCode_default_instance_;
class CodingWithFixedSystem;
class CodingWithFixedSystemDefaultTypeInternal;
extern CodingWithFixedSystemDefaultTypeInternal _CodingWithFixedSystem_default_instance_;
class ContactPoint;
class ContactPointDefaultTypeInternal;
extern ContactPointDefaultTypeInternal _ContactPoint_default_instance_;
class ContactPointSystemCode;
class ContactPointSystemCodeDefaultTypeInternal;
extern ContactPointSystemCodeDefaultTypeInternal _ContactPointSystemCode_default_instance_;
class ContactPointUseCode;
class ContactPointUseCodeDefaultTypeInternal;
extern ContactPointUseCodeDefaultTypeInternal _ContactPointUseCode_default_instance_;
class Count;
class CountDefaultTypeInternal;
extern CountDefaultTypeInternal _Count_default_instance_;
class Date;
class DateDefaultTypeInternal;
extern DateDefaultTypeInternal _Date_default_instance_;
class DateTime;
class DateTimeDefaultTypeInternal;
extern DateTimeDefaultTypeInternal _DateTime_default_instance_;
class DaysOfWeekCode;
class DaysOfWeekCodeDefaultTypeInternal;
extern DaysOfWeekCodeDefaultTypeInternal _DaysOfWeekCode_default_instance_;
class Decimal;
class DecimalDefaultTypeInternal;
extern DecimalDefaultTypeInternal _Decimal_default_instance_;
class Distance;
class DistanceDefaultTypeInternal;
extern DistanceDefaultTypeInternal _Distance_default_instance_;
class Dosage;
class DosageDefaultTypeInternal;
extern DosageDefaultTypeInternal _Dosage_default_instance_;
class Dosage_AsNeeded;
class Dosage_AsNeededDefaultTypeInternal;
extern Dosage_AsNeededDefaultTypeInternal _Dosage_AsNeeded_default_instance_;
class Dosage_Dose;
class Dosage_DoseDefaultTypeInternal;
extern Dosage_DoseDefaultTypeInternal _Dosage_Dose_default_instance_;
class Dosage_Rate;
class Dosage_RateDefaultTypeInternal;
extern Dosage_RateDefaultTypeInternal _Dosage_Rate_default_instance_;
class Duration;
class DurationDefaultTypeInternal;
extern DurationDefaultTypeInternal _Duration_default_instance_;
class EventTimingCode;
class EventTimingCodeDefaultTypeInternal;
extern EventTimingCodeDefaultTypeInternal _EventTimingCode_default_instance_;
class Extension;
class ExtensionDefaultTypeInternal;
extern ExtensionDefaultTypeInternal _Extension_default_instance_;
class Extension_Value;
class Extension_ValueDefaultTypeInternal;
extern Extension_ValueDefaultTypeInternal _Extension_Value_default_instance_;
class HumanName;
class HumanNameDefaultTypeInternal;
extern HumanNameDefaultTypeInternal _HumanName_default_instance_;
class Id;
class IdDefaultTypeInternal;
extern IdDefaultTypeInternal _Id_default_instance_;
class Identifier;
class IdentifierDefaultTypeInternal;
extern IdentifierDefaultTypeInternal _Identifier_default_instance_;
class IdentifierUseCode;
class IdentifierUseCodeDefaultTypeInternal;
extern IdentifierUseCodeDefaultTypeInternal _IdentifierUseCode_default_instance_;
class Instant;
class InstantDefaultTypeInternal;
extern InstantDefaultTypeInternal _Instant_default_instance_;
class Integer;
class IntegerDefaultTypeInternal;
extern IntegerDefaultTypeInternal _Integer_default_instance_;
class LanguageCode;
class LanguageCodeDefaultTypeInternal;
extern LanguageCodeDefaultTypeInternal _LanguageCode_default_instance_;
class Markdown;
class MarkdownDefaultTypeInternal;
extern MarkdownDefaultTypeInternal _Markdown_default_instance_;
class Meta;
class MetaDefaultTypeInternal;
extern MetaDefaultTypeInternal _Meta_default_instance_;
class MimeTypeCode;
class MimeTypeCodeDefaultTypeInternal;
extern MimeTypeCodeDefaultTypeInternal _MimeTypeCode_default_instance_;
class Money;
class MoneyDefaultTypeInternal;
extern MoneyDefaultTypeInternal _Money_default_instance_;
class NameUseCode;
class NameUseCodeDefaultTypeInternal;
extern NameUseCodeDefaultTypeInternal _NameUseCode_default_instance_;
class Oid;
class OidDefaultTypeInternal;
extern OidDefaultTypeInternal _Oid_default_instance_;
class Period;
class PeriodDefaultTypeInternal;
extern PeriodDefaultTypeInternal _Period_default_instance_;
class PositiveInt;
class PositiveIntDefaultTypeInternal;
extern PositiveIntDefaultTypeInternal _PositiveInt_default_instance_;
class Quantity;
class QuantityDefaultTypeInternal;
extern QuantityDefaultTypeInternal _Quantity_default_instance_;
class QuantityComparatorCode;
class QuantityComparatorCodeDefaultTypeInternal;
extern QuantityComparatorCodeDefaultTypeInternal _QuantityComparatorCode_default_instance_;
class Range;
class RangeDefaultTypeInternal;
extern RangeDefaultTypeInternal _Range_default_instance_;
class Ratio;
class RatioDefaultTypeInternal;
extern RatioDefaultTypeInternal _Ratio_default_instance_;
class Reference;
class ReferenceDefaultTypeInternal;
extern ReferenceDefaultTypeInternal _Reference_default_instance_;
class ReferenceId;
class ReferenceIdDefaultTypeInternal;
extern ReferenceIdDefaultTypeInternal _ReferenceId_default_instance_;
class SampledData;
class SampledDataDefaultTypeInternal;
extern SampledDataDefaultTypeInternal _SampledData_default_instance_;
class Signature;
class SignatureDefaultTypeInternal;
extern SignatureDefaultTypeInternal _Signature_default_instance_;
class Signature_OnBehalfOf;
class Signature_OnBehalfOfDefaultTypeInternal;
extern Signature_OnBehalfOfDefaultTypeInternal _Signature_OnBehalfOf_default_instance_;
class Signature_Who;
class Signature_WhoDefaultTypeInternal;
extern Signature_WhoDefaultTypeInternal _Signature_Who_default_instance_;
class SimpleQuantity;
class SimpleQuantityDefaultTypeInternal;
extern SimpleQuantityDefaultTypeInternal _SimpleQuantity_default_instance_;
class String;
class StringDefaultTypeInternal;
extern StringDefaultTypeInternal _String_default_instance_;
class Time;
class TimeDefaultTypeInternal;
extern TimeDefaultTypeInternal _Time_default_instance_;
class Timing;
class TimingDefaultTypeInternal;
extern TimingDefaultTypeInternal _Timing_default_instance_;
class Timing_Repeat;
class Timing_RepeatDefaultTypeInternal;
extern Timing_RepeatDefaultTypeInternal _Timing_Repeat_default_instance_;
class Timing_Repeat_Bounds;
class Timing_Repeat_BoundsDefaultTypeInternal;
extern Timing_Repeat_BoundsDefaultTypeInternal _Timing_Repeat_Bounds_default_instance_;
class UnitsOfTimeCode;
class UnitsOfTimeCodeDefaultTypeInternal;
extern UnitsOfTimeCodeDefaultTypeInternal _UnitsOfTimeCode_default_instance_;
class UnsignedInt;
class UnsignedIntDefaultTypeInternal;
extern UnsignedIntDefaultTypeInternal _UnsignedInt_default_instance_;
class Uri;
class UriDefaultTypeInternal;
extern UriDefaultTypeInternal _Uri_default_instance_;
class Uuid;
class UuidDefaultTypeInternal;
extern UuidDefaultTypeInternal _Uuid_default_instance_;
class Xhtml;
class XhtmlDefaultTypeInternal;
extern XhtmlDefaultTypeInternal _Xhtml_default_instance_;
}  // namespace proto
}  // namespace stu3
}  // namespace fhir
}  // namespace google
namespace google {
namespace protobuf {
template<> ::google::fhir::stu3::proto::Address* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Address>(Arena*);
template<> ::google::fhir::stu3::proto::AddressTypeCode* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressTypeCode>(Arena*);
template<> ::google::fhir::stu3::proto::AddressUseCode* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AddressUseCode>(Arena*);
template<> ::google::fhir::stu3::proto::Age* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Age>(Arena*);
template<> ::google::fhir::stu3::proto::AllLanguageCode* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::AllLanguageCode>(Arena*);
template<> ::google::fhir::stu3::proto::Annotation* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Annotation>(Arena*);
template<> ::google::fhir::stu3::proto::Annotation_Author* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Annotation_Author>(Arena*);
template<> ::google::fhir::stu3::proto::Attachment* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Attachment>(Arena*);
template<> ::google::fhir::stu3::proto::Base64Binary* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Base64Binary>(Arena*);
template<> ::google::fhir::stu3::proto::Boolean* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(Arena*);
template<> ::google::fhir::stu3::proto::Code* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Code>(Arena*);
template<> ::google::fhir::stu3::proto::CodeableConcept* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(Arena*);
template<> ::google::fhir::stu3::proto::Coding* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Coding>(Arena*);
template<> ::google::fhir::stu3::proto::CodingWithFixedCode* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodingWithFixedCode>(Arena*);
template<> ::google::fhir::stu3::proto::CodingWithFixedSystem* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::CodingWithFixedSystem>(Arena*);
template<> ::google::fhir::stu3::proto::ContactPoint* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ContactPoint>(Arena*);
template<> ::google::fhir::stu3::proto::ContactPointSystemCode* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ContactPointSystemCode>(Arena*);
template<> ::google::fhir::stu3::proto::ContactPointUseCode* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ContactPointUseCode>(Arena*);
template<> ::google::fhir::stu3::proto::Count* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Count>(Arena*);
template<> ::google::fhir::stu3::proto::Date* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Date>(Arena*);
template<> ::google::fhir::stu3::proto::DateTime* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DateTime>(Arena*);
template<> ::google::fhir::stu3::proto::DaysOfWeekCode* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::DaysOfWeekCode>(Arena*);
template<> ::google::fhir::stu3::proto::Decimal* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(Arena*);
template<> ::google::fhir::stu3::proto::Distance* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Distance>(Arena*);
template<> ::google::fhir::stu3::proto::Dosage* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Dosage>(Arena*);
template<> ::google::fhir::stu3::proto::Dosage_AsNeeded* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Dosage_AsNeeded>(Arena*);
template<> ::google::fhir::stu3::proto::Dosage_Dose* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Dosage_Dose>(Arena*);
template<> ::google::fhir::stu3::proto::Dosage_Rate* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Dosage_Rate>(Arena*);
template<> ::google::fhir::stu3::proto::Duration* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Duration>(Arena*);
template<> ::google::fhir::stu3::proto::EventTimingCode* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::EventTimingCode>(Arena*);
template<> ::google::fhir::stu3::proto::Extension* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Extension>(Arena*);
template<> ::google::fhir::stu3::proto::Extension_Value* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Extension_Value>(Arena*);
template<> ::google::fhir::stu3::proto::HumanName* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::HumanName>(Arena*);
template<> ::google::fhir::stu3::proto::Id* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Id>(Arena*);
template<> ::google::fhir::stu3::proto::Identifier* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Identifier>(Arena*);
template<> ::google::fhir::stu3::proto::IdentifierUseCode* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::IdentifierUseCode>(Arena*);
template<> ::google::fhir::stu3::proto::Instant* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Instant>(Arena*);
template<> ::google::fhir::stu3::proto::Integer* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Integer>(Arena*);
template<> ::google::fhir::stu3::proto::LanguageCode* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::LanguageCode>(Arena*);
template<> ::google::fhir::stu3::proto::Markdown* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Markdown>(Arena*);
template<> ::google::fhir::stu3::proto::Meta* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Meta>(Arena*);
template<> ::google::fhir::stu3::proto::MimeTypeCode* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::MimeTypeCode>(Arena*);
template<> ::google::fhir::stu3::proto::Money* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Money>(Arena*);
template<> ::google::fhir::stu3::proto::NameUseCode* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::NameUseCode>(Arena*);
template<> ::google::fhir::stu3::proto::Oid* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Oid>(Arena*);
template<> ::google::fhir::stu3::proto::Period* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Period>(Arena*);
template<> ::google::fhir::stu3::proto::PositiveInt* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::PositiveInt>(Arena*);
template<> ::google::fhir::stu3::proto::Quantity* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Quantity>(Arena*);
template<> ::google::fhir::stu3::proto::QuantityComparatorCode* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::QuantityComparatorCode>(Arena*);
template<> ::google::fhir::stu3::proto::Range* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Range>(Arena*);
template<> ::google::fhir::stu3::proto::Ratio* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Ratio>(Arena*);
template<> ::google::fhir::stu3::proto::Reference* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(Arena*);
template<> ::google::fhir::stu3::proto::ReferenceId* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::ReferenceId>(Arena*);
template<> ::google::fhir::stu3::proto::SampledData* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::SampledData>(Arena*);
template<> ::google::fhir::stu3::proto::Signature* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Signature>(Arena*);
template<> ::google::fhir::stu3::proto::Signature_OnBehalfOf* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Signature_OnBehalfOf>(Arena*);
template<> ::google::fhir::stu3::proto::Signature_Who* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Signature_Who>(Arena*);
template<> ::google::fhir::stu3::proto::SimpleQuantity* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::SimpleQuantity>(Arena*);
template<> ::google::fhir::stu3::proto::String* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::String>(Arena*);
template<> ::google::fhir::stu3::proto::Time* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Time>(Arena*);
template<> ::google::fhir::stu3::proto::Timing* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Timing>(Arena*);
template<> ::google::fhir::stu3::proto::Timing_Repeat* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Timing_Repeat>(Arena*);
template<> ::google::fhir::stu3::proto::Timing_Repeat_Bounds* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Timing_Repeat_Bounds>(Arena*);
template<> ::google::fhir::stu3::proto::UnitsOfTimeCode* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::UnitsOfTimeCode>(Arena*);
template<> ::google::fhir::stu3::proto::UnsignedInt* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::UnsignedInt>(Arena*);
template<> ::google::fhir::stu3::proto::Uri* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(Arena*);
template<> ::google::fhir::stu3::proto::Uuid* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Uuid>(Arena*);
template<> ::google::fhir::stu3::proto::Xhtml* Arena::CreateMaybeMessage<::google::fhir::stu3::proto::Xhtml>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace fhir {
namespace stu3 {
namespace proto {

enum Date_Precision {
  Date_Precision_PRECISION_UNSPECIFIED = 0,
  Date_Precision_YEAR = 1,
  Date_Precision_MONTH = 2,
  Date_Precision_DAY = 3,
  Date_Precision_Date_Precision_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Date_Precision_Date_Precision_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Date_Precision_IsValid(int value);
const Date_Precision Date_Precision_Precision_MIN = Date_Precision_PRECISION_UNSPECIFIED;
const Date_Precision Date_Precision_Precision_MAX = Date_Precision_DAY;
const int Date_Precision_Precision_ARRAYSIZE = Date_Precision_Precision_MAX + 1;

const ::google::protobuf::EnumDescriptor* Date_Precision_descriptor();
inline const ::std::string& Date_Precision_Name(Date_Precision value) {
  return ::google::protobuf::internal::NameOfEnum(
    Date_Precision_descriptor(), value);
}
inline bool Date_Precision_Parse(
    const ::std::string& name, Date_Precision* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Date_Precision>(
    Date_Precision_descriptor(), name, value);
}
enum DateTime_Precision {
  DateTime_Precision_PRECISION_UNSPECIFIED = 0,
  DateTime_Precision_YEAR = 1,
  DateTime_Precision_MONTH = 2,
  DateTime_Precision_DAY = 3,
  DateTime_Precision_SECOND = 4,
  DateTime_Precision_MILLISECOND = 5,
  DateTime_Precision_MICROSECOND = 6,
  DateTime_Precision_DateTime_Precision_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DateTime_Precision_DateTime_Precision_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DateTime_Precision_IsValid(int value);
const DateTime_Precision DateTime_Precision_Precision_MIN = DateTime_Precision_PRECISION_UNSPECIFIED;
const DateTime_Precision DateTime_Precision_Precision_MAX = DateTime_Precision_MICROSECOND;
const int DateTime_Precision_Precision_ARRAYSIZE = DateTime_Precision_Precision_MAX + 1;

const ::google::protobuf::EnumDescriptor* DateTime_Precision_descriptor();
inline const ::std::string& DateTime_Precision_Name(DateTime_Precision value) {
  return ::google::protobuf::internal::NameOfEnum(
    DateTime_Precision_descriptor(), value);
}
inline bool DateTime_Precision_Parse(
    const ::std::string& name, DateTime_Precision* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DateTime_Precision>(
    DateTime_Precision_descriptor(), name, value);
}
enum Instant_Precision {
  Instant_Precision_PRECISION_UNSPECIFIED = 0,
  Instant_Precision_SECOND = 1,
  Instant_Precision_MILLISECOND = 2,
  Instant_Precision_MICROSECOND = 3,
  Instant_Precision_Instant_Precision_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Instant_Precision_Instant_Precision_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Instant_Precision_IsValid(int value);
const Instant_Precision Instant_Precision_Precision_MIN = Instant_Precision_PRECISION_UNSPECIFIED;
const Instant_Precision Instant_Precision_Precision_MAX = Instant_Precision_MICROSECOND;
const int Instant_Precision_Precision_ARRAYSIZE = Instant_Precision_Precision_MAX + 1;

const ::google::protobuf::EnumDescriptor* Instant_Precision_descriptor();
inline const ::std::string& Instant_Precision_Name(Instant_Precision value) {
  return ::google::protobuf::internal::NameOfEnum(
    Instant_Precision_descriptor(), value);
}
inline bool Instant_Precision_Parse(
    const ::std::string& name, Instant_Precision* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Instant_Precision>(
    Instant_Precision_descriptor(), name, value);
}
enum Time_Precision {
  Time_Precision_PRECISION_UNSPECIFIED = 0,
  Time_Precision_SECOND = 1,
  Time_Precision_MILLISECOND = 2,
  Time_Precision_MICROSECOND = 3,
  Time_Precision_Time_Precision_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Time_Precision_Time_Precision_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Time_Precision_IsValid(int value);
const Time_Precision Time_Precision_Precision_MIN = Time_Precision_PRECISION_UNSPECIFIED;
const Time_Precision Time_Precision_Precision_MAX = Time_Precision_MICROSECOND;
const int Time_Precision_Precision_ARRAYSIZE = Time_Precision_Precision_MAX + 1;

const ::google::protobuf::EnumDescriptor* Time_Precision_descriptor();
inline const ::std::string& Time_Precision_Name(Time_Precision value) {
  return ::google::protobuf::internal::NameOfEnum(
    Time_Precision_descriptor(), value);
}
inline bool Time_Precision_Parse(
    const ::std::string& name, Time_Precision* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Time_Precision>(
    Time_Precision_descriptor(), name, value);
}
enum AddressTypeCode_Value {
  AddressTypeCode_Value_INVALID_UNINITIALIZED = 0,
  AddressTypeCode_Value_POSTAL = 1,
  AddressTypeCode_Value_PHYSICAL = 2,
  AddressTypeCode_Value_BOTH = 3,
  AddressTypeCode_Value_AddressTypeCode_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AddressTypeCode_Value_AddressTypeCode_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AddressTypeCode_Value_IsValid(int value);
const AddressTypeCode_Value AddressTypeCode_Value_Value_MIN = AddressTypeCode_Value_INVALID_UNINITIALIZED;
const AddressTypeCode_Value AddressTypeCode_Value_Value_MAX = AddressTypeCode_Value_BOTH;
const int AddressTypeCode_Value_Value_ARRAYSIZE = AddressTypeCode_Value_Value_MAX + 1;

const ::google::protobuf::EnumDescriptor* AddressTypeCode_Value_descriptor();
inline const ::std::string& AddressTypeCode_Value_Name(AddressTypeCode_Value value) {
  return ::google::protobuf::internal::NameOfEnum(
    AddressTypeCode_Value_descriptor(), value);
}
inline bool AddressTypeCode_Value_Parse(
    const ::std::string& name, AddressTypeCode_Value* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AddressTypeCode_Value>(
    AddressTypeCode_Value_descriptor(), name, value);
}
enum AddressUseCode_Value {
  AddressUseCode_Value_INVALID_UNINITIALIZED = 0,
  AddressUseCode_Value_HOME = 1,
  AddressUseCode_Value_WORK = 2,
  AddressUseCode_Value_TEMP = 3,
  AddressUseCode_Value_OLD = 4,
  AddressUseCode_Value_AddressUseCode_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AddressUseCode_Value_AddressUseCode_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AddressUseCode_Value_IsValid(int value);
const AddressUseCode_Value AddressUseCode_Value_Value_MIN = AddressUseCode_Value_INVALID_UNINITIALIZED;
const AddressUseCode_Value AddressUseCode_Value_Value_MAX = AddressUseCode_Value_OLD;
const int AddressUseCode_Value_Value_ARRAYSIZE = AddressUseCode_Value_Value_MAX + 1;

const ::google::protobuf::EnumDescriptor* AddressUseCode_Value_descriptor();
inline const ::std::string& AddressUseCode_Value_Name(AddressUseCode_Value value) {
  return ::google::protobuf::internal::NameOfEnum(
    AddressUseCode_Value_descriptor(), value);
}
inline bool AddressUseCode_Value_Parse(
    const ::std::string& name, AddressUseCode_Value* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AddressUseCode_Value>(
    AddressUseCode_Value_descriptor(), name, value);
}
enum ContactPointSystemCode_Value {
  ContactPointSystemCode_Value_INVALID_UNINITIALIZED = 0,
  ContactPointSystemCode_Value_PHONE = 1,
  ContactPointSystemCode_Value_FAX = 2,
  ContactPointSystemCode_Value_EMAIL = 3,
  ContactPointSystemCode_Value_PAGER = 4,
  ContactPointSystemCode_Value_URL = 5,
  ContactPointSystemCode_Value_SMS = 6,
  ContactPointSystemCode_Value_OTHER = 7,
  ContactPointSystemCode_Value_ContactPointSystemCode_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ContactPointSystemCode_Value_ContactPointSystemCode_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ContactPointSystemCode_Value_IsValid(int value);
const ContactPointSystemCode_Value ContactPointSystemCode_Value_Value_MIN = ContactPointSystemCode_Value_INVALID_UNINITIALIZED;
const ContactPointSystemCode_Value ContactPointSystemCode_Value_Value_MAX = ContactPointSystemCode_Value_OTHER;
const int ContactPointSystemCode_Value_Value_ARRAYSIZE = ContactPointSystemCode_Value_Value_MAX + 1;

const ::google::protobuf::EnumDescriptor* ContactPointSystemCode_Value_descriptor();
inline const ::std::string& ContactPointSystemCode_Value_Name(ContactPointSystemCode_Value value) {
  return ::google::protobuf::internal::NameOfEnum(
    ContactPointSystemCode_Value_descriptor(), value);
}
inline bool ContactPointSystemCode_Value_Parse(
    const ::std::string& name, ContactPointSystemCode_Value* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ContactPointSystemCode_Value>(
    ContactPointSystemCode_Value_descriptor(), name, value);
}
enum ContactPointUseCode_Value {
  ContactPointUseCode_Value_INVALID_UNINITIALIZED = 0,
  ContactPointUseCode_Value_HOME = 1,
  ContactPointUseCode_Value_WORK = 2,
  ContactPointUseCode_Value_TEMP = 3,
  ContactPointUseCode_Value_OLD = 4,
  ContactPointUseCode_Value_MOBILE = 5,
  ContactPointUseCode_Value_ContactPointUseCode_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ContactPointUseCode_Value_ContactPointUseCode_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ContactPointUseCode_Value_IsValid(int value);
const ContactPointUseCode_Value ContactPointUseCode_Value_Value_MIN = ContactPointUseCode_Value_INVALID_UNINITIALIZED;
const ContactPointUseCode_Value ContactPointUseCode_Value_Value_MAX = ContactPointUseCode_Value_MOBILE;
const int ContactPointUseCode_Value_Value_ARRAYSIZE = ContactPointUseCode_Value_Value_MAX + 1;

const ::google::protobuf::EnumDescriptor* ContactPointUseCode_Value_descriptor();
inline const ::std::string& ContactPointUseCode_Value_Name(ContactPointUseCode_Value value) {
  return ::google::protobuf::internal::NameOfEnum(
    ContactPointUseCode_Value_descriptor(), value);
}
inline bool ContactPointUseCode_Value_Parse(
    const ::std::string& name, ContactPointUseCode_Value* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ContactPointUseCode_Value>(
    ContactPointUseCode_Value_descriptor(), name, value);
}
enum DaysOfWeekCode_Value {
  DaysOfWeekCode_Value_INVALID_UNINITIALIZED = 0,
  DaysOfWeekCode_Value_MON = 1,
  DaysOfWeekCode_Value_TUE = 2,
  DaysOfWeekCode_Value_WED = 3,
  DaysOfWeekCode_Value_THU = 4,
  DaysOfWeekCode_Value_FRI = 5,
  DaysOfWeekCode_Value_SAT = 6,
  DaysOfWeekCode_Value_SUN = 7,
  DaysOfWeekCode_Value_DaysOfWeekCode_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DaysOfWeekCode_Value_DaysOfWeekCode_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DaysOfWeekCode_Value_IsValid(int value);
const DaysOfWeekCode_Value DaysOfWeekCode_Value_Value_MIN = DaysOfWeekCode_Value_INVALID_UNINITIALIZED;
const DaysOfWeekCode_Value DaysOfWeekCode_Value_Value_MAX = DaysOfWeekCode_Value_SUN;
const int DaysOfWeekCode_Value_Value_ARRAYSIZE = DaysOfWeekCode_Value_Value_MAX + 1;

const ::google::protobuf::EnumDescriptor* DaysOfWeekCode_Value_descriptor();
inline const ::std::string& DaysOfWeekCode_Value_Name(DaysOfWeekCode_Value value) {
  return ::google::protobuf::internal::NameOfEnum(
    DaysOfWeekCode_Value_descriptor(), value);
}
inline bool DaysOfWeekCode_Value_Parse(
    const ::std::string& name, DaysOfWeekCode_Value* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DaysOfWeekCode_Value>(
    DaysOfWeekCode_Value_descriptor(), name, value);
}
enum EventTimingCode_Value {
  EventTimingCode_Value_INVALID_UNINITIALIZED = 0,
  EventTimingCode_Value_MORN = 1,
  EventTimingCode_Value_AFT = 2,
  EventTimingCode_Value_EVE = 3,
  EventTimingCode_Value_NIGHT = 4,
  EventTimingCode_Value_PHS = 5,
  EventTimingCode_Value_HS = 6,
  EventTimingCode_Value_WAKE = 7,
  EventTimingCode_Value_C = 8,
  EventTimingCode_Value_CM = 9,
  EventTimingCode_Value_CD = 10,
  EventTimingCode_Value_CV = 11,
  EventTimingCode_Value_AC = 12,
  EventTimingCode_Value_ACM = 13,
  EventTimingCode_Value_ACD = 14,
  EventTimingCode_Value_ACV = 15,
  EventTimingCode_Value_PC = 16,
  EventTimingCode_Value_PCM = 17,
  EventTimingCode_Value_PCD = 18,
  EventTimingCode_Value_PCV = 19,
  EventTimingCode_Value_EventTimingCode_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EventTimingCode_Value_EventTimingCode_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EventTimingCode_Value_IsValid(int value);
const EventTimingCode_Value EventTimingCode_Value_Value_MIN = EventTimingCode_Value_INVALID_UNINITIALIZED;
const EventTimingCode_Value EventTimingCode_Value_Value_MAX = EventTimingCode_Value_PCV;
const int EventTimingCode_Value_Value_ARRAYSIZE = EventTimingCode_Value_Value_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventTimingCode_Value_descriptor();
inline const ::std::string& EventTimingCode_Value_Name(EventTimingCode_Value value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventTimingCode_Value_descriptor(), value);
}
inline bool EventTimingCode_Value_Parse(
    const ::std::string& name, EventTimingCode_Value* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventTimingCode_Value>(
    EventTimingCode_Value_descriptor(), name, value);
}
enum IdentifierUseCode_Value {
  IdentifierUseCode_Value_INVALID_UNINITIALIZED = 0,
  IdentifierUseCode_Value_USUAL = 1,
  IdentifierUseCode_Value_OFFICIAL = 2,
  IdentifierUseCode_Value_TEMP = 3,
  IdentifierUseCode_Value_SECONDARY = 4,
  IdentifierUseCode_Value_IdentifierUseCode_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  IdentifierUseCode_Value_IdentifierUseCode_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool IdentifierUseCode_Value_IsValid(int value);
const IdentifierUseCode_Value IdentifierUseCode_Value_Value_MIN = IdentifierUseCode_Value_INVALID_UNINITIALIZED;
const IdentifierUseCode_Value IdentifierUseCode_Value_Value_MAX = IdentifierUseCode_Value_SECONDARY;
const int IdentifierUseCode_Value_Value_ARRAYSIZE = IdentifierUseCode_Value_Value_MAX + 1;

const ::google::protobuf::EnumDescriptor* IdentifierUseCode_Value_descriptor();
inline const ::std::string& IdentifierUseCode_Value_Name(IdentifierUseCode_Value value) {
  return ::google::protobuf::internal::NameOfEnum(
    IdentifierUseCode_Value_descriptor(), value);
}
inline bool IdentifierUseCode_Value_Parse(
    const ::std::string& name, IdentifierUseCode_Value* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IdentifierUseCode_Value>(
    IdentifierUseCode_Value_descriptor(), name, value);
}
enum NameUseCode_Value {
  NameUseCode_Value_INVALID_UNINITIALIZED = 0,
  NameUseCode_Value_USUAL = 1,
  NameUseCode_Value_OFFICIAL = 2,
  NameUseCode_Value_TEMP = 3,
  NameUseCode_Value_NICKNAME = 4,
  NameUseCode_Value_ANONYMOUS = 5,
  NameUseCode_Value_OLD = 6,
  NameUseCode_Value_MAIDEN = 7,
  NameUseCode_Value_NameUseCode_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NameUseCode_Value_NameUseCode_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NameUseCode_Value_IsValid(int value);
const NameUseCode_Value NameUseCode_Value_Value_MIN = NameUseCode_Value_INVALID_UNINITIALIZED;
const NameUseCode_Value NameUseCode_Value_Value_MAX = NameUseCode_Value_MAIDEN;
const int NameUseCode_Value_Value_ARRAYSIZE = NameUseCode_Value_Value_MAX + 1;

const ::google::protobuf::EnumDescriptor* NameUseCode_Value_descriptor();
inline const ::std::string& NameUseCode_Value_Name(NameUseCode_Value value) {
  return ::google::protobuf::internal::NameOfEnum(
    NameUseCode_Value_descriptor(), value);
}
inline bool NameUseCode_Value_Parse(
    const ::std::string& name, NameUseCode_Value* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NameUseCode_Value>(
    NameUseCode_Value_descriptor(), name, value);
}
enum QuantityComparatorCode_Value {
  QuantityComparatorCode_Value_INVALID_UNINITIALIZED = 0,
  QuantityComparatorCode_Value_LT = 1,
  QuantityComparatorCode_Value_LE = 2,
  QuantityComparatorCode_Value_GE = 3,
  QuantityComparatorCode_Value_GT = 4,
  QuantityComparatorCode_Value_QuantityComparatorCode_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  QuantityComparatorCode_Value_QuantityComparatorCode_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool QuantityComparatorCode_Value_IsValid(int value);
const QuantityComparatorCode_Value QuantityComparatorCode_Value_Value_MIN = QuantityComparatorCode_Value_INVALID_UNINITIALIZED;
const QuantityComparatorCode_Value QuantityComparatorCode_Value_Value_MAX = QuantityComparatorCode_Value_GT;
const int QuantityComparatorCode_Value_Value_ARRAYSIZE = QuantityComparatorCode_Value_Value_MAX + 1;

const ::google::protobuf::EnumDescriptor* QuantityComparatorCode_Value_descriptor();
inline const ::std::string& QuantityComparatorCode_Value_Name(QuantityComparatorCode_Value value) {
  return ::google::protobuf::internal::NameOfEnum(
    QuantityComparatorCode_Value_descriptor(), value);
}
inline bool QuantityComparatorCode_Value_Parse(
    const ::std::string& name, QuantityComparatorCode_Value* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QuantityComparatorCode_Value>(
    QuantityComparatorCode_Value_descriptor(), name, value);
}
enum UnitsOfTimeCode_Value {
  UnitsOfTimeCode_Value_INVALID_UNINITIALIZED = 0,
  UnitsOfTimeCode_Value_S = 1,
  UnitsOfTimeCode_Value_MIN = 2,
  UnitsOfTimeCode_Value_H = 3,
  UnitsOfTimeCode_Value_D = 4,
  UnitsOfTimeCode_Value_WK = 5,
  UnitsOfTimeCode_Value_MO = 6,
  UnitsOfTimeCode_Value_A = 7,
  UnitsOfTimeCode_Value_UnitsOfTimeCode_Value_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  UnitsOfTimeCode_Value_UnitsOfTimeCode_Value_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool UnitsOfTimeCode_Value_IsValid(int value);
const UnitsOfTimeCode_Value UnitsOfTimeCode_Value_Value_MIN = UnitsOfTimeCode_Value_INVALID_UNINITIALIZED;
const UnitsOfTimeCode_Value UnitsOfTimeCode_Value_Value_MAX = UnitsOfTimeCode_Value_A;
const int UnitsOfTimeCode_Value_Value_ARRAYSIZE = UnitsOfTimeCode_Value_Value_MAX + 1;

const ::google::protobuf::EnumDescriptor* UnitsOfTimeCode_Value_descriptor();
inline const ::std::string& UnitsOfTimeCode_Value_Name(UnitsOfTimeCode_Value value) {
  return ::google::protobuf::internal::NameOfEnum(
    UnitsOfTimeCode_Value_descriptor(), value);
}
inline bool UnitsOfTimeCode_Value_Parse(
    const ::std::string& name, UnitsOfTimeCode_Value* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnitsOfTimeCode_Value>(
    UnitsOfTimeCode_Value_descriptor(), name, value);
}
// ===================================================================

class Base64Binary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Base64Binary) */ {
 public:
  Base64Binary();
  virtual ~Base64Binary();

  Base64Binary(const Base64Binary& from);

  inline Base64Binary& operator=(const Base64Binary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Base64Binary(Base64Binary&& from) noexcept
    : Base64Binary() {
    *this = ::std::move(from);
  }

  inline Base64Binary& operator=(Base64Binary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Base64Binary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Base64Binary* internal_default_instance() {
    return reinterpret_cast<const Base64Binary*>(
               &_Base64Binary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Base64Binary* other);
  friend void swap(Base64Binary& a, Base64Binary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Base64Binary* New() const final {
    return CreateMaybeMessage<Base64Binary>(NULL);
  }

  Base64Binary* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Base64Binary>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Base64Binary& from);
  void MergeFrom(const Base64Binary& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Base64Binary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // bytes value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Base64Binary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::fhir::stu3::proto::String* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Boolean : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Boolean) */ {
 public:
  Boolean();
  virtual ~Boolean();

  Boolean(const Boolean& from);

  inline Boolean& operator=(const Boolean& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Boolean(Boolean&& from) noexcept
    : Boolean() {
    *this = ::std::move(from);
  }

  inline Boolean& operator=(Boolean&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Boolean& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Boolean* internal_default_instance() {
    return reinterpret_cast<const Boolean*>(
               &_Boolean_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Boolean* other);
  friend void swap(Boolean& a, Boolean& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Boolean* New() const final {
    return CreateMaybeMessage<Boolean>(NULL);
  }

  Boolean* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Boolean>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Boolean& from);
  void MergeFrom(const Boolean& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Boolean* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // bool value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  bool value() const;
  void set_value(bool value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Boolean)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  bool value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Code : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Code) */ {
 public:
  Code();
  virtual ~Code();

  Code(const Code& from);

  inline Code& operator=(const Code& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Code(Code&& from) noexcept
    : Code() {
    *this = ::std::move(from);
  }

  inline Code& operator=(Code&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Code& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Code* internal_default_instance() {
    return reinterpret_cast<const Code*>(
               &_Code_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Code* other);
  friend void swap(Code& a, Code& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Code* New() const final {
    return CreateMaybeMessage<Code>(NULL);
  }

  Code* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Code>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Code& from);
  void MergeFrom(const Code& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Code* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Code)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::fhir::stu3::proto::String* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Date : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Date) */ {
 public:
  Date();
  virtual ~Date();

  Date(const Date& from);

  inline Date& operator=(const Date& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Date(Date&& from) noexcept
    : Date() {
    *this = ::std::move(from);
  }

  inline Date& operator=(Date&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Date& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Date* internal_default_instance() {
    return reinterpret_cast<const Date*>(
               &_Date_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Date* other);
  friend void swap(Date& a, Date& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Date* New() const final {
    return CreateMaybeMessage<Date>(NULL);
  }

  Date* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Date>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Date& from);
  void MergeFrom(const Date& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Date* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Date_Precision Precision;
  static const Precision PRECISION_UNSPECIFIED =
    Date_Precision_PRECISION_UNSPECIFIED;
  static const Precision YEAR =
    Date_Precision_YEAR;
  static const Precision MONTH =
    Date_Precision_MONTH;
  static const Precision DAY =
    Date_Precision_DAY;
  static inline bool Precision_IsValid(int value) {
    return Date_Precision_IsValid(value);
  }
  static const Precision Precision_MIN =
    Date_Precision_Precision_MIN;
  static const Precision Precision_MAX =
    Date_Precision_Precision_MAX;
  static const int Precision_ARRAYSIZE =
    Date_Precision_Precision_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Precision_descriptor() {
    return Date_Precision_descriptor();
  }
  static inline const ::std::string& Precision_Name(Precision value) {
    return Date_Precision_Name(value);
  }
  static inline bool Precision_Parse(const ::std::string& name,
      Precision* value) {
    return Date_Precision_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 5;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 5;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // string timezone = 2;
  void clear_timezone();
  static const int kTimezoneFieldNumber = 2;
  const ::std::string& timezone() const;
  void set_timezone(const ::std::string& value);
  #if LANG_CXX11
  void set_timezone(::std::string&& value);
  #endif
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  ::std::string* mutable_timezone();
  ::std::string* release_timezone();
  void set_allocated_timezone(::std::string* timezone);

  // .google.fhir.stu3.proto.String id = 4;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // int64 value_us = 1;
  void clear_value_us();
  static const int kValueUsFieldNumber = 1;
  ::google::protobuf::int64 value_us() const;
  void set_value_us(::google::protobuf::int64 value);

  // .google.fhir.stu3.proto.Date.Precision precision = 3;
  void clear_precision();
  static const int kPrecisionFieldNumber = 3;
  ::google::fhir::stu3::proto::Date_Precision precision() const;
  void set_precision(::google::fhir::stu3::proto::Date_Precision value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Date)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::internal::ArenaStringPtr timezone_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::protobuf::int64 value_us_;
  int precision_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DateTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DateTime) */ {
 public:
  DateTime();
  virtual ~DateTime();

  DateTime(const DateTime& from);

  inline DateTime& operator=(const DateTime& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DateTime(DateTime&& from) noexcept
    : DateTime() {
    *this = ::std::move(from);
  }

  inline DateTime& operator=(DateTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DateTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DateTime* internal_default_instance() {
    return reinterpret_cast<const DateTime*>(
               &_DateTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DateTime* other);
  friend void swap(DateTime& a, DateTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DateTime* New() const final {
    return CreateMaybeMessage<DateTime>(NULL);
  }

  DateTime* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DateTime>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DateTime& from);
  void MergeFrom(const DateTime& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DateTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DateTime_Precision Precision;
  static const Precision PRECISION_UNSPECIFIED =
    DateTime_Precision_PRECISION_UNSPECIFIED;
  static const Precision YEAR =
    DateTime_Precision_YEAR;
  static const Precision MONTH =
    DateTime_Precision_MONTH;
  static const Precision DAY =
    DateTime_Precision_DAY;
  static const Precision SECOND =
    DateTime_Precision_SECOND;
  static const Precision MILLISECOND =
    DateTime_Precision_MILLISECOND;
  static const Precision MICROSECOND =
    DateTime_Precision_MICROSECOND;
  static inline bool Precision_IsValid(int value) {
    return DateTime_Precision_IsValid(value);
  }
  static const Precision Precision_MIN =
    DateTime_Precision_Precision_MIN;
  static const Precision Precision_MAX =
    DateTime_Precision_Precision_MAX;
  static const int Precision_ARRAYSIZE =
    DateTime_Precision_Precision_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Precision_descriptor() {
    return DateTime_Precision_descriptor();
  }
  static inline const ::std::string& Precision_Name(Precision value) {
    return DateTime_Precision_Name(value);
  }
  static inline bool Precision_Parse(const ::std::string& name,
      Precision* value) {
    return DateTime_Precision_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 5;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 5;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // string timezone = 2;
  void clear_timezone();
  static const int kTimezoneFieldNumber = 2;
  const ::std::string& timezone() const;
  void set_timezone(const ::std::string& value);
  #if LANG_CXX11
  void set_timezone(::std::string&& value);
  #endif
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  ::std::string* mutable_timezone();
  ::std::string* release_timezone();
  void set_allocated_timezone(::std::string* timezone);

  // .google.fhir.stu3.proto.String id = 4;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // int64 value_us = 1;
  void clear_value_us();
  static const int kValueUsFieldNumber = 1;
  ::google::protobuf::int64 value_us() const;
  void set_value_us(::google::protobuf::int64 value);

  // .google.fhir.stu3.proto.DateTime.Precision precision = 3;
  void clear_precision();
  static const int kPrecisionFieldNumber = 3;
  ::google::fhir::stu3::proto::DateTime_Precision precision() const;
  void set_precision(::google::fhir::stu3::proto::DateTime_Precision value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DateTime)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::internal::ArenaStringPtr timezone_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::protobuf::int64 value_us_;
  int precision_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Decimal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Decimal) */ {
 public:
  Decimal();
  virtual ~Decimal();

  Decimal(const Decimal& from);

  inline Decimal& operator=(const Decimal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Decimal(Decimal&& from) noexcept
    : Decimal() {
    *this = ::std::move(from);
  }

  inline Decimal& operator=(Decimal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Decimal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Decimal* internal_default_instance() {
    return reinterpret_cast<const Decimal*>(
               &_Decimal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Decimal* other);
  friend void swap(Decimal& a, Decimal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Decimal* New() const final {
    return CreateMaybeMessage<Decimal>(NULL);
  }

  Decimal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Decimal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Decimal& from);
  void MergeFrom(const Decimal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decimal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Decimal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::fhir::stu3::proto::String* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Id : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Id) */ {
 public:
  Id();
  virtual ~Id();

  Id(const Id& from);

  inline Id& operator=(const Id& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Id(Id&& from) noexcept
    : Id() {
    *this = ::std::move(from);
  }

  inline Id& operator=(Id&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Id& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Id* internal_default_instance() {
    return reinterpret_cast<const Id*>(
               &_Id_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Id* other);
  friend void swap(Id& a, Id& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Id* New() const final {
    return CreateMaybeMessage<Id>(NULL);
  }

  Id* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Id>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Id& from);
  void MergeFrom(const Id& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Id* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Id)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::fhir::stu3::proto::String* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Instant : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Instant) */ {
 public:
  Instant();
  virtual ~Instant();

  Instant(const Instant& from);

  inline Instant& operator=(const Instant& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Instant(Instant&& from) noexcept
    : Instant() {
    *this = ::std::move(from);
  }

  inline Instant& operator=(Instant&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Instant& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Instant* internal_default_instance() {
    return reinterpret_cast<const Instant*>(
               &_Instant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Instant* other);
  friend void swap(Instant& a, Instant& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Instant* New() const final {
    return CreateMaybeMessage<Instant>(NULL);
  }

  Instant* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Instant>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Instant& from);
  void MergeFrom(const Instant& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Instant* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Instant_Precision Precision;
  static const Precision PRECISION_UNSPECIFIED =
    Instant_Precision_PRECISION_UNSPECIFIED;
  static const Precision SECOND =
    Instant_Precision_SECOND;
  static const Precision MILLISECOND =
    Instant_Precision_MILLISECOND;
  static const Precision MICROSECOND =
    Instant_Precision_MICROSECOND;
  static inline bool Precision_IsValid(int value) {
    return Instant_Precision_IsValid(value);
  }
  static const Precision Precision_MIN =
    Instant_Precision_Precision_MIN;
  static const Precision Precision_MAX =
    Instant_Precision_Precision_MAX;
  static const int Precision_ARRAYSIZE =
    Instant_Precision_Precision_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Precision_descriptor() {
    return Instant_Precision_descriptor();
  }
  static inline const ::std::string& Precision_Name(Precision value) {
    return Instant_Precision_Name(value);
  }
  static inline bool Precision_Parse(const ::std::string& name,
      Precision* value) {
    return Instant_Precision_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 5;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 5;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // string timezone = 2;
  void clear_timezone();
  static const int kTimezoneFieldNumber = 2;
  const ::std::string& timezone() const;
  void set_timezone(const ::std::string& value);
  #if LANG_CXX11
  void set_timezone(::std::string&& value);
  #endif
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  ::std::string* mutable_timezone();
  ::std::string* release_timezone();
  void set_allocated_timezone(::std::string* timezone);

  // .google.fhir.stu3.proto.String id = 4;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // int64 value_us = 1;
  void clear_value_us();
  static const int kValueUsFieldNumber = 1;
  ::google::protobuf::int64 value_us() const;
  void set_value_us(::google::protobuf::int64 value);

  // .google.fhir.stu3.proto.Instant.Precision precision = 3;
  void clear_precision();
  static const int kPrecisionFieldNumber = 3;
  ::google::fhir::stu3::proto::Instant_Precision precision() const;
  void set_precision(::google::fhir::stu3::proto::Instant_Precision value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Instant)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::internal::ArenaStringPtr timezone_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::protobuf::int64 value_us_;
  int precision_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Integer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Integer) */ {
 public:
  Integer();
  virtual ~Integer();

  Integer(const Integer& from);

  inline Integer& operator=(const Integer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Integer(Integer&& from) noexcept
    : Integer() {
    *this = ::std::move(from);
  }

  inline Integer& operator=(Integer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Integer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Integer* internal_default_instance() {
    return reinterpret_cast<const Integer*>(
               &_Integer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Integer* other);
  friend void swap(Integer& a, Integer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Integer* New() const final {
    return CreateMaybeMessage<Integer>(NULL);
  }

  Integer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Integer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Integer& from);
  void MergeFrom(const Integer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Integer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // sint32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Integer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::protobuf::int32 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Markdown : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Markdown) */ {
 public:
  Markdown();
  virtual ~Markdown();

  Markdown(const Markdown& from);

  inline Markdown& operator=(const Markdown& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Markdown(Markdown&& from) noexcept
    : Markdown() {
    *this = ::std::move(from);
  }

  inline Markdown& operator=(Markdown&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Markdown& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Markdown* internal_default_instance() {
    return reinterpret_cast<const Markdown*>(
               &_Markdown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Markdown* other);
  friend void swap(Markdown& a, Markdown& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Markdown* New() const final {
    return CreateMaybeMessage<Markdown>(NULL);
  }

  Markdown* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Markdown>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Markdown& from);
  void MergeFrom(const Markdown& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Markdown* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Markdown)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::fhir::stu3::proto::String* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Oid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Oid) */ {
 public:
  Oid();
  virtual ~Oid();

  Oid(const Oid& from);

  inline Oid& operator=(const Oid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Oid(Oid&& from) noexcept
    : Oid() {
    *this = ::std::move(from);
  }

  inline Oid& operator=(Oid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Oid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Oid* internal_default_instance() {
    return reinterpret_cast<const Oid*>(
               &_Oid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Oid* other);
  friend void swap(Oid& a, Oid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Oid* New() const final {
    return CreateMaybeMessage<Oid>(NULL);
  }

  Oid* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Oid>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Oid& from);
  void MergeFrom(const Oid& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Oid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Oid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::fhir::stu3::proto::String* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PositiveInt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.PositiveInt) */ {
 public:
  PositiveInt();
  virtual ~PositiveInt();

  PositiveInt(const PositiveInt& from);

  inline PositiveInt& operator=(const PositiveInt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PositiveInt(PositiveInt&& from) noexcept
    : PositiveInt() {
    *this = ::std::move(from);
  }

  inline PositiveInt& operator=(PositiveInt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PositiveInt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositiveInt* internal_default_instance() {
    return reinterpret_cast<const PositiveInt*>(
               &_PositiveInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(PositiveInt* other);
  friend void swap(PositiveInt& a, PositiveInt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PositiveInt* New() const final {
    return CreateMaybeMessage<PositiveInt>(NULL);
  }

  PositiveInt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PositiveInt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PositiveInt& from);
  void MergeFrom(const PositiveInt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositiveInt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // uint32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.PositiveInt)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::protobuf::uint32 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class String : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.String) */ {
 public:
  String();
  virtual ~String();

  String(const String& from);

  inline String& operator=(const String& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  String(String&& from) noexcept
    : String() {
    *this = ::std::move(from);
  }

  inline String& operator=(String&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const String& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const String* internal_default_instance() {
    return reinterpret_cast<const String*>(
               &_String_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(String* other);
  friend void swap(String& a, String& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline String* New() const final {
    return CreateMaybeMessage<String>(NULL);
  }

  String* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<String>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const String& from);
  void MergeFrom(const String& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(String* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.String)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::fhir::stu3::proto::String* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Time : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Time) */ {
 public:
  Time();
  virtual ~Time();

  Time(const Time& from);

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Time(Time&& from) noexcept
    : Time() {
    *this = ::std::move(from);
  }

  inline Time& operator=(Time&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Time& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Time* internal_default_instance() {
    return reinterpret_cast<const Time*>(
               &_Time_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Time* other);
  friend void swap(Time& a, Time& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Time* New() const final {
    return CreateMaybeMessage<Time>(NULL);
  }

  Time* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Time>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Time& from);
  void MergeFrom(const Time& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Time* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Time_Precision Precision;
  static const Precision PRECISION_UNSPECIFIED =
    Time_Precision_PRECISION_UNSPECIFIED;
  static const Precision SECOND =
    Time_Precision_SECOND;
  static const Precision MILLISECOND =
    Time_Precision_MILLISECOND;
  static const Precision MICROSECOND =
    Time_Precision_MICROSECOND;
  static inline bool Precision_IsValid(int value) {
    return Time_Precision_IsValid(value);
  }
  static const Precision Precision_MIN =
    Time_Precision_Precision_MIN;
  static const Precision Precision_MAX =
    Time_Precision_Precision_MAX;
  static const int Precision_ARRAYSIZE =
    Time_Precision_Precision_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Precision_descriptor() {
    return Time_Precision_descriptor();
  }
  static inline const ::std::string& Precision_Name(Precision value) {
    return Time_Precision_Name(value);
  }
  static inline bool Precision_Parse(const ::std::string& name,
      Precision* value) {
    return Time_Precision_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 4;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 4;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 3;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // int64 value_us = 1;
  void clear_value_us();
  static const int kValueUsFieldNumber = 1;
  ::google::protobuf::int64 value_us() const;
  void set_value_us(::google::protobuf::int64 value);

  // .google.fhir.stu3.proto.Time.Precision precision = 2;
  void clear_precision();
  static const int kPrecisionFieldNumber = 2;
  ::google::fhir::stu3::proto::Time_Precision precision() const;
  void set_precision(::google::fhir::stu3::proto::Time_Precision value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Time)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::protobuf::int64 value_us_;
  int precision_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnsignedInt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.UnsignedInt) */ {
 public:
  UnsignedInt();
  virtual ~UnsignedInt();

  UnsignedInt(const UnsignedInt& from);

  inline UnsignedInt& operator=(const UnsignedInt& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnsignedInt(UnsignedInt&& from) noexcept
    : UnsignedInt() {
    *this = ::std::move(from);
  }

  inline UnsignedInt& operator=(UnsignedInt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnsignedInt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnsignedInt* internal_default_instance() {
    return reinterpret_cast<const UnsignedInt*>(
               &_UnsignedInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(UnsignedInt* other);
  friend void swap(UnsignedInt& a, UnsignedInt& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnsignedInt* New() const final {
    return CreateMaybeMessage<UnsignedInt>(NULL);
  }

  UnsignedInt* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnsignedInt>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnsignedInt& from);
  void MergeFrom(const UnsignedInt& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnsignedInt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // uint32 value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.UnsignedInt)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::protobuf::uint32 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Uri : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Uri) */ {
 public:
  Uri();
  virtual ~Uri();

  Uri(const Uri& from);

  inline Uri& operator=(const Uri& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Uri(Uri&& from) noexcept
    : Uri() {
    *this = ::std::move(from);
  }

  inline Uri& operator=(Uri&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Uri& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Uri* internal_default_instance() {
    return reinterpret_cast<const Uri*>(
               &_Uri_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(Uri* other);
  friend void swap(Uri& a, Uri& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Uri* New() const final {
    return CreateMaybeMessage<Uri>(NULL);
  }

  Uri* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Uri>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Uri& from);
  void MergeFrom(const Uri& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uri* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Uri)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::fhir::stu3::proto::String* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Uuid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Uuid) */ {
 public:
  Uuid();
  virtual ~Uuid();

  Uuid(const Uuid& from);

  inline Uuid& operator=(const Uuid& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Uuid(Uuid&& from) noexcept
    : Uuid() {
    *this = ::std::move(from);
  }

  inline Uuid& operator=(Uuid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Uuid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Uuid* internal_default_instance() {
    return reinterpret_cast<const Uuid*>(
               &_Uuid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(Uuid* other);
  friend void swap(Uuid& a, Uuid& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Uuid* New() const final {
    return CreateMaybeMessage<Uuid>(NULL);
  }

  Uuid* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Uuid>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Uuid& from);
  void MergeFrom(const Uuid& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uuid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Uuid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::fhir::stu3::proto::String* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Xhtml : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Xhtml) */ {
 public:
  Xhtml();
  virtual ~Xhtml();

  Xhtml(const Xhtml& from);

  inline Xhtml& operator=(const Xhtml& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Xhtml(Xhtml&& from) noexcept
    : Xhtml() {
    *this = ::std::move(from);
  }

  inline Xhtml& operator=(Xhtml&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Xhtml& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Xhtml* internal_default_instance() {
    return reinterpret_cast<const Xhtml*>(
               &_Xhtml_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(Xhtml* other);
  friend void swap(Xhtml& a, Xhtml& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Xhtml* New() const final {
    return CreateMaybeMessage<Xhtml>(NULL);
  }

  Xhtml* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Xhtml>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Xhtml& from);
  void MergeFrom(const Xhtml& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Xhtml* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string value = 1 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Xhtml)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::fhir::stu3::proto::String* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Address : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Address) */ {
 public:
  Address();
  virtual ~Address();

  Address(const Address& from);

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(Address&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(Address* other);
  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const final {
    return CreateMaybeMessage<Address>(NULL);
  }

  Address* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // repeated .google.fhir.stu3.proto.String line = 6;
  int line_size() const;
  void clear_line();
  static const int kLineFieldNumber = 6;
  ::google::fhir::stu3::proto::String* mutable_line(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >*
      mutable_line();
  const ::google::fhir::stu3::proto::String& line(int index) const;
  ::google::fhir::stu3::proto::String* add_line();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >&
      line() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.AddressUseCode use = 3;
  bool has_use() const;
  void clear_use();
  static const int kUseFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::AddressUseCode& _internal_use() const;
  public:
  const ::google::fhir::stu3::proto::AddressUseCode& use() const;
  ::google::fhir::stu3::proto::AddressUseCode* release_use();
  ::google::fhir::stu3::proto::AddressUseCode* mutable_use();
  void set_allocated_use(::google::fhir::stu3::proto::AddressUseCode* use);

  // .google.fhir.stu3.proto.AddressTypeCode type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::AddressTypeCode& _internal_type() const;
  public:
  const ::google::fhir::stu3::proto::AddressTypeCode& type() const;
  ::google::fhir::stu3::proto::AddressTypeCode* release_type();
  ::google::fhir::stu3::proto::AddressTypeCode* mutable_type();
  void set_allocated_type(::google::fhir::stu3::proto::AddressTypeCode* type);

  // .google.fhir.stu3.proto.String text = 5;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::String& _internal_text() const;
  public:
  const ::google::fhir::stu3::proto::String& text() const;
  ::google::fhir::stu3::proto::String* release_text();
  ::google::fhir::stu3::proto::String* mutable_text();
  void set_allocated_text(::google::fhir::stu3::proto::String* text);

  // .google.fhir.stu3.proto.String city = 7;
  bool has_city() const;
  void clear_city();
  static const int kCityFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::String& _internal_city() const;
  public:
  const ::google::fhir::stu3::proto::String& city() const;
  ::google::fhir::stu3::proto::String* release_city();
  ::google::fhir::stu3::proto::String* mutable_city();
  void set_allocated_city(::google::fhir::stu3::proto::String* city);

  // .google.fhir.stu3.proto.String district = 8;
  bool has_district() const;
  void clear_district();
  static const int kDistrictFieldNumber = 8;
  private:
  const ::google::fhir::stu3::proto::String& _internal_district() const;
  public:
  const ::google::fhir::stu3::proto::String& district() const;
  ::google::fhir::stu3::proto::String* release_district();
  ::google::fhir::stu3::proto::String* mutable_district();
  void set_allocated_district(::google::fhir::stu3::proto::String* district);

  // .google.fhir.stu3.proto.String state = 9;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 9;
  private:
  const ::google::fhir::stu3::proto::String& _internal_state() const;
  public:
  const ::google::fhir::stu3::proto::String& state() const;
  ::google::fhir::stu3::proto::String* release_state();
  ::google::fhir::stu3::proto::String* mutable_state();
  void set_allocated_state(::google::fhir::stu3::proto::String* state);

  // .google.fhir.stu3.proto.String postal_code = 10;
  bool has_postal_code() const;
  void clear_postal_code();
  static const int kPostalCodeFieldNumber = 10;
  private:
  const ::google::fhir::stu3::proto::String& _internal_postal_code() const;
  public:
  const ::google::fhir::stu3::proto::String& postal_code() const;
  ::google::fhir::stu3::proto::String* release_postal_code();
  ::google::fhir::stu3::proto::String* mutable_postal_code();
  void set_allocated_postal_code(::google::fhir::stu3::proto::String* postal_code);

  // .google.fhir.stu3.proto.String country = 11;
  bool has_country() const;
  void clear_country();
  static const int kCountryFieldNumber = 11;
  private:
  const ::google::fhir::stu3::proto::String& _internal_country() const;
  public:
  const ::google::fhir::stu3::proto::String& country() const;
  ::google::fhir::stu3::proto::String* release_country();
  ::google::fhir::stu3::proto::String* mutable_country();
  void set_allocated_country(::google::fhir::stu3::proto::String* country);

  // .google.fhir.stu3.proto.Period period = 12;
  bool has_period() const;
  void clear_period();
  static const int kPeriodFieldNumber = 12;
  private:
  const ::google::fhir::stu3::proto::Period& _internal_period() const;
  public:
  const ::google::fhir::stu3::proto::Period& period() const;
  ::google::fhir::stu3::proto::Period* release_period();
  ::google::fhir::stu3::proto::Period* mutable_period();
  void set_allocated_period(::google::fhir::stu3::proto::Period* period);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Address)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String > line_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::AddressUseCode* use_;
  ::google::fhir::stu3::proto::AddressTypeCode* type_;
  ::google::fhir::stu3::proto::String* text_;
  ::google::fhir::stu3::proto::String* city_;
  ::google::fhir::stu3::proto::String* district_;
  ::google::fhir::stu3::proto::String* state_;
  ::google::fhir::stu3::proto::String* postal_code_;
  ::google::fhir::stu3::proto::String* country_;
  ::google::fhir::stu3::proto::Period* period_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Age : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Age) */ {
 public:
  Age();
  virtual ~Age();

  Age(const Age& from);

  inline Age& operator=(const Age& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Age(Age&& from) noexcept
    : Age() {
    *this = ::std::move(from);
  }

  inline Age& operator=(Age&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Age& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Age* internal_default_instance() {
    return reinterpret_cast<const Age*>(
               &_Age_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(Age* other);
  friend void swap(Age& a, Age& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Age* New() const final {
    return CreateMaybeMessage<Age>(NULL);
  }

  Age* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Age>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Age& from);
  void MergeFrom(const Age& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Age* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Decimal value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& value() const;
  ::google::fhir::stu3::proto::Decimal* release_value();
  ::google::fhir::stu3::proto::Decimal* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::Decimal* value);

  // .google.fhir.stu3.proto.QuantityComparatorCode comparator = 4;
  bool has_comparator() const;
  void clear_comparator();
  static const int kComparatorFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::QuantityComparatorCode& _internal_comparator() const;
  public:
  const ::google::fhir::stu3::proto::QuantityComparatorCode& comparator() const;
  ::google::fhir::stu3::proto::QuantityComparatorCode* release_comparator();
  ::google::fhir::stu3::proto::QuantityComparatorCode* mutable_comparator();
  void set_allocated_comparator(::google::fhir::stu3::proto::QuantityComparatorCode* comparator);

  // .google.fhir.stu3.proto.String unit = 5;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::String& _internal_unit() const;
  public:
  const ::google::fhir::stu3::proto::String& unit() const;
  ::google::fhir::stu3::proto::String* release_unit();
  ::google::fhir::stu3::proto::String* mutable_unit();
  void set_allocated_unit(::google::fhir::stu3::proto::String* unit);

  // .google.fhir.stu3.proto.Uri system = 6;
  bool has_system() const;
  void clear_system();
  static const int kSystemFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_system() const;
  public:
  const ::google::fhir::stu3::proto::Uri& system() const;
  ::google::fhir::stu3::proto::Uri* release_system();
  ::google::fhir::stu3::proto::Uri* mutable_system();
  void set_allocated_system(::google::fhir::stu3::proto::Uri* system);

  // .google.fhir.stu3.proto.Code code = 7;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::Code& _internal_code() const;
  public:
  const ::google::fhir::stu3::proto::Code& code() const;
  ::google::fhir::stu3::proto::Code* release_code();
  ::google::fhir::stu3::proto::Code* mutable_code();
  void set_allocated_code(::google::fhir::stu3::proto::Code* code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Age)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Decimal* value_;
  ::google::fhir::stu3::proto::QuantityComparatorCode* comparator_;
  ::google::fhir::stu3::proto::String* unit_;
  ::google::fhir::stu3::proto::Uri* system_;
  ::google::fhir::stu3::proto::Code* code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Annotation_Author : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Annotation.Author) */ {
 public:
  Annotation_Author();
  virtual ~Annotation_Author();

  Annotation_Author(const Annotation_Author& from);

  inline Annotation_Author& operator=(const Annotation_Author& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Annotation_Author(Annotation_Author&& from) noexcept
    : Annotation_Author() {
    *this = ::std::move(from);
  }

  inline Annotation_Author& operator=(Annotation_Author&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Annotation_Author& default_instance();

  enum AuthorCase {
    kReference = 1,
    kStringValue = 2,
    AUTHOR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Annotation_Author* internal_default_instance() {
    return reinterpret_cast<const Annotation_Author*>(
               &_Annotation_Author_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(Annotation_Author* other);
  friend void swap(Annotation_Author& a, Annotation_Author& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Annotation_Author* New() const final {
    return CreateMaybeMessage<Annotation_Author>(NULL);
  }

  Annotation_Author* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Annotation_Author>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Annotation_Author& from);
  void MergeFrom(const Annotation_Author& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Annotation_Author* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Patient", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/RelatedPerson"];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  // .google.fhir.stu3.proto.String string_value = 2[json_name = "string"];
  bool has_string_value() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_string_value() const;
  public:
  const ::google::fhir::stu3::proto::String& string_value() const;
  ::google::fhir::stu3::proto::String* release_string_value();
  ::google::fhir::stu3::proto::String* mutable_string_value();
  void set_allocated_string_value(::google::fhir::stu3::proto::String* string_value);

  void clear_author();
  AuthorCase author_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Annotation.Author)
 private:
  void set_has_reference();
  void set_has_string_value();

  inline bool has_author() const;
  inline void clear_has_author();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union AuthorUnion {
    AuthorUnion() {}
    ::google::fhir::stu3::proto::Reference* reference_;
    ::google::fhir::stu3::proto::String* string_value_;
  } author_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Annotation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Annotation) */ {
 public:
  Annotation();
  virtual ~Annotation();

  Annotation(const Annotation& from);

  inline Annotation& operator=(const Annotation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Annotation(Annotation&& from) noexcept
    : Annotation() {
    *this = ::std::move(from);
  }

  inline Annotation& operator=(Annotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Annotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Annotation* internal_default_instance() {
    return reinterpret_cast<const Annotation*>(
               &_Annotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(Annotation* other);
  friend void swap(Annotation& a, Annotation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Annotation* New() const final {
    return CreateMaybeMessage<Annotation>(NULL);
  }

  Annotation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Annotation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Annotation& from);
  void MergeFrom(const Annotation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Annotation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Annotation_Author Author;

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Annotation.Author author = 3 [(.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_author() const;
  void clear_author();
  static const int kAuthorFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Annotation_Author& _internal_author() const;
  public:
  const ::google::fhir::stu3::proto::Annotation_Author& author() const;
  ::google::fhir::stu3::proto::Annotation_Author* release_author();
  ::google::fhir::stu3::proto::Annotation_Author* mutable_author();
  void set_allocated_author(::google::fhir::stu3::proto::Annotation_Author* author);

  // .google.fhir.stu3.proto.DateTime time = 4;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::DateTime& _internal_time() const;
  public:
  const ::google::fhir::stu3::proto::DateTime& time() const;
  ::google::fhir::stu3::proto::DateTime* release_time();
  ::google::fhir::stu3::proto::DateTime* mutable_time();
  void set_allocated_time(::google::fhir::stu3::proto::DateTime* time);

  // .google.fhir.stu3.proto.String text = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::String& _internal_text() const;
  public:
  const ::google::fhir::stu3::proto::String& text() const;
  ::google::fhir::stu3::proto::String* release_text();
  ::google::fhir::stu3::proto::String* mutable_text();
  void set_allocated_text(::google::fhir::stu3::proto::String* text);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Annotation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Annotation_Author* author_;
  ::google::fhir::stu3::proto::DateTime* time_;
  ::google::fhir::stu3::proto::String* text_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Attachment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Attachment) */ {
 public:
  Attachment();
  virtual ~Attachment();

  Attachment(const Attachment& from);

  inline Attachment& operator=(const Attachment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Attachment(Attachment&& from) noexcept
    : Attachment() {
    *this = ::std::move(from);
  }

  inline Attachment& operator=(Attachment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Attachment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Attachment* internal_default_instance() {
    return reinterpret_cast<const Attachment*>(
               &_Attachment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(Attachment* other);
  friend void swap(Attachment& a, Attachment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Attachment* New() const final {
    return CreateMaybeMessage<Attachment>(NULL);
  }

  Attachment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Attachment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Attachment& from);
  void MergeFrom(const Attachment& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attachment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.MimeTypeCode content_type = 3;
  bool has_content_type() const;
  void clear_content_type();
  static const int kContentTypeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::MimeTypeCode& _internal_content_type() const;
  public:
  const ::google::fhir::stu3::proto::MimeTypeCode& content_type() const;
  ::google::fhir::stu3::proto::MimeTypeCode* release_content_type();
  ::google::fhir::stu3::proto::MimeTypeCode* mutable_content_type();
  void set_allocated_content_type(::google::fhir::stu3::proto::MimeTypeCode* content_type);

  // .google.fhir.stu3.proto.LanguageCode language = 4;
  bool has_language() const;
  void clear_language();
  static const int kLanguageFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::LanguageCode& _internal_language() const;
  public:
  const ::google::fhir::stu3::proto::LanguageCode& language() const;
  ::google::fhir::stu3::proto::LanguageCode* release_language();
  ::google::fhir::stu3::proto::LanguageCode* mutable_language();
  void set_allocated_language(::google::fhir::stu3::proto::LanguageCode* language);

  // .google.fhir.stu3.proto.Base64Binary data = 5;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Base64Binary& _internal_data() const;
  public:
  const ::google::fhir::stu3::proto::Base64Binary& data() const;
  ::google::fhir::stu3::proto::Base64Binary* release_data();
  ::google::fhir::stu3::proto::Base64Binary* mutable_data();
  void set_allocated_data(::google::fhir::stu3::proto::Base64Binary* data);

  // .google.fhir.stu3.proto.Uri url = 6;
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_url() const;
  public:
  const ::google::fhir::stu3::proto::Uri& url() const;
  ::google::fhir::stu3::proto::Uri* release_url();
  ::google::fhir::stu3::proto::Uri* mutable_url();
  void set_allocated_url(::google::fhir::stu3::proto::Uri* url);

  // .google.fhir.stu3.proto.UnsignedInt size = 7;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::UnsignedInt& _internal_size() const;
  public:
  const ::google::fhir::stu3::proto::UnsignedInt& size() const;
  ::google::fhir::stu3::proto::UnsignedInt* release_size();
  ::google::fhir::stu3::proto::UnsignedInt* mutable_size();
  void set_allocated_size(::google::fhir::stu3::proto::UnsignedInt* size);

  // .google.fhir.stu3.proto.Base64Binary hash = 8;
  bool has_hash() const;
  void clear_hash();
  static const int kHashFieldNumber = 8;
  private:
  const ::google::fhir::stu3::proto::Base64Binary& _internal_hash() const;
  public:
  const ::google::fhir::stu3::proto::Base64Binary& hash() const;
  ::google::fhir::stu3::proto::Base64Binary* release_hash();
  ::google::fhir::stu3::proto::Base64Binary* mutable_hash();
  void set_allocated_hash(::google::fhir::stu3::proto::Base64Binary* hash);

  // .google.fhir.stu3.proto.String title = 9;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 9;
  private:
  const ::google::fhir::stu3::proto::String& _internal_title() const;
  public:
  const ::google::fhir::stu3::proto::String& title() const;
  ::google::fhir::stu3::proto::String* release_title();
  ::google::fhir::stu3::proto::String* mutable_title();
  void set_allocated_title(::google::fhir::stu3::proto::String* title);

  // .google.fhir.stu3.proto.DateTime creation = 10;
  bool has_creation() const;
  void clear_creation();
  static const int kCreationFieldNumber = 10;
  private:
  const ::google::fhir::stu3::proto::DateTime& _internal_creation() const;
  public:
  const ::google::fhir::stu3::proto::DateTime& creation() const;
  ::google::fhir::stu3::proto::DateTime* release_creation();
  ::google::fhir::stu3::proto::DateTime* mutable_creation();
  void set_allocated_creation(::google::fhir::stu3::proto::DateTime* creation);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Attachment)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::MimeTypeCode* content_type_;
  ::google::fhir::stu3::proto::LanguageCode* language_;
  ::google::fhir::stu3::proto::Base64Binary* data_;
  ::google::fhir::stu3::proto::Uri* url_;
  ::google::fhir::stu3::proto::UnsignedInt* size_;
  ::google::fhir::stu3::proto::Base64Binary* hash_;
  ::google::fhir::stu3::proto::String* title_;
  ::google::fhir::stu3::proto::DateTime* creation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodeableConcept : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodeableConcept) */ {
 public:
  CodeableConcept();
  virtual ~CodeableConcept();

  CodeableConcept(const CodeableConcept& from);

  inline CodeableConcept& operator=(const CodeableConcept& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodeableConcept(CodeableConcept&& from) noexcept
    : CodeableConcept() {
    *this = ::std::move(from);
  }

  inline CodeableConcept& operator=(CodeableConcept&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodeableConcept& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodeableConcept* internal_default_instance() {
    return reinterpret_cast<const CodeableConcept*>(
               &_CodeableConcept_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(CodeableConcept* other);
  friend void swap(CodeableConcept& a, CodeableConcept& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodeableConcept* New() const final {
    return CreateMaybeMessage<CodeableConcept>(NULL);
  }

  CodeableConcept* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodeableConcept>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodeableConcept& from);
  void MergeFrom(const CodeableConcept& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodeableConcept* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // repeated .google.fhir.stu3.proto.Coding coding = 3;
  int coding_size() const;
  void clear_coding();
  static const int kCodingFieldNumber = 3;
  ::google::fhir::stu3::proto::Coding* mutable_coding(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Coding >*
      mutable_coding();
  const ::google::fhir::stu3::proto::Coding& coding(int index) const;
  ::google::fhir::stu3::proto::Coding* add_coding();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Coding >&
      coding() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String text = 4;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::String& _internal_text() const;
  public:
  const ::google::fhir::stu3::proto::String& text() const;
  ::google::fhir::stu3::proto::String* release_text();
  ::google::fhir::stu3::proto::String* mutable_text();
  void set_allocated_text(::google::fhir::stu3::proto::String* text);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodeableConcept)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Coding > coding_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* text_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Coding : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Coding) */ {
 public:
  Coding();
  virtual ~Coding();

  Coding(const Coding& from);

  inline Coding& operator=(const Coding& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Coding(Coding&& from) noexcept
    : Coding() {
    *this = ::std::move(from);
  }

  inline Coding& operator=(Coding&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Coding& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Coding* internal_default_instance() {
    return reinterpret_cast<const Coding*>(
               &_Coding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(Coding* other);
  friend void swap(Coding& a, Coding& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Coding* New() const final {
    return CreateMaybeMessage<Coding>(NULL);
  }

  Coding* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Coding>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Coding& from);
  void MergeFrom(const Coding& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coding* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri system = 3;
  bool has_system() const;
  void clear_system();
  static const int kSystemFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_system() const;
  public:
  const ::google::fhir::stu3::proto::Uri& system() const;
  ::google::fhir::stu3::proto::Uri* release_system();
  ::google::fhir::stu3::proto::Uri* mutable_system();
  void set_allocated_system(::google::fhir::stu3::proto::Uri* system);

  // .google.fhir.stu3.proto.String version = 4;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::String& _internal_version() const;
  public:
  const ::google::fhir::stu3::proto::String& version() const;
  ::google::fhir::stu3::proto::String* release_version();
  ::google::fhir::stu3::proto::String* mutable_version();
  void set_allocated_version(::google::fhir::stu3::proto::String* version);

  // .google.fhir.stu3.proto.Code code = 5;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Code& _internal_code() const;
  public:
  const ::google::fhir::stu3::proto::Code& code() const;
  ::google::fhir::stu3::proto::Code* release_code();
  ::google::fhir::stu3::proto::Code* mutable_code();
  void set_allocated_code(::google::fhir::stu3::proto::Code* code);

  // .google.fhir.stu3.proto.String display = 6;
  bool has_display() const;
  void clear_display();
  static const int kDisplayFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::String& _internal_display() const;
  public:
  const ::google::fhir::stu3::proto::String& display() const;
  ::google::fhir::stu3::proto::String* release_display();
  ::google::fhir::stu3::proto::String* mutable_display();
  void set_allocated_display(::google::fhir::stu3::proto::String* display);

  // .google.fhir.stu3.proto.Boolean user_selected = 7;
  bool has_user_selected() const;
  void clear_user_selected();
  static const int kUserSelectedFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_user_selected() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& user_selected() const;
  ::google::fhir::stu3::proto::Boolean* release_user_selected();
  ::google::fhir::stu3::proto::Boolean* mutable_user_selected();
  void set_allocated_user_selected(::google::fhir::stu3::proto::Boolean* user_selected);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Coding)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* system_;
  ::google::fhir::stu3::proto::String* version_;
  ::google::fhir::stu3::proto::Code* code_;
  ::google::fhir::stu3::proto::String* display_;
  ::google::fhir::stu3::proto::Boolean* user_selected_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContactPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ContactPoint) */ {
 public:
  ContactPoint();
  virtual ~ContactPoint();

  ContactPoint(const ContactPoint& from);

  inline ContactPoint& operator=(const ContactPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContactPoint(ContactPoint&& from) noexcept
    : ContactPoint() {
    *this = ::std::move(from);
  }

  inline ContactPoint& operator=(ContactPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContactPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContactPoint* internal_default_instance() {
    return reinterpret_cast<const ContactPoint*>(
               &_ContactPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(ContactPoint* other);
  friend void swap(ContactPoint& a, ContactPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContactPoint* New() const final {
    return CreateMaybeMessage<ContactPoint>(NULL);
  }

  ContactPoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContactPoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContactPoint& from);
  void MergeFrom(const ContactPoint& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContactPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.ContactPointSystemCode system = 3;
  bool has_system() const;
  void clear_system();
  static const int kSystemFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::ContactPointSystemCode& _internal_system() const;
  public:
  const ::google::fhir::stu3::proto::ContactPointSystemCode& system() const;
  ::google::fhir::stu3::proto::ContactPointSystemCode* release_system();
  ::google::fhir::stu3::proto::ContactPointSystemCode* mutable_system();
  void set_allocated_system(::google::fhir::stu3::proto::ContactPointSystemCode* system);

  // .google.fhir.stu3.proto.String value = 4;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::String& value() const;
  ::google::fhir::stu3::proto::String* release_value();
  ::google::fhir::stu3::proto::String* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::String* value);

  // .google.fhir.stu3.proto.ContactPointUseCode use = 5;
  bool has_use() const;
  void clear_use();
  static const int kUseFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::ContactPointUseCode& _internal_use() const;
  public:
  const ::google::fhir::stu3::proto::ContactPointUseCode& use() const;
  ::google::fhir::stu3::proto::ContactPointUseCode* release_use();
  ::google::fhir::stu3::proto::ContactPointUseCode* mutable_use();
  void set_allocated_use(::google::fhir::stu3::proto::ContactPointUseCode* use);

  // .google.fhir.stu3.proto.PositiveInt rank = 6;
  bool has_rank() const;
  void clear_rank();
  static const int kRankFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::PositiveInt& _internal_rank() const;
  public:
  const ::google::fhir::stu3::proto::PositiveInt& rank() const;
  ::google::fhir::stu3::proto::PositiveInt* release_rank();
  ::google::fhir::stu3::proto::PositiveInt* mutable_rank();
  void set_allocated_rank(::google::fhir::stu3::proto::PositiveInt* rank);

  // .google.fhir.stu3.proto.Period period = 7;
  bool has_period() const;
  void clear_period();
  static const int kPeriodFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::Period& _internal_period() const;
  public:
  const ::google::fhir::stu3::proto::Period& period() const;
  ::google::fhir::stu3::proto::Period* release_period();
  ::google::fhir::stu3::proto::Period* mutable_period();
  void set_allocated_period(::google::fhir::stu3::proto::Period* period);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ContactPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::ContactPointSystemCode* system_;
  ::google::fhir::stu3::proto::String* value_;
  ::google::fhir::stu3::proto::ContactPointUseCode* use_;
  ::google::fhir::stu3::proto::PositiveInt* rank_;
  ::google::fhir::stu3::proto::Period* period_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Count : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Count) */ {
 public:
  Count();
  virtual ~Count();

  Count(const Count& from);

  inline Count& operator=(const Count& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Count(Count&& from) noexcept
    : Count() {
    *this = ::std::move(from);
  }

  inline Count& operator=(Count&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Count& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Count* internal_default_instance() {
    return reinterpret_cast<const Count*>(
               &_Count_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(Count* other);
  friend void swap(Count& a, Count& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Count* New() const final {
    return CreateMaybeMessage<Count>(NULL);
  }

  Count* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Count>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Count& from);
  void MergeFrom(const Count& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Count* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Decimal value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& value() const;
  ::google::fhir::stu3::proto::Decimal* release_value();
  ::google::fhir::stu3::proto::Decimal* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::Decimal* value);

  // .google.fhir.stu3.proto.QuantityComparatorCode comparator = 4;
  bool has_comparator() const;
  void clear_comparator();
  static const int kComparatorFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::QuantityComparatorCode& _internal_comparator() const;
  public:
  const ::google::fhir::stu3::proto::QuantityComparatorCode& comparator() const;
  ::google::fhir::stu3::proto::QuantityComparatorCode* release_comparator();
  ::google::fhir::stu3::proto::QuantityComparatorCode* mutable_comparator();
  void set_allocated_comparator(::google::fhir::stu3::proto::QuantityComparatorCode* comparator);

  // .google.fhir.stu3.proto.String unit = 5;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::String& _internal_unit() const;
  public:
  const ::google::fhir::stu3::proto::String& unit() const;
  ::google::fhir::stu3::proto::String* release_unit();
  ::google::fhir::stu3::proto::String* mutable_unit();
  void set_allocated_unit(::google::fhir::stu3::proto::String* unit);

  // .google.fhir.stu3.proto.Uri system = 6;
  bool has_system() const;
  void clear_system();
  static const int kSystemFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_system() const;
  public:
  const ::google::fhir::stu3::proto::Uri& system() const;
  ::google::fhir::stu3::proto::Uri* release_system();
  ::google::fhir::stu3::proto::Uri* mutable_system();
  void set_allocated_system(::google::fhir::stu3::proto::Uri* system);

  // .google.fhir.stu3.proto.Code code = 7;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::Code& _internal_code() const;
  public:
  const ::google::fhir::stu3::proto::Code& code() const;
  ::google::fhir::stu3::proto::Code* release_code();
  ::google::fhir::stu3::proto::Code* mutable_code();
  void set_allocated_code(::google::fhir::stu3::proto::Code* code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Count)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Decimal* value_;
  ::google::fhir::stu3::proto::QuantityComparatorCode* comparator_;
  ::google::fhir::stu3::proto::String* unit_;
  ::google::fhir::stu3::proto::Uri* system_;
  ::google::fhir::stu3::proto::Code* code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Distance : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Distance) */ {
 public:
  Distance();
  virtual ~Distance();

  Distance(const Distance& from);

  inline Distance& operator=(const Distance& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Distance(Distance&& from) noexcept
    : Distance() {
    *this = ::std::move(from);
  }

  inline Distance& operator=(Distance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Distance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Distance* internal_default_instance() {
    return reinterpret_cast<const Distance*>(
               &_Distance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(Distance* other);
  friend void swap(Distance& a, Distance& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Distance* New() const final {
    return CreateMaybeMessage<Distance>(NULL);
  }

  Distance* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Distance>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Distance& from);
  void MergeFrom(const Distance& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Distance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Decimal value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& value() const;
  ::google::fhir::stu3::proto::Decimal* release_value();
  ::google::fhir::stu3::proto::Decimal* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::Decimal* value);

  // .google.fhir.stu3.proto.QuantityComparatorCode comparator = 4;
  bool has_comparator() const;
  void clear_comparator();
  static const int kComparatorFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::QuantityComparatorCode& _internal_comparator() const;
  public:
  const ::google::fhir::stu3::proto::QuantityComparatorCode& comparator() const;
  ::google::fhir::stu3::proto::QuantityComparatorCode* release_comparator();
  ::google::fhir::stu3::proto::QuantityComparatorCode* mutable_comparator();
  void set_allocated_comparator(::google::fhir::stu3::proto::QuantityComparatorCode* comparator);

  // .google.fhir.stu3.proto.String unit = 5;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::String& _internal_unit() const;
  public:
  const ::google::fhir::stu3::proto::String& unit() const;
  ::google::fhir::stu3::proto::String* release_unit();
  ::google::fhir::stu3::proto::String* mutable_unit();
  void set_allocated_unit(::google::fhir::stu3::proto::String* unit);

  // .google.fhir.stu3.proto.Uri system = 6;
  bool has_system() const;
  void clear_system();
  static const int kSystemFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_system() const;
  public:
  const ::google::fhir::stu3::proto::Uri& system() const;
  ::google::fhir::stu3::proto::Uri* release_system();
  ::google::fhir::stu3::proto::Uri* mutable_system();
  void set_allocated_system(::google::fhir::stu3::proto::Uri* system);

  // .google.fhir.stu3.proto.Code code = 7;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::Code& _internal_code() const;
  public:
  const ::google::fhir::stu3::proto::Code& code() const;
  ::google::fhir::stu3::proto::Code* release_code();
  ::google::fhir::stu3::proto::Code* mutable_code();
  void set_allocated_code(::google::fhir::stu3::proto::Code* code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Distance)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Decimal* value_;
  ::google::fhir::stu3::proto::QuantityComparatorCode* comparator_;
  ::google::fhir::stu3::proto::String* unit_;
  ::google::fhir::stu3::proto::Uri* system_;
  ::google::fhir::stu3::proto::Code* code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Dosage_AsNeeded : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Dosage.AsNeeded) */ {
 public:
  Dosage_AsNeeded();
  virtual ~Dosage_AsNeeded();

  Dosage_AsNeeded(const Dosage_AsNeeded& from);

  inline Dosage_AsNeeded& operator=(const Dosage_AsNeeded& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Dosage_AsNeeded(Dosage_AsNeeded&& from) noexcept
    : Dosage_AsNeeded() {
    *this = ::std::move(from);
  }

  inline Dosage_AsNeeded& operator=(Dosage_AsNeeded&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Dosage_AsNeeded& default_instance();

  enum AsNeededCase {
    kBoolean = 1,
    kCodeableConcept = 2,
    AS_NEEDED_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dosage_AsNeeded* internal_default_instance() {
    return reinterpret_cast<const Dosage_AsNeeded*>(
               &_Dosage_AsNeeded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(Dosage_AsNeeded* other);
  friend void swap(Dosage_AsNeeded& a, Dosage_AsNeeded& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Dosage_AsNeeded* New() const final {
    return CreateMaybeMessage<Dosage_AsNeeded>(NULL);
  }

  Dosage_AsNeeded* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Dosage_AsNeeded>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Dosage_AsNeeded& from);
  void MergeFrom(const Dosage_AsNeeded& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dosage_AsNeeded* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Boolean boolean = 1;
  bool has_boolean() const;
  void clear_boolean();
  static const int kBooleanFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_boolean();
  void set_allocated_boolean(::google::fhir::stu3::proto::Boolean* boolean);

  // .google.fhir.stu3.proto.CodeableConcept codeable_concept = 2;
  bool has_codeable_concept() const;
  void clear_codeable_concept();
  static const int kCodeableConceptFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_codeable_concept();
  void set_allocated_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* codeable_concept);

  void clear_as_needed();
  AsNeededCase as_needed_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Dosage.AsNeeded)
 private:
  void set_has_boolean();
  void set_has_codeable_concept();

  inline bool has_as_needed() const;
  inline void clear_has_as_needed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union AsNeededUnion {
    AsNeededUnion() {}
    ::google::fhir::stu3::proto::Boolean* boolean_;
    ::google::fhir::stu3::proto::CodeableConcept* codeable_concept_;
  } as_needed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Dosage_Dose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Dosage.Dose) */ {
 public:
  Dosage_Dose();
  virtual ~Dosage_Dose();

  Dosage_Dose(const Dosage_Dose& from);

  inline Dosage_Dose& operator=(const Dosage_Dose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Dosage_Dose(Dosage_Dose&& from) noexcept
    : Dosage_Dose() {
    *this = ::std::move(from);
  }

  inline Dosage_Dose& operator=(Dosage_Dose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Dosage_Dose& default_instance();

  enum DoseCase {
    kRange = 1,
    kQuantity = 2,
    DOSE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dosage_Dose* internal_default_instance() {
    return reinterpret_cast<const Dosage_Dose*>(
               &_Dosage_Dose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(Dosage_Dose* other);
  friend void swap(Dosage_Dose& a, Dosage_Dose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Dosage_Dose* New() const final {
    return CreateMaybeMessage<Dosage_Dose>(NULL);
  }

  Dosage_Dose* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Dosage_Dose>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Dosage_Dose& from);
  void MergeFrom(const Dosage_Dose& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dosage_Dose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Range range = 1;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Range& _internal_range() const;
  public:
  const ::google::fhir::stu3::proto::Range& range() const;
  ::google::fhir::stu3::proto::Range* release_range();
  ::google::fhir::stu3::proto::Range* mutable_range();
  void set_allocated_range(::google::fhir::stu3::proto::Range* range);

  // .google.fhir.stu3.proto.SimpleQuantity quantity = 2;
  bool has_quantity() const;
  void clear_quantity();
  static const int kQuantityFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::SimpleQuantity& _internal_quantity() const;
  public:
  const ::google::fhir::stu3::proto::SimpleQuantity& quantity() const;
  ::google::fhir::stu3::proto::SimpleQuantity* release_quantity();
  ::google::fhir::stu3::proto::SimpleQuantity* mutable_quantity();
  void set_allocated_quantity(::google::fhir::stu3::proto::SimpleQuantity* quantity);

  void clear_dose();
  DoseCase dose_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Dosage.Dose)
 private:
  void set_has_range();
  void set_has_quantity();

  inline bool has_dose() const;
  inline void clear_has_dose();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union DoseUnion {
    DoseUnion() {}
    ::google::fhir::stu3::proto::Range* range_;
    ::google::fhir::stu3::proto::SimpleQuantity* quantity_;
  } dose_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Dosage_Rate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Dosage.Rate) */ {
 public:
  Dosage_Rate();
  virtual ~Dosage_Rate();

  Dosage_Rate(const Dosage_Rate& from);

  inline Dosage_Rate& operator=(const Dosage_Rate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Dosage_Rate(Dosage_Rate&& from) noexcept
    : Dosage_Rate() {
    *this = ::std::move(from);
  }

  inline Dosage_Rate& operator=(Dosage_Rate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Dosage_Rate& default_instance();

  enum RateCase {
    kRatio = 1,
    kRange = 2,
    kQuantity = 3,
    RATE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dosage_Rate* internal_default_instance() {
    return reinterpret_cast<const Dosage_Rate*>(
               &_Dosage_Rate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(Dosage_Rate* other);
  friend void swap(Dosage_Rate& a, Dosage_Rate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Dosage_Rate* New() const final {
    return CreateMaybeMessage<Dosage_Rate>(NULL);
  }

  Dosage_Rate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Dosage_Rate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Dosage_Rate& from);
  void MergeFrom(const Dosage_Rate& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dosage_Rate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Ratio ratio = 1;
  bool has_ratio() const;
  void clear_ratio();
  static const int kRatioFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Ratio& _internal_ratio() const;
  public:
  const ::google::fhir::stu3::proto::Ratio& ratio() const;
  ::google::fhir::stu3::proto::Ratio* release_ratio();
  ::google::fhir::stu3::proto::Ratio* mutable_ratio();
  void set_allocated_ratio(::google::fhir::stu3::proto::Ratio* ratio);

  // .google.fhir.stu3.proto.Range range = 2;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::Range& _internal_range() const;
  public:
  const ::google::fhir::stu3::proto::Range& range() const;
  ::google::fhir::stu3::proto::Range* release_range();
  ::google::fhir::stu3::proto::Range* mutable_range();
  void set_allocated_range(::google::fhir::stu3::proto::Range* range);

  // .google.fhir.stu3.proto.SimpleQuantity quantity = 3;
  bool has_quantity() const;
  void clear_quantity();
  static const int kQuantityFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::SimpleQuantity& _internal_quantity() const;
  public:
  const ::google::fhir::stu3::proto::SimpleQuantity& quantity() const;
  ::google::fhir::stu3::proto::SimpleQuantity* release_quantity();
  ::google::fhir::stu3::proto::SimpleQuantity* mutable_quantity();
  void set_allocated_quantity(::google::fhir::stu3::proto::SimpleQuantity* quantity);

  void clear_rate();
  RateCase rate_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Dosage.Rate)
 private:
  void set_has_ratio();
  void set_has_range();
  void set_has_quantity();

  inline bool has_rate() const;
  inline void clear_has_rate();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union RateUnion {
    RateUnion() {}
    ::google::fhir::stu3::proto::Ratio* ratio_;
    ::google::fhir::stu3::proto::Range* range_;
    ::google::fhir::stu3::proto::SimpleQuantity* quantity_;
  } rate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Dosage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Dosage) */ {
 public:
  Dosage();
  virtual ~Dosage();

  Dosage(const Dosage& from);

  inline Dosage& operator=(const Dosage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Dosage(Dosage&& from) noexcept
    : Dosage() {
    *this = ::std::move(from);
  }

  inline Dosage& operator=(Dosage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Dosage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dosage* internal_default_instance() {
    return reinterpret_cast<const Dosage*>(
               &_Dosage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(Dosage* other);
  friend void swap(Dosage& a, Dosage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Dosage* New() const final {
    return CreateMaybeMessage<Dosage>(NULL);
  }

  Dosage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Dosage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Dosage& from);
  void MergeFrom(const Dosage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dosage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Dosage_AsNeeded AsNeeded;
  typedef Dosage_Dose Dose;
  typedef Dosage_Rate Rate;

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // repeated .google.fhir.stu3.proto.CodeableConcept additional_instruction = 5;
  int additional_instruction_size() const;
  void clear_additional_instruction();
  static const int kAdditionalInstructionFieldNumber = 5;
  ::google::fhir::stu3::proto::CodeableConcept* mutable_additional_instruction(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::CodeableConcept >*
      mutable_additional_instruction();
  const ::google::fhir::stu3::proto::CodeableConcept& additional_instruction(int index) const;
  ::google::fhir::stu3::proto::CodeableConcept* add_additional_instruction();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::CodeableConcept >&
      additional_instruction() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Integer sequence = 3;
  bool has_sequence() const;
  void clear_sequence();
  static const int kSequenceFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Integer& _internal_sequence() const;
  public:
  const ::google::fhir::stu3::proto::Integer& sequence() const;
  ::google::fhir::stu3::proto::Integer* release_sequence();
  ::google::fhir::stu3::proto::Integer* mutable_sequence();
  void set_allocated_sequence(::google::fhir::stu3::proto::Integer* sequence);

  // .google.fhir.stu3.proto.String text = 4;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::String& _internal_text() const;
  public:
  const ::google::fhir::stu3::proto::String& text() const;
  ::google::fhir::stu3::proto::String* release_text();
  ::google::fhir::stu3::proto::String* mutable_text();
  void set_allocated_text(::google::fhir::stu3::proto::String* text);

  // .google.fhir.stu3.proto.String patient_instruction = 6;
  bool has_patient_instruction() const;
  void clear_patient_instruction();
  static const int kPatientInstructionFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::String& _internal_patient_instruction() const;
  public:
  const ::google::fhir::stu3::proto::String& patient_instruction() const;
  ::google::fhir::stu3::proto::String* release_patient_instruction();
  ::google::fhir::stu3::proto::String* mutable_patient_instruction();
  void set_allocated_patient_instruction(::google::fhir::stu3::proto::String* patient_instruction);

  // .google.fhir.stu3.proto.Timing timing = 7;
  bool has_timing() const;
  void clear_timing();
  static const int kTimingFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::Timing& _internal_timing() const;
  public:
  const ::google::fhir::stu3::proto::Timing& timing() const;
  ::google::fhir::stu3::proto::Timing* release_timing();
  ::google::fhir::stu3::proto::Timing* mutable_timing();
  void set_allocated_timing(::google::fhir::stu3::proto::Timing* timing);

  // .google.fhir.stu3.proto.Dosage.AsNeeded as_needed = 8 [(.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_as_needed() const;
  void clear_as_needed();
  static const int kAsNeededFieldNumber = 8;
  private:
  const ::google::fhir::stu3::proto::Dosage_AsNeeded& _internal_as_needed() const;
  public:
  const ::google::fhir::stu3::proto::Dosage_AsNeeded& as_needed() const;
  ::google::fhir::stu3::proto::Dosage_AsNeeded* release_as_needed();
  ::google::fhir::stu3::proto::Dosage_AsNeeded* mutable_as_needed();
  void set_allocated_as_needed(::google::fhir::stu3::proto::Dosage_AsNeeded* as_needed);

  // .google.fhir.stu3.proto.CodeableConcept site = 9;
  bool has_site() const;
  void clear_site();
  static const int kSiteFieldNumber = 9;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_site() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& site() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_site();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_site();
  void set_allocated_site(::google::fhir::stu3::proto::CodeableConcept* site);

  // .google.fhir.stu3.proto.CodeableConcept route = 10;
  bool has_route() const;
  void clear_route();
  static const int kRouteFieldNumber = 10;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_route() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& route() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_route();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_route();
  void set_allocated_route(::google::fhir::stu3::proto::CodeableConcept* route);

  // .google.fhir.stu3.proto.CodeableConcept method = 11;
  bool has_method() const;
  void clear_method();
  static const int kMethodFieldNumber = 11;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_method() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& method() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_method();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_method();
  void set_allocated_method(::google::fhir::stu3::proto::CodeableConcept* method);

  // .google.fhir.stu3.proto.Dosage.Dose dose = 12 [(.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_dose() const;
  void clear_dose();
  static const int kDoseFieldNumber = 12;
  private:
  const ::google::fhir::stu3::proto::Dosage_Dose& _internal_dose() const;
  public:
  const ::google::fhir::stu3::proto::Dosage_Dose& dose() const;
  ::google::fhir::stu3::proto::Dosage_Dose* release_dose();
  ::google::fhir::stu3::proto::Dosage_Dose* mutable_dose();
  void set_allocated_dose(::google::fhir::stu3::proto::Dosage_Dose* dose);

  // .google.fhir.stu3.proto.Ratio max_dose_per_period = 13;
  bool has_max_dose_per_period() const;
  void clear_max_dose_per_period();
  static const int kMaxDosePerPeriodFieldNumber = 13;
  private:
  const ::google::fhir::stu3::proto::Ratio& _internal_max_dose_per_period() const;
  public:
  const ::google::fhir::stu3::proto::Ratio& max_dose_per_period() const;
  ::google::fhir::stu3::proto::Ratio* release_max_dose_per_period();
  ::google::fhir::stu3::proto::Ratio* mutable_max_dose_per_period();
  void set_allocated_max_dose_per_period(::google::fhir::stu3::proto::Ratio* max_dose_per_period);

  // .google.fhir.stu3.proto.SimpleQuantity max_dose_per_administration = 14;
  bool has_max_dose_per_administration() const;
  void clear_max_dose_per_administration();
  static const int kMaxDosePerAdministrationFieldNumber = 14;
  private:
  const ::google::fhir::stu3::proto::SimpleQuantity& _internal_max_dose_per_administration() const;
  public:
  const ::google::fhir::stu3::proto::SimpleQuantity& max_dose_per_administration() const;
  ::google::fhir::stu3::proto::SimpleQuantity* release_max_dose_per_administration();
  ::google::fhir::stu3::proto::SimpleQuantity* mutable_max_dose_per_administration();
  void set_allocated_max_dose_per_administration(::google::fhir::stu3::proto::SimpleQuantity* max_dose_per_administration);

  // .google.fhir.stu3.proto.SimpleQuantity max_dose_per_lifetime = 15;
  bool has_max_dose_per_lifetime() const;
  void clear_max_dose_per_lifetime();
  static const int kMaxDosePerLifetimeFieldNumber = 15;
  private:
  const ::google::fhir::stu3::proto::SimpleQuantity& _internal_max_dose_per_lifetime() const;
  public:
  const ::google::fhir::stu3::proto::SimpleQuantity& max_dose_per_lifetime() const;
  ::google::fhir::stu3::proto::SimpleQuantity* release_max_dose_per_lifetime();
  ::google::fhir::stu3::proto::SimpleQuantity* mutable_max_dose_per_lifetime();
  void set_allocated_max_dose_per_lifetime(::google::fhir::stu3::proto::SimpleQuantity* max_dose_per_lifetime);

  // .google.fhir.stu3.proto.Dosage.Rate rate = 16 [(.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_rate() const;
  void clear_rate();
  static const int kRateFieldNumber = 16;
  private:
  const ::google::fhir::stu3::proto::Dosage_Rate& _internal_rate() const;
  public:
  const ::google::fhir::stu3::proto::Dosage_Rate& rate() const;
  ::google::fhir::stu3::proto::Dosage_Rate* release_rate();
  ::google::fhir::stu3::proto::Dosage_Rate* mutable_rate();
  void set_allocated_rate(::google::fhir::stu3::proto::Dosage_Rate* rate);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Dosage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::CodeableConcept > additional_instruction_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Integer* sequence_;
  ::google::fhir::stu3::proto::String* text_;
  ::google::fhir::stu3::proto::String* patient_instruction_;
  ::google::fhir::stu3::proto::Timing* timing_;
  ::google::fhir::stu3::proto::Dosage_AsNeeded* as_needed_;
  ::google::fhir::stu3::proto::CodeableConcept* site_;
  ::google::fhir::stu3::proto::CodeableConcept* route_;
  ::google::fhir::stu3::proto::CodeableConcept* method_;
  ::google::fhir::stu3::proto::Dosage_Dose* dose_;
  ::google::fhir::stu3::proto::Ratio* max_dose_per_period_;
  ::google::fhir::stu3::proto::SimpleQuantity* max_dose_per_administration_;
  ::google::fhir::stu3::proto::SimpleQuantity* max_dose_per_lifetime_;
  ::google::fhir::stu3::proto::Dosage_Rate* rate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Duration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Duration) */ {
 public:
  Duration();
  virtual ~Duration();

  Duration(const Duration& from);

  inline Duration& operator=(const Duration& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Duration(Duration&& from) noexcept
    : Duration() {
    *this = ::std::move(from);
  }

  inline Duration& operator=(Duration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Duration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Duration* internal_default_instance() {
    return reinterpret_cast<const Duration*>(
               &_Duration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(Duration* other);
  friend void swap(Duration& a, Duration& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Duration* New() const final {
    return CreateMaybeMessage<Duration>(NULL);
  }

  Duration* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Duration>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Duration& from);
  void MergeFrom(const Duration& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Duration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Decimal value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& value() const;
  ::google::fhir::stu3::proto::Decimal* release_value();
  ::google::fhir::stu3::proto::Decimal* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::Decimal* value);

  // .google.fhir.stu3.proto.QuantityComparatorCode comparator = 4;
  bool has_comparator() const;
  void clear_comparator();
  static const int kComparatorFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::QuantityComparatorCode& _internal_comparator() const;
  public:
  const ::google::fhir::stu3::proto::QuantityComparatorCode& comparator() const;
  ::google::fhir::stu3::proto::QuantityComparatorCode* release_comparator();
  ::google::fhir::stu3::proto::QuantityComparatorCode* mutable_comparator();
  void set_allocated_comparator(::google::fhir::stu3::proto::QuantityComparatorCode* comparator);

  // .google.fhir.stu3.proto.String unit = 5;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::String& _internal_unit() const;
  public:
  const ::google::fhir::stu3::proto::String& unit() const;
  ::google::fhir::stu3::proto::String* release_unit();
  ::google::fhir::stu3::proto::String* mutable_unit();
  void set_allocated_unit(::google::fhir::stu3::proto::String* unit);

  // .google.fhir.stu3.proto.Uri system = 6;
  bool has_system() const;
  void clear_system();
  static const int kSystemFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_system() const;
  public:
  const ::google::fhir::stu3::proto::Uri& system() const;
  ::google::fhir::stu3::proto::Uri* release_system();
  ::google::fhir::stu3::proto::Uri* mutable_system();
  void set_allocated_system(::google::fhir::stu3::proto::Uri* system);

  // .google.fhir.stu3.proto.Code code = 7;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::Code& _internal_code() const;
  public:
  const ::google::fhir::stu3::proto::Code& code() const;
  ::google::fhir::stu3::proto::Code* release_code();
  ::google::fhir::stu3::proto::Code* mutable_code();
  void set_allocated_code(::google::fhir::stu3::proto::Code* code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Duration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Decimal* value_;
  ::google::fhir::stu3::proto::QuantityComparatorCode* comparator_;
  ::google::fhir::stu3::proto::String* unit_;
  ::google::fhir::stu3::proto::Uri* system_;
  ::google::fhir::stu3::proto::Code* code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HumanName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.HumanName) */ {
 public:
  HumanName();
  virtual ~HumanName();

  HumanName(const HumanName& from);

  inline HumanName& operator=(const HumanName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HumanName(HumanName&& from) noexcept
    : HumanName() {
    *this = ::std::move(from);
  }

  inline HumanName& operator=(HumanName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HumanName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HumanName* internal_default_instance() {
    return reinterpret_cast<const HumanName*>(
               &_HumanName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(HumanName* other);
  friend void swap(HumanName& a, HumanName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HumanName* New() const final {
    return CreateMaybeMessage<HumanName>(NULL);
  }

  HumanName* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HumanName>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HumanName& from);
  void MergeFrom(const HumanName& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HumanName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // repeated .google.fhir.stu3.proto.String given = 6;
  int given_size() const;
  void clear_given();
  static const int kGivenFieldNumber = 6;
  ::google::fhir::stu3::proto::String* mutable_given(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >*
      mutable_given();
  const ::google::fhir::stu3::proto::String& given(int index) const;
  ::google::fhir::stu3::proto::String* add_given();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >&
      given() const;

  // repeated .google.fhir.stu3.proto.String prefix = 7;
  int prefix_size() const;
  void clear_prefix();
  static const int kPrefixFieldNumber = 7;
  ::google::fhir::stu3::proto::String* mutable_prefix(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >*
      mutable_prefix();
  const ::google::fhir::stu3::proto::String& prefix(int index) const;
  ::google::fhir::stu3::proto::String* add_prefix();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >&
      prefix() const;

  // repeated .google.fhir.stu3.proto.String suffix = 8;
  int suffix_size() const;
  void clear_suffix();
  static const int kSuffixFieldNumber = 8;
  ::google::fhir::stu3::proto::String* mutable_suffix(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >*
      mutable_suffix();
  const ::google::fhir::stu3::proto::String& suffix(int index) const;
  ::google::fhir::stu3::proto::String* add_suffix();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >&
      suffix() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.NameUseCode use = 3;
  bool has_use() const;
  void clear_use();
  static const int kUseFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::NameUseCode& _internal_use() const;
  public:
  const ::google::fhir::stu3::proto::NameUseCode& use() const;
  ::google::fhir::stu3::proto::NameUseCode* release_use();
  ::google::fhir::stu3::proto::NameUseCode* mutable_use();
  void set_allocated_use(::google::fhir::stu3::proto::NameUseCode* use);

  // .google.fhir.stu3.proto.String text = 4;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::String& _internal_text() const;
  public:
  const ::google::fhir::stu3::proto::String& text() const;
  ::google::fhir::stu3::proto::String* release_text();
  ::google::fhir::stu3::proto::String* mutable_text();
  void set_allocated_text(::google::fhir::stu3::proto::String* text);

  // .google.fhir.stu3.proto.String family = 5;
  bool has_family() const;
  void clear_family();
  static const int kFamilyFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::String& _internal_family() const;
  public:
  const ::google::fhir::stu3::proto::String& family() const;
  ::google::fhir::stu3::proto::String* release_family();
  ::google::fhir::stu3::proto::String* mutable_family();
  void set_allocated_family(::google::fhir::stu3::proto::String* family);

  // .google.fhir.stu3.proto.Period period = 9;
  bool has_period() const;
  void clear_period();
  static const int kPeriodFieldNumber = 9;
  private:
  const ::google::fhir::stu3::proto::Period& _internal_period() const;
  public:
  const ::google::fhir::stu3::proto::Period& period() const;
  ::google::fhir::stu3::proto::Period* release_period();
  ::google::fhir::stu3::proto::Period* mutable_period();
  void set_allocated_period(::google::fhir::stu3::proto::Period* period);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.HumanName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String > given_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String > prefix_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String > suffix_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::NameUseCode* use_;
  ::google::fhir::stu3::proto::String* text_;
  ::google::fhir::stu3::proto::String* family_;
  ::google::fhir::stu3::proto::Period* period_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Identifier : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Identifier) */ {
 public:
  Identifier();
  virtual ~Identifier();

  Identifier(const Identifier& from);

  inline Identifier& operator=(const Identifier& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Identifier(Identifier&& from) noexcept
    : Identifier() {
    *this = ::std::move(from);
  }

  inline Identifier& operator=(Identifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Identifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Identifier* internal_default_instance() {
    return reinterpret_cast<const Identifier*>(
               &_Identifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(Identifier* other);
  friend void swap(Identifier& a, Identifier& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Identifier* New() const final {
    return CreateMaybeMessage<Identifier>(NULL);
  }

  Identifier* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Identifier>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Identifier& from);
  void MergeFrom(const Identifier& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identifier* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.IdentifierUseCode use = 3;
  bool has_use() const;
  void clear_use();
  static const int kUseFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::IdentifierUseCode& _internal_use() const;
  public:
  const ::google::fhir::stu3::proto::IdentifierUseCode& use() const;
  ::google::fhir::stu3::proto::IdentifierUseCode* release_use();
  ::google::fhir::stu3::proto::IdentifierUseCode* mutable_use();
  void set_allocated_use(::google::fhir::stu3::proto::IdentifierUseCode* use);

  // .google.fhir.stu3.proto.CodeableConcept type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_type() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& type() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_type();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_type();
  void set_allocated_type(::google::fhir::stu3::proto::CodeableConcept* type);

  // .google.fhir.stu3.proto.Uri system = 5;
  bool has_system() const;
  void clear_system();
  static const int kSystemFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_system() const;
  public:
  const ::google::fhir::stu3::proto::Uri& system() const;
  ::google::fhir::stu3::proto::Uri* release_system();
  ::google::fhir::stu3::proto::Uri* mutable_system();
  void set_allocated_system(::google::fhir::stu3::proto::Uri* system);

  // .google.fhir.stu3.proto.String value = 6;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::String& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::String& value() const;
  ::google::fhir::stu3::proto::String* release_value();
  ::google::fhir::stu3::proto::String* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::String* value);

  // .google.fhir.stu3.proto.Period period = 7;
  bool has_period() const;
  void clear_period();
  static const int kPeriodFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::Period& _internal_period() const;
  public:
  const ::google::fhir::stu3::proto::Period& period() const;
  ::google::fhir::stu3::proto::Period* release_period();
  ::google::fhir::stu3::proto::Period* mutable_period();
  void set_allocated_period(::google::fhir::stu3::proto::Period* period);

  // .google.fhir.stu3.proto.Reference assigner = 8 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Organization"];
  bool has_assigner() const;
  void clear_assigner();
  static const int kAssignerFieldNumber = 8;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_assigner() const;
  public:
  const ::google::fhir::stu3::proto::Reference& assigner() const;
  ::google::fhir::stu3::proto::Reference* release_assigner();
  ::google::fhir::stu3::proto::Reference* mutable_assigner();
  void set_allocated_assigner(::google::fhir::stu3::proto::Reference* assigner);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Identifier)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::IdentifierUseCode* use_;
  ::google::fhir::stu3::proto::CodeableConcept* type_;
  ::google::fhir::stu3::proto::Uri* system_;
  ::google::fhir::stu3::proto::String* value_;
  ::google::fhir::stu3::proto::Period* period_;
  ::google::fhir::stu3::proto::Reference* assigner_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Meta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Meta) */ {
 public:
  Meta();
  virtual ~Meta();

  Meta(const Meta& from);

  inline Meta& operator=(const Meta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Meta(Meta&& from) noexcept
    : Meta() {
    *this = ::std::move(from);
  }

  inline Meta& operator=(Meta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Meta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Meta* internal_default_instance() {
    return reinterpret_cast<const Meta*>(
               &_Meta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(Meta* other);
  friend void swap(Meta& a, Meta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Meta* New() const final {
    return CreateMaybeMessage<Meta>(NULL);
  }

  Meta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Meta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Meta& from);
  void MergeFrom(const Meta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Meta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // repeated .google.fhir.stu3.proto.Uri profile = 5;
  int profile_size() const;
  void clear_profile();
  static const int kProfileFieldNumber = 5;
  ::google::fhir::stu3::proto::Uri* mutable_profile(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Uri >*
      mutable_profile();
  const ::google::fhir::stu3::proto::Uri& profile(int index) const;
  ::google::fhir::stu3::proto::Uri* add_profile();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Uri >&
      profile() const;

  // repeated .google.fhir.stu3.proto.Coding security = 6;
  int security_size() const;
  void clear_security();
  static const int kSecurityFieldNumber = 6;
  ::google::fhir::stu3::proto::Coding* mutable_security(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Coding >*
      mutable_security();
  const ::google::fhir::stu3::proto::Coding& security(int index) const;
  ::google::fhir::stu3::proto::Coding* add_security();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Coding >&
      security() const;

  // repeated .google.fhir.stu3.proto.Coding tag = 7;
  int tag_size() const;
  void clear_tag();
  static const int kTagFieldNumber = 7;
  ::google::fhir::stu3::proto::Coding* mutable_tag(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Coding >*
      mutable_tag();
  const ::google::fhir::stu3::proto::Coding& tag(int index) const;
  ::google::fhir::stu3::proto::Coding* add_tag();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Coding >&
      tag() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Id version_id = 3;
  bool has_version_id() const;
  void clear_version_id();
  static const int kVersionIdFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Id& _internal_version_id() const;
  public:
  const ::google::fhir::stu3::proto::Id& version_id() const;
  ::google::fhir::stu3::proto::Id* release_version_id();
  ::google::fhir::stu3::proto::Id* mutable_version_id();
  void set_allocated_version_id(::google::fhir::stu3::proto::Id* version_id);

  // .google.fhir.stu3.proto.Instant last_updated = 4;
  bool has_last_updated() const;
  void clear_last_updated();
  static const int kLastUpdatedFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::Instant& _internal_last_updated() const;
  public:
  const ::google::fhir::stu3::proto::Instant& last_updated() const;
  ::google::fhir::stu3::proto::Instant* release_last_updated();
  ::google::fhir::stu3::proto::Instant* mutable_last_updated();
  void set_allocated_last_updated(::google::fhir::stu3::proto::Instant* last_updated);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Meta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Uri > profile_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Coding > security_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Coding > tag_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Id* version_id_;
  ::google::fhir::stu3::proto::Instant* last_updated_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Money : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Money) */ {
 public:
  Money();
  virtual ~Money();

  Money(const Money& from);

  inline Money& operator=(const Money& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Money(Money&& from) noexcept
    : Money() {
    *this = ::std::move(from);
  }

  inline Money& operator=(Money&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Money& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Money* internal_default_instance() {
    return reinterpret_cast<const Money*>(
               &_Money_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(Money* other);
  friend void swap(Money& a, Money& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Money* New() const final {
    return CreateMaybeMessage<Money>(NULL);
  }

  Money* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Money>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Money& from);
  void MergeFrom(const Money& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Money* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Decimal value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& value() const;
  ::google::fhir::stu3::proto::Decimal* release_value();
  ::google::fhir::stu3::proto::Decimal* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::Decimal* value);

  // .google.fhir.stu3.proto.QuantityComparatorCode comparator = 4;
  bool has_comparator() const;
  void clear_comparator();
  static const int kComparatorFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::QuantityComparatorCode& _internal_comparator() const;
  public:
  const ::google::fhir::stu3::proto::QuantityComparatorCode& comparator() const;
  ::google::fhir::stu3::proto::QuantityComparatorCode* release_comparator();
  ::google::fhir::stu3::proto::QuantityComparatorCode* mutable_comparator();
  void set_allocated_comparator(::google::fhir::stu3::proto::QuantityComparatorCode* comparator);

  // .google.fhir.stu3.proto.String unit = 5;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::String& _internal_unit() const;
  public:
  const ::google::fhir::stu3::proto::String& unit() const;
  ::google::fhir::stu3::proto::String* release_unit();
  ::google::fhir::stu3::proto::String* mutable_unit();
  void set_allocated_unit(::google::fhir::stu3::proto::String* unit);

  // .google.fhir.stu3.proto.Uri system = 6;
  bool has_system() const;
  void clear_system();
  static const int kSystemFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_system() const;
  public:
  const ::google::fhir::stu3::proto::Uri& system() const;
  ::google::fhir::stu3::proto::Uri* release_system();
  ::google::fhir::stu3::proto::Uri* mutable_system();
  void set_allocated_system(::google::fhir::stu3::proto::Uri* system);

  // .google.fhir.stu3.proto.Code code = 7;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::Code& _internal_code() const;
  public:
  const ::google::fhir::stu3::proto::Code& code() const;
  ::google::fhir::stu3::proto::Code* release_code();
  ::google::fhir::stu3::proto::Code* mutable_code();
  void set_allocated_code(::google::fhir::stu3::proto::Code* code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Money)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Decimal* value_;
  ::google::fhir::stu3::proto::QuantityComparatorCode* comparator_;
  ::google::fhir::stu3::proto::String* unit_;
  ::google::fhir::stu3::proto::Uri* system_;
  ::google::fhir::stu3::proto::Code* code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Period : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Period) */ {
 public:
  Period();
  virtual ~Period();

  Period(const Period& from);

  inline Period& operator=(const Period& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Period(Period&& from) noexcept
    : Period() {
    *this = ::std::move(from);
  }

  inline Period& operator=(Period&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Period& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Period* internal_default_instance() {
    return reinterpret_cast<const Period*>(
               &_Period_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(Period* other);
  friend void swap(Period& a, Period& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Period* New() const final {
    return CreateMaybeMessage<Period>(NULL);
  }

  Period* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Period>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Period& from);
  void MergeFrom(const Period& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Period* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.DateTime start = 3;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::DateTime& _internal_start() const;
  public:
  const ::google::fhir::stu3::proto::DateTime& start() const;
  ::google::fhir::stu3::proto::DateTime* release_start();
  ::google::fhir::stu3::proto::DateTime* mutable_start();
  void set_allocated_start(::google::fhir::stu3::proto::DateTime* start);

  // .google.fhir.stu3.proto.DateTime end = 4;
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::DateTime& _internal_end() const;
  public:
  const ::google::fhir::stu3::proto::DateTime& end() const;
  ::google::fhir::stu3::proto::DateTime* release_end();
  ::google::fhir::stu3::proto::DateTime* mutable_end();
  void set_allocated_end(::google::fhir::stu3::proto::DateTime* end);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Period)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::DateTime* start_;
  ::google::fhir::stu3::proto::DateTime* end_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Quantity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Quantity) */ {
 public:
  Quantity();
  virtual ~Quantity();

  Quantity(const Quantity& from);

  inline Quantity& operator=(const Quantity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Quantity(Quantity&& from) noexcept
    : Quantity() {
    *this = ::std::move(from);
  }

  inline Quantity& operator=(Quantity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Quantity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quantity* internal_default_instance() {
    return reinterpret_cast<const Quantity*>(
               &_Quantity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(Quantity* other);
  friend void swap(Quantity& a, Quantity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Quantity* New() const final {
    return CreateMaybeMessage<Quantity>(NULL);
  }

  Quantity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Quantity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Quantity& from);
  void MergeFrom(const Quantity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quantity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Decimal value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& value() const;
  ::google::fhir::stu3::proto::Decimal* release_value();
  ::google::fhir::stu3::proto::Decimal* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::Decimal* value);

  // .google.fhir.stu3.proto.QuantityComparatorCode comparator = 4;
  bool has_comparator() const;
  void clear_comparator();
  static const int kComparatorFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::QuantityComparatorCode& _internal_comparator() const;
  public:
  const ::google::fhir::stu3::proto::QuantityComparatorCode& comparator() const;
  ::google::fhir::stu3::proto::QuantityComparatorCode* release_comparator();
  ::google::fhir::stu3::proto::QuantityComparatorCode* mutable_comparator();
  void set_allocated_comparator(::google::fhir::stu3::proto::QuantityComparatorCode* comparator);

  // .google.fhir.stu3.proto.String unit = 5;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::String& _internal_unit() const;
  public:
  const ::google::fhir::stu3::proto::String& unit() const;
  ::google::fhir::stu3::proto::String* release_unit();
  ::google::fhir::stu3::proto::String* mutable_unit();
  void set_allocated_unit(::google::fhir::stu3::proto::String* unit);

  // .google.fhir.stu3.proto.Uri system = 6;
  bool has_system() const;
  void clear_system();
  static const int kSystemFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_system() const;
  public:
  const ::google::fhir::stu3::proto::Uri& system() const;
  ::google::fhir::stu3::proto::Uri* release_system();
  ::google::fhir::stu3::proto::Uri* mutable_system();
  void set_allocated_system(::google::fhir::stu3::proto::Uri* system);

  // .google.fhir.stu3.proto.Code code = 7;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::Code& _internal_code() const;
  public:
  const ::google::fhir::stu3::proto::Code& code() const;
  ::google::fhir::stu3::proto::Code* release_code();
  ::google::fhir::stu3::proto::Code* mutable_code();
  void set_allocated_code(::google::fhir::stu3::proto::Code* code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Quantity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Decimal* value_;
  ::google::fhir::stu3::proto::QuantityComparatorCode* comparator_;
  ::google::fhir::stu3::proto::String* unit_;
  ::google::fhir::stu3::proto::Uri* system_;
  ::google::fhir::stu3::proto::Code* code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Range : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Range) */ {
 public:
  Range();
  virtual ~Range();

  Range(const Range& from);

  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Range(Range&& from) noexcept
    : Range() {
    *this = ::std::move(from);
  }

  inline Range& operator=(Range&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Range& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Range* internal_default_instance() {
    return reinterpret_cast<const Range*>(
               &_Range_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(Range* other);
  friend void swap(Range& a, Range& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Range* New() const final {
    return CreateMaybeMessage<Range>(NULL);
  }

  Range* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Range>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Range* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.SimpleQuantity low = 3;
  bool has_low() const;
  void clear_low();
  static const int kLowFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::SimpleQuantity& _internal_low() const;
  public:
  const ::google::fhir::stu3::proto::SimpleQuantity& low() const;
  ::google::fhir::stu3::proto::SimpleQuantity* release_low();
  ::google::fhir::stu3::proto::SimpleQuantity* mutable_low();
  void set_allocated_low(::google::fhir::stu3::proto::SimpleQuantity* low);

  // .google.fhir.stu3.proto.SimpleQuantity high = 4;
  bool has_high() const;
  void clear_high();
  static const int kHighFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::SimpleQuantity& _internal_high() const;
  public:
  const ::google::fhir::stu3::proto::SimpleQuantity& high() const;
  ::google::fhir::stu3::proto::SimpleQuantity* release_high();
  ::google::fhir::stu3::proto::SimpleQuantity* mutable_high();
  void set_allocated_high(::google::fhir::stu3::proto::SimpleQuantity* high);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Range)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::SimpleQuantity* low_;
  ::google::fhir::stu3::proto::SimpleQuantity* high_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ratio : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Ratio) */ {
 public:
  Ratio();
  virtual ~Ratio();

  Ratio(const Ratio& from);

  inline Ratio& operator=(const Ratio& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Ratio(Ratio&& from) noexcept
    : Ratio() {
    *this = ::std::move(from);
  }

  inline Ratio& operator=(Ratio&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Ratio& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ratio* internal_default_instance() {
    return reinterpret_cast<const Ratio*>(
               &_Ratio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(Ratio* other);
  friend void swap(Ratio& a, Ratio& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Ratio* New() const final {
    return CreateMaybeMessage<Ratio>(NULL);
  }

  Ratio* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Ratio>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Ratio& from);
  void MergeFrom(const Ratio& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ratio* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Quantity numerator = 3;
  bool has_numerator() const;
  void clear_numerator();
  static const int kNumeratorFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Quantity& _internal_numerator() const;
  public:
  const ::google::fhir::stu3::proto::Quantity& numerator() const;
  ::google::fhir::stu3::proto::Quantity* release_numerator();
  ::google::fhir::stu3::proto::Quantity* mutable_numerator();
  void set_allocated_numerator(::google::fhir::stu3::proto::Quantity* numerator);

  // .google.fhir.stu3.proto.Quantity denominator = 4;
  bool has_denominator() const;
  void clear_denominator();
  static const int kDenominatorFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::Quantity& _internal_denominator() const;
  public:
  const ::google::fhir::stu3::proto::Quantity& denominator() const;
  ::google::fhir::stu3::proto::Quantity* release_denominator();
  ::google::fhir::stu3::proto::Quantity* mutable_denominator();
  void set_allocated_denominator(::google::fhir::stu3::proto::Quantity* denominator);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Ratio)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Quantity* numerator_;
  ::google::fhir::stu3::proto::Quantity* denominator_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SampledData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.SampledData) */ {
 public:
  SampledData();
  virtual ~SampledData();

  SampledData(const SampledData& from);

  inline SampledData& operator=(const SampledData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SampledData(SampledData&& from) noexcept
    : SampledData() {
    *this = ::std::move(from);
  }

  inline SampledData& operator=(SampledData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SampledData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SampledData* internal_default_instance() {
    return reinterpret_cast<const SampledData*>(
               &_SampledData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(SampledData* other);
  friend void swap(SampledData& a, SampledData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SampledData* New() const final {
    return CreateMaybeMessage<SampledData>(NULL);
  }

  SampledData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SampledData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SampledData& from);
  void MergeFrom(const SampledData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SampledData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.SimpleQuantity origin = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_origin() const;
  void clear_origin();
  static const int kOriginFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::SimpleQuantity& _internal_origin() const;
  public:
  const ::google::fhir::stu3::proto::SimpleQuantity& origin() const;
  ::google::fhir::stu3::proto::SimpleQuantity* release_origin();
  ::google::fhir::stu3::proto::SimpleQuantity* mutable_origin();
  void set_allocated_origin(::google::fhir::stu3::proto::SimpleQuantity* origin);

  // .google.fhir.stu3.proto.Decimal period = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_period() const;
  void clear_period();
  static const int kPeriodFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_period() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& period() const;
  ::google::fhir::stu3::proto::Decimal* release_period();
  ::google::fhir::stu3::proto::Decimal* mutable_period();
  void set_allocated_period(::google::fhir::stu3::proto::Decimal* period);

  // .google.fhir.stu3.proto.Decimal factor = 5;
  bool has_factor() const;
  void clear_factor();
  static const int kFactorFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_factor() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& factor() const;
  ::google::fhir::stu3::proto::Decimal* release_factor();
  ::google::fhir::stu3::proto::Decimal* mutable_factor();
  void set_allocated_factor(::google::fhir::stu3::proto::Decimal* factor);

  // .google.fhir.stu3.proto.Decimal lower_limit = 6;
  bool has_lower_limit() const;
  void clear_lower_limit();
  static const int kLowerLimitFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_lower_limit() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& lower_limit() const;
  ::google::fhir::stu3::proto::Decimal* release_lower_limit();
  ::google::fhir::stu3::proto::Decimal* mutable_lower_limit();
  void set_allocated_lower_limit(::google::fhir::stu3::proto::Decimal* lower_limit);

  // .google.fhir.stu3.proto.Decimal upper_limit = 7;
  bool has_upper_limit() const;
  void clear_upper_limit();
  static const int kUpperLimitFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_upper_limit() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& upper_limit() const;
  ::google::fhir::stu3::proto::Decimal* release_upper_limit();
  ::google::fhir::stu3::proto::Decimal* mutable_upper_limit();
  void set_allocated_upper_limit(::google::fhir::stu3::proto::Decimal* upper_limit);

  // .google.fhir.stu3.proto.PositiveInt dimensions = 8 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_dimensions() const;
  void clear_dimensions();
  static const int kDimensionsFieldNumber = 8;
  private:
  const ::google::fhir::stu3::proto::PositiveInt& _internal_dimensions() const;
  public:
  const ::google::fhir::stu3::proto::PositiveInt& dimensions() const;
  ::google::fhir::stu3::proto::PositiveInt* release_dimensions();
  ::google::fhir::stu3::proto::PositiveInt* mutable_dimensions();
  void set_allocated_dimensions(::google::fhir::stu3::proto::PositiveInt* dimensions);

  // .google.fhir.stu3.proto.String data = 9 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 9;
  private:
  const ::google::fhir::stu3::proto::String& _internal_data() const;
  public:
  const ::google::fhir::stu3::proto::String& data() const;
  ::google::fhir::stu3::proto::String* release_data();
  ::google::fhir::stu3::proto::String* mutable_data();
  void set_allocated_data(::google::fhir::stu3::proto::String* data);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.SampledData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::SimpleQuantity* origin_;
  ::google::fhir::stu3::proto::Decimal* period_;
  ::google::fhir::stu3::proto::Decimal* factor_;
  ::google::fhir::stu3::proto::Decimal* lower_limit_;
  ::google::fhir::stu3::proto::Decimal* upper_limit_;
  ::google::fhir::stu3::proto::PositiveInt* dimensions_;
  ::google::fhir::stu3::proto::String* data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Signature_Who : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Signature.Who) */ {
 public:
  Signature_Who();
  virtual ~Signature_Who();

  Signature_Who(const Signature_Who& from);

  inline Signature_Who& operator=(const Signature_Who& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Signature_Who(Signature_Who&& from) noexcept
    : Signature_Who() {
    *this = ::std::move(from);
  }

  inline Signature_Who& operator=(Signature_Who&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Signature_Who& default_instance();

  enum WhoCase {
    kUri = 1,
    kReference = 2,
    WHO_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signature_Who* internal_default_instance() {
    return reinterpret_cast<const Signature_Who*>(
               &_Signature_Who_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(Signature_Who* other);
  friend void swap(Signature_Who& a, Signature_Who& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Signature_Who* New() const final {
    return CreateMaybeMessage<Signature_Who>(NULL);
  }

  Signature_Who* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Signature_Who>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Signature_Who& from);
  void MergeFrom(const Signature_Who& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signature_Who* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Uri uri = 1;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& uri() const;
  ::google::fhir::stu3::proto::Uri* release_uri();
  ::google::fhir::stu3::proto::Uri* mutable_uri();
  void set_allocated_uri(::google::fhir::stu3::proto::Uri* uri);

  // .google.fhir.stu3.proto.Reference reference = 2 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/RelatedPerson", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Patient", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Device", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Organization"];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  void clear_who();
  WhoCase who_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Signature.Who)
 private:
  void set_has_uri();
  void set_has_reference();

  inline bool has_who() const;
  inline void clear_has_who();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union WhoUnion {
    WhoUnion() {}
    ::google::fhir::stu3::proto::Uri* uri_;
    ::google::fhir::stu3::proto::Reference* reference_;
  } who_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Signature_OnBehalfOf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Signature.OnBehalfOf) */ {
 public:
  Signature_OnBehalfOf();
  virtual ~Signature_OnBehalfOf();

  Signature_OnBehalfOf(const Signature_OnBehalfOf& from);

  inline Signature_OnBehalfOf& operator=(const Signature_OnBehalfOf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Signature_OnBehalfOf(Signature_OnBehalfOf&& from) noexcept
    : Signature_OnBehalfOf() {
    *this = ::std::move(from);
  }

  inline Signature_OnBehalfOf& operator=(Signature_OnBehalfOf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Signature_OnBehalfOf& default_instance();

  enum OnBehalfOfCase {
    kUri = 1,
    kReference = 2,
    ON_BEHALF_OF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signature_OnBehalfOf* internal_default_instance() {
    return reinterpret_cast<const Signature_OnBehalfOf*>(
               &_Signature_OnBehalfOf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(Signature_OnBehalfOf* other);
  friend void swap(Signature_OnBehalfOf& a, Signature_OnBehalfOf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Signature_OnBehalfOf* New() const final {
    return CreateMaybeMessage<Signature_OnBehalfOf>(NULL);
  }

  Signature_OnBehalfOf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Signature_OnBehalfOf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Signature_OnBehalfOf& from);
  void MergeFrom(const Signature_OnBehalfOf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signature_OnBehalfOf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Uri uri = 1;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& uri() const;
  ::google::fhir::stu3::proto::Uri* release_uri();
  ::google::fhir::stu3::proto::Uri* mutable_uri();
  void set_allocated_uri(::google::fhir::stu3::proto::Uri* uri);

  // .google.fhir.stu3.proto.Reference reference = 2 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/RelatedPerson", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Patient", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Device", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Organization"];
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  void clear_on_behalf_of();
  OnBehalfOfCase on_behalf_of_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Signature.OnBehalfOf)
 private:
  void set_has_uri();
  void set_has_reference();

  inline bool has_on_behalf_of() const;
  inline void clear_has_on_behalf_of();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union OnBehalfOfUnion {
    OnBehalfOfUnion() {}
    ::google::fhir::stu3::proto::Uri* uri_;
    ::google::fhir::stu3::proto::Reference* reference_;
  } on_behalf_of_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Signature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Signature) */ {
 public:
  Signature();
  virtual ~Signature();

  Signature(const Signature& from);

  inline Signature& operator=(const Signature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Signature(Signature&& from) noexcept
    : Signature() {
    *this = ::std::move(from);
  }

  inline Signature& operator=(Signature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Signature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Signature* internal_default_instance() {
    return reinterpret_cast<const Signature*>(
               &_Signature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(Signature* other);
  friend void swap(Signature& a, Signature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Signature* New() const final {
    return CreateMaybeMessage<Signature>(NULL);
  }

  Signature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Signature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Signature& from);
  void MergeFrom(const Signature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Signature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Signature_Who Who;
  typedef Signature_OnBehalfOf OnBehalfOf;

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // repeated .google.fhir.stu3.proto.Coding type = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  int type_size() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::google::fhir::stu3::proto::Coding* mutable_type(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Coding >*
      mutable_type();
  const ::google::fhir::stu3::proto::Coding& type(int index) const;
  ::google::fhir::stu3::proto::Coding* add_type();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Coding >&
      type() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Instant when = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_when() const;
  void clear_when();
  static const int kWhenFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::Instant& _internal_when() const;
  public:
  const ::google::fhir::stu3::proto::Instant& when() const;
  ::google::fhir::stu3::proto::Instant* release_when();
  ::google::fhir::stu3::proto::Instant* mutable_when();
  void set_allocated_when(::google::fhir::stu3::proto::Instant* when);

  // .google.fhir.stu3.proto.Signature.Who who = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_who() const;
  void clear_who();
  static const int kWhoFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Signature_Who& _internal_who() const;
  public:
  const ::google::fhir::stu3::proto::Signature_Who& who() const;
  ::google::fhir::stu3::proto::Signature_Who* release_who();
  ::google::fhir::stu3::proto::Signature_Who* mutable_who();
  void set_allocated_who(::google::fhir::stu3::proto::Signature_Who* who);

  // .google.fhir.stu3.proto.Signature.OnBehalfOf on_behalf_of = 6 [(.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_on_behalf_of() const;
  void clear_on_behalf_of();
  static const int kOnBehalfOfFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::Signature_OnBehalfOf& _internal_on_behalf_of() const;
  public:
  const ::google::fhir::stu3::proto::Signature_OnBehalfOf& on_behalf_of() const;
  ::google::fhir::stu3::proto::Signature_OnBehalfOf* release_on_behalf_of();
  ::google::fhir::stu3::proto::Signature_OnBehalfOf* mutable_on_behalf_of();
  void set_allocated_on_behalf_of(::google::fhir::stu3::proto::Signature_OnBehalfOf* on_behalf_of);

  // .google.fhir.stu3.proto.MimeTypeCode content_type = 7;
  bool has_content_type() const;
  void clear_content_type();
  static const int kContentTypeFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::MimeTypeCode& _internal_content_type() const;
  public:
  const ::google::fhir::stu3::proto::MimeTypeCode& content_type() const;
  ::google::fhir::stu3::proto::MimeTypeCode* release_content_type();
  ::google::fhir::stu3::proto::MimeTypeCode* mutable_content_type();
  void set_allocated_content_type(::google::fhir::stu3::proto::MimeTypeCode* content_type);

  // .google.fhir.stu3.proto.Base64Binary blob = 8;
  bool has_blob() const;
  void clear_blob();
  static const int kBlobFieldNumber = 8;
  private:
  const ::google::fhir::stu3::proto::Base64Binary& _internal_blob() const;
  public:
  const ::google::fhir::stu3::proto::Base64Binary& blob() const;
  ::google::fhir::stu3::proto::Base64Binary* release_blob();
  ::google::fhir::stu3::proto::Base64Binary* mutable_blob();
  void set_allocated_blob(::google::fhir::stu3::proto::Base64Binary* blob);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Signature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Coding > type_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Instant* when_;
  ::google::fhir::stu3::proto::Signature_Who* who_;
  ::google::fhir::stu3::proto::Signature_OnBehalfOf* on_behalf_of_;
  ::google::fhir::stu3::proto::MimeTypeCode* content_type_;
  ::google::fhir::stu3::proto::Base64Binary* blob_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimpleQuantity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.SimpleQuantity) */ {
 public:
  SimpleQuantity();
  virtual ~SimpleQuantity();

  SimpleQuantity(const SimpleQuantity& from);

  inline SimpleQuantity& operator=(const SimpleQuantity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleQuantity(SimpleQuantity&& from) noexcept
    : SimpleQuantity() {
    *this = ::std::move(from);
  }

  inline SimpleQuantity& operator=(SimpleQuantity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleQuantity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleQuantity* internal_default_instance() {
    return reinterpret_cast<const SimpleQuantity*>(
               &_SimpleQuantity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(SimpleQuantity* other);
  friend void swap(SimpleQuantity& a, SimpleQuantity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleQuantity* New() const final {
    return CreateMaybeMessage<SimpleQuantity>(NULL);
  }

  SimpleQuantity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleQuantity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleQuantity& from);
  void MergeFrom(const SimpleQuantity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleQuantity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Decimal value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& value() const;
  ::google::fhir::stu3::proto::Decimal* release_value();
  ::google::fhir::stu3::proto::Decimal* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::Decimal* value);

  // .google.fhir.stu3.proto.String unit = 5;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::String& _internal_unit() const;
  public:
  const ::google::fhir::stu3::proto::String& unit() const;
  ::google::fhir::stu3::proto::String* release_unit();
  ::google::fhir::stu3::proto::String* mutable_unit();
  void set_allocated_unit(::google::fhir::stu3::proto::String* unit);

  // .google.fhir.stu3.proto.Uri system = 6;
  bool has_system() const;
  void clear_system();
  static const int kSystemFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_system() const;
  public:
  const ::google::fhir::stu3::proto::Uri& system() const;
  ::google::fhir::stu3::proto::Uri* release_system();
  ::google::fhir::stu3::proto::Uri* mutable_system();
  void set_allocated_system(::google::fhir::stu3::proto::Uri* system);

  // .google.fhir.stu3.proto.Code code = 7;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::Code& _internal_code() const;
  public:
  const ::google::fhir::stu3::proto::Code& code() const;
  ::google::fhir::stu3::proto::Code* release_code();
  ::google::fhir::stu3::proto::Code* mutable_code();
  void set_allocated_code(::google::fhir::stu3::proto::Code* code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.SimpleQuantity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Decimal* value_;
  ::google::fhir::stu3::proto::String* unit_;
  ::google::fhir::stu3::proto::Uri* system_;
  ::google::fhir::stu3::proto::Code* code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Timing_Repeat_Bounds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Timing.Repeat.Bounds) */ {
 public:
  Timing_Repeat_Bounds();
  virtual ~Timing_Repeat_Bounds();

  Timing_Repeat_Bounds(const Timing_Repeat_Bounds& from);

  inline Timing_Repeat_Bounds& operator=(const Timing_Repeat_Bounds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Timing_Repeat_Bounds(Timing_Repeat_Bounds&& from) noexcept
    : Timing_Repeat_Bounds() {
    *this = ::std::move(from);
  }

  inline Timing_Repeat_Bounds& operator=(Timing_Repeat_Bounds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Timing_Repeat_Bounds& default_instance();

  enum BoundsCase {
    kDuration = 1,
    kRange = 2,
    kPeriod = 3,
    BOUNDS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Timing_Repeat_Bounds* internal_default_instance() {
    return reinterpret_cast<const Timing_Repeat_Bounds*>(
               &_Timing_Repeat_Bounds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(Timing_Repeat_Bounds* other);
  friend void swap(Timing_Repeat_Bounds& a, Timing_Repeat_Bounds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Timing_Repeat_Bounds* New() const final {
    return CreateMaybeMessage<Timing_Repeat_Bounds>(NULL);
  }

  Timing_Repeat_Bounds* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Timing_Repeat_Bounds>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Timing_Repeat_Bounds& from);
  void MergeFrom(const Timing_Repeat_Bounds& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timing_Repeat_Bounds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Duration duration = 1;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Duration& _internal_duration() const;
  public:
  const ::google::fhir::stu3::proto::Duration& duration() const;
  ::google::fhir::stu3::proto::Duration* release_duration();
  ::google::fhir::stu3::proto::Duration* mutable_duration();
  void set_allocated_duration(::google::fhir::stu3::proto::Duration* duration);

  // .google.fhir.stu3.proto.Range range = 2;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::Range& _internal_range() const;
  public:
  const ::google::fhir::stu3::proto::Range& range() const;
  ::google::fhir::stu3::proto::Range* release_range();
  ::google::fhir::stu3::proto::Range* mutable_range();
  void set_allocated_range(::google::fhir::stu3::proto::Range* range);

  // .google.fhir.stu3.proto.Period period = 3;
  bool has_period() const;
  void clear_period();
  static const int kPeriodFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Period& _internal_period() const;
  public:
  const ::google::fhir::stu3::proto::Period& period() const;
  ::google::fhir::stu3::proto::Period* release_period();
  ::google::fhir::stu3::proto::Period* mutable_period();
  void set_allocated_period(::google::fhir::stu3::proto::Period* period);

  void clear_bounds();
  BoundsCase bounds_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Timing.Repeat.Bounds)
 private:
  void set_has_duration();
  void set_has_range();
  void set_has_period();

  inline bool has_bounds() const;
  inline void clear_has_bounds();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union BoundsUnion {
    BoundsUnion() {}
    ::google::fhir::stu3::proto::Duration* duration_;
    ::google::fhir::stu3::proto::Range* range_;
    ::google::fhir::stu3::proto::Period* period_;
  } bounds_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Timing_Repeat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Timing.Repeat) */ {
 public:
  Timing_Repeat();
  virtual ~Timing_Repeat();

  Timing_Repeat(const Timing_Repeat& from);

  inline Timing_Repeat& operator=(const Timing_Repeat& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Timing_Repeat(Timing_Repeat&& from) noexcept
    : Timing_Repeat() {
    *this = ::std::move(from);
  }

  inline Timing_Repeat& operator=(Timing_Repeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Timing_Repeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Timing_Repeat* internal_default_instance() {
    return reinterpret_cast<const Timing_Repeat*>(
               &_Timing_Repeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(Timing_Repeat* other);
  friend void swap(Timing_Repeat& a, Timing_Repeat& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Timing_Repeat* New() const final {
    return CreateMaybeMessage<Timing_Repeat>(NULL);
  }

  Timing_Repeat* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Timing_Repeat>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Timing_Repeat& from);
  void MergeFrom(const Timing_Repeat& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timing_Repeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Timing_Repeat_Bounds Bounds;

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // repeated .google.fhir.stu3.proto.DaysOfWeekCode day_of_week = 14;
  int day_of_week_size() const;
  void clear_day_of_week();
  static const int kDayOfWeekFieldNumber = 14;
  ::google::fhir::stu3::proto::DaysOfWeekCode* mutable_day_of_week(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::DaysOfWeekCode >*
      mutable_day_of_week();
  const ::google::fhir::stu3::proto::DaysOfWeekCode& day_of_week(int index) const;
  ::google::fhir::stu3::proto::DaysOfWeekCode* add_day_of_week();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::DaysOfWeekCode >&
      day_of_week() const;

  // repeated .google.fhir.stu3.proto.Time time_of_day = 15;
  int time_of_day_size() const;
  void clear_time_of_day();
  static const int kTimeOfDayFieldNumber = 15;
  ::google::fhir::stu3::proto::Time* mutable_time_of_day(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Time >*
      mutable_time_of_day();
  const ::google::fhir::stu3::proto::Time& time_of_day(int index) const;
  ::google::fhir::stu3::proto::Time* add_time_of_day();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Time >&
      time_of_day() const;

  // repeated .google.fhir.stu3.proto.EventTimingCode when = 16;
  int when_size() const;
  void clear_when();
  static const int kWhenFieldNumber = 16;
  ::google::fhir::stu3::proto::EventTimingCode* mutable_when(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::EventTimingCode >*
      mutable_when();
  const ::google::fhir::stu3::proto::EventTimingCode& when(int index) const;
  ::google::fhir::stu3::proto::EventTimingCode* add_when();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::EventTimingCode >&
      when() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Timing.Repeat.Bounds bounds = 3 [(.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_bounds() const;
  void clear_bounds();
  static const int kBoundsFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Timing_Repeat_Bounds& _internal_bounds() const;
  public:
  const ::google::fhir::stu3::proto::Timing_Repeat_Bounds& bounds() const;
  ::google::fhir::stu3::proto::Timing_Repeat_Bounds* release_bounds();
  ::google::fhir::stu3::proto::Timing_Repeat_Bounds* mutable_bounds();
  void set_allocated_bounds(::google::fhir::stu3::proto::Timing_Repeat_Bounds* bounds);

  // .google.fhir.stu3.proto.Integer count = 4;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::Integer& _internal_count() const;
  public:
  const ::google::fhir::stu3::proto::Integer& count() const;
  ::google::fhir::stu3::proto::Integer* release_count();
  ::google::fhir::stu3::proto::Integer* mutable_count();
  void set_allocated_count(::google::fhir::stu3::proto::Integer* count);

  // .google.fhir.stu3.proto.Integer count_max = 5;
  bool has_count_max() const;
  void clear_count_max();
  static const int kCountMaxFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Integer& _internal_count_max() const;
  public:
  const ::google::fhir::stu3::proto::Integer& count_max() const;
  ::google::fhir::stu3::proto::Integer* release_count_max();
  ::google::fhir::stu3::proto::Integer* mutable_count_max();
  void set_allocated_count_max(::google::fhir::stu3::proto::Integer* count_max);

  // .google.fhir.stu3.proto.Decimal duration = 6;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_duration() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& duration() const;
  ::google::fhir::stu3::proto::Decimal* release_duration();
  ::google::fhir::stu3::proto::Decimal* mutable_duration();
  void set_allocated_duration(::google::fhir::stu3::proto::Decimal* duration);

  // .google.fhir.stu3.proto.Decimal duration_max = 7;
  bool has_duration_max() const;
  void clear_duration_max();
  static const int kDurationMaxFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_duration_max() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& duration_max() const;
  ::google::fhir::stu3::proto::Decimal* release_duration_max();
  ::google::fhir::stu3::proto::Decimal* mutable_duration_max();
  void set_allocated_duration_max(::google::fhir::stu3::proto::Decimal* duration_max);

  // .google.fhir.stu3.proto.UnitsOfTimeCode duration_unit = 8;
  bool has_duration_unit() const;
  void clear_duration_unit();
  static const int kDurationUnitFieldNumber = 8;
  private:
  const ::google::fhir::stu3::proto::UnitsOfTimeCode& _internal_duration_unit() const;
  public:
  const ::google::fhir::stu3::proto::UnitsOfTimeCode& duration_unit() const;
  ::google::fhir::stu3::proto::UnitsOfTimeCode* release_duration_unit();
  ::google::fhir::stu3::proto::UnitsOfTimeCode* mutable_duration_unit();
  void set_allocated_duration_unit(::google::fhir::stu3::proto::UnitsOfTimeCode* duration_unit);

  // .google.fhir.stu3.proto.Integer frequency = 9;
  bool has_frequency() const;
  void clear_frequency();
  static const int kFrequencyFieldNumber = 9;
  private:
  const ::google::fhir::stu3::proto::Integer& _internal_frequency() const;
  public:
  const ::google::fhir::stu3::proto::Integer& frequency() const;
  ::google::fhir::stu3::proto::Integer* release_frequency();
  ::google::fhir::stu3::proto::Integer* mutable_frequency();
  void set_allocated_frequency(::google::fhir::stu3::proto::Integer* frequency);

  // .google.fhir.stu3.proto.Integer frequency_max = 10;
  bool has_frequency_max() const;
  void clear_frequency_max();
  static const int kFrequencyMaxFieldNumber = 10;
  private:
  const ::google::fhir::stu3::proto::Integer& _internal_frequency_max() const;
  public:
  const ::google::fhir::stu3::proto::Integer& frequency_max() const;
  ::google::fhir::stu3::proto::Integer* release_frequency_max();
  ::google::fhir::stu3::proto::Integer* mutable_frequency_max();
  void set_allocated_frequency_max(::google::fhir::stu3::proto::Integer* frequency_max);

  // .google.fhir.stu3.proto.Decimal period = 11;
  bool has_period() const;
  void clear_period();
  static const int kPeriodFieldNumber = 11;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_period() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& period() const;
  ::google::fhir::stu3::proto::Decimal* release_period();
  ::google::fhir::stu3::proto::Decimal* mutable_period();
  void set_allocated_period(::google::fhir::stu3::proto::Decimal* period);

  // .google.fhir.stu3.proto.Decimal period_max = 12;
  bool has_period_max() const;
  void clear_period_max();
  static const int kPeriodMaxFieldNumber = 12;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_period_max() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& period_max() const;
  ::google::fhir::stu3::proto::Decimal* release_period_max();
  ::google::fhir::stu3::proto::Decimal* mutable_period_max();
  void set_allocated_period_max(::google::fhir::stu3::proto::Decimal* period_max);

  // .google.fhir.stu3.proto.UnitsOfTimeCode period_unit = 13;
  bool has_period_unit() const;
  void clear_period_unit();
  static const int kPeriodUnitFieldNumber = 13;
  private:
  const ::google::fhir::stu3::proto::UnitsOfTimeCode& _internal_period_unit() const;
  public:
  const ::google::fhir::stu3::proto::UnitsOfTimeCode& period_unit() const;
  ::google::fhir::stu3::proto::UnitsOfTimeCode* release_period_unit();
  ::google::fhir::stu3::proto::UnitsOfTimeCode* mutable_period_unit();
  void set_allocated_period_unit(::google::fhir::stu3::proto::UnitsOfTimeCode* period_unit);

  // .google.fhir.stu3.proto.UnsignedInt offset = 17;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 17;
  private:
  const ::google::fhir::stu3::proto::UnsignedInt& _internal_offset() const;
  public:
  const ::google::fhir::stu3::proto::UnsignedInt& offset() const;
  ::google::fhir::stu3::proto::UnsignedInt* release_offset();
  ::google::fhir::stu3::proto::UnsignedInt* mutable_offset();
  void set_allocated_offset(::google::fhir::stu3::proto::UnsignedInt* offset);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Timing.Repeat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::DaysOfWeekCode > day_of_week_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Time > time_of_day_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::EventTimingCode > when_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Timing_Repeat_Bounds* bounds_;
  ::google::fhir::stu3::proto::Integer* count_;
  ::google::fhir::stu3::proto::Integer* count_max_;
  ::google::fhir::stu3::proto::Decimal* duration_;
  ::google::fhir::stu3::proto::Decimal* duration_max_;
  ::google::fhir::stu3::proto::UnitsOfTimeCode* duration_unit_;
  ::google::fhir::stu3::proto::Integer* frequency_;
  ::google::fhir::stu3::proto::Integer* frequency_max_;
  ::google::fhir::stu3::proto::Decimal* period_;
  ::google::fhir::stu3::proto::Decimal* period_max_;
  ::google::fhir::stu3::proto::UnitsOfTimeCode* period_unit_;
  ::google::fhir::stu3::proto::UnsignedInt* offset_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Timing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Timing) */ {
 public:
  Timing();
  virtual ~Timing();

  Timing(const Timing& from);

  inline Timing& operator=(const Timing& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Timing(Timing&& from) noexcept
    : Timing() {
    *this = ::std::move(from);
  }

  inline Timing& operator=(Timing&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Timing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Timing* internal_default_instance() {
    return reinterpret_cast<const Timing*>(
               &_Timing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(Timing* other);
  friend void swap(Timing& a, Timing& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Timing* New() const final {
    return CreateMaybeMessage<Timing>(NULL);
  }

  Timing* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Timing>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Timing& from);
  void MergeFrom(const Timing& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Timing_Repeat Repeat;

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // repeated .google.fhir.stu3.proto.DateTime event = 3;
  int event_size() const;
  void clear_event();
  static const int kEventFieldNumber = 3;
  ::google::fhir::stu3::proto::DateTime* mutable_event(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::DateTime >*
      mutable_event();
  const ::google::fhir::stu3::proto::DateTime& event(int index) const;
  ::google::fhir::stu3::proto::DateTime* add_event();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::DateTime >&
      event() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Timing.Repeat repeat = 4;
  bool has_repeat() const;
  void clear_repeat();
  static const int kRepeatFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::Timing_Repeat& _internal_repeat() const;
  public:
  const ::google::fhir::stu3::proto::Timing_Repeat& repeat() const;
  ::google::fhir::stu3::proto::Timing_Repeat* release_repeat();
  ::google::fhir::stu3::proto::Timing_Repeat* mutable_repeat();
  void set_allocated_repeat(::google::fhir::stu3::proto::Timing_Repeat* repeat);

  // .google.fhir.stu3.proto.CodeableConcept code = 5;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_code() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& code() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_code();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_code();
  void set_allocated_code(::google::fhir::stu3::proto::CodeableConcept* code);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Timing)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::DateTime > event_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Timing_Repeat* repeat_;
  ::google::fhir::stu3::proto::CodeableConcept* code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Extension_Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Extension.Value) */ {
 public:
  Extension_Value();
  virtual ~Extension_Value();

  Extension_Value(const Extension_Value& from);

  inline Extension_Value& operator=(const Extension_Value& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Extension_Value(Extension_Value&& from) noexcept
    : Extension_Value() {
    *this = ::std::move(from);
  }

  inline Extension_Value& operator=(Extension_Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Extension_Value& default_instance();

  enum ValueCase {
    kBase64Binary = 1,
    kBoolean = 2,
    kCode = 3,
    kDate = 4,
    kDateTime = 5,
    kDecimal = 6,
    kId = 7,
    kInstant = 8,
    kInteger = 9,
    kMarkdown = 10,
    kOid = 11,
    kPositiveInt = 12,
    kStringValue = 13,
    kTime = 14,
    kUnsignedInt = 15,
    kUri = 16,
    kAddress = 17,
    kAge = 18,
    kAnnotation = 19,
    kAttachment = 20,
    kCodeableConcept = 21,
    kCoding = 22,
    kContactPoint = 23,
    kCount = 24,
    kDistance = 25,
    kDuration = 26,
    kHumanName = 27,
    kIdentifier = 28,
    kMoney = 29,
    kPeriod = 30,
    kQuantity = 31,
    kRange = 32,
    kRatio = 33,
    kReference = 34,
    kSampledData = 35,
    kSignature = 36,
    kTiming = 37,
    kMeta = 38,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Extension_Value* internal_default_instance() {
    return reinterpret_cast<const Extension_Value*>(
               &_Extension_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(Extension_Value* other);
  friend void swap(Extension_Value& a, Extension_Value& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Extension_Value* New() const final {
    return CreateMaybeMessage<Extension_Value>(NULL);
  }

  Extension_Value* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Extension_Value>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Extension_Value& from);
  void MergeFrom(const Extension_Value& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extension_Value* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.fhir.stu3.proto.Base64Binary base64_binary = 1;
  bool has_base64_binary() const;
  void clear_base64_binary();
  static const int kBase64BinaryFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::Base64Binary& _internal_base64_binary() const;
  public:
  const ::google::fhir::stu3::proto::Base64Binary& base64_binary() const;
  ::google::fhir::stu3::proto::Base64Binary* release_base64_binary();
  ::google::fhir::stu3::proto::Base64Binary* mutable_base64_binary();
  void set_allocated_base64_binary(::google::fhir::stu3::proto::Base64Binary* base64_binary);

  // .google.fhir.stu3.proto.Boolean boolean = 2;
  bool has_boolean() const;
  void clear_boolean();
  static const int kBooleanFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_boolean() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& boolean() const;
  ::google::fhir::stu3::proto::Boolean* release_boolean();
  ::google::fhir::stu3::proto::Boolean* mutable_boolean();
  void set_allocated_boolean(::google::fhir::stu3::proto::Boolean* boolean);

  // .google.fhir.stu3.proto.Code code = 3;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Code& _internal_code() const;
  public:
  const ::google::fhir::stu3::proto::Code& code() const;
  ::google::fhir::stu3::proto::Code* release_code();
  ::google::fhir::stu3::proto::Code* mutable_code();
  void set_allocated_code(::google::fhir::stu3::proto::Code* code);

  // .google.fhir.stu3.proto.Date date = 4;
  bool has_date() const;
  void clear_date();
  static const int kDateFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::Date& _internal_date() const;
  public:
  const ::google::fhir::stu3::proto::Date& date() const;
  ::google::fhir::stu3::proto::Date* release_date();
  ::google::fhir::stu3::proto::Date* mutable_date();
  void set_allocated_date(::google::fhir::stu3::proto::Date* date);

  // .google.fhir.stu3.proto.DateTime date_time = 5;
  bool has_date_time() const;
  void clear_date_time();
  static const int kDateTimeFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::DateTime& _internal_date_time() const;
  public:
  const ::google::fhir::stu3::proto::DateTime& date_time() const;
  ::google::fhir::stu3::proto::DateTime* release_date_time();
  ::google::fhir::stu3::proto::DateTime* mutable_date_time();
  void set_allocated_date_time(::google::fhir::stu3::proto::DateTime* date_time);

  // .google.fhir.stu3.proto.Decimal decimal = 6;
  bool has_decimal() const;
  void clear_decimal();
  static const int kDecimalFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::Decimal& _internal_decimal() const;
  public:
  const ::google::fhir::stu3::proto::Decimal& decimal() const;
  ::google::fhir::stu3::proto::Decimal* release_decimal();
  ::google::fhir::stu3::proto::Decimal* mutable_decimal();
  void set_allocated_decimal(::google::fhir::stu3::proto::Decimal* decimal);

  // .google.fhir.stu3.proto.Id id = 7;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::Id& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::Id& id() const;
  ::google::fhir::stu3::proto::Id* release_id();
  ::google::fhir::stu3::proto::Id* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::Id* id);

  // .google.fhir.stu3.proto.Instant instant = 8;
  bool has_instant() const;
  void clear_instant();
  static const int kInstantFieldNumber = 8;
  private:
  const ::google::fhir::stu3::proto::Instant& _internal_instant() const;
  public:
  const ::google::fhir::stu3::proto::Instant& instant() const;
  ::google::fhir::stu3::proto::Instant* release_instant();
  ::google::fhir::stu3::proto::Instant* mutable_instant();
  void set_allocated_instant(::google::fhir::stu3::proto::Instant* instant);

  // .google.fhir.stu3.proto.Integer integer = 9;
  bool has_integer() const;
  void clear_integer();
  static const int kIntegerFieldNumber = 9;
  private:
  const ::google::fhir::stu3::proto::Integer& _internal_integer() const;
  public:
  const ::google::fhir::stu3::proto::Integer& integer() const;
  ::google::fhir::stu3::proto::Integer* release_integer();
  ::google::fhir::stu3::proto::Integer* mutable_integer();
  void set_allocated_integer(::google::fhir::stu3::proto::Integer* integer);

  // .google.fhir.stu3.proto.Markdown markdown = 10;
  bool has_markdown() const;
  void clear_markdown();
  static const int kMarkdownFieldNumber = 10;
  private:
  const ::google::fhir::stu3::proto::Markdown& _internal_markdown() const;
  public:
  const ::google::fhir::stu3::proto::Markdown& markdown() const;
  ::google::fhir::stu3::proto::Markdown* release_markdown();
  ::google::fhir::stu3::proto::Markdown* mutable_markdown();
  void set_allocated_markdown(::google::fhir::stu3::proto::Markdown* markdown);

  // .google.fhir.stu3.proto.Oid oid = 11;
  bool has_oid() const;
  void clear_oid();
  static const int kOidFieldNumber = 11;
  private:
  const ::google::fhir::stu3::proto::Oid& _internal_oid() const;
  public:
  const ::google::fhir::stu3::proto::Oid& oid() const;
  ::google::fhir::stu3::proto::Oid* release_oid();
  ::google::fhir::stu3::proto::Oid* mutable_oid();
  void set_allocated_oid(::google::fhir::stu3::proto::Oid* oid);

  // .google.fhir.stu3.proto.PositiveInt positive_int = 12;
  bool has_positive_int() const;
  void clear_positive_int();
  static const int kPositiveIntFieldNumber = 12;
  private:
  const ::google::fhir::stu3::proto::PositiveInt& _internal_positive_int() const;
  public:
  const ::google::fhir::stu3::proto::PositiveInt& positive_int() const;
  ::google::fhir::stu3::proto::PositiveInt* release_positive_int();
  ::google::fhir::stu3::proto::PositiveInt* mutable_positive_int();
  void set_allocated_positive_int(::google::fhir::stu3::proto::PositiveInt* positive_int);

  // .google.fhir.stu3.proto.String string_value = 13[json_name = "string"];
  bool has_string_value() const;
  void clear_string_value();
  static const int kStringValueFieldNumber = 13;
  private:
  const ::google::fhir::stu3::proto::String& _internal_string_value() const;
  public:
  const ::google::fhir::stu3::proto::String& string_value() const;
  ::google::fhir::stu3::proto::String* release_string_value();
  ::google::fhir::stu3::proto::String* mutable_string_value();
  void set_allocated_string_value(::google::fhir::stu3::proto::String* string_value);

  // .google.fhir.stu3.proto.Time time = 14;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 14;
  private:
  const ::google::fhir::stu3::proto::Time& _internal_time() const;
  public:
  const ::google::fhir::stu3::proto::Time& time() const;
  ::google::fhir::stu3::proto::Time* release_time();
  ::google::fhir::stu3::proto::Time* mutable_time();
  void set_allocated_time(::google::fhir::stu3::proto::Time* time);

  // .google.fhir.stu3.proto.UnsignedInt unsigned_int = 15;
  bool has_unsigned_int() const;
  void clear_unsigned_int();
  static const int kUnsignedIntFieldNumber = 15;
  private:
  const ::google::fhir::stu3::proto::UnsignedInt& _internal_unsigned_int() const;
  public:
  const ::google::fhir::stu3::proto::UnsignedInt& unsigned_int() const;
  ::google::fhir::stu3::proto::UnsignedInt* release_unsigned_int();
  ::google::fhir::stu3::proto::UnsignedInt* mutable_unsigned_int();
  void set_allocated_unsigned_int(::google::fhir::stu3::proto::UnsignedInt* unsigned_int);

  // .google.fhir.stu3.proto.Uri uri = 16;
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 16;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_uri() const;
  public:
  const ::google::fhir::stu3::proto::Uri& uri() const;
  ::google::fhir::stu3::proto::Uri* release_uri();
  ::google::fhir::stu3::proto::Uri* mutable_uri();
  void set_allocated_uri(::google::fhir::stu3::proto::Uri* uri);

  // .google.fhir.stu3.proto.Address address = 17;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 17;
  private:
  const ::google::fhir::stu3::proto::Address& _internal_address() const;
  public:
  const ::google::fhir::stu3::proto::Address& address() const;
  ::google::fhir::stu3::proto::Address* release_address();
  ::google::fhir::stu3::proto::Address* mutable_address();
  void set_allocated_address(::google::fhir::stu3::proto::Address* address);

  // .google.fhir.stu3.proto.Age age = 18;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 18;
  private:
  const ::google::fhir::stu3::proto::Age& _internal_age() const;
  public:
  const ::google::fhir::stu3::proto::Age& age() const;
  ::google::fhir::stu3::proto::Age* release_age();
  ::google::fhir::stu3::proto::Age* mutable_age();
  void set_allocated_age(::google::fhir::stu3::proto::Age* age);

  // .google.fhir.stu3.proto.Annotation annotation = 19;
  bool has_annotation() const;
  void clear_annotation();
  static const int kAnnotationFieldNumber = 19;
  private:
  const ::google::fhir::stu3::proto::Annotation& _internal_annotation() const;
  public:
  const ::google::fhir::stu3::proto::Annotation& annotation() const;
  ::google::fhir::stu3::proto::Annotation* release_annotation();
  ::google::fhir::stu3::proto::Annotation* mutable_annotation();
  void set_allocated_annotation(::google::fhir::stu3::proto::Annotation* annotation);

  // .google.fhir.stu3.proto.Attachment attachment = 20;
  bool has_attachment() const;
  void clear_attachment();
  static const int kAttachmentFieldNumber = 20;
  private:
  const ::google::fhir::stu3::proto::Attachment& _internal_attachment() const;
  public:
  const ::google::fhir::stu3::proto::Attachment& attachment() const;
  ::google::fhir::stu3::proto::Attachment* release_attachment();
  ::google::fhir::stu3::proto::Attachment* mutable_attachment();
  void set_allocated_attachment(::google::fhir::stu3::proto::Attachment* attachment);

  // .google.fhir.stu3.proto.CodeableConcept codeable_concept = 21;
  bool has_codeable_concept() const;
  void clear_codeable_concept();
  static const int kCodeableConceptFieldNumber = 21;
  private:
  const ::google::fhir::stu3::proto::CodeableConcept& _internal_codeable_concept() const;
  public:
  const ::google::fhir::stu3::proto::CodeableConcept& codeable_concept() const;
  ::google::fhir::stu3::proto::CodeableConcept* release_codeable_concept();
  ::google::fhir::stu3::proto::CodeableConcept* mutable_codeable_concept();
  void set_allocated_codeable_concept(::google::fhir::stu3::proto::CodeableConcept* codeable_concept);

  // .google.fhir.stu3.proto.Coding coding = 22;
  bool has_coding() const;
  void clear_coding();
  static const int kCodingFieldNumber = 22;
  private:
  const ::google::fhir::stu3::proto::Coding& _internal_coding() const;
  public:
  const ::google::fhir::stu3::proto::Coding& coding() const;
  ::google::fhir::stu3::proto::Coding* release_coding();
  ::google::fhir::stu3::proto::Coding* mutable_coding();
  void set_allocated_coding(::google::fhir::stu3::proto::Coding* coding);

  // .google.fhir.stu3.proto.ContactPoint contact_point = 23;
  bool has_contact_point() const;
  void clear_contact_point();
  static const int kContactPointFieldNumber = 23;
  private:
  const ::google::fhir::stu3::proto::ContactPoint& _internal_contact_point() const;
  public:
  const ::google::fhir::stu3::proto::ContactPoint& contact_point() const;
  ::google::fhir::stu3::proto::ContactPoint* release_contact_point();
  ::google::fhir::stu3::proto::ContactPoint* mutable_contact_point();
  void set_allocated_contact_point(::google::fhir::stu3::proto::ContactPoint* contact_point);

  // .google.fhir.stu3.proto.Count count = 24;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 24;
  private:
  const ::google::fhir::stu3::proto::Count& _internal_count() const;
  public:
  const ::google::fhir::stu3::proto::Count& count() const;
  ::google::fhir::stu3::proto::Count* release_count();
  ::google::fhir::stu3::proto::Count* mutable_count();
  void set_allocated_count(::google::fhir::stu3::proto::Count* count);

  // .google.fhir.stu3.proto.Distance distance = 25;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 25;
  private:
  const ::google::fhir::stu3::proto::Distance& _internal_distance() const;
  public:
  const ::google::fhir::stu3::proto::Distance& distance() const;
  ::google::fhir::stu3::proto::Distance* release_distance();
  ::google::fhir::stu3::proto::Distance* mutable_distance();
  void set_allocated_distance(::google::fhir::stu3::proto::Distance* distance);

  // .google.fhir.stu3.proto.Duration duration = 26;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 26;
  private:
  const ::google::fhir::stu3::proto::Duration& _internal_duration() const;
  public:
  const ::google::fhir::stu3::proto::Duration& duration() const;
  ::google::fhir::stu3::proto::Duration* release_duration();
  ::google::fhir::stu3::proto::Duration* mutable_duration();
  void set_allocated_duration(::google::fhir::stu3::proto::Duration* duration);

  // .google.fhir.stu3.proto.HumanName human_name = 27;
  bool has_human_name() const;
  void clear_human_name();
  static const int kHumanNameFieldNumber = 27;
  private:
  const ::google::fhir::stu3::proto::HumanName& _internal_human_name() const;
  public:
  const ::google::fhir::stu3::proto::HumanName& human_name() const;
  ::google::fhir::stu3::proto::HumanName* release_human_name();
  ::google::fhir::stu3::proto::HumanName* mutable_human_name();
  void set_allocated_human_name(::google::fhir::stu3::proto::HumanName* human_name);

  // .google.fhir.stu3.proto.Identifier identifier = 28;
  bool has_identifier() const;
  void clear_identifier();
  static const int kIdentifierFieldNumber = 28;
  private:
  const ::google::fhir::stu3::proto::Identifier& _internal_identifier() const;
  public:
  const ::google::fhir::stu3::proto::Identifier& identifier() const;
  ::google::fhir::stu3::proto::Identifier* release_identifier();
  ::google::fhir::stu3::proto::Identifier* mutable_identifier();
  void set_allocated_identifier(::google::fhir::stu3::proto::Identifier* identifier);

  // .google.fhir.stu3.proto.Money money = 29;
  bool has_money() const;
  void clear_money();
  static const int kMoneyFieldNumber = 29;
  private:
  const ::google::fhir::stu3::proto::Money& _internal_money() const;
  public:
  const ::google::fhir::stu3::proto::Money& money() const;
  ::google::fhir::stu3::proto::Money* release_money();
  ::google::fhir::stu3::proto::Money* mutable_money();
  void set_allocated_money(::google::fhir::stu3::proto::Money* money);

  // .google.fhir.stu3.proto.Period period = 30;
  bool has_period() const;
  void clear_period();
  static const int kPeriodFieldNumber = 30;
  private:
  const ::google::fhir::stu3::proto::Period& _internal_period() const;
  public:
  const ::google::fhir::stu3::proto::Period& period() const;
  ::google::fhir::stu3::proto::Period* release_period();
  ::google::fhir::stu3::proto::Period* mutable_period();
  void set_allocated_period(::google::fhir::stu3::proto::Period* period);

  // .google.fhir.stu3.proto.Quantity quantity = 31;
  bool has_quantity() const;
  void clear_quantity();
  static const int kQuantityFieldNumber = 31;
  private:
  const ::google::fhir::stu3::proto::Quantity& _internal_quantity() const;
  public:
  const ::google::fhir::stu3::proto::Quantity& quantity() const;
  ::google::fhir::stu3::proto::Quantity* release_quantity();
  ::google::fhir::stu3::proto::Quantity* mutable_quantity();
  void set_allocated_quantity(::google::fhir::stu3::proto::Quantity* quantity);

  // .google.fhir.stu3.proto.Range range = 32;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 32;
  private:
  const ::google::fhir::stu3::proto::Range& _internal_range() const;
  public:
  const ::google::fhir::stu3::proto::Range& range() const;
  ::google::fhir::stu3::proto::Range* release_range();
  ::google::fhir::stu3::proto::Range* mutable_range();
  void set_allocated_range(::google::fhir::stu3::proto::Range* range);

  // .google.fhir.stu3.proto.Ratio ratio = 33;
  bool has_ratio() const;
  void clear_ratio();
  static const int kRatioFieldNumber = 33;
  private:
  const ::google::fhir::stu3::proto::Ratio& _internal_ratio() const;
  public:
  const ::google::fhir::stu3::proto::Ratio& ratio() const;
  ::google::fhir::stu3::proto::Ratio* release_ratio();
  ::google::fhir::stu3::proto::Ratio* mutable_ratio();
  void set_allocated_ratio(::google::fhir::stu3::proto::Ratio* ratio);

  // .google.fhir.stu3.proto.Reference reference = 34;
  bool has_reference() const;
  void clear_reference();
  static const int kReferenceFieldNumber = 34;
  private:
  const ::google::fhir::stu3::proto::Reference& _internal_reference() const;
  public:
  const ::google::fhir::stu3::proto::Reference& reference() const;
  ::google::fhir::stu3::proto::Reference* release_reference();
  ::google::fhir::stu3::proto::Reference* mutable_reference();
  void set_allocated_reference(::google::fhir::stu3::proto::Reference* reference);

  // .google.fhir.stu3.proto.SampledData sampled_data = 35;
  bool has_sampled_data() const;
  void clear_sampled_data();
  static const int kSampledDataFieldNumber = 35;
  private:
  const ::google::fhir::stu3::proto::SampledData& _internal_sampled_data() const;
  public:
  const ::google::fhir::stu3::proto::SampledData& sampled_data() const;
  ::google::fhir::stu3::proto::SampledData* release_sampled_data();
  ::google::fhir::stu3::proto::SampledData* mutable_sampled_data();
  void set_allocated_sampled_data(::google::fhir::stu3::proto::SampledData* sampled_data);

  // .google.fhir.stu3.proto.Signature signature = 36;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 36;
  private:
  const ::google::fhir::stu3::proto::Signature& _internal_signature() const;
  public:
  const ::google::fhir::stu3::proto::Signature& signature() const;
  ::google::fhir::stu3::proto::Signature* release_signature();
  ::google::fhir::stu3::proto::Signature* mutable_signature();
  void set_allocated_signature(::google::fhir::stu3::proto::Signature* signature);

  // .google.fhir.stu3.proto.Timing timing = 37;
  bool has_timing() const;
  void clear_timing();
  static const int kTimingFieldNumber = 37;
  private:
  const ::google::fhir::stu3::proto::Timing& _internal_timing() const;
  public:
  const ::google::fhir::stu3::proto::Timing& timing() const;
  ::google::fhir::stu3::proto::Timing* release_timing();
  ::google::fhir::stu3::proto::Timing* mutable_timing();
  void set_allocated_timing(::google::fhir::stu3::proto::Timing* timing);

  // .google.fhir.stu3.proto.Meta meta = 38;
  bool has_meta() const;
  void clear_meta();
  static const int kMetaFieldNumber = 38;
  private:
  const ::google::fhir::stu3::proto::Meta& _internal_meta() const;
  public:
  const ::google::fhir::stu3::proto::Meta& meta() const;
  ::google::fhir::stu3::proto::Meta* release_meta();
  ::google::fhir::stu3::proto::Meta* mutable_meta();
  void set_allocated_meta(::google::fhir::stu3::proto::Meta* meta);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Extension.Value)
 private:
  void set_has_base64_binary();
  void set_has_boolean();
  void set_has_code();
  void set_has_date();
  void set_has_date_time();
  void set_has_decimal();
  void set_has_id();
  void set_has_instant();
  void set_has_integer();
  void set_has_markdown();
  void set_has_oid();
  void set_has_positive_int();
  void set_has_string_value();
  void set_has_time();
  void set_has_unsigned_int();
  void set_has_uri();
  void set_has_address();
  void set_has_age();
  void set_has_annotation();
  void set_has_attachment();
  void set_has_codeable_concept();
  void set_has_coding();
  void set_has_contact_point();
  void set_has_count();
  void set_has_distance();
  void set_has_duration();
  void set_has_human_name();
  void set_has_identifier();
  void set_has_money();
  void set_has_period();
  void set_has_quantity();
  void set_has_range();
  void set_has_ratio();
  void set_has_reference();
  void set_has_sampled_data();
  void set_has_signature();
  void set_has_timing();
  void set_has_meta();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::google::fhir::stu3::proto::Base64Binary* base64_binary_;
    ::google::fhir::stu3::proto::Boolean* boolean_;
    ::google::fhir::stu3::proto::Code* code_;
    ::google::fhir::stu3::proto::Date* date_;
    ::google::fhir::stu3::proto::DateTime* date_time_;
    ::google::fhir::stu3::proto::Decimal* decimal_;
    ::google::fhir::stu3::proto::Id* id_;
    ::google::fhir::stu3::proto::Instant* instant_;
    ::google::fhir::stu3::proto::Integer* integer_;
    ::google::fhir::stu3::proto::Markdown* markdown_;
    ::google::fhir::stu3::proto::Oid* oid_;
    ::google::fhir::stu3::proto::PositiveInt* positive_int_;
    ::google::fhir::stu3::proto::String* string_value_;
    ::google::fhir::stu3::proto::Time* time_;
    ::google::fhir::stu3::proto::UnsignedInt* unsigned_int_;
    ::google::fhir::stu3::proto::Uri* uri_;
    ::google::fhir::stu3::proto::Address* address_;
    ::google::fhir::stu3::proto::Age* age_;
    ::google::fhir::stu3::proto::Annotation* annotation_;
    ::google::fhir::stu3::proto::Attachment* attachment_;
    ::google::fhir::stu3::proto::CodeableConcept* codeable_concept_;
    ::google::fhir::stu3::proto::Coding* coding_;
    ::google::fhir::stu3::proto::ContactPoint* contact_point_;
    ::google::fhir::stu3::proto::Count* count_;
    ::google::fhir::stu3::proto::Distance* distance_;
    ::google::fhir::stu3::proto::Duration* duration_;
    ::google::fhir::stu3::proto::HumanName* human_name_;
    ::google::fhir::stu3::proto::Identifier* identifier_;
    ::google::fhir::stu3::proto::Money* money_;
    ::google::fhir::stu3::proto::Period* period_;
    ::google::fhir::stu3::proto::Quantity* quantity_;
    ::google::fhir::stu3::proto::Range* range_;
    ::google::fhir::stu3::proto::Ratio* ratio_;
    ::google::fhir::stu3::proto::Reference* reference_;
    ::google::fhir::stu3::proto::SampledData* sampled_data_;
    ::google::fhir::stu3::proto::Signature* signature_;
    ::google::fhir::stu3::proto::Timing* timing_;
    ::google::fhir::stu3::proto::Meta* meta_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Extension : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Extension) */ {
 public:
  Extension();
  virtual ~Extension();

  Extension(const Extension& from);

  inline Extension& operator=(const Extension& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Extension(Extension&& from) noexcept
    : Extension() {
    *this = ::std::move(from);
  }

  inline Extension& operator=(Extension&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Extension& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Extension* internal_default_instance() {
    return reinterpret_cast<const Extension*>(
               &_Extension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(Extension* other);
  friend void swap(Extension& a, Extension& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Extension* New() const final {
    return CreateMaybeMessage<Extension>(NULL);
  }

  Extension* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Extension>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Extension& from);
  void MergeFrom(const Extension& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extension* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Extension_Value Value;

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 4;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 4;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Uri url = 2 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
  bool has_url() const;
  void clear_url();
  static const int kUrlFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::Uri& _internal_url() const;
  public:
  const ::google::fhir::stu3::proto::Uri& url() const;
  ::google::fhir::stu3::proto::Uri* release_url();
  ::google::fhir::stu3::proto::Uri* mutable_url();
  void set_allocated_url(::google::fhir::stu3::proto::Uri* url);

  // .google.fhir.stu3.proto.Extension.Value value = 3 [(.google.fhir.stu3.proto.is_choice_type) = true];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::Extension_Value& _internal_value() const;
  public:
  const ::google::fhir::stu3::proto::Extension_Value& value() const;
  ::google::fhir::stu3::proto::Extension_Value* release_value();
  ::google::fhir::stu3::proto::Extension_Value* mutable_value();
  void set_allocated_value(::google::fhir::stu3::proto::Extension_Value* value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Extension)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Uri* url_;
  ::google::fhir::stu3::proto::Extension_Value* value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodingWithFixedSystem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodingWithFixedSystem) */ {
 public:
  CodingWithFixedSystem();
  virtual ~CodingWithFixedSystem();

  CodingWithFixedSystem(const CodingWithFixedSystem& from);

  inline CodingWithFixedSystem& operator=(const CodingWithFixedSystem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodingWithFixedSystem(CodingWithFixedSystem&& from) noexcept
    : CodingWithFixedSystem() {
    *this = ::std::move(from);
  }

  inline CodingWithFixedSystem& operator=(CodingWithFixedSystem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodingWithFixedSystem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodingWithFixedSystem* internal_default_instance() {
    return reinterpret_cast<const CodingWithFixedSystem*>(
               &_CodingWithFixedSystem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(CodingWithFixedSystem* other);
  friend void swap(CodingWithFixedSystem& a, CodingWithFixedSystem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodingWithFixedSystem* New() const final {
    return CreateMaybeMessage<CodingWithFixedSystem>(NULL);
  }

  CodingWithFixedSystem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodingWithFixedSystem>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodingWithFixedSystem& from);
  void MergeFrom(const CodingWithFixedSystem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodingWithFixedSystem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String version = 4;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::String& _internal_version() const;
  public:
  const ::google::fhir::stu3::proto::String& version() const;
  ::google::fhir::stu3::proto::String* release_version();
  ::google::fhir::stu3::proto::String* mutable_version();
  void set_allocated_version(::google::fhir::stu3::proto::String* version);

  // .google.fhir.stu3.proto.Code code = 5;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::Code& _internal_code() const;
  public:
  const ::google::fhir::stu3::proto::Code& code() const;
  ::google::fhir::stu3::proto::Code* release_code();
  ::google::fhir::stu3::proto::Code* mutable_code();
  void set_allocated_code(::google::fhir::stu3::proto::Code* code);

  // .google.fhir.stu3.proto.String display = 6;
  bool has_display() const;
  void clear_display();
  static const int kDisplayFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::String& _internal_display() const;
  public:
  const ::google::fhir::stu3::proto::String& display() const;
  ::google::fhir::stu3::proto::String* release_display();
  ::google::fhir::stu3::proto::String* mutable_display();
  void set_allocated_display(::google::fhir::stu3::proto::String* display);

  // .google.fhir.stu3.proto.Boolean user_selected = 7;
  bool has_user_selected() const;
  void clear_user_selected();
  static const int kUserSelectedFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_user_selected() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& user_selected() const;
  ::google::fhir::stu3::proto::Boolean* release_user_selected();
  ::google::fhir::stu3::proto::Boolean* mutable_user_selected();
  void set_allocated_user_selected(::google::fhir::stu3::proto::Boolean* user_selected);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodingWithFixedSystem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* version_;
  ::google::fhir::stu3::proto::Code* code_;
  ::google::fhir::stu3::proto::String* display_;
  ::google::fhir::stu3::proto::Boolean* user_selected_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CodingWithFixedCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.CodingWithFixedCode) */ {
 public:
  CodingWithFixedCode();
  virtual ~CodingWithFixedCode();

  CodingWithFixedCode(const CodingWithFixedCode& from);

  inline CodingWithFixedCode& operator=(const CodingWithFixedCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CodingWithFixedCode(CodingWithFixedCode&& from) noexcept
    : CodingWithFixedCode() {
    *this = ::std::move(from);
  }

  inline CodingWithFixedCode& operator=(CodingWithFixedCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CodingWithFixedCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CodingWithFixedCode* internal_default_instance() {
    return reinterpret_cast<const CodingWithFixedCode*>(
               &_CodingWithFixedCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(CodingWithFixedCode* other);
  friend void swap(CodingWithFixedCode& a, CodingWithFixedCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CodingWithFixedCode* New() const final {
    return CreateMaybeMessage<CodingWithFixedCode>(NULL);
  }

  CodingWithFixedCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CodingWithFixedCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CodingWithFixedCode& from);
  void MergeFrom(const CodingWithFixedCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CodingWithFixedCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.String version = 4;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::String& _internal_version() const;
  public:
  const ::google::fhir::stu3::proto::String& version() const;
  ::google::fhir::stu3::proto::String* release_version();
  ::google::fhir::stu3::proto::String* mutable_version();
  void set_allocated_version(::google::fhir::stu3::proto::String* version);

  // .google.fhir.stu3.proto.String display = 6;
  bool has_display() const;
  void clear_display();
  static const int kDisplayFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::String& _internal_display() const;
  public:
  const ::google::fhir::stu3::proto::String& display() const;
  ::google::fhir::stu3::proto::String* release_display();
  ::google::fhir::stu3::proto::String* mutable_display();
  void set_allocated_display(::google::fhir::stu3::proto::String* display);

  // .google.fhir.stu3.proto.Boolean user_selected = 7;
  bool has_user_selected() const;
  void clear_user_selected();
  static const int kUserSelectedFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::Boolean& _internal_user_selected() const;
  public:
  const ::google::fhir::stu3::proto::Boolean& user_selected() const;
  ::google::fhir::stu3::proto::Boolean* release_user_selected();
  ::google::fhir::stu3::proto::Boolean* mutable_user_selected();
  void set_allocated_user_selected(::google::fhir::stu3::proto::Boolean* user_selected);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.CodingWithFixedCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::String* version_;
  ::google::fhir::stu3::proto::String* display_;
  ::google::fhir::stu3::proto::Boolean* user_selected_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Reference : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.Reference) */ {
 public:
  Reference();
  virtual ~Reference();

  Reference(const Reference& from);

  inline Reference& operator=(const Reference& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reference(Reference&& from) noexcept
    : Reference() {
    *this = ::std::move(from);
  }

  inline Reference& operator=(Reference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Reference& default_instance();

  enum ReferenceCase {
    kUri = 3,
    kFragment = 4,
    kAccountId = 5,
    kActivityDefinitionId = 6,
    kAdverseEventId = 7,
    kAllergyIntoleranceId = 8,
    kAppointmentId = 9,
    kAppointmentResponseId = 10,
    kAuditEventId = 11,
    kBasicId = 12,
    kBinaryId = 13,
    kBodySiteId = 14,
    kBundleId = 15,
    kCapabilityStatementId = 16,
    kCarePlanId = 17,
    kCareTeamId = 18,
    kChargeItemId = 19,
    kClaimId = 20,
    kClaimResponseId = 21,
    kClinicalImpressionId = 22,
    kCodeSystemId = 23,
    kCommunicationId = 24,
    kCommunicationRequestId = 25,
    kCompartmentDefinitionId = 26,
    kCompositionId = 27,
    kConceptMapId = 28,
    kConditionId = 29,
    kConsentId = 30,
    kContractId = 31,
    kCoverageId = 32,
    kDataElementId = 33,
    kDetectedIssueId = 34,
    kDeviceId = 35,
    kDeviceComponentId = 36,
    kDeviceMetricId = 37,
    kDeviceRequestId = 38,
    kDeviceUseStatementId = 39,
    kDiagnosticReportId = 40,
    kDocumentManifestId = 41,
    kDocumentReferenceId = 42,
    kEligibilityRequestId = 43,
    kEligibilityResponseId = 44,
    kEncounterId = 45,
    kEndpointId = 46,
    kEnrollmentRequestId = 47,
    kEnrollmentResponseId = 48,
    kEpisodeOfCareId = 49,
    kExpansionProfileId = 50,
    kExplanationOfBenefitId = 51,
    kFamilyMemberHistoryId = 52,
    kFlagId = 53,
    kGoalId = 54,
    kGraphDefinitionId = 55,
    kGroupId = 56,
    kGuidanceResponseId = 57,
    kHealthcareServiceId = 58,
    kImagingManifestId = 59,
    kImagingStudyId = 60,
    kImmunizationId = 61,
    kImmunizationRecommendationId = 62,
    kImplementationGuideId = 63,
    kLibraryId = 64,
    kLinkageId = 65,
    kListId = 66,
    kLocationId = 67,
    kMeasureId = 68,
    kMeasureReportId = 69,
    kMediaId = 70,
    kMedicationId = 71,
    kMedicationAdministrationId = 72,
    kMedicationDispenseId = 73,
    kMedicationRequestId = 74,
    kMedicationStatementId = 75,
    kMessageDefinitionId = 76,
    kMessageHeaderId = 77,
    kNamingSystemId = 78,
    kNutritionOrderId = 79,
    kObservationId = 80,
    kOperationDefinitionId = 81,
    kOperationOutcomeId = 82,
    kOrganizationId = 83,
    kParametersId = 84,
    kPatientId = 85,
    kPaymentNoticeId = 86,
    kPaymentReconciliationId = 87,
    kPersonId = 88,
    kPlanDefinitionId = 89,
    kPractitionerId = 90,
    kPractitionerRoleId = 91,
    kProcedureId = 92,
    kProcedureRequestId = 93,
    kProcessRequestId = 94,
    kProcessResponseId = 95,
    kProvenanceId = 96,
    kQuestionnaireId = 97,
    kQuestionnaireResponseId = 98,
    kReferralRequestId = 99,
    kRelatedPersonId = 100,
    kRequestGroupId = 101,
    kResearchStudyId = 102,
    kResearchSubjectId = 103,
    kRiskAssessmentId = 104,
    kScheduleId = 105,
    kSearchParameterId = 106,
    kSequenceId = 107,
    kServiceDefinitionId = 108,
    kSlotId = 109,
    kSpecimenId = 110,
    kStructureDefinitionId = 111,
    kStructureMapId = 112,
    kSubscriptionId = 113,
    kSubstanceId = 114,
    kSupplyDeliveryId = 115,
    kSupplyRequestId = 116,
    kTaskId = 117,
    kTestReportId = 118,
    kTestScriptId = 119,
    kValueSetId = 120,
    kVisionPrescriptionId = 121,
    REFERENCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reference* internal_default_instance() {
    return reinterpret_cast<const Reference*>(
               &_Reference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(Reference* other);
  friend void swap(Reference& a, Reference& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reference* New() const final {
    return CreateMaybeMessage<Reference>(NULL);
  }

  Reference* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Reference>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Reference& from);
  void MergeFrom(const Reference& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reference* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 2;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 2;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.Identifier identifier = 122;
  bool has_identifier() const;
  void clear_identifier();
  static const int kIdentifierFieldNumber = 122;
  private:
  const ::google::fhir::stu3::proto::Identifier& _internal_identifier() const;
  public:
  const ::google::fhir::stu3::proto::Identifier& identifier() const;
  ::google::fhir::stu3::proto::Identifier* release_identifier();
  ::google::fhir::stu3::proto::Identifier* mutable_identifier();
  void set_allocated_identifier(::google::fhir::stu3::proto::Identifier* identifier);

  // .google.fhir.stu3.proto.String display = 123;
  bool has_display() const;
  void clear_display();
  static const int kDisplayFieldNumber = 123;
  private:
  const ::google::fhir::stu3::proto::String& _internal_display() const;
  public:
  const ::google::fhir::stu3::proto::String& display() const;
  ::google::fhir::stu3::proto::String* release_display();
  ::google::fhir::stu3::proto::String* mutable_display();
  void set_allocated_display(::google::fhir::stu3::proto::String* display);

  // .google.fhir.stu3.proto.String uri = 3[json_name = "reference"];
  bool has_uri() const;
  void clear_uri();
  static const int kUriFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_uri() const;
  public:
  const ::google::fhir::stu3::proto::String& uri() const;
  ::google::fhir::stu3::proto::String* release_uri();
  ::google::fhir::stu3::proto::String* mutable_uri();
  void set_allocated_uri(::google::fhir::stu3::proto::String* uri);

  // .google.fhir.stu3.proto.String fragment = 4;
  bool has_fragment() const;
  void clear_fragment();
  static const int kFragmentFieldNumber = 4;
  private:
  const ::google::fhir::stu3::proto::String& _internal_fragment() const;
  public:
  const ::google::fhir::stu3::proto::String& fragment() const;
  ::google::fhir::stu3::proto::String* release_fragment();
  ::google::fhir::stu3::proto::String* mutable_fragment();
  void set_allocated_fragment(::google::fhir::stu3::proto::String* fragment);

  // .google.fhir.stu3.proto.ReferenceId account_id = 5;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 5;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_account_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& account_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_account_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_account_id();
  void set_allocated_account_id(::google::fhir::stu3::proto::ReferenceId* account_id);

  // .google.fhir.stu3.proto.ReferenceId activity_definition_id = 6;
  bool has_activity_definition_id() const;
  void clear_activity_definition_id();
  static const int kActivityDefinitionIdFieldNumber = 6;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_activity_definition_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& activity_definition_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_activity_definition_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_activity_definition_id();
  void set_allocated_activity_definition_id(::google::fhir::stu3::proto::ReferenceId* activity_definition_id);

  // .google.fhir.stu3.proto.ReferenceId adverse_event_id = 7;
  bool has_adverse_event_id() const;
  void clear_adverse_event_id();
  static const int kAdverseEventIdFieldNumber = 7;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_adverse_event_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& adverse_event_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_adverse_event_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_adverse_event_id();
  void set_allocated_adverse_event_id(::google::fhir::stu3::proto::ReferenceId* adverse_event_id);

  // .google.fhir.stu3.proto.ReferenceId allergy_intolerance_id = 8;
  bool has_allergy_intolerance_id() const;
  void clear_allergy_intolerance_id();
  static const int kAllergyIntoleranceIdFieldNumber = 8;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_allergy_intolerance_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& allergy_intolerance_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_allergy_intolerance_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_allergy_intolerance_id();
  void set_allocated_allergy_intolerance_id(::google::fhir::stu3::proto::ReferenceId* allergy_intolerance_id);

  // .google.fhir.stu3.proto.ReferenceId appointment_id = 9;
  bool has_appointment_id() const;
  void clear_appointment_id();
  static const int kAppointmentIdFieldNumber = 9;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_appointment_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& appointment_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_appointment_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_appointment_id();
  void set_allocated_appointment_id(::google::fhir::stu3::proto::ReferenceId* appointment_id);

  // .google.fhir.stu3.proto.ReferenceId appointment_response_id = 10;
  bool has_appointment_response_id() const;
  void clear_appointment_response_id();
  static const int kAppointmentResponseIdFieldNumber = 10;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_appointment_response_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& appointment_response_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_appointment_response_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_appointment_response_id();
  void set_allocated_appointment_response_id(::google::fhir::stu3::proto::ReferenceId* appointment_response_id);

  // .google.fhir.stu3.proto.ReferenceId audit_event_id = 11;
  bool has_audit_event_id() const;
  void clear_audit_event_id();
  static const int kAuditEventIdFieldNumber = 11;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_audit_event_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& audit_event_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_audit_event_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_audit_event_id();
  void set_allocated_audit_event_id(::google::fhir::stu3::proto::ReferenceId* audit_event_id);

  // .google.fhir.stu3.proto.ReferenceId basic_id = 12;
  bool has_basic_id() const;
  void clear_basic_id();
  static const int kBasicIdFieldNumber = 12;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_basic_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& basic_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_basic_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_basic_id();
  void set_allocated_basic_id(::google::fhir::stu3::proto::ReferenceId* basic_id);

  // .google.fhir.stu3.proto.ReferenceId binary_id = 13;
  bool has_binary_id() const;
  void clear_binary_id();
  static const int kBinaryIdFieldNumber = 13;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_binary_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& binary_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_binary_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_binary_id();
  void set_allocated_binary_id(::google::fhir::stu3::proto::ReferenceId* binary_id);

  // .google.fhir.stu3.proto.ReferenceId body_site_id = 14;
  bool has_body_site_id() const;
  void clear_body_site_id();
  static const int kBodySiteIdFieldNumber = 14;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_body_site_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& body_site_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_body_site_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_body_site_id();
  void set_allocated_body_site_id(::google::fhir::stu3::proto::ReferenceId* body_site_id);

  // .google.fhir.stu3.proto.ReferenceId bundle_id = 15;
  bool has_bundle_id() const;
  void clear_bundle_id();
  static const int kBundleIdFieldNumber = 15;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_bundle_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& bundle_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_bundle_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_bundle_id();
  void set_allocated_bundle_id(::google::fhir::stu3::proto::ReferenceId* bundle_id);

  // .google.fhir.stu3.proto.ReferenceId capability_statement_id = 16;
  bool has_capability_statement_id() const;
  void clear_capability_statement_id();
  static const int kCapabilityStatementIdFieldNumber = 16;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_capability_statement_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& capability_statement_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_capability_statement_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_capability_statement_id();
  void set_allocated_capability_statement_id(::google::fhir::stu3::proto::ReferenceId* capability_statement_id);

  // .google.fhir.stu3.proto.ReferenceId care_plan_id = 17;
  bool has_care_plan_id() const;
  void clear_care_plan_id();
  static const int kCarePlanIdFieldNumber = 17;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_care_plan_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& care_plan_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_care_plan_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_care_plan_id();
  void set_allocated_care_plan_id(::google::fhir::stu3::proto::ReferenceId* care_plan_id);

  // .google.fhir.stu3.proto.ReferenceId care_team_id = 18;
  bool has_care_team_id() const;
  void clear_care_team_id();
  static const int kCareTeamIdFieldNumber = 18;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_care_team_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& care_team_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_care_team_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_care_team_id();
  void set_allocated_care_team_id(::google::fhir::stu3::proto::ReferenceId* care_team_id);

  // .google.fhir.stu3.proto.ReferenceId charge_item_id = 19;
  bool has_charge_item_id() const;
  void clear_charge_item_id();
  static const int kChargeItemIdFieldNumber = 19;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_charge_item_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& charge_item_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_charge_item_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_charge_item_id();
  void set_allocated_charge_item_id(::google::fhir::stu3::proto::ReferenceId* charge_item_id);

  // .google.fhir.stu3.proto.ReferenceId claim_id = 20;
  bool has_claim_id() const;
  void clear_claim_id();
  static const int kClaimIdFieldNumber = 20;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_claim_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& claim_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_claim_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_claim_id();
  void set_allocated_claim_id(::google::fhir::stu3::proto::ReferenceId* claim_id);

  // .google.fhir.stu3.proto.ReferenceId claim_response_id = 21;
  bool has_claim_response_id() const;
  void clear_claim_response_id();
  static const int kClaimResponseIdFieldNumber = 21;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_claim_response_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& claim_response_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_claim_response_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_claim_response_id();
  void set_allocated_claim_response_id(::google::fhir::stu3::proto::ReferenceId* claim_response_id);

  // .google.fhir.stu3.proto.ReferenceId clinical_impression_id = 22;
  bool has_clinical_impression_id() const;
  void clear_clinical_impression_id();
  static const int kClinicalImpressionIdFieldNumber = 22;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_clinical_impression_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& clinical_impression_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_clinical_impression_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_clinical_impression_id();
  void set_allocated_clinical_impression_id(::google::fhir::stu3::proto::ReferenceId* clinical_impression_id);

  // .google.fhir.stu3.proto.ReferenceId code_system_id = 23;
  bool has_code_system_id() const;
  void clear_code_system_id();
  static const int kCodeSystemIdFieldNumber = 23;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_code_system_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& code_system_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_code_system_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_code_system_id();
  void set_allocated_code_system_id(::google::fhir::stu3::proto::ReferenceId* code_system_id);

  // .google.fhir.stu3.proto.ReferenceId communication_id = 24;
  bool has_communication_id() const;
  void clear_communication_id();
  static const int kCommunicationIdFieldNumber = 24;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_communication_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& communication_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_communication_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_communication_id();
  void set_allocated_communication_id(::google::fhir::stu3::proto::ReferenceId* communication_id);

  // .google.fhir.stu3.proto.ReferenceId communication_request_id = 25;
  bool has_communication_request_id() const;
  void clear_communication_request_id();
  static const int kCommunicationRequestIdFieldNumber = 25;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_communication_request_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& communication_request_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_communication_request_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_communication_request_id();
  void set_allocated_communication_request_id(::google::fhir::stu3::proto::ReferenceId* communication_request_id);

  // .google.fhir.stu3.proto.ReferenceId compartment_definition_id = 26;
  bool has_compartment_definition_id() const;
  void clear_compartment_definition_id();
  static const int kCompartmentDefinitionIdFieldNumber = 26;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_compartment_definition_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& compartment_definition_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_compartment_definition_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_compartment_definition_id();
  void set_allocated_compartment_definition_id(::google::fhir::stu3::proto::ReferenceId* compartment_definition_id);

  // .google.fhir.stu3.proto.ReferenceId composition_id = 27;
  bool has_composition_id() const;
  void clear_composition_id();
  static const int kCompositionIdFieldNumber = 27;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_composition_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& composition_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_composition_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_composition_id();
  void set_allocated_composition_id(::google::fhir::stu3::proto::ReferenceId* composition_id);

  // .google.fhir.stu3.proto.ReferenceId concept_map_id = 28;
  bool has_concept_map_id() const;
  void clear_concept_map_id();
  static const int kConceptMapIdFieldNumber = 28;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_concept_map_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& concept_map_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_concept_map_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_concept_map_id();
  void set_allocated_concept_map_id(::google::fhir::stu3::proto::ReferenceId* concept_map_id);

  // .google.fhir.stu3.proto.ReferenceId condition_id = 29;
  bool has_condition_id() const;
  void clear_condition_id();
  static const int kConditionIdFieldNumber = 29;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_condition_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& condition_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_condition_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_condition_id();
  void set_allocated_condition_id(::google::fhir::stu3::proto::ReferenceId* condition_id);

  // .google.fhir.stu3.proto.ReferenceId consent_id = 30;
  bool has_consent_id() const;
  void clear_consent_id();
  static const int kConsentIdFieldNumber = 30;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_consent_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& consent_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_consent_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_consent_id();
  void set_allocated_consent_id(::google::fhir::stu3::proto::ReferenceId* consent_id);

  // .google.fhir.stu3.proto.ReferenceId contract_id = 31;
  bool has_contract_id() const;
  void clear_contract_id();
  static const int kContractIdFieldNumber = 31;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_contract_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& contract_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_contract_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_contract_id();
  void set_allocated_contract_id(::google::fhir::stu3::proto::ReferenceId* contract_id);

  // .google.fhir.stu3.proto.ReferenceId coverage_id = 32;
  bool has_coverage_id() const;
  void clear_coverage_id();
  static const int kCoverageIdFieldNumber = 32;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_coverage_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& coverage_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_coverage_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_coverage_id();
  void set_allocated_coverage_id(::google::fhir::stu3::proto::ReferenceId* coverage_id);

  // .google.fhir.stu3.proto.ReferenceId data_element_id = 33;
  bool has_data_element_id() const;
  void clear_data_element_id();
  static const int kDataElementIdFieldNumber = 33;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_data_element_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& data_element_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_data_element_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_data_element_id();
  void set_allocated_data_element_id(::google::fhir::stu3::proto::ReferenceId* data_element_id);

  // .google.fhir.stu3.proto.ReferenceId detected_issue_id = 34;
  bool has_detected_issue_id() const;
  void clear_detected_issue_id();
  static const int kDetectedIssueIdFieldNumber = 34;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_detected_issue_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& detected_issue_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_detected_issue_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_detected_issue_id();
  void set_allocated_detected_issue_id(::google::fhir::stu3::proto::ReferenceId* detected_issue_id);

  // .google.fhir.stu3.proto.ReferenceId device_id = 35;
  bool has_device_id() const;
  void clear_device_id();
  static const int kDeviceIdFieldNumber = 35;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_device_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& device_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_device_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_device_id();
  void set_allocated_device_id(::google::fhir::stu3::proto::ReferenceId* device_id);

  // .google.fhir.stu3.proto.ReferenceId device_component_id = 36;
  bool has_device_component_id() const;
  void clear_device_component_id();
  static const int kDeviceComponentIdFieldNumber = 36;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_device_component_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& device_component_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_device_component_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_device_component_id();
  void set_allocated_device_component_id(::google::fhir::stu3::proto::ReferenceId* device_component_id);

  // .google.fhir.stu3.proto.ReferenceId device_metric_id = 37;
  bool has_device_metric_id() const;
  void clear_device_metric_id();
  static const int kDeviceMetricIdFieldNumber = 37;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_device_metric_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& device_metric_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_device_metric_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_device_metric_id();
  void set_allocated_device_metric_id(::google::fhir::stu3::proto::ReferenceId* device_metric_id);

  // .google.fhir.stu3.proto.ReferenceId device_request_id = 38;
  bool has_device_request_id() const;
  void clear_device_request_id();
  static const int kDeviceRequestIdFieldNumber = 38;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_device_request_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& device_request_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_device_request_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_device_request_id();
  void set_allocated_device_request_id(::google::fhir::stu3::proto::ReferenceId* device_request_id);

  // .google.fhir.stu3.proto.ReferenceId device_use_statement_id = 39;
  bool has_device_use_statement_id() const;
  void clear_device_use_statement_id();
  static const int kDeviceUseStatementIdFieldNumber = 39;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_device_use_statement_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& device_use_statement_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_device_use_statement_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_device_use_statement_id();
  void set_allocated_device_use_statement_id(::google::fhir::stu3::proto::ReferenceId* device_use_statement_id);

  // .google.fhir.stu3.proto.ReferenceId diagnostic_report_id = 40;
  bool has_diagnostic_report_id() const;
  void clear_diagnostic_report_id();
  static const int kDiagnosticReportIdFieldNumber = 40;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_diagnostic_report_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& diagnostic_report_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_diagnostic_report_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_diagnostic_report_id();
  void set_allocated_diagnostic_report_id(::google::fhir::stu3::proto::ReferenceId* diagnostic_report_id);

  // .google.fhir.stu3.proto.ReferenceId document_manifest_id = 41;
  bool has_document_manifest_id() const;
  void clear_document_manifest_id();
  static const int kDocumentManifestIdFieldNumber = 41;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_document_manifest_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& document_manifest_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_document_manifest_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_document_manifest_id();
  void set_allocated_document_manifest_id(::google::fhir::stu3::proto::ReferenceId* document_manifest_id);

  // .google.fhir.stu3.proto.ReferenceId document_reference_id = 42;
  bool has_document_reference_id() const;
  void clear_document_reference_id();
  static const int kDocumentReferenceIdFieldNumber = 42;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_document_reference_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& document_reference_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_document_reference_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_document_reference_id();
  void set_allocated_document_reference_id(::google::fhir::stu3::proto::ReferenceId* document_reference_id);

  // .google.fhir.stu3.proto.ReferenceId eligibility_request_id = 43;
  bool has_eligibility_request_id() const;
  void clear_eligibility_request_id();
  static const int kEligibilityRequestIdFieldNumber = 43;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_eligibility_request_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& eligibility_request_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_eligibility_request_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_eligibility_request_id();
  void set_allocated_eligibility_request_id(::google::fhir::stu3::proto::ReferenceId* eligibility_request_id);

  // .google.fhir.stu3.proto.ReferenceId eligibility_response_id = 44;
  bool has_eligibility_response_id() const;
  void clear_eligibility_response_id();
  static const int kEligibilityResponseIdFieldNumber = 44;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_eligibility_response_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& eligibility_response_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_eligibility_response_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_eligibility_response_id();
  void set_allocated_eligibility_response_id(::google::fhir::stu3::proto::ReferenceId* eligibility_response_id);

  // .google.fhir.stu3.proto.ReferenceId encounter_id = 45;
  bool has_encounter_id() const;
  void clear_encounter_id();
  static const int kEncounterIdFieldNumber = 45;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_encounter_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& encounter_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_encounter_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_encounter_id();
  void set_allocated_encounter_id(::google::fhir::stu3::proto::ReferenceId* encounter_id);

  // .google.fhir.stu3.proto.ReferenceId endpoint_id = 46;
  bool has_endpoint_id() const;
  void clear_endpoint_id();
  static const int kEndpointIdFieldNumber = 46;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_endpoint_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& endpoint_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_endpoint_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_endpoint_id();
  void set_allocated_endpoint_id(::google::fhir::stu3::proto::ReferenceId* endpoint_id);

  // .google.fhir.stu3.proto.ReferenceId enrollment_request_id = 47;
  bool has_enrollment_request_id() const;
  void clear_enrollment_request_id();
  static const int kEnrollmentRequestIdFieldNumber = 47;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_enrollment_request_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& enrollment_request_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_enrollment_request_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_enrollment_request_id();
  void set_allocated_enrollment_request_id(::google::fhir::stu3::proto::ReferenceId* enrollment_request_id);

  // .google.fhir.stu3.proto.ReferenceId enrollment_response_id = 48;
  bool has_enrollment_response_id() const;
  void clear_enrollment_response_id();
  static const int kEnrollmentResponseIdFieldNumber = 48;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_enrollment_response_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& enrollment_response_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_enrollment_response_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_enrollment_response_id();
  void set_allocated_enrollment_response_id(::google::fhir::stu3::proto::ReferenceId* enrollment_response_id);

  // .google.fhir.stu3.proto.ReferenceId episode_of_care_id = 49;
  bool has_episode_of_care_id() const;
  void clear_episode_of_care_id();
  static const int kEpisodeOfCareIdFieldNumber = 49;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_episode_of_care_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& episode_of_care_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_episode_of_care_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_episode_of_care_id();
  void set_allocated_episode_of_care_id(::google::fhir::stu3::proto::ReferenceId* episode_of_care_id);

  // .google.fhir.stu3.proto.ReferenceId expansion_profile_id = 50;
  bool has_expansion_profile_id() const;
  void clear_expansion_profile_id();
  static const int kExpansionProfileIdFieldNumber = 50;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_expansion_profile_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& expansion_profile_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_expansion_profile_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_expansion_profile_id();
  void set_allocated_expansion_profile_id(::google::fhir::stu3::proto::ReferenceId* expansion_profile_id);

  // .google.fhir.stu3.proto.ReferenceId explanation_of_benefit_id = 51;
  bool has_explanation_of_benefit_id() const;
  void clear_explanation_of_benefit_id();
  static const int kExplanationOfBenefitIdFieldNumber = 51;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_explanation_of_benefit_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& explanation_of_benefit_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_explanation_of_benefit_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_explanation_of_benefit_id();
  void set_allocated_explanation_of_benefit_id(::google::fhir::stu3::proto::ReferenceId* explanation_of_benefit_id);

  // .google.fhir.stu3.proto.ReferenceId family_member_history_id = 52;
  bool has_family_member_history_id() const;
  void clear_family_member_history_id();
  static const int kFamilyMemberHistoryIdFieldNumber = 52;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_family_member_history_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& family_member_history_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_family_member_history_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_family_member_history_id();
  void set_allocated_family_member_history_id(::google::fhir::stu3::proto::ReferenceId* family_member_history_id);

  // .google.fhir.stu3.proto.ReferenceId flag_id = 53;
  bool has_flag_id() const;
  void clear_flag_id();
  static const int kFlagIdFieldNumber = 53;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_flag_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& flag_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_flag_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_flag_id();
  void set_allocated_flag_id(::google::fhir::stu3::proto::ReferenceId* flag_id);

  // .google.fhir.stu3.proto.ReferenceId goal_id = 54;
  bool has_goal_id() const;
  void clear_goal_id();
  static const int kGoalIdFieldNumber = 54;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_goal_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& goal_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_goal_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_goal_id();
  void set_allocated_goal_id(::google::fhir::stu3::proto::ReferenceId* goal_id);

  // .google.fhir.stu3.proto.ReferenceId graph_definition_id = 55;
  bool has_graph_definition_id() const;
  void clear_graph_definition_id();
  static const int kGraphDefinitionIdFieldNumber = 55;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_graph_definition_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& graph_definition_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_graph_definition_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_graph_definition_id();
  void set_allocated_graph_definition_id(::google::fhir::stu3::proto::ReferenceId* graph_definition_id);

  // .google.fhir.stu3.proto.ReferenceId group_id = 56;
  bool has_group_id() const;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 56;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_group_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& group_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_group_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_group_id();
  void set_allocated_group_id(::google::fhir::stu3::proto::ReferenceId* group_id);

  // .google.fhir.stu3.proto.ReferenceId guidance_response_id = 57;
  bool has_guidance_response_id() const;
  void clear_guidance_response_id();
  static const int kGuidanceResponseIdFieldNumber = 57;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_guidance_response_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& guidance_response_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_guidance_response_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_guidance_response_id();
  void set_allocated_guidance_response_id(::google::fhir::stu3::proto::ReferenceId* guidance_response_id);

  // .google.fhir.stu3.proto.ReferenceId healthcare_service_id = 58;
  bool has_healthcare_service_id() const;
  void clear_healthcare_service_id();
  static const int kHealthcareServiceIdFieldNumber = 58;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_healthcare_service_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& healthcare_service_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_healthcare_service_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_healthcare_service_id();
  void set_allocated_healthcare_service_id(::google::fhir::stu3::proto::ReferenceId* healthcare_service_id);

  // .google.fhir.stu3.proto.ReferenceId imaging_manifest_id = 59;
  bool has_imaging_manifest_id() const;
  void clear_imaging_manifest_id();
  static const int kImagingManifestIdFieldNumber = 59;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_imaging_manifest_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& imaging_manifest_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_imaging_manifest_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_imaging_manifest_id();
  void set_allocated_imaging_manifest_id(::google::fhir::stu3::proto::ReferenceId* imaging_manifest_id);

  // .google.fhir.stu3.proto.ReferenceId imaging_study_id = 60;
  bool has_imaging_study_id() const;
  void clear_imaging_study_id();
  static const int kImagingStudyIdFieldNumber = 60;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_imaging_study_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& imaging_study_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_imaging_study_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_imaging_study_id();
  void set_allocated_imaging_study_id(::google::fhir::stu3::proto::ReferenceId* imaging_study_id);

  // .google.fhir.stu3.proto.ReferenceId immunization_id = 61;
  bool has_immunization_id() const;
  void clear_immunization_id();
  static const int kImmunizationIdFieldNumber = 61;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_immunization_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& immunization_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_immunization_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_immunization_id();
  void set_allocated_immunization_id(::google::fhir::stu3::proto::ReferenceId* immunization_id);

  // .google.fhir.stu3.proto.ReferenceId immunization_recommendation_id = 62;
  bool has_immunization_recommendation_id() const;
  void clear_immunization_recommendation_id();
  static const int kImmunizationRecommendationIdFieldNumber = 62;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_immunization_recommendation_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& immunization_recommendation_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_immunization_recommendation_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_immunization_recommendation_id();
  void set_allocated_immunization_recommendation_id(::google::fhir::stu3::proto::ReferenceId* immunization_recommendation_id);

  // .google.fhir.stu3.proto.ReferenceId implementation_guide_id = 63;
  bool has_implementation_guide_id() const;
  void clear_implementation_guide_id();
  static const int kImplementationGuideIdFieldNumber = 63;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_implementation_guide_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& implementation_guide_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_implementation_guide_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_implementation_guide_id();
  void set_allocated_implementation_guide_id(::google::fhir::stu3::proto::ReferenceId* implementation_guide_id);

  // .google.fhir.stu3.proto.ReferenceId library_id = 64;
  bool has_library_id() const;
  void clear_library_id();
  static const int kLibraryIdFieldNumber = 64;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_library_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& library_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_library_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_library_id();
  void set_allocated_library_id(::google::fhir::stu3::proto::ReferenceId* library_id);

  // .google.fhir.stu3.proto.ReferenceId linkage_id = 65;
  bool has_linkage_id() const;
  void clear_linkage_id();
  static const int kLinkageIdFieldNumber = 65;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_linkage_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& linkage_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_linkage_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_linkage_id();
  void set_allocated_linkage_id(::google::fhir::stu3::proto::ReferenceId* linkage_id);

  // .google.fhir.stu3.proto.ReferenceId list_id = 66;
  bool has_list_id() const;
  void clear_list_id();
  static const int kListIdFieldNumber = 66;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_list_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& list_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_list_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_list_id();
  void set_allocated_list_id(::google::fhir::stu3::proto::ReferenceId* list_id);

  // .google.fhir.stu3.proto.ReferenceId location_id = 67;
  bool has_location_id() const;
  void clear_location_id();
  static const int kLocationIdFieldNumber = 67;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_location_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& location_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_location_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_location_id();
  void set_allocated_location_id(::google::fhir::stu3::proto::ReferenceId* location_id);

  // .google.fhir.stu3.proto.ReferenceId measure_id = 68;
  bool has_measure_id() const;
  void clear_measure_id();
  static const int kMeasureIdFieldNumber = 68;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_measure_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& measure_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_measure_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_measure_id();
  void set_allocated_measure_id(::google::fhir::stu3::proto::ReferenceId* measure_id);

  // .google.fhir.stu3.proto.ReferenceId measure_report_id = 69;
  bool has_measure_report_id() const;
  void clear_measure_report_id();
  static const int kMeasureReportIdFieldNumber = 69;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_measure_report_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& measure_report_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_measure_report_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_measure_report_id();
  void set_allocated_measure_report_id(::google::fhir::stu3::proto::ReferenceId* measure_report_id);

  // .google.fhir.stu3.proto.ReferenceId media_id = 70;
  bool has_media_id() const;
  void clear_media_id();
  static const int kMediaIdFieldNumber = 70;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_media_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& media_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_media_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_media_id();
  void set_allocated_media_id(::google::fhir::stu3::proto::ReferenceId* media_id);

  // .google.fhir.stu3.proto.ReferenceId medication_id = 71;
  bool has_medication_id() const;
  void clear_medication_id();
  static const int kMedicationIdFieldNumber = 71;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_medication_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& medication_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_medication_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_medication_id();
  void set_allocated_medication_id(::google::fhir::stu3::proto::ReferenceId* medication_id);

  // .google.fhir.stu3.proto.ReferenceId medication_administration_id = 72;
  bool has_medication_administration_id() const;
  void clear_medication_administration_id();
  static const int kMedicationAdministrationIdFieldNumber = 72;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_medication_administration_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& medication_administration_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_medication_administration_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_medication_administration_id();
  void set_allocated_medication_administration_id(::google::fhir::stu3::proto::ReferenceId* medication_administration_id);

  // .google.fhir.stu3.proto.ReferenceId medication_dispense_id = 73;
  bool has_medication_dispense_id() const;
  void clear_medication_dispense_id();
  static const int kMedicationDispenseIdFieldNumber = 73;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_medication_dispense_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& medication_dispense_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_medication_dispense_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_medication_dispense_id();
  void set_allocated_medication_dispense_id(::google::fhir::stu3::proto::ReferenceId* medication_dispense_id);

  // .google.fhir.stu3.proto.ReferenceId medication_request_id = 74;
  bool has_medication_request_id() const;
  void clear_medication_request_id();
  static const int kMedicationRequestIdFieldNumber = 74;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_medication_request_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& medication_request_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_medication_request_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_medication_request_id();
  void set_allocated_medication_request_id(::google::fhir::stu3::proto::ReferenceId* medication_request_id);

  // .google.fhir.stu3.proto.ReferenceId medication_statement_id = 75;
  bool has_medication_statement_id() const;
  void clear_medication_statement_id();
  static const int kMedicationStatementIdFieldNumber = 75;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_medication_statement_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& medication_statement_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_medication_statement_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_medication_statement_id();
  void set_allocated_medication_statement_id(::google::fhir::stu3::proto::ReferenceId* medication_statement_id);

  // .google.fhir.stu3.proto.ReferenceId message_definition_id = 76;
  bool has_message_definition_id() const;
  void clear_message_definition_id();
  static const int kMessageDefinitionIdFieldNumber = 76;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_message_definition_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& message_definition_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_message_definition_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_message_definition_id();
  void set_allocated_message_definition_id(::google::fhir::stu3::proto::ReferenceId* message_definition_id);

  // .google.fhir.stu3.proto.ReferenceId message_header_id = 77;
  bool has_message_header_id() const;
  void clear_message_header_id();
  static const int kMessageHeaderIdFieldNumber = 77;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_message_header_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& message_header_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_message_header_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_message_header_id();
  void set_allocated_message_header_id(::google::fhir::stu3::proto::ReferenceId* message_header_id);

  // .google.fhir.stu3.proto.ReferenceId naming_system_id = 78;
  bool has_naming_system_id() const;
  void clear_naming_system_id();
  static const int kNamingSystemIdFieldNumber = 78;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_naming_system_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& naming_system_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_naming_system_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_naming_system_id();
  void set_allocated_naming_system_id(::google::fhir::stu3::proto::ReferenceId* naming_system_id);

  // .google.fhir.stu3.proto.ReferenceId nutrition_order_id = 79;
  bool has_nutrition_order_id() const;
  void clear_nutrition_order_id();
  static const int kNutritionOrderIdFieldNumber = 79;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_nutrition_order_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& nutrition_order_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_nutrition_order_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_nutrition_order_id();
  void set_allocated_nutrition_order_id(::google::fhir::stu3::proto::ReferenceId* nutrition_order_id);

  // .google.fhir.stu3.proto.ReferenceId observation_id = 80;
  bool has_observation_id() const;
  void clear_observation_id();
  static const int kObservationIdFieldNumber = 80;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_observation_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& observation_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_observation_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_observation_id();
  void set_allocated_observation_id(::google::fhir::stu3::proto::ReferenceId* observation_id);

  // .google.fhir.stu3.proto.ReferenceId operation_definition_id = 81;
  bool has_operation_definition_id() const;
  void clear_operation_definition_id();
  static const int kOperationDefinitionIdFieldNumber = 81;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_operation_definition_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& operation_definition_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_operation_definition_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_operation_definition_id();
  void set_allocated_operation_definition_id(::google::fhir::stu3::proto::ReferenceId* operation_definition_id);

  // .google.fhir.stu3.proto.ReferenceId operation_outcome_id = 82;
  bool has_operation_outcome_id() const;
  void clear_operation_outcome_id();
  static const int kOperationOutcomeIdFieldNumber = 82;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_operation_outcome_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& operation_outcome_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_operation_outcome_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_operation_outcome_id();
  void set_allocated_operation_outcome_id(::google::fhir::stu3::proto::ReferenceId* operation_outcome_id);

  // .google.fhir.stu3.proto.ReferenceId organization_id = 83;
  bool has_organization_id() const;
  void clear_organization_id();
  static const int kOrganizationIdFieldNumber = 83;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_organization_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& organization_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_organization_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_organization_id();
  void set_allocated_organization_id(::google::fhir::stu3::proto::ReferenceId* organization_id);

  // .google.fhir.stu3.proto.ReferenceId parameters_id = 84;
  bool has_parameters_id() const;
  void clear_parameters_id();
  static const int kParametersIdFieldNumber = 84;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_parameters_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& parameters_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_parameters_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_parameters_id();
  void set_allocated_parameters_id(::google::fhir::stu3::proto::ReferenceId* parameters_id);

  // .google.fhir.stu3.proto.ReferenceId patient_id = 85;
  bool has_patient_id() const;
  void clear_patient_id();
  static const int kPatientIdFieldNumber = 85;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_patient_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& patient_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_patient_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_patient_id();
  void set_allocated_patient_id(::google::fhir::stu3::proto::ReferenceId* patient_id);

  // .google.fhir.stu3.proto.ReferenceId payment_notice_id = 86;
  bool has_payment_notice_id() const;
  void clear_payment_notice_id();
  static const int kPaymentNoticeIdFieldNumber = 86;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_payment_notice_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& payment_notice_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_payment_notice_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_payment_notice_id();
  void set_allocated_payment_notice_id(::google::fhir::stu3::proto::ReferenceId* payment_notice_id);

  // .google.fhir.stu3.proto.ReferenceId payment_reconciliation_id = 87;
  bool has_payment_reconciliation_id() const;
  void clear_payment_reconciliation_id();
  static const int kPaymentReconciliationIdFieldNumber = 87;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_payment_reconciliation_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& payment_reconciliation_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_payment_reconciliation_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_payment_reconciliation_id();
  void set_allocated_payment_reconciliation_id(::google::fhir::stu3::proto::ReferenceId* payment_reconciliation_id);

  // .google.fhir.stu3.proto.ReferenceId person_id = 88;
  bool has_person_id() const;
  void clear_person_id();
  static const int kPersonIdFieldNumber = 88;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_person_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& person_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_person_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_person_id();
  void set_allocated_person_id(::google::fhir::stu3::proto::ReferenceId* person_id);

  // .google.fhir.stu3.proto.ReferenceId plan_definition_id = 89;
  bool has_plan_definition_id() const;
  void clear_plan_definition_id();
  static const int kPlanDefinitionIdFieldNumber = 89;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_plan_definition_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& plan_definition_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_plan_definition_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_plan_definition_id();
  void set_allocated_plan_definition_id(::google::fhir::stu3::proto::ReferenceId* plan_definition_id);

  // .google.fhir.stu3.proto.ReferenceId practitioner_id = 90;
  bool has_practitioner_id() const;
  void clear_practitioner_id();
  static const int kPractitionerIdFieldNumber = 90;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_practitioner_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& practitioner_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_practitioner_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_practitioner_id();
  void set_allocated_practitioner_id(::google::fhir::stu3::proto::ReferenceId* practitioner_id);

  // .google.fhir.stu3.proto.ReferenceId practitioner_role_id = 91;
  bool has_practitioner_role_id() const;
  void clear_practitioner_role_id();
  static const int kPractitionerRoleIdFieldNumber = 91;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_practitioner_role_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& practitioner_role_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_practitioner_role_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_practitioner_role_id();
  void set_allocated_practitioner_role_id(::google::fhir::stu3::proto::ReferenceId* practitioner_role_id);

  // .google.fhir.stu3.proto.ReferenceId procedure_id = 92;
  bool has_procedure_id() const;
  void clear_procedure_id();
  static const int kProcedureIdFieldNumber = 92;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_procedure_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& procedure_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_procedure_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_procedure_id();
  void set_allocated_procedure_id(::google::fhir::stu3::proto::ReferenceId* procedure_id);

  // .google.fhir.stu3.proto.ReferenceId procedure_request_id = 93;
  bool has_procedure_request_id() const;
  void clear_procedure_request_id();
  static const int kProcedureRequestIdFieldNumber = 93;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_procedure_request_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& procedure_request_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_procedure_request_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_procedure_request_id();
  void set_allocated_procedure_request_id(::google::fhir::stu3::proto::ReferenceId* procedure_request_id);

  // .google.fhir.stu3.proto.ReferenceId process_request_id = 94;
  bool has_process_request_id() const;
  void clear_process_request_id();
  static const int kProcessRequestIdFieldNumber = 94;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_process_request_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& process_request_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_process_request_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_process_request_id();
  void set_allocated_process_request_id(::google::fhir::stu3::proto::ReferenceId* process_request_id);

  // .google.fhir.stu3.proto.ReferenceId process_response_id = 95;
  bool has_process_response_id() const;
  void clear_process_response_id();
  static const int kProcessResponseIdFieldNumber = 95;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_process_response_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& process_response_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_process_response_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_process_response_id();
  void set_allocated_process_response_id(::google::fhir::stu3::proto::ReferenceId* process_response_id);

  // .google.fhir.stu3.proto.ReferenceId provenance_id = 96;
  bool has_provenance_id() const;
  void clear_provenance_id();
  static const int kProvenanceIdFieldNumber = 96;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_provenance_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& provenance_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_provenance_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_provenance_id();
  void set_allocated_provenance_id(::google::fhir::stu3::proto::ReferenceId* provenance_id);

  // .google.fhir.stu3.proto.ReferenceId questionnaire_id = 97;
  bool has_questionnaire_id() const;
  void clear_questionnaire_id();
  static const int kQuestionnaireIdFieldNumber = 97;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_questionnaire_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& questionnaire_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_questionnaire_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_questionnaire_id();
  void set_allocated_questionnaire_id(::google::fhir::stu3::proto::ReferenceId* questionnaire_id);

  // .google.fhir.stu3.proto.ReferenceId questionnaire_response_id = 98;
  bool has_questionnaire_response_id() const;
  void clear_questionnaire_response_id();
  static const int kQuestionnaireResponseIdFieldNumber = 98;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_questionnaire_response_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& questionnaire_response_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_questionnaire_response_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_questionnaire_response_id();
  void set_allocated_questionnaire_response_id(::google::fhir::stu3::proto::ReferenceId* questionnaire_response_id);

  // .google.fhir.stu3.proto.ReferenceId referral_request_id = 99;
  bool has_referral_request_id() const;
  void clear_referral_request_id();
  static const int kReferralRequestIdFieldNumber = 99;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_referral_request_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& referral_request_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_referral_request_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_referral_request_id();
  void set_allocated_referral_request_id(::google::fhir::stu3::proto::ReferenceId* referral_request_id);

  // .google.fhir.stu3.proto.ReferenceId related_person_id = 100;
  bool has_related_person_id() const;
  void clear_related_person_id();
  static const int kRelatedPersonIdFieldNumber = 100;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_related_person_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& related_person_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_related_person_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_related_person_id();
  void set_allocated_related_person_id(::google::fhir::stu3::proto::ReferenceId* related_person_id);

  // .google.fhir.stu3.proto.ReferenceId request_group_id = 101;
  bool has_request_group_id() const;
  void clear_request_group_id();
  static const int kRequestGroupIdFieldNumber = 101;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_request_group_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& request_group_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_request_group_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_request_group_id();
  void set_allocated_request_group_id(::google::fhir::stu3::proto::ReferenceId* request_group_id);

  // .google.fhir.stu3.proto.ReferenceId research_study_id = 102;
  bool has_research_study_id() const;
  void clear_research_study_id();
  static const int kResearchStudyIdFieldNumber = 102;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_research_study_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& research_study_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_research_study_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_research_study_id();
  void set_allocated_research_study_id(::google::fhir::stu3::proto::ReferenceId* research_study_id);

  // .google.fhir.stu3.proto.ReferenceId research_subject_id = 103;
  bool has_research_subject_id() const;
  void clear_research_subject_id();
  static const int kResearchSubjectIdFieldNumber = 103;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_research_subject_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& research_subject_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_research_subject_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_research_subject_id();
  void set_allocated_research_subject_id(::google::fhir::stu3::proto::ReferenceId* research_subject_id);

  // .google.fhir.stu3.proto.ReferenceId risk_assessment_id = 104;
  bool has_risk_assessment_id() const;
  void clear_risk_assessment_id();
  static const int kRiskAssessmentIdFieldNumber = 104;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_risk_assessment_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& risk_assessment_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_risk_assessment_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_risk_assessment_id();
  void set_allocated_risk_assessment_id(::google::fhir::stu3::proto::ReferenceId* risk_assessment_id);

  // .google.fhir.stu3.proto.ReferenceId schedule_id = 105;
  bool has_schedule_id() const;
  void clear_schedule_id();
  static const int kScheduleIdFieldNumber = 105;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_schedule_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& schedule_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_schedule_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_schedule_id();
  void set_allocated_schedule_id(::google::fhir::stu3::proto::ReferenceId* schedule_id);

  // .google.fhir.stu3.proto.ReferenceId search_parameter_id = 106;
  bool has_search_parameter_id() const;
  void clear_search_parameter_id();
  static const int kSearchParameterIdFieldNumber = 106;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_search_parameter_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& search_parameter_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_search_parameter_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_search_parameter_id();
  void set_allocated_search_parameter_id(::google::fhir::stu3::proto::ReferenceId* search_parameter_id);

  // .google.fhir.stu3.proto.ReferenceId sequence_id = 107;
  bool has_sequence_id() const;
  void clear_sequence_id();
  static const int kSequenceIdFieldNumber = 107;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_sequence_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& sequence_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_sequence_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_sequence_id();
  void set_allocated_sequence_id(::google::fhir::stu3::proto::ReferenceId* sequence_id);

  // .google.fhir.stu3.proto.ReferenceId service_definition_id = 108;
  bool has_service_definition_id() const;
  void clear_service_definition_id();
  static const int kServiceDefinitionIdFieldNumber = 108;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_service_definition_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& service_definition_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_service_definition_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_service_definition_id();
  void set_allocated_service_definition_id(::google::fhir::stu3::proto::ReferenceId* service_definition_id);

  // .google.fhir.stu3.proto.ReferenceId slot_id = 109;
  bool has_slot_id() const;
  void clear_slot_id();
  static const int kSlotIdFieldNumber = 109;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_slot_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& slot_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_slot_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_slot_id();
  void set_allocated_slot_id(::google::fhir::stu3::proto::ReferenceId* slot_id);

  // .google.fhir.stu3.proto.ReferenceId specimen_id = 110;
  bool has_specimen_id() const;
  void clear_specimen_id();
  static const int kSpecimenIdFieldNumber = 110;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_specimen_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& specimen_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_specimen_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_specimen_id();
  void set_allocated_specimen_id(::google::fhir::stu3::proto::ReferenceId* specimen_id);

  // .google.fhir.stu3.proto.ReferenceId structure_definition_id = 111;
  bool has_structure_definition_id() const;
  void clear_structure_definition_id();
  static const int kStructureDefinitionIdFieldNumber = 111;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_structure_definition_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& structure_definition_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_structure_definition_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_structure_definition_id();
  void set_allocated_structure_definition_id(::google::fhir::stu3::proto::ReferenceId* structure_definition_id);

  // .google.fhir.stu3.proto.ReferenceId structure_map_id = 112;
  bool has_structure_map_id() const;
  void clear_structure_map_id();
  static const int kStructureMapIdFieldNumber = 112;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_structure_map_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& structure_map_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_structure_map_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_structure_map_id();
  void set_allocated_structure_map_id(::google::fhir::stu3::proto::ReferenceId* structure_map_id);

  // .google.fhir.stu3.proto.ReferenceId subscription_id = 113;
  bool has_subscription_id() const;
  void clear_subscription_id();
  static const int kSubscriptionIdFieldNumber = 113;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_subscription_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& subscription_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_subscription_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_subscription_id();
  void set_allocated_subscription_id(::google::fhir::stu3::proto::ReferenceId* subscription_id);

  // .google.fhir.stu3.proto.ReferenceId substance_id = 114;
  bool has_substance_id() const;
  void clear_substance_id();
  static const int kSubstanceIdFieldNumber = 114;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_substance_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& substance_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_substance_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_substance_id();
  void set_allocated_substance_id(::google::fhir::stu3::proto::ReferenceId* substance_id);

  // .google.fhir.stu3.proto.ReferenceId supply_delivery_id = 115;
  bool has_supply_delivery_id() const;
  void clear_supply_delivery_id();
  static const int kSupplyDeliveryIdFieldNumber = 115;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_supply_delivery_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& supply_delivery_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_supply_delivery_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_supply_delivery_id();
  void set_allocated_supply_delivery_id(::google::fhir::stu3::proto::ReferenceId* supply_delivery_id);

  // .google.fhir.stu3.proto.ReferenceId supply_request_id = 116;
  bool has_supply_request_id() const;
  void clear_supply_request_id();
  static const int kSupplyRequestIdFieldNumber = 116;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_supply_request_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& supply_request_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_supply_request_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_supply_request_id();
  void set_allocated_supply_request_id(::google::fhir::stu3::proto::ReferenceId* supply_request_id);

  // .google.fhir.stu3.proto.ReferenceId task_id = 117;
  bool has_task_id() const;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 117;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_task_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& task_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_task_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_task_id();
  void set_allocated_task_id(::google::fhir::stu3::proto::ReferenceId* task_id);

  // .google.fhir.stu3.proto.ReferenceId test_report_id = 118;
  bool has_test_report_id() const;
  void clear_test_report_id();
  static const int kTestReportIdFieldNumber = 118;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_test_report_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& test_report_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_test_report_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_test_report_id();
  void set_allocated_test_report_id(::google::fhir::stu3::proto::ReferenceId* test_report_id);

  // .google.fhir.stu3.proto.ReferenceId test_script_id = 119;
  bool has_test_script_id() const;
  void clear_test_script_id();
  static const int kTestScriptIdFieldNumber = 119;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_test_script_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& test_script_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_test_script_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_test_script_id();
  void set_allocated_test_script_id(::google::fhir::stu3::proto::ReferenceId* test_script_id);

  // .google.fhir.stu3.proto.ReferenceId value_set_id = 120;
  bool has_value_set_id() const;
  void clear_value_set_id();
  static const int kValueSetIdFieldNumber = 120;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_value_set_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& value_set_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_value_set_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_value_set_id();
  void set_allocated_value_set_id(::google::fhir::stu3::proto::ReferenceId* value_set_id);

  // .google.fhir.stu3.proto.ReferenceId vision_prescription_id = 121;
  bool has_vision_prescription_id() const;
  void clear_vision_prescription_id();
  static const int kVisionPrescriptionIdFieldNumber = 121;
  private:
  const ::google::fhir::stu3::proto::ReferenceId& _internal_vision_prescription_id() const;
  public:
  const ::google::fhir::stu3::proto::ReferenceId& vision_prescription_id() const;
  ::google::fhir::stu3::proto::ReferenceId* release_vision_prescription_id();
  ::google::fhir::stu3::proto::ReferenceId* mutable_vision_prescription_id();
  void set_allocated_vision_prescription_id(::google::fhir::stu3::proto::ReferenceId* vision_prescription_id);

  void clear_reference();
  ReferenceCase reference_case() const;
  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.Reference)
 private:
  void set_has_uri();
  void set_has_fragment();
  void set_has_account_id();
  void set_has_activity_definition_id();
  void set_has_adverse_event_id();
  void set_has_allergy_intolerance_id();
  void set_has_appointment_id();
  void set_has_appointment_response_id();
  void set_has_audit_event_id();
  void set_has_basic_id();
  void set_has_binary_id();
  void set_has_body_site_id();
  void set_has_bundle_id();
  void set_has_capability_statement_id();
  void set_has_care_plan_id();
  void set_has_care_team_id();
  void set_has_charge_item_id();
  void set_has_claim_id();
  void set_has_claim_response_id();
  void set_has_clinical_impression_id();
  void set_has_code_system_id();
  void set_has_communication_id();
  void set_has_communication_request_id();
  void set_has_compartment_definition_id();
  void set_has_composition_id();
  void set_has_concept_map_id();
  void set_has_condition_id();
  void set_has_consent_id();
  void set_has_contract_id();
  void set_has_coverage_id();
  void set_has_data_element_id();
  void set_has_detected_issue_id();
  void set_has_device_id();
  void set_has_device_component_id();
  void set_has_device_metric_id();
  void set_has_device_request_id();
  void set_has_device_use_statement_id();
  void set_has_diagnostic_report_id();
  void set_has_document_manifest_id();
  void set_has_document_reference_id();
  void set_has_eligibility_request_id();
  void set_has_eligibility_response_id();
  void set_has_encounter_id();
  void set_has_endpoint_id();
  void set_has_enrollment_request_id();
  void set_has_enrollment_response_id();
  void set_has_episode_of_care_id();
  void set_has_expansion_profile_id();
  void set_has_explanation_of_benefit_id();
  void set_has_family_member_history_id();
  void set_has_flag_id();
  void set_has_goal_id();
  void set_has_graph_definition_id();
  void set_has_group_id();
  void set_has_guidance_response_id();
  void set_has_healthcare_service_id();
  void set_has_imaging_manifest_id();
  void set_has_imaging_study_id();
  void set_has_immunization_id();
  void set_has_immunization_recommendation_id();
  void set_has_implementation_guide_id();
  void set_has_library_id();
  void set_has_linkage_id();
  void set_has_list_id();
  void set_has_location_id();
  void set_has_measure_id();
  void set_has_measure_report_id();
  void set_has_media_id();
  void set_has_medication_id();
  void set_has_medication_administration_id();
  void set_has_medication_dispense_id();
  void set_has_medication_request_id();
  void set_has_medication_statement_id();
  void set_has_message_definition_id();
  void set_has_message_header_id();
  void set_has_naming_system_id();
  void set_has_nutrition_order_id();
  void set_has_observation_id();
  void set_has_operation_definition_id();
  void set_has_operation_outcome_id();
  void set_has_organization_id();
  void set_has_parameters_id();
  void set_has_patient_id();
  void set_has_payment_notice_id();
  void set_has_payment_reconciliation_id();
  void set_has_person_id();
  void set_has_plan_definition_id();
  void set_has_practitioner_id();
  void set_has_practitioner_role_id();
  void set_has_procedure_id();
  void set_has_procedure_request_id();
  void set_has_process_request_id();
  void set_has_process_response_id();
  void set_has_provenance_id();
  void set_has_questionnaire_id();
  void set_has_questionnaire_response_id();
  void set_has_referral_request_id();
  void set_has_related_person_id();
  void set_has_request_group_id();
  void set_has_research_study_id();
  void set_has_research_subject_id();
  void set_has_risk_assessment_id();
  void set_has_schedule_id();
  void set_has_search_parameter_id();
  void set_has_sequence_id();
  void set_has_service_definition_id();
  void set_has_slot_id();
  void set_has_specimen_id();
  void set_has_structure_definition_id();
  void set_has_structure_map_id();
  void set_has_subscription_id();
  void set_has_substance_id();
  void set_has_supply_delivery_id();
  void set_has_supply_request_id();
  void set_has_task_id();
  void set_has_test_report_id();
  void set_has_test_script_id();
  void set_has_value_set_id();
  void set_has_vision_prescription_id();

  inline bool has_reference() const;
  inline void clear_has_reference();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  ::google::fhir::stu3::proto::Identifier* identifier_;
  ::google::fhir::stu3::proto::String* display_;
  union ReferenceUnion {
    ReferenceUnion() {}
    ::google::fhir::stu3::proto::String* uri_;
    ::google::fhir::stu3::proto::String* fragment_;
    ::google::fhir::stu3::proto::ReferenceId* account_id_;
    ::google::fhir::stu3::proto::ReferenceId* activity_definition_id_;
    ::google::fhir::stu3::proto::ReferenceId* adverse_event_id_;
    ::google::fhir::stu3::proto::ReferenceId* allergy_intolerance_id_;
    ::google::fhir::stu3::proto::ReferenceId* appointment_id_;
    ::google::fhir::stu3::proto::ReferenceId* appointment_response_id_;
    ::google::fhir::stu3::proto::ReferenceId* audit_event_id_;
    ::google::fhir::stu3::proto::ReferenceId* basic_id_;
    ::google::fhir::stu3::proto::ReferenceId* binary_id_;
    ::google::fhir::stu3::proto::ReferenceId* body_site_id_;
    ::google::fhir::stu3::proto::ReferenceId* bundle_id_;
    ::google::fhir::stu3::proto::ReferenceId* capability_statement_id_;
    ::google::fhir::stu3::proto::ReferenceId* care_plan_id_;
    ::google::fhir::stu3::proto::ReferenceId* care_team_id_;
    ::google::fhir::stu3::proto::ReferenceId* charge_item_id_;
    ::google::fhir::stu3::proto::ReferenceId* claim_id_;
    ::google::fhir::stu3::proto::ReferenceId* claim_response_id_;
    ::google::fhir::stu3::proto::ReferenceId* clinical_impression_id_;
    ::google::fhir::stu3::proto::ReferenceId* code_system_id_;
    ::google::fhir::stu3::proto::ReferenceId* communication_id_;
    ::google::fhir::stu3::proto::ReferenceId* communication_request_id_;
    ::google::fhir::stu3::proto::ReferenceId* compartment_definition_id_;
    ::google::fhir::stu3::proto::ReferenceId* composition_id_;
    ::google::fhir::stu3::proto::ReferenceId* concept_map_id_;
    ::google::fhir::stu3::proto::ReferenceId* condition_id_;
    ::google::fhir::stu3::proto::ReferenceId* consent_id_;
    ::google::fhir::stu3::proto::ReferenceId* contract_id_;
    ::google::fhir::stu3::proto::ReferenceId* coverage_id_;
    ::google::fhir::stu3::proto::ReferenceId* data_element_id_;
    ::google::fhir::stu3::proto::ReferenceId* detected_issue_id_;
    ::google::fhir::stu3::proto::ReferenceId* device_id_;
    ::google::fhir::stu3::proto::ReferenceId* device_component_id_;
    ::google::fhir::stu3::proto::ReferenceId* device_metric_id_;
    ::google::fhir::stu3::proto::ReferenceId* device_request_id_;
    ::google::fhir::stu3::proto::ReferenceId* device_use_statement_id_;
    ::google::fhir::stu3::proto::ReferenceId* diagnostic_report_id_;
    ::google::fhir::stu3::proto::ReferenceId* document_manifest_id_;
    ::google::fhir::stu3::proto::ReferenceId* document_reference_id_;
    ::google::fhir::stu3::proto::ReferenceId* eligibility_request_id_;
    ::google::fhir::stu3::proto::ReferenceId* eligibility_response_id_;
    ::google::fhir::stu3::proto::ReferenceId* encounter_id_;
    ::google::fhir::stu3::proto::ReferenceId* endpoint_id_;
    ::google::fhir::stu3::proto::ReferenceId* enrollment_request_id_;
    ::google::fhir::stu3::proto::ReferenceId* enrollment_response_id_;
    ::google::fhir::stu3::proto::ReferenceId* episode_of_care_id_;
    ::google::fhir::stu3::proto::ReferenceId* expansion_profile_id_;
    ::google::fhir::stu3::proto::ReferenceId* explanation_of_benefit_id_;
    ::google::fhir::stu3::proto::ReferenceId* family_member_history_id_;
    ::google::fhir::stu3::proto::ReferenceId* flag_id_;
    ::google::fhir::stu3::proto::ReferenceId* goal_id_;
    ::google::fhir::stu3::proto::ReferenceId* graph_definition_id_;
    ::google::fhir::stu3::proto::ReferenceId* group_id_;
    ::google::fhir::stu3::proto::ReferenceId* guidance_response_id_;
    ::google::fhir::stu3::proto::ReferenceId* healthcare_service_id_;
    ::google::fhir::stu3::proto::ReferenceId* imaging_manifest_id_;
    ::google::fhir::stu3::proto::ReferenceId* imaging_study_id_;
    ::google::fhir::stu3::proto::ReferenceId* immunization_id_;
    ::google::fhir::stu3::proto::ReferenceId* immunization_recommendation_id_;
    ::google::fhir::stu3::proto::ReferenceId* implementation_guide_id_;
    ::google::fhir::stu3::proto::ReferenceId* library_id_;
    ::google::fhir::stu3::proto::ReferenceId* linkage_id_;
    ::google::fhir::stu3::proto::ReferenceId* list_id_;
    ::google::fhir::stu3::proto::ReferenceId* location_id_;
    ::google::fhir::stu3::proto::ReferenceId* measure_id_;
    ::google::fhir::stu3::proto::ReferenceId* measure_report_id_;
    ::google::fhir::stu3::proto::ReferenceId* media_id_;
    ::google::fhir::stu3::proto::ReferenceId* medication_id_;
    ::google::fhir::stu3::proto::ReferenceId* medication_administration_id_;
    ::google::fhir::stu3::proto::ReferenceId* medication_dispense_id_;
    ::google::fhir::stu3::proto::ReferenceId* medication_request_id_;
    ::google::fhir::stu3::proto::ReferenceId* medication_statement_id_;
    ::google::fhir::stu3::proto::ReferenceId* message_definition_id_;
    ::google::fhir::stu3::proto::ReferenceId* message_header_id_;
    ::google::fhir::stu3::proto::ReferenceId* naming_system_id_;
    ::google::fhir::stu3::proto::ReferenceId* nutrition_order_id_;
    ::google::fhir::stu3::proto::ReferenceId* observation_id_;
    ::google::fhir::stu3::proto::ReferenceId* operation_definition_id_;
    ::google::fhir::stu3::proto::ReferenceId* operation_outcome_id_;
    ::google::fhir::stu3::proto::ReferenceId* organization_id_;
    ::google::fhir::stu3::proto::ReferenceId* parameters_id_;
    ::google::fhir::stu3::proto::ReferenceId* patient_id_;
    ::google::fhir::stu3::proto::ReferenceId* payment_notice_id_;
    ::google::fhir::stu3::proto::ReferenceId* payment_reconciliation_id_;
    ::google::fhir::stu3::proto::ReferenceId* person_id_;
    ::google::fhir::stu3::proto::ReferenceId* plan_definition_id_;
    ::google::fhir::stu3::proto::ReferenceId* practitioner_id_;
    ::google::fhir::stu3::proto::ReferenceId* practitioner_role_id_;
    ::google::fhir::stu3::proto::ReferenceId* procedure_id_;
    ::google::fhir::stu3::proto::ReferenceId* procedure_request_id_;
    ::google::fhir::stu3::proto::ReferenceId* process_request_id_;
    ::google::fhir::stu3::proto::ReferenceId* process_response_id_;
    ::google::fhir::stu3::proto::ReferenceId* provenance_id_;
    ::google::fhir::stu3::proto::ReferenceId* questionnaire_id_;
    ::google::fhir::stu3::proto::ReferenceId* questionnaire_response_id_;
    ::google::fhir::stu3::proto::ReferenceId* referral_request_id_;
    ::google::fhir::stu3::proto::ReferenceId* related_person_id_;
    ::google::fhir::stu3::proto::ReferenceId* request_group_id_;
    ::google::fhir::stu3::proto::ReferenceId* research_study_id_;
    ::google::fhir::stu3::proto::ReferenceId* research_subject_id_;
    ::google::fhir::stu3::proto::ReferenceId* risk_assessment_id_;
    ::google::fhir::stu3::proto::ReferenceId* schedule_id_;
    ::google::fhir::stu3::proto::ReferenceId* search_parameter_id_;
    ::google::fhir::stu3::proto::ReferenceId* sequence_id_;
    ::google::fhir::stu3::proto::ReferenceId* service_definition_id_;
    ::google::fhir::stu3::proto::ReferenceId* slot_id_;
    ::google::fhir::stu3::proto::ReferenceId* specimen_id_;
    ::google::fhir::stu3::proto::ReferenceId* structure_definition_id_;
    ::google::fhir::stu3::proto::ReferenceId* structure_map_id_;
    ::google::fhir::stu3::proto::ReferenceId* subscription_id_;
    ::google::fhir::stu3::proto::ReferenceId* substance_id_;
    ::google::fhir::stu3::proto::ReferenceId* supply_delivery_id_;
    ::google::fhir::stu3::proto::ReferenceId* supply_request_id_;
    ::google::fhir::stu3::proto::ReferenceId* task_id_;
    ::google::fhir::stu3::proto::ReferenceId* test_report_id_;
    ::google::fhir::stu3::proto::ReferenceId* test_script_id_;
    ::google::fhir::stu3::proto::ReferenceId* value_set_id_;
    ::google::fhir::stu3::proto::ReferenceId* vision_prescription_id_;
  } reference_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReferenceId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ReferenceId) */ {
 public:
  ReferenceId();
  virtual ~ReferenceId();

  ReferenceId(const ReferenceId& from);

  inline ReferenceId& operator=(const ReferenceId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReferenceId(ReferenceId&& from) noexcept
    : ReferenceId() {
    *this = ::std::move(from);
  }

  inline ReferenceId& operator=(ReferenceId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReferenceId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReferenceId* internal_default_instance() {
    return reinterpret_cast<const ReferenceId*>(
               &_ReferenceId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(ReferenceId* other);
  friend void swap(ReferenceId& a, ReferenceId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReferenceId* New() const final {
    return CreateMaybeMessage<ReferenceId>(NULL);
  }

  ReferenceId* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReferenceId>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReferenceId& from);
  void MergeFrom(const ReferenceId& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReferenceId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 4;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 4;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .google.fhir.stu3.proto.Id history = 2;
  bool has_history() const;
  void clear_history();
  static const int kHistoryFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::Id& _internal_history() const;
  public:
  const ::google::fhir::stu3::proto::Id& history() const;
  ::google::fhir::stu3::proto::Id* release_history();
  ::google::fhir::stu3::proto::Id* mutable_history();
  void set_allocated_history(::google::fhir::stu3::proto::Id* history);

  // .google.fhir.stu3.proto.String id = 3;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ReferenceId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::fhir::stu3::proto::Id* history_;
  ::google::fhir::stu3::proto::String* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressTypeCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressTypeCode) */ {
 public:
  AddressTypeCode();
  virtual ~AddressTypeCode();

  AddressTypeCode(const AddressTypeCode& from);

  inline AddressTypeCode& operator=(const AddressTypeCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressTypeCode(AddressTypeCode&& from) noexcept
    : AddressTypeCode() {
    *this = ::std::move(from);
  }

  inline AddressTypeCode& operator=(AddressTypeCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressTypeCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressTypeCode* internal_default_instance() {
    return reinterpret_cast<const AddressTypeCode*>(
               &_AddressTypeCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void Swap(AddressTypeCode* other);
  friend void swap(AddressTypeCode& a, AddressTypeCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressTypeCode* New() const final {
    return CreateMaybeMessage<AddressTypeCode>(NULL);
  }

  AddressTypeCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressTypeCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressTypeCode& from);
  void MergeFrom(const AddressTypeCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressTypeCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AddressTypeCode_Value Value;
  static const Value INVALID_UNINITIALIZED =
    AddressTypeCode_Value_INVALID_UNINITIALIZED;
  static const Value POSTAL =
    AddressTypeCode_Value_POSTAL;
  static const Value PHYSICAL =
    AddressTypeCode_Value_PHYSICAL;
  static const Value BOTH =
    AddressTypeCode_Value_BOTH;
  static inline bool Value_IsValid(int value) {
    return AddressTypeCode_Value_IsValid(value);
  }
  static const Value Value_MIN =
    AddressTypeCode_Value_Value_MIN;
  static const Value Value_MAX =
    AddressTypeCode_Value_Value_MAX;
  static const int Value_ARRAYSIZE =
    AddressTypeCode_Value_Value_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Value_descriptor() {
    return AddressTypeCode_Value_descriptor();
  }
  static inline const ::std::string& Value_Name(Value value) {
    return AddressTypeCode_Value_Name(value);
  }
  static inline bool Value_Parse(const ::std::string& name,
      Value* value) {
    return AddressTypeCode_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.AddressTypeCode.Value value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::fhir::stu3::proto::AddressTypeCode_Value value() const;
  void set_value(::google::fhir::stu3::proto::AddressTypeCode_Value value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressTypeCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddressUseCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AddressUseCode) */ {
 public:
  AddressUseCode();
  virtual ~AddressUseCode();

  AddressUseCode(const AddressUseCode& from);

  inline AddressUseCode& operator=(const AddressUseCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddressUseCode(AddressUseCode&& from) noexcept
    : AddressUseCode() {
    *this = ::std::move(from);
  }

  inline AddressUseCode& operator=(AddressUseCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddressUseCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressUseCode* internal_default_instance() {
    return reinterpret_cast<const AddressUseCode*>(
               &_AddressUseCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void Swap(AddressUseCode* other);
  friend void swap(AddressUseCode& a, AddressUseCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddressUseCode* New() const final {
    return CreateMaybeMessage<AddressUseCode>(NULL);
  }

  AddressUseCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddressUseCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddressUseCode& from);
  void MergeFrom(const AddressUseCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddressUseCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AddressUseCode_Value Value;
  static const Value INVALID_UNINITIALIZED =
    AddressUseCode_Value_INVALID_UNINITIALIZED;
  static const Value HOME =
    AddressUseCode_Value_HOME;
  static const Value WORK =
    AddressUseCode_Value_WORK;
  static const Value TEMP =
    AddressUseCode_Value_TEMP;
  static const Value OLD =
    AddressUseCode_Value_OLD;
  static inline bool Value_IsValid(int value) {
    return AddressUseCode_Value_IsValid(value);
  }
  static const Value Value_MIN =
    AddressUseCode_Value_Value_MIN;
  static const Value Value_MAX =
    AddressUseCode_Value_Value_MAX;
  static const int Value_ARRAYSIZE =
    AddressUseCode_Value_Value_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Value_descriptor() {
    return AddressUseCode_Value_descriptor();
  }
  static inline const ::std::string& Value_Name(Value value) {
    return AddressUseCode_Value_Name(value);
  }
  static inline bool Value_Parse(const ::std::string& name,
      Value* value) {
    return AddressUseCode_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.AddressUseCode.Value value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::fhir::stu3::proto::AddressUseCode_Value value() const;
  void set_value(::google::fhir::stu3::proto::AddressUseCode_Value value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AddressUseCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContactPointSystemCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ContactPointSystemCode) */ {
 public:
  ContactPointSystemCode();
  virtual ~ContactPointSystemCode();

  ContactPointSystemCode(const ContactPointSystemCode& from);

  inline ContactPointSystemCode& operator=(const ContactPointSystemCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContactPointSystemCode(ContactPointSystemCode&& from) noexcept
    : ContactPointSystemCode() {
    *this = ::std::move(from);
  }

  inline ContactPointSystemCode& operator=(ContactPointSystemCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContactPointSystemCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContactPointSystemCode* internal_default_instance() {
    return reinterpret_cast<const ContactPointSystemCode*>(
               &_ContactPointSystemCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void Swap(ContactPointSystemCode* other);
  friend void swap(ContactPointSystemCode& a, ContactPointSystemCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContactPointSystemCode* New() const final {
    return CreateMaybeMessage<ContactPointSystemCode>(NULL);
  }

  ContactPointSystemCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContactPointSystemCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContactPointSystemCode& from);
  void MergeFrom(const ContactPointSystemCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContactPointSystemCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ContactPointSystemCode_Value Value;
  static const Value INVALID_UNINITIALIZED =
    ContactPointSystemCode_Value_INVALID_UNINITIALIZED;
  static const Value PHONE =
    ContactPointSystemCode_Value_PHONE;
  static const Value FAX =
    ContactPointSystemCode_Value_FAX;
  static const Value EMAIL =
    ContactPointSystemCode_Value_EMAIL;
  static const Value PAGER =
    ContactPointSystemCode_Value_PAGER;
  static const Value URL =
    ContactPointSystemCode_Value_URL;
  static const Value SMS =
    ContactPointSystemCode_Value_SMS;
  static const Value OTHER =
    ContactPointSystemCode_Value_OTHER;
  static inline bool Value_IsValid(int value) {
    return ContactPointSystemCode_Value_IsValid(value);
  }
  static const Value Value_MIN =
    ContactPointSystemCode_Value_Value_MIN;
  static const Value Value_MAX =
    ContactPointSystemCode_Value_Value_MAX;
  static const int Value_ARRAYSIZE =
    ContactPointSystemCode_Value_Value_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Value_descriptor() {
    return ContactPointSystemCode_Value_descriptor();
  }
  static inline const ::std::string& Value_Name(Value value) {
    return ContactPointSystemCode_Value_Name(value);
  }
  static inline bool Value_Parse(const ::std::string& name,
      Value* value) {
    return ContactPointSystemCode_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.ContactPointSystemCode.Value value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::fhir::stu3::proto::ContactPointSystemCode_Value value() const;
  void set_value(::google::fhir::stu3::proto::ContactPointSystemCode_Value value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ContactPointSystemCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ContactPointUseCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.ContactPointUseCode) */ {
 public:
  ContactPointUseCode();
  virtual ~ContactPointUseCode();

  ContactPointUseCode(const ContactPointUseCode& from);

  inline ContactPointUseCode& operator=(const ContactPointUseCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ContactPointUseCode(ContactPointUseCode&& from) noexcept
    : ContactPointUseCode() {
    *this = ::std::move(from);
  }

  inline ContactPointUseCode& operator=(ContactPointUseCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ContactPointUseCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContactPointUseCode* internal_default_instance() {
    return reinterpret_cast<const ContactPointUseCode*>(
               &_ContactPointUseCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void Swap(ContactPointUseCode* other);
  friend void swap(ContactPointUseCode& a, ContactPointUseCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ContactPointUseCode* New() const final {
    return CreateMaybeMessage<ContactPointUseCode>(NULL);
  }

  ContactPointUseCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ContactPointUseCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ContactPointUseCode& from);
  void MergeFrom(const ContactPointUseCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContactPointUseCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ContactPointUseCode_Value Value;
  static const Value INVALID_UNINITIALIZED =
    ContactPointUseCode_Value_INVALID_UNINITIALIZED;
  static const Value HOME =
    ContactPointUseCode_Value_HOME;
  static const Value WORK =
    ContactPointUseCode_Value_WORK;
  static const Value TEMP =
    ContactPointUseCode_Value_TEMP;
  static const Value OLD =
    ContactPointUseCode_Value_OLD;
  static const Value MOBILE =
    ContactPointUseCode_Value_MOBILE;
  static inline bool Value_IsValid(int value) {
    return ContactPointUseCode_Value_IsValid(value);
  }
  static const Value Value_MIN =
    ContactPointUseCode_Value_Value_MIN;
  static const Value Value_MAX =
    ContactPointUseCode_Value_Value_MAX;
  static const int Value_ARRAYSIZE =
    ContactPointUseCode_Value_Value_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Value_descriptor() {
    return ContactPointUseCode_Value_descriptor();
  }
  static inline const ::std::string& Value_Name(Value value) {
    return ContactPointUseCode_Value_Name(value);
  }
  static inline bool Value_Parse(const ::std::string& name,
      Value* value) {
    return ContactPointUseCode_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.ContactPointUseCode.Value value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::fhir::stu3::proto::ContactPointUseCode_Value value() const;
  void set_value(::google::fhir::stu3::proto::ContactPointUseCode_Value value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.ContactPointUseCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DaysOfWeekCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.DaysOfWeekCode) */ {
 public:
  DaysOfWeekCode();
  virtual ~DaysOfWeekCode();

  DaysOfWeekCode(const DaysOfWeekCode& from);

  inline DaysOfWeekCode& operator=(const DaysOfWeekCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DaysOfWeekCode(DaysOfWeekCode&& from) noexcept
    : DaysOfWeekCode() {
    *this = ::std::move(from);
  }

  inline DaysOfWeekCode& operator=(DaysOfWeekCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DaysOfWeekCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DaysOfWeekCode* internal_default_instance() {
    return reinterpret_cast<const DaysOfWeekCode*>(
               &_DaysOfWeekCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  void Swap(DaysOfWeekCode* other);
  friend void swap(DaysOfWeekCode& a, DaysOfWeekCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DaysOfWeekCode* New() const final {
    return CreateMaybeMessage<DaysOfWeekCode>(NULL);
  }

  DaysOfWeekCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DaysOfWeekCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DaysOfWeekCode& from);
  void MergeFrom(const DaysOfWeekCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DaysOfWeekCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DaysOfWeekCode_Value Value;
  static const Value INVALID_UNINITIALIZED =
    DaysOfWeekCode_Value_INVALID_UNINITIALIZED;
  static const Value MON =
    DaysOfWeekCode_Value_MON;
  static const Value TUE =
    DaysOfWeekCode_Value_TUE;
  static const Value WED =
    DaysOfWeekCode_Value_WED;
  static const Value THU =
    DaysOfWeekCode_Value_THU;
  static const Value FRI =
    DaysOfWeekCode_Value_FRI;
  static const Value SAT =
    DaysOfWeekCode_Value_SAT;
  static const Value SUN =
    DaysOfWeekCode_Value_SUN;
  static inline bool Value_IsValid(int value) {
    return DaysOfWeekCode_Value_IsValid(value);
  }
  static const Value Value_MIN =
    DaysOfWeekCode_Value_Value_MIN;
  static const Value Value_MAX =
    DaysOfWeekCode_Value_Value_MAX;
  static const int Value_ARRAYSIZE =
    DaysOfWeekCode_Value_Value_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Value_descriptor() {
    return DaysOfWeekCode_Value_descriptor();
  }
  static inline const ::std::string& Value_Name(Value value) {
    return DaysOfWeekCode_Value_Name(value);
  }
  static inline bool Value_Parse(const ::std::string& name,
      Value* value) {
    return DaysOfWeekCode_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.DaysOfWeekCode.Value value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::fhir::stu3::proto::DaysOfWeekCode_Value value() const;
  void set_value(::google::fhir::stu3::proto::DaysOfWeekCode_Value value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.DaysOfWeekCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EventTimingCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.EventTimingCode) */ {
 public:
  EventTimingCode();
  virtual ~EventTimingCode();

  EventTimingCode(const EventTimingCode& from);

  inline EventTimingCode& operator=(const EventTimingCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EventTimingCode(EventTimingCode&& from) noexcept
    : EventTimingCode() {
    *this = ::std::move(from);
  }

  inline EventTimingCode& operator=(EventTimingCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EventTimingCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventTimingCode* internal_default_instance() {
    return reinterpret_cast<const EventTimingCode*>(
               &_EventTimingCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  void Swap(EventTimingCode* other);
  friend void swap(EventTimingCode& a, EventTimingCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventTimingCode* New() const final {
    return CreateMaybeMessage<EventTimingCode>(NULL);
  }

  EventTimingCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EventTimingCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EventTimingCode& from);
  void MergeFrom(const EventTimingCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventTimingCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef EventTimingCode_Value Value;
  static const Value INVALID_UNINITIALIZED =
    EventTimingCode_Value_INVALID_UNINITIALIZED;
  static const Value MORN =
    EventTimingCode_Value_MORN;
  static const Value AFT =
    EventTimingCode_Value_AFT;
  static const Value EVE =
    EventTimingCode_Value_EVE;
  static const Value NIGHT =
    EventTimingCode_Value_NIGHT;
  static const Value PHS =
    EventTimingCode_Value_PHS;
  static const Value HS =
    EventTimingCode_Value_HS;
  static const Value WAKE =
    EventTimingCode_Value_WAKE;
  static const Value C =
    EventTimingCode_Value_C;
  static const Value CM =
    EventTimingCode_Value_CM;
  static const Value CD =
    EventTimingCode_Value_CD;
  static const Value CV =
    EventTimingCode_Value_CV;
  static const Value AC =
    EventTimingCode_Value_AC;
  static const Value ACM =
    EventTimingCode_Value_ACM;
  static const Value ACD =
    EventTimingCode_Value_ACD;
  static const Value ACV =
    EventTimingCode_Value_ACV;
  static const Value PC =
    EventTimingCode_Value_PC;
  static const Value PCM =
    EventTimingCode_Value_PCM;
  static const Value PCD =
    EventTimingCode_Value_PCD;
  static const Value PCV =
    EventTimingCode_Value_PCV;
  static inline bool Value_IsValid(int value) {
    return EventTimingCode_Value_IsValid(value);
  }
  static const Value Value_MIN =
    EventTimingCode_Value_Value_MIN;
  static const Value Value_MAX =
    EventTimingCode_Value_Value_MAX;
  static const int Value_ARRAYSIZE =
    EventTimingCode_Value_Value_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Value_descriptor() {
    return EventTimingCode_Value_descriptor();
  }
  static inline const ::std::string& Value_Name(Value value) {
    return EventTimingCode_Value_Name(value);
  }
  static inline bool Value_Parse(const ::std::string& name,
      Value* value) {
    return EventTimingCode_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.EventTimingCode.Value value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::fhir::stu3::proto::EventTimingCode_Value value() const;
  void set_value(::google::fhir::stu3::proto::EventTimingCode_Value value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.EventTimingCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IdentifierUseCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.IdentifierUseCode) */ {
 public:
  IdentifierUseCode();
  virtual ~IdentifierUseCode();

  IdentifierUseCode(const IdentifierUseCode& from);

  inline IdentifierUseCode& operator=(const IdentifierUseCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IdentifierUseCode(IdentifierUseCode&& from) noexcept
    : IdentifierUseCode() {
    *this = ::std::move(from);
  }

  inline IdentifierUseCode& operator=(IdentifierUseCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IdentifierUseCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IdentifierUseCode* internal_default_instance() {
    return reinterpret_cast<const IdentifierUseCode*>(
               &_IdentifierUseCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  void Swap(IdentifierUseCode* other);
  friend void swap(IdentifierUseCode& a, IdentifierUseCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IdentifierUseCode* New() const final {
    return CreateMaybeMessage<IdentifierUseCode>(NULL);
  }

  IdentifierUseCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IdentifierUseCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IdentifierUseCode& from);
  void MergeFrom(const IdentifierUseCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdentifierUseCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef IdentifierUseCode_Value Value;
  static const Value INVALID_UNINITIALIZED =
    IdentifierUseCode_Value_INVALID_UNINITIALIZED;
  static const Value USUAL =
    IdentifierUseCode_Value_USUAL;
  static const Value OFFICIAL =
    IdentifierUseCode_Value_OFFICIAL;
  static const Value TEMP =
    IdentifierUseCode_Value_TEMP;
  static const Value SECONDARY =
    IdentifierUseCode_Value_SECONDARY;
  static inline bool Value_IsValid(int value) {
    return IdentifierUseCode_Value_IsValid(value);
  }
  static const Value Value_MIN =
    IdentifierUseCode_Value_Value_MIN;
  static const Value Value_MAX =
    IdentifierUseCode_Value_Value_MAX;
  static const int Value_ARRAYSIZE =
    IdentifierUseCode_Value_Value_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Value_descriptor() {
    return IdentifierUseCode_Value_descriptor();
  }
  static inline const ::std::string& Value_Name(Value value) {
    return IdentifierUseCode_Value_Name(value);
  }
  static inline bool Value_Parse(const ::std::string& name,
      Value* value) {
    return IdentifierUseCode_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.IdentifierUseCode.Value value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::fhir::stu3::proto::IdentifierUseCode_Value value() const;
  void set_value(::google::fhir::stu3::proto::IdentifierUseCode_Value value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.IdentifierUseCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AllLanguageCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.AllLanguageCode) */ {
 public:
  AllLanguageCode();
  virtual ~AllLanguageCode();

  AllLanguageCode(const AllLanguageCode& from);

  inline AllLanguageCode& operator=(const AllLanguageCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllLanguageCode(AllLanguageCode&& from) noexcept
    : AllLanguageCode() {
    *this = ::std::move(from);
  }

  inline AllLanguageCode& operator=(AllLanguageCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllLanguageCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllLanguageCode* internal_default_instance() {
    return reinterpret_cast<const AllLanguageCode*>(
               &_AllLanguageCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  void Swap(AllLanguageCode* other);
  friend void swap(AllLanguageCode& a, AllLanguageCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllLanguageCode* New() const final {
    return CreateMaybeMessage<AllLanguageCode>(NULL);
  }

  AllLanguageCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllLanguageCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AllLanguageCode& from);
  void MergeFrom(const AllLanguageCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllLanguageCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.AllLanguageCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::fhir::stu3::proto::String* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LanguageCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.LanguageCode) */ {
 public:
  LanguageCode();
  virtual ~LanguageCode();

  LanguageCode(const LanguageCode& from);

  inline LanguageCode& operator=(const LanguageCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LanguageCode(LanguageCode&& from) noexcept
    : LanguageCode() {
    *this = ::std::move(from);
  }

  inline LanguageCode& operator=(LanguageCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LanguageCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LanguageCode* internal_default_instance() {
    return reinterpret_cast<const LanguageCode*>(
               &_LanguageCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  void Swap(LanguageCode* other);
  friend void swap(LanguageCode& a, LanguageCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LanguageCode* New() const final {
    return CreateMaybeMessage<LanguageCode>(NULL);
  }

  LanguageCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LanguageCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LanguageCode& from);
  void MergeFrom(const LanguageCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LanguageCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.LanguageCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::fhir::stu3::proto::String* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MimeTypeCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.MimeTypeCode) */ {
 public:
  MimeTypeCode();
  virtual ~MimeTypeCode();

  MimeTypeCode(const MimeTypeCode& from);

  inline MimeTypeCode& operator=(const MimeTypeCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MimeTypeCode(MimeTypeCode&& from) noexcept
    : MimeTypeCode() {
    *this = ::std::move(from);
  }

  inline MimeTypeCode& operator=(MimeTypeCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MimeTypeCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MimeTypeCode* internal_default_instance() {
    return reinterpret_cast<const MimeTypeCode*>(
               &_MimeTypeCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  void Swap(MimeTypeCode* other);
  friend void swap(MimeTypeCode& a, MimeTypeCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MimeTypeCode* New() const final {
    return CreateMaybeMessage<MimeTypeCode>(NULL);
  }

  MimeTypeCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MimeTypeCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MimeTypeCode& from);
  void MergeFrom(const MimeTypeCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MimeTypeCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // string value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.MimeTypeCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::fhir::stu3::proto::String* id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NameUseCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.NameUseCode) */ {
 public:
  NameUseCode();
  virtual ~NameUseCode();

  NameUseCode(const NameUseCode& from);

  inline NameUseCode& operator=(const NameUseCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NameUseCode(NameUseCode&& from) noexcept
    : NameUseCode() {
    *this = ::std::move(from);
  }

  inline NameUseCode& operator=(NameUseCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NameUseCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NameUseCode* internal_default_instance() {
    return reinterpret_cast<const NameUseCode*>(
               &_NameUseCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  void Swap(NameUseCode* other);
  friend void swap(NameUseCode& a, NameUseCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NameUseCode* New() const final {
    return CreateMaybeMessage<NameUseCode>(NULL);
  }

  NameUseCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NameUseCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NameUseCode& from);
  void MergeFrom(const NameUseCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NameUseCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NameUseCode_Value Value;
  static const Value INVALID_UNINITIALIZED =
    NameUseCode_Value_INVALID_UNINITIALIZED;
  static const Value USUAL =
    NameUseCode_Value_USUAL;
  static const Value OFFICIAL =
    NameUseCode_Value_OFFICIAL;
  static const Value TEMP =
    NameUseCode_Value_TEMP;
  static const Value NICKNAME =
    NameUseCode_Value_NICKNAME;
  static const Value ANONYMOUS =
    NameUseCode_Value_ANONYMOUS;
  static const Value OLD =
    NameUseCode_Value_OLD;
  static const Value MAIDEN =
    NameUseCode_Value_MAIDEN;
  static inline bool Value_IsValid(int value) {
    return NameUseCode_Value_IsValid(value);
  }
  static const Value Value_MIN =
    NameUseCode_Value_Value_MIN;
  static const Value Value_MAX =
    NameUseCode_Value_Value_MAX;
  static const int Value_ARRAYSIZE =
    NameUseCode_Value_Value_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Value_descriptor() {
    return NameUseCode_Value_descriptor();
  }
  static inline const ::std::string& Value_Name(Value value) {
    return NameUseCode_Value_Name(value);
  }
  static inline bool Value_Parse(const ::std::string& name,
      Value* value) {
    return NameUseCode_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.NameUseCode.Value value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::fhir::stu3::proto::NameUseCode_Value value() const;
  void set_value(::google::fhir::stu3::proto::NameUseCode_Value value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.NameUseCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QuantityComparatorCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.QuantityComparatorCode) */ {
 public:
  QuantityComparatorCode();
  virtual ~QuantityComparatorCode();

  QuantityComparatorCode(const QuantityComparatorCode& from);

  inline QuantityComparatorCode& operator=(const QuantityComparatorCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QuantityComparatorCode(QuantityComparatorCode&& from) noexcept
    : QuantityComparatorCode() {
    *this = ::std::move(from);
  }

  inline QuantityComparatorCode& operator=(QuantityComparatorCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const QuantityComparatorCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuantityComparatorCode* internal_default_instance() {
    return reinterpret_cast<const QuantityComparatorCode*>(
               &_QuantityComparatorCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  void Swap(QuantityComparatorCode* other);
  friend void swap(QuantityComparatorCode& a, QuantityComparatorCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuantityComparatorCode* New() const final {
    return CreateMaybeMessage<QuantityComparatorCode>(NULL);
  }

  QuantityComparatorCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QuantityComparatorCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QuantityComparatorCode& from);
  void MergeFrom(const QuantityComparatorCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuantityComparatorCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef QuantityComparatorCode_Value Value;
  static const Value INVALID_UNINITIALIZED =
    QuantityComparatorCode_Value_INVALID_UNINITIALIZED;
  static const Value LT =
    QuantityComparatorCode_Value_LT;
  static const Value LE =
    QuantityComparatorCode_Value_LE;
  static const Value GE =
    QuantityComparatorCode_Value_GE;
  static const Value GT =
    QuantityComparatorCode_Value_GT;
  static inline bool Value_IsValid(int value) {
    return QuantityComparatorCode_Value_IsValid(value);
  }
  static const Value Value_MIN =
    QuantityComparatorCode_Value_Value_MIN;
  static const Value Value_MAX =
    QuantityComparatorCode_Value_Value_MAX;
  static const int Value_ARRAYSIZE =
    QuantityComparatorCode_Value_Value_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Value_descriptor() {
    return QuantityComparatorCode_Value_descriptor();
  }
  static inline const ::std::string& Value_Name(Value value) {
    return QuantityComparatorCode_Value_Name(value);
  }
  static inline bool Value_Parse(const ::std::string& name,
      Value* value) {
    return QuantityComparatorCode_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.QuantityComparatorCode.Value value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::fhir::stu3::proto::QuantityComparatorCode_Value value() const;
  void set_value(::google::fhir::stu3::proto::QuantityComparatorCode_Value value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.QuantityComparatorCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UnitsOfTimeCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.fhir.stu3.proto.UnitsOfTimeCode) */ {
 public:
  UnitsOfTimeCode();
  virtual ~UnitsOfTimeCode();

  UnitsOfTimeCode(const UnitsOfTimeCode& from);

  inline UnitsOfTimeCode& operator=(const UnitsOfTimeCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnitsOfTimeCode(UnitsOfTimeCode&& from) noexcept
    : UnitsOfTimeCode() {
    *this = ::std::move(from);
  }

  inline UnitsOfTimeCode& operator=(UnitsOfTimeCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnitsOfTimeCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnitsOfTimeCode* internal_default_instance() {
    return reinterpret_cast<const UnitsOfTimeCode*>(
               &_UnitsOfTimeCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  void Swap(UnitsOfTimeCode* other);
  friend void swap(UnitsOfTimeCode& a, UnitsOfTimeCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnitsOfTimeCode* New() const final {
    return CreateMaybeMessage<UnitsOfTimeCode>(NULL);
  }

  UnitsOfTimeCode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UnitsOfTimeCode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UnitsOfTimeCode& from);
  void MergeFrom(const UnitsOfTimeCode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnitsOfTimeCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UnitsOfTimeCode_Value Value;
  static const Value INVALID_UNINITIALIZED =
    UnitsOfTimeCode_Value_INVALID_UNINITIALIZED;
  static const Value S =
    UnitsOfTimeCode_Value_S;
  static const Value MIN =
    UnitsOfTimeCode_Value_MIN;
  static const Value H =
    UnitsOfTimeCode_Value_H;
  static const Value D =
    UnitsOfTimeCode_Value_D;
  static const Value WK =
    UnitsOfTimeCode_Value_WK;
  static const Value MO =
    UnitsOfTimeCode_Value_MO;
  static const Value A =
    UnitsOfTimeCode_Value_A;
  static inline bool Value_IsValid(int value) {
    return UnitsOfTimeCode_Value_IsValid(value);
  }
  static const Value Value_MIN =
    UnitsOfTimeCode_Value_Value_MIN;
  static const Value Value_MAX =
    UnitsOfTimeCode_Value_Value_MAX;
  static const int Value_ARRAYSIZE =
    UnitsOfTimeCode_Value_Value_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Value_descriptor() {
    return UnitsOfTimeCode_Value_descriptor();
  }
  static inline const ::std::string& Value_Name(Value value) {
    return UnitsOfTimeCode_Value_Name(value);
  }
  static inline bool Value_Parse(const ::std::string& name,
      Value* value) {
    return UnitsOfTimeCode_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.fhir.stu3.proto.Extension extension = 3;
  int extension_size() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 3;
  ::google::fhir::stu3::proto::Extension* mutable_extension(int index);
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
      mutable_extension();
  const ::google::fhir::stu3::proto::Extension& extension(int index) const;
  ::google::fhir::stu3::proto::Extension* add_extension();
  const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
      extension() const;

  // .google.fhir.stu3.proto.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  private:
  const ::google::fhir::stu3::proto::String& _internal_id() const;
  public:
  const ::google::fhir::stu3::proto::String& id() const;
  ::google::fhir::stu3::proto::String* release_id();
  ::google::fhir::stu3::proto::String* mutable_id();
  void set_allocated_id(::google::fhir::stu3::proto::String* id);

  // .google.fhir.stu3.proto.UnitsOfTimeCode.Value value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  ::google::fhir::stu3::proto::UnitsOfTimeCode_Value value() const;
  void set_value(::google::fhir::stu3::proto::UnitsOfTimeCode_Value value);

  // @@protoc_insertion_point(class_scope:google.fhir.stu3.proto.UnitsOfTimeCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension > extension_;
  ::google::fhir::stu3::proto::String* id_;
  int value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fstu3_2fdatatypes_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Base64Binary

// bytes value = 1;
inline void Base64Binary::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Base64Binary::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Base64Binary.value)
  return value_.GetNoArena();
}
inline void Base64Binary::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.Base64Binary.value)
}
#if LANG_CXX11
inline void Base64Binary::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.stu3.proto.Base64Binary.value)
}
#endif
inline void Base64Binary::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.stu3.proto.Base64Binary.value)
}
inline void Base64Binary::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.stu3.proto.Base64Binary.value)
}
inline ::std::string* Base64Binary::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Base64Binary.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Base64Binary::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Base64Binary.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Base64Binary::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Base64Binary.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool Base64Binary::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Base64Binary::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Base64Binary::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Base64Binary::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Base64Binary.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Base64Binary::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Base64Binary.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Base64Binary::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Base64Binary.id)
  return id_;
}
inline void Base64Binary::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Base64Binary.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int Base64Binary::extension_size() const {
  return extension_.size();
}
inline void Base64Binary::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Base64Binary::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Base64Binary.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Base64Binary::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Base64Binary.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Base64Binary::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Base64Binary.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Base64Binary::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Base64Binary.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Base64Binary::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Base64Binary.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Boolean

// bool value = 1;
inline void Boolean::clear_value() {
  value_ = false;
}
inline bool Boolean::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Boolean.value)
  return value_;
}
inline void Boolean::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.Boolean.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool Boolean::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Boolean::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Boolean::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Boolean::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Boolean.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Boolean::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Boolean.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Boolean::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Boolean.id)
  return id_;
}
inline void Boolean::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Boolean.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int Boolean::extension_size() const {
  return extension_.size();
}
inline void Boolean::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Boolean::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Boolean.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Boolean::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Boolean.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Boolean::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Boolean.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Boolean::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Boolean.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Boolean::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Boolean.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Code

// string value = 1;
inline void Code::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Code::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Code.value)
  return value_.GetNoArena();
}
inline void Code::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.Code.value)
}
#if LANG_CXX11
inline void Code::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.stu3.proto.Code.value)
}
#endif
inline void Code::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.stu3.proto.Code.value)
}
inline void Code::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.stu3.proto.Code.value)
}
inline ::std::string* Code::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Code.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Code::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Code.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Code::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Code.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool Code::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Code::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Code::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Code::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Code.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Code::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Code.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Code::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Code.id)
  return id_;
}
inline void Code::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Code.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int Code::extension_size() const {
  return extension_.size();
}
inline void Code::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Code::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Code.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Code::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Code.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Code::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Code.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Code::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Code.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Code::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Code.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Date

// int64 value_us = 1;
inline void Date::clear_value_us() {
  value_us_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Date::value_us() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Date.value_us)
  return value_us_;
}
inline void Date::set_value_us(::google::protobuf::int64 value) {
  
  value_us_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.Date.value_us)
}

// string timezone = 2;
inline void Date::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Date::timezone() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Date.timezone)
  return timezone_.GetNoArena();
}
inline void Date::set_timezone(const ::std::string& value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.Date.timezone)
}
#if LANG_CXX11
inline void Date::set_timezone(::std::string&& value) {
  
  timezone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.stu3.proto.Date.timezone)
}
#endif
inline void Date::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.stu3.proto.Date.timezone)
}
inline void Date::set_timezone(const char* value, size_t size) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.stu3.proto.Date.timezone)
}
inline ::std::string* Date::mutable_timezone() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Date.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Date::release_timezone() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Date.timezone)
  
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Date::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    
  } else {
    
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Date.timezone)
}

// .google.fhir.stu3.proto.Date.Precision precision = 3;
inline void Date::clear_precision() {
  precision_ = 0;
}
inline ::google::fhir::stu3::proto::Date_Precision Date::precision() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Date.precision)
  return static_cast< ::google::fhir::stu3::proto::Date_Precision >(precision_);
}
inline void Date::set_precision(::google::fhir::stu3::proto::Date_Precision value) {
  
  precision_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.Date.precision)
}

// .google.fhir.stu3.proto.String id = 4;
inline bool Date::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Date::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Date::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Date::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Date.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Date::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Date.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Date::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Date.id)
  return id_;
}
inline void Date::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Date.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 5;
inline int Date::extension_size() const {
  return extension_.size();
}
inline void Date::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Date::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Date.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Date::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Date.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Date::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Date.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Date::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Date.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Date::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Date.extension)
  return extension_;
}

// -------------------------------------------------------------------

// DateTime

// int64 value_us = 1;
inline void DateTime::clear_value_us() {
  value_us_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DateTime::value_us() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DateTime.value_us)
  return value_us_;
}
inline void DateTime::set_value_us(::google::protobuf::int64 value) {
  
  value_us_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.DateTime.value_us)
}

// string timezone = 2;
inline void DateTime::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DateTime::timezone() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DateTime.timezone)
  return timezone_.GetNoArena();
}
inline void DateTime::set_timezone(const ::std::string& value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.DateTime.timezone)
}
#if LANG_CXX11
inline void DateTime::set_timezone(::std::string&& value) {
  
  timezone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.stu3.proto.DateTime.timezone)
}
#endif
inline void DateTime::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.stu3.proto.DateTime.timezone)
}
inline void DateTime::set_timezone(const char* value, size_t size) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.stu3.proto.DateTime.timezone)
}
inline ::std::string* DateTime::mutable_timezone() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DateTime.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DateTime::release_timezone() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DateTime.timezone)
  
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DateTime::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    
  } else {
    
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DateTime.timezone)
}

// .google.fhir.stu3.proto.DateTime.Precision precision = 3;
inline void DateTime::clear_precision() {
  precision_ = 0;
}
inline ::google::fhir::stu3::proto::DateTime_Precision DateTime::precision() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DateTime.precision)
  return static_cast< ::google::fhir::stu3::proto::DateTime_Precision >(precision_);
}
inline void DateTime::set_precision(::google::fhir::stu3::proto::DateTime_Precision value) {
  
  precision_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.DateTime.precision)
}

// .google.fhir.stu3.proto.String id = 4;
inline bool DateTime::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void DateTime::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& DateTime::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DateTime::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DateTime.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DateTime::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DateTime.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DateTime::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DateTime.id)
  return id_;
}
inline void DateTime::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DateTime.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 5;
inline int DateTime::extension_size() const {
  return extension_.size();
}
inline void DateTime::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* DateTime::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DateTime.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
DateTime::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.DateTime.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& DateTime::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DateTime.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* DateTime::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.DateTime.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
DateTime::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.DateTime.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Decimal

// string value = 1;
inline void Decimal::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Decimal::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Decimal.value)
  return value_.GetNoArena();
}
inline void Decimal::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.Decimal.value)
}
#if LANG_CXX11
inline void Decimal::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.stu3.proto.Decimal.value)
}
#endif
inline void Decimal::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.stu3.proto.Decimal.value)
}
inline void Decimal::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.stu3.proto.Decimal.value)
}
inline ::std::string* Decimal::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Decimal.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Decimal::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Decimal.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Decimal::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Decimal.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool Decimal::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Decimal::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Decimal::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Decimal::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Decimal.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Decimal::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Decimal.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Decimal::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Decimal.id)
  return id_;
}
inline void Decimal::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Decimal.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int Decimal::extension_size() const {
  return extension_.size();
}
inline void Decimal::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Decimal::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Decimal.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Decimal::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Decimal.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Decimal::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Decimal.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Decimal::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Decimal.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Decimal::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Decimal.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Id

// string value = 1;
inline void Id::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Id::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Id.value)
  return value_.GetNoArena();
}
inline void Id::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.Id.value)
}
#if LANG_CXX11
inline void Id::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.stu3.proto.Id.value)
}
#endif
inline void Id::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.stu3.proto.Id.value)
}
inline void Id::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.stu3.proto.Id.value)
}
inline ::std::string* Id::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Id.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Id::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Id.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Id::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Id.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool Id::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Id::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Id::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Id::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Id.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Id::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Id.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Id::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Id.id)
  return id_;
}
inline void Id::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Id.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int Id::extension_size() const {
  return extension_.size();
}
inline void Id::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Id::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Id.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Id::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Id.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Id::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Id.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Id::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Id.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Id::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Id.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Instant

// int64 value_us = 1;
inline void Instant::clear_value_us() {
  value_us_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Instant::value_us() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Instant.value_us)
  return value_us_;
}
inline void Instant::set_value_us(::google::protobuf::int64 value) {
  
  value_us_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.Instant.value_us)
}

// string timezone = 2;
inline void Instant::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Instant::timezone() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Instant.timezone)
  return timezone_.GetNoArena();
}
inline void Instant::set_timezone(const ::std::string& value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.Instant.timezone)
}
#if LANG_CXX11
inline void Instant::set_timezone(::std::string&& value) {
  
  timezone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.stu3.proto.Instant.timezone)
}
#endif
inline void Instant::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.stu3.proto.Instant.timezone)
}
inline void Instant::set_timezone(const char* value, size_t size) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.stu3.proto.Instant.timezone)
}
inline ::std::string* Instant::mutable_timezone() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Instant.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Instant::release_timezone() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Instant.timezone)
  
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Instant::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    
  } else {
    
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Instant.timezone)
}

// .google.fhir.stu3.proto.Instant.Precision precision = 3;
inline void Instant::clear_precision() {
  precision_ = 0;
}
inline ::google::fhir::stu3::proto::Instant_Precision Instant::precision() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Instant.precision)
  return static_cast< ::google::fhir::stu3::proto::Instant_Precision >(precision_);
}
inline void Instant::set_precision(::google::fhir::stu3::proto::Instant_Precision value) {
  
  precision_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.Instant.precision)
}

// .google.fhir.stu3.proto.String id = 4;
inline bool Instant::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Instant::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Instant::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Instant::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Instant.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Instant::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Instant.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Instant::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Instant.id)
  return id_;
}
inline void Instant::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Instant.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 5;
inline int Instant::extension_size() const {
  return extension_.size();
}
inline void Instant::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Instant::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Instant.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Instant::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Instant.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Instant::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Instant.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Instant::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Instant.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Instant::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Instant.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Integer

// sint32 value = 1;
inline void Integer::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 Integer::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Integer.value)
  return value_;
}
inline void Integer::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.Integer.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool Integer::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Integer::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Integer::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Integer::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Integer.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Integer::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Integer.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Integer::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Integer.id)
  return id_;
}
inline void Integer::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Integer.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int Integer::extension_size() const {
  return extension_.size();
}
inline void Integer::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Integer::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Integer.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Integer::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Integer.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Integer::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Integer.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Integer::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Integer.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Integer::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Integer.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Markdown

// string value = 1;
inline void Markdown::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Markdown::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Markdown.value)
  return value_.GetNoArena();
}
inline void Markdown::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.Markdown.value)
}
#if LANG_CXX11
inline void Markdown::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.stu3.proto.Markdown.value)
}
#endif
inline void Markdown::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.stu3.proto.Markdown.value)
}
inline void Markdown::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.stu3.proto.Markdown.value)
}
inline ::std::string* Markdown::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Markdown.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Markdown::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Markdown.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Markdown::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Markdown.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool Markdown::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Markdown::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Markdown::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Markdown::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Markdown.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Markdown::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Markdown.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Markdown::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Markdown.id)
  return id_;
}
inline void Markdown::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Markdown.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int Markdown::extension_size() const {
  return extension_.size();
}
inline void Markdown::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Markdown::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Markdown.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Markdown::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Markdown.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Markdown::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Markdown.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Markdown::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Markdown.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Markdown::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Markdown.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Oid

// string value = 1;
inline void Oid::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Oid::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Oid.value)
  return value_.GetNoArena();
}
inline void Oid::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.Oid.value)
}
#if LANG_CXX11
inline void Oid::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.stu3.proto.Oid.value)
}
#endif
inline void Oid::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.stu3.proto.Oid.value)
}
inline void Oid::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.stu3.proto.Oid.value)
}
inline ::std::string* Oid::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Oid.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Oid::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Oid.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Oid::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Oid.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool Oid::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Oid::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Oid::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Oid::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Oid.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Oid::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Oid.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Oid::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Oid.id)
  return id_;
}
inline void Oid::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Oid.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int Oid::extension_size() const {
  return extension_.size();
}
inline void Oid::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Oid::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Oid.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Oid::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Oid.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Oid::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Oid.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Oid::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Oid.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Oid::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Oid.extension)
  return extension_;
}

// -------------------------------------------------------------------

// PositiveInt

// uint32 value = 1;
inline void PositiveInt::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 PositiveInt::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PositiveInt.value)
  return value_;
}
inline void PositiveInt::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.PositiveInt.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool PositiveInt::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void PositiveInt::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& PositiveInt::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& PositiveInt::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PositiveInt.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* PositiveInt::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.PositiveInt.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* PositiveInt::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PositiveInt.id)
  return id_;
}
inline void PositiveInt::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.PositiveInt.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int PositiveInt::extension_size() const {
  return extension_.size();
}
inline void PositiveInt::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* PositiveInt::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.PositiveInt.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
PositiveInt::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.PositiveInt.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& PositiveInt::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.PositiveInt.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* PositiveInt::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.PositiveInt.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
PositiveInt::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.PositiveInt.extension)
  return extension_;
}

// -------------------------------------------------------------------

// String

// string value = 1;
inline void String::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& String::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.String.value)
  return value_.GetNoArena();
}
inline void String::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.String.value)
}
#if LANG_CXX11
inline void String::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.stu3.proto.String.value)
}
#endif
inline void String::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.stu3.proto.String.value)
}
inline void String::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.stu3.proto.String.value)
}
inline ::std::string* String::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.String.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* String::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.String.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void String::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.String.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool String::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void String::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& String::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& String::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.String.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* String::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.String.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* String::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.String.id)
  return id_;
}
inline void String::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.String.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int String::extension_size() const {
  return extension_.size();
}
inline void String::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* String::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.String.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
String::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.String.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& String::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.String.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* String::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.String.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
String::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.String.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Time

// int64 value_us = 1;
inline void Time::clear_value_us() {
  value_us_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Time::value_us() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Time.value_us)
  return value_us_;
}
inline void Time::set_value_us(::google::protobuf::int64 value) {
  
  value_us_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.Time.value_us)
}

// .google.fhir.stu3.proto.Time.Precision precision = 2;
inline void Time::clear_precision() {
  precision_ = 0;
}
inline ::google::fhir::stu3::proto::Time_Precision Time::precision() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Time.precision)
  return static_cast< ::google::fhir::stu3::proto::Time_Precision >(precision_);
}
inline void Time::set_precision(::google::fhir::stu3::proto::Time_Precision value) {
  
  precision_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.Time.precision)
}

// .google.fhir.stu3.proto.String id = 3;
inline bool Time::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Time::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Time::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Time::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Time.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Time::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Time.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Time::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Time.id)
  return id_;
}
inline void Time::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Time.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 4;
inline int Time::extension_size() const {
  return extension_.size();
}
inline void Time::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Time::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Time.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Time::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Time.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Time::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Time.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Time::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Time.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Time::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Time.extension)
  return extension_;
}

// -------------------------------------------------------------------

// UnsignedInt

// uint32 value = 1;
inline void UnsignedInt::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 UnsignedInt::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.UnsignedInt.value)
  return value_;
}
inline void UnsignedInt::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.UnsignedInt.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool UnsignedInt::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void UnsignedInt::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& UnsignedInt::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& UnsignedInt::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.UnsignedInt.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* UnsignedInt::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.UnsignedInt.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* UnsignedInt::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.UnsignedInt.id)
  return id_;
}
inline void UnsignedInt::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.UnsignedInt.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int UnsignedInt::extension_size() const {
  return extension_.size();
}
inline void UnsignedInt::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* UnsignedInt::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.UnsignedInt.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
UnsignedInt::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.UnsignedInt.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& UnsignedInt::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.UnsignedInt.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* UnsignedInt::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.UnsignedInt.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
UnsignedInt::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.UnsignedInt.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Uri

// string value = 1;
inline void Uri::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Uri::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Uri.value)
  return value_.GetNoArena();
}
inline void Uri::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.Uri.value)
}
#if LANG_CXX11
inline void Uri::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.stu3.proto.Uri.value)
}
#endif
inline void Uri::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.stu3.proto.Uri.value)
}
inline void Uri::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.stu3.proto.Uri.value)
}
inline ::std::string* Uri::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Uri.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Uri::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Uri.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uri::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Uri.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool Uri::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Uri::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Uri::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Uri::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Uri.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Uri::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Uri.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Uri::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Uri.id)
  return id_;
}
inline void Uri::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Uri.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int Uri::extension_size() const {
  return extension_.size();
}
inline void Uri::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Uri::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Uri.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Uri::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Uri.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Uri::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Uri.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Uri::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Uri.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Uri::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Uri.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Uuid

// string value = 1;
inline void Uuid::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Uuid::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Uuid.value)
  return value_.GetNoArena();
}
inline void Uuid::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.Uuid.value)
}
#if LANG_CXX11
inline void Uuid::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.stu3.proto.Uuid.value)
}
#endif
inline void Uuid::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.stu3.proto.Uuid.value)
}
inline void Uuid::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.stu3.proto.Uuid.value)
}
inline ::std::string* Uuid::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Uuid.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Uuid::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Uuid.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Uuid::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Uuid.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool Uuid::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Uuid::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Uuid::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Uuid::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Uuid.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Uuid::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Uuid.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Uuid::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Uuid.id)
  return id_;
}
inline void Uuid::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Uuid.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int Uuid::extension_size() const {
  return extension_.size();
}
inline void Uuid::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Uuid::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Uuid.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Uuid::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Uuid.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Uuid::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Uuid.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Uuid::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Uuid.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Uuid::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Uuid.extension)
  return extension_;
}

// -------------------------------------------------------------------

// Xhtml

// string value = 1 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline void Xhtml::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Xhtml::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Xhtml.value)
  return value_.GetNoArena();
}
inline void Xhtml::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.Xhtml.value)
}
#if LANG_CXX11
inline void Xhtml::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.stu3.proto.Xhtml.value)
}
#endif
inline void Xhtml::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.stu3.proto.Xhtml.value)
}
inline void Xhtml::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.stu3.proto.Xhtml.value)
}
inline ::std::string* Xhtml::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Xhtml.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Xhtml::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Xhtml.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Xhtml::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Xhtml.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool Xhtml::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Xhtml::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Xhtml::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Xhtml::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Xhtml.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Xhtml::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Xhtml.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Xhtml::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Xhtml.id)
  return id_;
}
inline void Xhtml::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Xhtml.id)
}

// -------------------------------------------------------------------

// Address

// .google.fhir.stu3.proto.String id = 1;
inline bool Address::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Address::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Address::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Address::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Address.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Address::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Address.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Address::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Address.id)
  return id_;
}
inline void Address::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Address.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int Address::extension_size() const {
  return extension_.size();
}
inline void Address::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Address::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Address.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Address::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Address.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Address::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Address.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Address::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Address.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Address::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Address.extension)
  return extension_;
}

// .google.fhir.stu3.proto.AddressUseCode use = 3;
inline bool Address::has_use() const {
  return this != internal_default_instance() && use_ != NULL;
}
inline void Address::clear_use() {
  if (GetArenaNoVirtual() == NULL && use_ != NULL) {
    delete use_;
  }
  use_ = NULL;
}
inline const ::google::fhir::stu3::proto::AddressUseCode& Address::_internal_use() const {
  return *use_;
}
inline const ::google::fhir::stu3::proto::AddressUseCode& Address::use() const {
  const ::google::fhir::stu3::proto::AddressUseCode* p = use_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Address.use)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::AddressUseCode*>(
      &::google::fhir::stu3::proto::_AddressUseCode_default_instance_);
}
inline ::google::fhir::stu3::proto::AddressUseCode* Address::release_use() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Address.use)
  
  ::google::fhir::stu3::proto::AddressUseCode* temp = use_;
  use_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::AddressUseCode* Address::mutable_use() {
  
  if (use_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::AddressUseCode>(GetArenaNoVirtual());
    use_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Address.use)
  return use_;
}
inline void Address::set_allocated_use(::google::fhir::stu3::proto::AddressUseCode* use) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete use_;
  }
  if (use) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      use = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, use, submessage_arena);
    }
    
  } else {
    
  }
  use_ = use;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Address.use)
}

// .google.fhir.stu3.proto.AddressTypeCode type = 4;
inline bool Address::has_type() const {
  return this != internal_default_instance() && type_ != NULL;
}
inline void Address::clear_type() {
  if (GetArenaNoVirtual() == NULL && type_ != NULL) {
    delete type_;
  }
  type_ = NULL;
}
inline const ::google::fhir::stu3::proto::AddressTypeCode& Address::_internal_type() const {
  return *type_;
}
inline const ::google::fhir::stu3::proto::AddressTypeCode& Address::type() const {
  const ::google::fhir::stu3::proto::AddressTypeCode* p = type_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Address.type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::AddressTypeCode*>(
      &::google::fhir::stu3::proto::_AddressTypeCode_default_instance_);
}
inline ::google::fhir::stu3::proto::AddressTypeCode* Address::release_type() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Address.type)
  
  ::google::fhir::stu3::proto::AddressTypeCode* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::AddressTypeCode* Address::mutable_type() {
  
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::AddressTypeCode>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Address.type)
  return type_;
}
inline void Address::set_allocated_type(::google::fhir::stu3::proto::AddressTypeCode* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete type_;
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Address.type)
}

// .google.fhir.stu3.proto.String text = 5;
inline bool Address::has_text() const {
  return this != internal_default_instance() && text_ != NULL;
}
inline void Address::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) {
    delete text_;
  }
  text_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Address::_internal_text() const {
  return *text_;
}
inline const ::google::fhir::stu3::proto::String& Address::text() const {
  const ::google::fhir::stu3::proto::String* p = text_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Address.text)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Address::release_text() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Address.text)
  
  ::google::fhir::stu3::proto::String* temp = text_;
  text_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Address::mutable_text() {
  
  if (text_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    text_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Address.text)
  return text_;
}
inline void Address::set_allocated_text(::google::fhir::stu3::proto::String* text) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete text_;
  }
  if (text) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      text = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Address.text)
}

// repeated .google.fhir.stu3.proto.String line = 6;
inline int Address::line_size() const {
  return line_.size();
}
inline void Address::clear_line() {
  line_.Clear();
}
inline ::google::fhir::stu3::proto::String* Address::mutable_line(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Address.line)
  return line_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >*
Address::mutable_line() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Address.line)
  return &line_;
}
inline const ::google::fhir::stu3::proto::String& Address::line(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Address.line)
  return line_.Get(index);
}
inline ::google::fhir::stu3::proto::String* Address::add_line() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Address.line)
  return line_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >&
Address::line() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Address.line)
  return line_;
}

// .google.fhir.stu3.proto.String city = 7;
inline bool Address::has_city() const {
  return this != internal_default_instance() && city_ != NULL;
}
inline void Address::clear_city() {
  if (GetArenaNoVirtual() == NULL && city_ != NULL) {
    delete city_;
  }
  city_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Address::_internal_city() const {
  return *city_;
}
inline const ::google::fhir::stu3::proto::String& Address::city() const {
  const ::google::fhir::stu3::proto::String* p = city_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Address.city)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Address::release_city() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Address.city)
  
  ::google::fhir::stu3::proto::String* temp = city_;
  city_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Address::mutable_city() {
  
  if (city_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    city_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Address.city)
  return city_;
}
inline void Address::set_allocated_city(::google::fhir::stu3::proto::String* city) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete city_;
  }
  if (city) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      city = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, city, submessage_arena);
    }
    
  } else {
    
  }
  city_ = city;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Address.city)
}

// .google.fhir.stu3.proto.String district = 8;
inline bool Address::has_district() const {
  return this != internal_default_instance() && district_ != NULL;
}
inline void Address::clear_district() {
  if (GetArenaNoVirtual() == NULL && district_ != NULL) {
    delete district_;
  }
  district_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Address::_internal_district() const {
  return *district_;
}
inline const ::google::fhir::stu3::proto::String& Address::district() const {
  const ::google::fhir::stu3::proto::String* p = district_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Address.district)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Address::release_district() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Address.district)
  
  ::google::fhir::stu3::proto::String* temp = district_;
  district_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Address::mutable_district() {
  
  if (district_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    district_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Address.district)
  return district_;
}
inline void Address::set_allocated_district(::google::fhir::stu3::proto::String* district) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete district_;
  }
  if (district) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      district = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, district, submessage_arena);
    }
    
  } else {
    
  }
  district_ = district;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Address.district)
}

// .google.fhir.stu3.proto.String state = 9;
inline bool Address::has_state() const {
  return this != internal_default_instance() && state_ != NULL;
}
inline void Address::clear_state() {
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Address::_internal_state() const {
  return *state_;
}
inline const ::google::fhir::stu3::proto::String& Address::state() const {
  const ::google::fhir::stu3::proto::String* p = state_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Address.state)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Address::release_state() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Address.state)
  
  ::google::fhir::stu3::proto::String* temp = state_;
  state_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Address::mutable_state() {
  
  if (state_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Address.state)
  return state_;
}
inline void Address::set_allocated_state(::google::fhir::stu3::proto::String* state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete state_;
  }
  if (state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Address.state)
}

// .google.fhir.stu3.proto.String postal_code = 10;
inline bool Address::has_postal_code() const {
  return this != internal_default_instance() && postal_code_ != NULL;
}
inline void Address::clear_postal_code() {
  if (GetArenaNoVirtual() == NULL && postal_code_ != NULL) {
    delete postal_code_;
  }
  postal_code_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Address::_internal_postal_code() const {
  return *postal_code_;
}
inline const ::google::fhir::stu3::proto::String& Address::postal_code() const {
  const ::google::fhir::stu3::proto::String* p = postal_code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Address.postal_code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Address::release_postal_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Address.postal_code)
  
  ::google::fhir::stu3::proto::String* temp = postal_code_;
  postal_code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Address::mutable_postal_code() {
  
  if (postal_code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    postal_code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Address.postal_code)
  return postal_code_;
}
inline void Address::set_allocated_postal_code(::google::fhir::stu3::proto::String* postal_code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete postal_code_;
  }
  if (postal_code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      postal_code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, postal_code, submessage_arena);
    }
    
  } else {
    
  }
  postal_code_ = postal_code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Address.postal_code)
}

// .google.fhir.stu3.proto.String country = 11;
inline bool Address::has_country() const {
  return this != internal_default_instance() && country_ != NULL;
}
inline void Address::clear_country() {
  if (GetArenaNoVirtual() == NULL && country_ != NULL) {
    delete country_;
  }
  country_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Address::_internal_country() const {
  return *country_;
}
inline const ::google::fhir::stu3::proto::String& Address::country() const {
  const ::google::fhir::stu3::proto::String* p = country_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Address.country)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Address::release_country() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Address.country)
  
  ::google::fhir::stu3::proto::String* temp = country_;
  country_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Address::mutable_country() {
  
  if (country_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    country_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Address.country)
  return country_;
}
inline void Address::set_allocated_country(::google::fhir::stu3::proto::String* country) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete country_;
  }
  if (country) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      country = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, country, submessage_arena);
    }
    
  } else {
    
  }
  country_ = country;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Address.country)
}

// .google.fhir.stu3.proto.Period period = 12;
inline bool Address::has_period() const {
  return this != internal_default_instance() && period_ != NULL;
}
inline void Address::clear_period() {
  if (GetArenaNoVirtual() == NULL && period_ != NULL) {
    delete period_;
  }
  period_ = NULL;
}
inline const ::google::fhir::stu3::proto::Period& Address::_internal_period() const {
  return *period_;
}
inline const ::google::fhir::stu3::proto::Period& Address::period() const {
  const ::google::fhir::stu3::proto::Period* p = period_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Address.period)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Period*>(
      &::google::fhir::stu3::proto::_Period_default_instance_);
}
inline ::google::fhir::stu3::proto::Period* Address::release_period() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Address.period)
  
  ::google::fhir::stu3::proto::Period* temp = period_;
  period_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Period* Address::mutable_period() {
  
  if (period_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Period>(GetArenaNoVirtual());
    period_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Address.period)
  return period_;
}
inline void Address::set_allocated_period(::google::fhir::stu3::proto::Period* period) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete period_;
  }
  if (period) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      period = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, period, submessage_arena);
    }
    
  } else {
    
  }
  period_ = period;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Address.period)
}

// -------------------------------------------------------------------

// Age

// .google.fhir.stu3.proto.String id = 1;
inline bool Age::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Age::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Age::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Age::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Age.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Age::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Age.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Age::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Age.id)
  return id_;
}
inline void Age::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Age.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int Age::extension_size() const {
  return extension_.size();
}
inline void Age::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Age::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Age.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Age::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Age.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Age::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Age.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Age::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Age.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Age::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Age.extension)
  return extension_;
}

// .google.fhir.stu3.proto.Decimal value = 3;
inline bool Age::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void Age::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& Age::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::Decimal& Age::value() const {
  const ::google::fhir::stu3::proto::Decimal* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Age.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* Age::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Age.value)
  
  ::google::fhir::stu3::proto::Decimal* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* Age::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Age.value)
  return value_;
}
inline void Age::set_allocated_value(::google::fhir::stu3::proto::Decimal* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Age.value)
}

// .google.fhir.stu3.proto.QuantityComparatorCode comparator = 4;
inline bool Age::has_comparator() const {
  return this != internal_default_instance() && comparator_ != NULL;
}
inline void Age::clear_comparator() {
  if (GetArenaNoVirtual() == NULL && comparator_ != NULL) {
    delete comparator_;
  }
  comparator_ = NULL;
}
inline const ::google::fhir::stu3::proto::QuantityComparatorCode& Age::_internal_comparator() const {
  return *comparator_;
}
inline const ::google::fhir::stu3::proto::QuantityComparatorCode& Age::comparator() const {
  const ::google::fhir::stu3::proto::QuantityComparatorCode* p = comparator_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Age.comparator)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::QuantityComparatorCode*>(
      &::google::fhir::stu3::proto::_QuantityComparatorCode_default_instance_);
}
inline ::google::fhir::stu3::proto::QuantityComparatorCode* Age::release_comparator() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Age.comparator)
  
  ::google::fhir::stu3::proto::QuantityComparatorCode* temp = comparator_;
  comparator_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::QuantityComparatorCode* Age::mutable_comparator() {
  
  if (comparator_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::QuantityComparatorCode>(GetArenaNoVirtual());
    comparator_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Age.comparator)
  return comparator_;
}
inline void Age::set_allocated_comparator(::google::fhir::stu3::proto::QuantityComparatorCode* comparator) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete comparator_;
  }
  if (comparator) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      comparator = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, comparator, submessage_arena);
    }
    
  } else {
    
  }
  comparator_ = comparator;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Age.comparator)
}

// .google.fhir.stu3.proto.String unit = 5;
inline bool Age::has_unit() const {
  return this != internal_default_instance() && unit_ != NULL;
}
inline void Age::clear_unit() {
  if (GetArenaNoVirtual() == NULL && unit_ != NULL) {
    delete unit_;
  }
  unit_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Age::_internal_unit() const {
  return *unit_;
}
inline const ::google::fhir::stu3::proto::String& Age::unit() const {
  const ::google::fhir::stu3::proto::String* p = unit_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Age.unit)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Age::release_unit() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Age.unit)
  
  ::google::fhir::stu3::proto::String* temp = unit_;
  unit_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Age::mutable_unit() {
  
  if (unit_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    unit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Age.unit)
  return unit_;
}
inline void Age::set_allocated_unit(::google::fhir::stu3::proto::String* unit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete unit_;
  }
  if (unit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unit, submessage_arena);
    }
    
  } else {
    
  }
  unit_ = unit;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Age.unit)
}

// .google.fhir.stu3.proto.Uri system = 6;
inline bool Age::has_system() const {
  return this != internal_default_instance() && system_ != NULL;
}
inline void Age::clear_system() {
  if (GetArenaNoVirtual() == NULL && system_ != NULL) {
    delete system_;
  }
  system_ = NULL;
}
inline const ::google::fhir::stu3::proto::Uri& Age::_internal_system() const {
  return *system_;
}
inline const ::google::fhir::stu3::proto::Uri& Age::system() const {
  const ::google::fhir::stu3::proto::Uri* p = system_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Age.system)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* Age::release_system() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Age.system)
  
  ::google::fhir::stu3::proto::Uri* temp = system_;
  system_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* Age::mutable_system() {
  
  if (system_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    system_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Age.system)
  return system_;
}
inline void Age::set_allocated_system(::google::fhir::stu3::proto::Uri* system) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete system_;
  }
  if (system) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      system = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, system, submessage_arena);
    }
    
  } else {
    
  }
  system_ = system;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Age.system)
}

// .google.fhir.stu3.proto.Code code = 7;
inline bool Age::has_code() const {
  return this != internal_default_instance() && code_ != NULL;
}
inline void Age::clear_code() {
  if (GetArenaNoVirtual() == NULL && code_ != NULL) {
    delete code_;
  }
  code_ = NULL;
}
inline const ::google::fhir::stu3::proto::Code& Age::_internal_code() const {
  return *code_;
}
inline const ::google::fhir::stu3::proto::Code& Age::code() const {
  const ::google::fhir::stu3::proto::Code* p = code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Age.code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Code*>(
      &::google::fhir::stu3::proto::_Code_default_instance_);
}
inline ::google::fhir::stu3::proto::Code* Age::release_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Age.code)
  
  ::google::fhir::stu3::proto::Code* temp = code_;
  code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Code* Age::mutable_code() {
  
  if (code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Code>(GetArenaNoVirtual());
    code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Age.code)
  return code_;
}
inline void Age::set_allocated_code(::google::fhir::stu3::proto::Code* code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete code_;
  }
  if (code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Age.code)
}

// -------------------------------------------------------------------

// Annotation_Author

// .google.fhir.stu3.proto.Reference reference = 1 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Patient", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/RelatedPerson"];
inline bool Annotation_Author::has_reference() const {
  return author_case() == kReference;
}
inline void Annotation_Author::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline void Annotation_Author::clear_reference() {
  if (has_reference()) {
    delete author_.reference_;
    clear_has_author();
  }
}
inline const ::google::fhir::stu3::proto::Reference& Annotation_Author::_internal_reference() const {
  return *author_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* Annotation_Author::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Annotation.Author.reference)
  if (has_reference()) {
    clear_has_author();
      ::google::fhir::stu3::proto::Reference* temp = author_.reference_;
    author_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& Annotation_Author::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Annotation.Author.reference)
  return has_reference()
      ? *author_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* Annotation_Author::mutable_reference() {
  if (!has_reference()) {
    clear_author();
    set_has_reference();
    author_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Annotation.Author.reference)
  return author_.reference_;
}

// .google.fhir.stu3.proto.String string_value = 2[json_name = "string"];
inline bool Annotation_Author::has_string_value() const {
  return author_case() == kStringValue;
}
inline void Annotation_Author::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void Annotation_Author::clear_string_value() {
  if (has_string_value()) {
    delete author_.string_value_;
    clear_has_author();
  }
}
inline const ::google::fhir::stu3::proto::String& Annotation_Author::_internal_string_value() const {
  return *author_.string_value_;
}
inline ::google::fhir::stu3::proto::String* Annotation_Author::release_string_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Annotation.Author.string_value)
  if (has_string_value()) {
    clear_has_author();
      ::google::fhir::stu3::proto::String* temp = author_.string_value_;
    author_.string_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::String& Annotation_Author::string_value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Annotation.Author.string_value)
  return has_string_value()
      ? *author_.string_value_
      : *reinterpret_cast< ::google::fhir::stu3::proto::String*>(&::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Annotation_Author::mutable_string_value() {
  if (!has_string_value()) {
    clear_author();
    set_has_string_value();
    author_.string_value_ = CreateMaybeMessage< ::google::fhir::stu3::proto::String >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Annotation.Author.string_value)
  return author_.string_value_;
}

inline bool Annotation_Author::has_author() const {
  return author_case() != AUTHOR_NOT_SET;
}
inline void Annotation_Author::clear_has_author() {
  _oneof_case_[0] = AUTHOR_NOT_SET;
}
inline Annotation_Author::AuthorCase Annotation_Author::author_case() const {
  return Annotation_Author::AuthorCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Annotation

// .google.fhir.stu3.proto.String id = 1;
inline bool Annotation::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Annotation::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Annotation::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Annotation::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Annotation.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Annotation::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Annotation.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Annotation::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Annotation.id)
  return id_;
}
inline void Annotation::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Annotation.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int Annotation::extension_size() const {
  return extension_.size();
}
inline void Annotation::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Annotation::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Annotation.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Annotation::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Annotation.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Annotation::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Annotation.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Annotation::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Annotation.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Annotation::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Annotation.extension)
  return extension_;
}

// .google.fhir.stu3.proto.Annotation.Author author = 3 [(.google.fhir.stu3.proto.is_choice_type) = true];
inline bool Annotation::has_author() const {
  return this != internal_default_instance() && author_ != NULL;
}
inline void Annotation::clear_author() {
  if (GetArenaNoVirtual() == NULL && author_ != NULL) {
    delete author_;
  }
  author_ = NULL;
}
inline const ::google::fhir::stu3::proto::Annotation_Author& Annotation::_internal_author() const {
  return *author_;
}
inline const ::google::fhir::stu3::proto::Annotation_Author& Annotation::author() const {
  const ::google::fhir::stu3::proto::Annotation_Author* p = author_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Annotation.author)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Annotation_Author*>(
      &::google::fhir::stu3::proto::_Annotation_Author_default_instance_);
}
inline ::google::fhir::stu3::proto::Annotation_Author* Annotation::release_author() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Annotation.author)
  
  ::google::fhir::stu3::proto::Annotation_Author* temp = author_;
  author_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Annotation_Author* Annotation::mutable_author() {
  
  if (author_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Annotation_Author>(GetArenaNoVirtual());
    author_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Annotation.author)
  return author_;
}
inline void Annotation::set_allocated_author(::google::fhir::stu3::proto::Annotation_Author* author) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete author_;
  }
  if (author) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      author = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, author, submessage_arena);
    }
    
  } else {
    
  }
  author_ = author;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Annotation.author)
}

// .google.fhir.stu3.proto.DateTime time = 4;
inline bool Annotation::has_time() const {
  return this != internal_default_instance() && time_ != NULL;
}
inline void Annotation::clear_time() {
  if (GetArenaNoVirtual() == NULL && time_ != NULL) {
    delete time_;
  }
  time_ = NULL;
}
inline const ::google::fhir::stu3::proto::DateTime& Annotation::_internal_time() const {
  return *time_;
}
inline const ::google::fhir::stu3::proto::DateTime& Annotation::time() const {
  const ::google::fhir::stu3::proto::DateTime* p = time_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Annotation.time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::DateTime*>(
      &::google::fhir::stu3::proto::_DateTime_default_instance_);
}
inline ::google::fhir::stu3::proto::DateTime* Annotation::release_time() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Annotation.time)
  
  ::google::fhir::stu3::proto::DateTime* temp = time_;
  time_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::DateTime* Annotation::mutable_time() {
  
  if (time_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::DateTime>(GetArenaNoVirtual());
    time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Annotation.time)
  return time_;
}
inline void Annotation::set_allocated_time(::google::fhir::stu3::proto::DateTime* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete time_;
  }
  if (time) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Annotation.time)
}

// .google.fhir.stu3.proto.String text = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool Annotation::has_text() const {
  return this != internal_default_instance() && text_ != NULL;
}
inline void Annotation::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) {
    delete text_;
  }
  text_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Annotation::_internal_text() const {
  return *text_;
}
inline const ::google::fhir::stu3::proto::String& Annotation::text() const {
  const ::google::fhir::stu3::proto::String* p = text_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Annotation.text)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Annotation::release_text() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Annotation.text)
  
  ::google::fhir::stu3::proto::String* temp = text_;
  text_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Annotation::mutable_text() {
  
  if (text_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    text_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Annotation.text)
  return text_;
}
inline void Annotation::set_allocated_text(::google::fhir::stu3::proto::String* text) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete text_;
  }
  if (text) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      text = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Annotation.text)
}

// -------------------------------------------------------------------

// Attachment

// .google.fhir.stu3.proto.String id = 1;
inline bool Attachment::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Attachment::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Attachment::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Attachment::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Attachment.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Attachment::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Attachment.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Attachment::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Attachment.id)
  return id_;
}
inline void Attachment::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Attachment.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int Attachment::extension_size() const {
  return extension_.size();
}
inline void Attachment::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Attachment::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Attachment.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Attachment::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Attachment.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Attachment::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Attachment.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Attachment::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Attachment.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Attachment::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Attachment.extension)
  return extension_;
}

// .google.fhir.stu3.proto.MimeTypeCode content_type = 3;
inline bool Attachment::has_content_type() const {
  return this != internal_default_instance() && content_type_ != NULL;
}
inline void Attachment::clear_content_type() {
  if (GetArenaNoVirtual() == NULL && content_type_ != NULL) {
    delete content_type_;
  }
  content_type_ = NULL;
}
inline const ::google::fhir::stu3::proto::MimeTypeCode& Attachment::_internal_content_type() const {
  return *content_type_;
}
inline const ::google::fhir::stu3::proto::MimeTypeCode& Attachment::content_type() const {
  const ::google::fhir::stu3::proto::MimeTypeCode* p = content_type_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Attachment.content_type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::MimeTypeCode*>(
      &::google::fhir::stu3::proto::_MimeTypeCode_default_instance_);
}
inline ::google::fhir::stu3::proto::MimeTypeCode* Attachment::release_content_type() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Attachment.content_type)
  
  ::google::fhir::stu3::proto::MimeTypeCode* temp = content_type_;
  content_type_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::MimeTypeCode* Attachment::mutable_content_type() {
  
  if (content_type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::MimeTypeCode>(GetArenaNoVirtual());
    content_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Attachment.content_type)
  return content_type_;
}
inline void Attachment::set_allocated_content_type(::google::fhir::stu3::proto::MimeTypeCode* content_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete content_type_;
  }
  if (content_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      content_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, content_type, submessage_arena);
    }
    
  } else {
    
  }
  content_type_ = content_type;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Attachment.content_type)
}

// .google.fhir.stu3.proto.LanguageCode language = 4;
inline bool Attachment::has_language() const {
  return this != internal_default_instance() && language_ != NULL;
}
inline void Attachment::clear_language() {
  if (GetArenaNoVirtual() == NULL && language_ != NULL) {
    delete language_;
  }
  language_ = NULL;
}
inline const ::google::fhir::stu3::proto::LanguageCode& Attachment::_internal_language() const {
  return *language_;
}
inline const ::google::fhir::stu3::proto::LanguageCode& Attachment::language() const {
  const ::google::fhir::stu3::proto::LanguageCode* p = language_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Attachment.language)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::LanguageCode*>(
      &::google::fhir::stu3::proto::_LanguageCode_default_instance_);
}
inline ::google::fhir::stu3::proto::LanguageCode* Attachment::release_language() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Attachment.language)
  
  ::google::fhir::stu3::proto::LanguageCode* temp = language_;
  language_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::LanguageCode* Attachment::mutable_language() {
  
  if (language_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::LanguageCode>(GetArenaNoVirtual());
    language_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Attachment.language)
  return language_;
}
inline void Attachment::set_allocated_language(::google::fhir::stu3::proto::LanguageCode* language) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete language_;
  }
  if (language) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      language = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, language, submessage_arena);
    }
    
  } else {
    
  }
  language_ = language;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Attachment.language)
}

// .google.fhir.stu3.proto.Base64Binary data = 5;
inline bool Attachment::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline void Attachment::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
inline const ::google::fhir::stu3::proto::Base64Binary& Attachment::_internal_data() const {
  return *data_;
}
inline const ::google::fhir::stu3::proto::Base64Binary& Attachment::data() const {
  const ::google::fhir::stu3::proto::Base64Binary* p = data_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Attachment.data)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Base64Binary*>(
      &::google::fhir::stu3::proto::_Base64Binary_default_instance_);
}
inline ::google::fhir::stu3::proto::Base64Binary* Attachment::release_data() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Attachment.data)
  
  ::google::fhir::stu3::proto::Base64Binary* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Base64Binary* Attachment::mutable_data() {
  
  if (data_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Base64Binary>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Attachment.data)
  return data_;
}
inline void Attachment::set_allocated_data(::google::fhir::stu3::proto::Base64Binary* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Attachment.data)
}

// .google.fhir.stu3.proto.Uri url = 6;
inline bool Attachment::has_url() const {
  return this != internal_default_instance() && url_ != NULL;
}
inline void Attachment::clear_url() {
  if (GetArenaNoVirtual() == NULL && url_ != NULL) {
    delete url_;
  }
  url_ = NULL;
}
inline const ::google::fhir::stu3::proto::Uri& Attachment::_internal_url() const {
  return *url_;
}
inline const ::google::fhir::stu3::proto::Uri& Attachment::url() const {
  const ::google::fhir::stu3::proto::Uri* p = url_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Attachment.url)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* Attachment::release_url() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Attachment.url)
  
  ::google::fhir::stu3::proto::Uri* temp = url_;
  url_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* Attachment::mutable_url() {
  
  if (url_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Attachment.url)
  return url_;
}
inline void Attachment::set_allocated_url(::google::fhir::stu3::proto::Uri* url) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete url_;
  }
  if (url) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      url = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, url, submessage_arena);
    }
    
  } else {
    
  }
  url_ = url;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Attachment.url)
}

// .google.fhir.stu3.proto.UnsignedInt size = 7;
inline bool Attachment::has_size() const {
  return this != internal_default_instance() && size_ != NULL;
}
inline void Attachment::clear_size() {
  if (GetArenaNoVirtual() == NULL && size_ != NULL) {
    delete size_;
  }
  size_ = NULL;
}
inline const ::google::fhir::stu3::proto::UnsignedInt& Attachment::_internal_size() const {
  return *size_;
}
inline const ::google::fhir::stu3::proto::UnsignedInt& Attachment::size() const {
  const ::google::fhir::stu3::proto::UnsignedInt* p = size_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Attachment.size)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::UnsignedInt*>(
      &::google::fhir::stu3::proto::_UnsignedInt_default_instance_);
}
inline ::google::fhir::stu3::proto::UnsignedInt* Attachment::release_size() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Attachment.size)
  
  ::google::fhir::stu3::proto::UnsignedInt* temp = size_;
  size_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::UnsignedInt* Attachment::mutable_size() {
  
  if (size_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::UnsignedInt>(GetArenaNoVirtual());
    size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Attachment.size)
  return size_;
}
inline void Attachment::set_allocated_size(::google::fhir::stu3::proto::UnsignedInt* size) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete size_;
  }
  if (size) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      size = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    
  } else {
    
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Attachment.size)
}

// .google.fhir.stu3.proto.Base64Binary hash = 8;
inline bool Attachment::has_hash() const {
  return this != internal_default_instance() && hash_ != NULL;
}
inline void Attachment::clear_hash() {
  if (GetArenaNoVirtual() == NULL && hash_ != NULL) {
    delete hash_;
  }
  hash_ = NULL;
}
inline const ::google::fhir::stu3::proto::Base64Binary& Attachment::_internal_hash() const {
  return *hash_;
}
inline const ::google::fhir::stu3::proto::Base64Binary& Attachment::hash() const {
  const ::google::fhir::stu3::proto::Base64Binary* p = hash_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Attachment.hash)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Base64Binary*>(
      &::google::fhir::stu3::proto::_Base64Binary_default_instance_);
}
inline ::google::fhir::stu3::proto::Base64Binary* Attachment::release_hash() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Attachment.hash)
  
  ::google::fhir::stu3::proto::Base64Binary* temp = hash_;
  hash_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Base64Binary* Attachment::mutable_hash() {
  
  if (hash_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Base64Binary>(GetArenaNoVirtual());
    hash_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Attachment.hash)
  return hash_;
}
inline void Attachment::set_allocated_hash(::google::fhir::stu3::proto::Base64Binary* hash) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hash_;
  }
  if (hash) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hash = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hash, submessage_arena);
    }
    
  } else {
    
  }
  hash_ = hash;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Attachment.hash)
}

// .google.fhir.stu3.proto.String title = 9;
inline bool Attachment::has_title() const {
  return this != internal_default_instance() && title_ != NULL;
}
inline void Attachment::clear_title() {
  if (GetArenaNoVirtual() == NULL && title_ != NULL) {
    delete title_;
  }
  title_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Attachment::_internal_title() const {
  return *title_;
}
inline const ::google::fhir::stu3::proto::String& Attachment::title() const {
  const ::google::fhir::stu3::proto::String* p = title_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Attachment.title)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Attachment::release_title() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Attachment.title)
  
  ::google::fhir::stu3::proto::String* temp = title_;
  title_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Attachment::mutable_title() {
  
  if (title_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    title_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Attachment.title)
  return title_;
}
inline void Attachment::set_allocated_title(::google::fhir::stu3::proto::String* title) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete title_;
  }
  if (title) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      title = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, title, submessage_arena);
    }
    
  } else {
    
  }
  title_ = title;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Attachment.title)
}

// .google.fhir.stu3.proto.DateTime creation = 10;
inline bool Attachment::has_creation() const {
  return this != internal_default_instance() && creation_ != NULL;
}
inline void Attachment::clear_creation() {
  if (GetArenaNoVirtual() == NULL && creation_ != NULL) {
    delete creation_;
  }
  creation_ = NULL;
}
inline const ::google::fhir::stu3::proto::DateTime& Attachment::_internal_creation() const {
  return *creation_;
}
inline const ::google::fhir::stu3::proto::DateTime& Attachment::creation() const {
  const ::google::fhir::stu3::proto::DateTime* p = creation_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Attachment.creation)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::DateTime*>(
      &::google::fhir::stu3::proto::_DateTime_default_instance_);
}
inline ::google::fhir::stu3::proto::DateTime* Attachment::release_creation() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Attachment.creation)
  
  ::google::fhir::stu3::proto::DateTime* temp = creation_;
  creation_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::DateTime* Attachment::mutable_creation() {
  
  if (creation_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::DateTime>(GetArenaNoVirtual());
    creation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Attachment.creation)
  return creation_;
}
inline void Attachment::set_allocated_creation(::google::fhir::stu3::proto::DateTime* creation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete creation_;
  }
  if (creation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      creation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, creation, submessage_arena);
    }
    
  } else {
    
  }
  creation_ = creation;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Attachment.creation)
}

// -------------------------------------------------------------------

// CodeableConcept

// .google.fhir.stu3.proto.String id = 1;
inline bool CodeableConcept::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void CodeableConcept::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeableConcept::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodeableConcept::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeableConcept.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeableConcept::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeableConcept.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeableConcept::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeableConcept.id)
  return id_;
}
inline void CodeableConcept::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeableConcept.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int CodeableConcept::extension_size() const {
  return extension_.size();
}
inline void CodeableConcept::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* CodeableConcept::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeableConcept.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
CodeableConcept::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.CodeableConcept.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& CodeableConcept::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeableConcept.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* CodeableConcept::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.CodeableConcept.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
CodeableConcept::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.CodeableConcept.extension)
  return extension_;
}

// repeated .google.fhir.stu3.proto.Coding coding = 3;
inline int CodeableConcept::coding_size() const {
  return coding_.size();
}
inline void CodeableConcept::clear_coding() {
  coding_.Clear();
}
inline ::google::fhir::stu3::proto::Coding* CodeableConcept::mutable_coding(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeableConcept.coding)
  return coding_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Coding >*
CodeableConcept::mutable_coding() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.CodeableConcept.coding)
  return &coding_;
}
inline const ::google::fhir::stu3::proto::Coding& CodeableConcept::coding(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeableConcept.coding)
  return coding_.Get(index);
}
inline ::google::fhir::stu3::proto::Coding* CodeableConcept::add_coding() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.CodeableConcept.coding)
  return coding_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Coding >&
CodeableConcept::coding() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.CodeableConcept.coding)
  return coding_;
}

// .google.fhir.stu3.proto.String text = 4;
inline bool CodeableConcept::has_text() const {
  return this != internal_default_instance() && text_ != NULL;
}
inline void CodeableConcept::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) {
    delete text_;
  }
  text_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& CodeableConcept::_internal_text() const {
  return *text_;
}
inline const ::google::fhir::stu3::proto::String& CodeableConcept::text() const {
  const ::google::fhir::stu3::proto::String* p = text_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodeableConcept.text)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodeableConcept::release_text() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodeableConcept.text)
  
  ::google::fhir::stu3::proto::String* temp = text_;
  text_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodeableConcept::mutable_text() {
  
  if (text_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    text_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodeableConcept.text)
  return text_;
}
inline void CodeableConcept::set_allocated_text(::google::fhir::stu3::proto::String* text) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete text_;
  }
  if (text) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      text = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodeableConcept.text)
}

// -------------------------------------------------------------------

// Coding

// .google.fhir.stu3.proto.String id = 1;
inline bool Coding::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Coding::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Coding::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Coding::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Coding.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Coding::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Coding.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Coding::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Coding.id)
  return id_;
}
inline void Coding::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Coding.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int Coding::extension_size() const {
  return extension_.size();
}
inline void Coding::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Coding::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Coding.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Coding::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Coding.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Coding::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Coding.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Coding::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Coding.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Coding::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Coding.extension)
  return extension_;
}

// .google.fhir.stu3.proto.Uri system = 3;
inline bool Coding::has_system() const {
  return this != internal_default_instance() && system_ != NULL;
}
inline void Coding::clear_system() {
  if (GetArenaNoVirtual() == NULL && system_ != NULL) {
    delete system_;
  }
  system_ = NULL;
}
inline const ::google::fhir::stu3::proto::Uri& Coding::_internal_system() const {
  return *system_;
}
inline const ::google::fhir::stu3::proto::Uri& Coding::system() const {
  const ::google::fhir::stu3::proto::Uri* p = system_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Coding.system)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* Coding::release_system() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Coding.system)
  
  ::google::fhir::stu3::proto::Uri* temp = system_;
  system_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* Coding::mutable_system() {
  
  if (system_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    system_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Coding.system)
  return system_;
}
inline void Coding::set_allocated_system(::google::fhir::stu3::proto::Uri* system) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete system_;
  }
  if (system) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      system = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, system, submessage_arena);
    }
    
  } else {
    
  }
  system_ = system;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Coding.system)
}

// .google.fhir.stu3.proto.String version = 4;
inline bool Coding::has_version() const {
  return this != internal_default_instance() && version_ != NULL;
}
inline void Coding::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Coding::_internal_version() const {
  return *version_;
}
inline const ::google::fhir::stu3::proto::String& Coding::version() const {
  const ::google::fhir::stu3::proto::String* p = version_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Coding.version)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Coding::release_version() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Coding.version)
  
  ::google::fhir::stu3::proto::String* temp = version_;
  version_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Coding::mutable_version() {
  
  if (version_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Coding.version)
  return version_;
}
inline void Coding::set_allocated_version(::google::fhir::stu3::proto::String* version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete version_;
  }
  if (version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Coding.version)
}

// .google.fhir.stu3.proto.Code code = 5;
inline bool Coding::has_code() const {
  return this != internal_default_instance() && code_ != NULL;
}
inline void Coding::clear_code() {
  if (GetArenaNoVirtual() == NULL && code_ != NULL) {
    delete code_;
  }
  code_ = NULL;
}
inline const ::google::fhir::stu3::proto::Code& Coding::_internal_code() const {
  return *code_;
}
inline const ::google::fhir::stu3::proto::Code& Coding::code() const {
  const ::google::fhir::stu3::proto::Code* p = code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Coding.code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Code*>(
      &::google::fhir::stu3::proto::_Code_default_instance_);
}
inline ::google::fhir::stu3::proto::Code* Coding::release_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Coding.code)
  
  ::google::fhir::stu3::proto::Code* temp = code_;
  code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Code* Coding::mutable_code() {
  
  if (code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Code>(GetArenaNoVirtual());
    code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Coding.code)
  return code_;
}
inline void Coding::set_allocated_code(::google::fhir::stu3::proto::Code* code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete code_;
  }
  if (code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Coding.code)
}

// .google.fhir.stu3.proto.String display = 6;
inline bool Coding::has_display() const {
  return this != internal_default_instance() && display_ != NULL;
}
inline void Coding::clear_display() {
  if (GetArenaNoVirtual() == NULL && display_ != NULL) {
    delete display_;
  }
  display_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Coding::_internal_display() const {
  return *display_;
}
inline const ::google::fhir::stu3::proto::String& Coding::display() const {
  const ::google::fhir::stu3::proto::String* p = display_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Coding.display)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Coding::release_display() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Coding.display)
  
  ::google::fhir::stu3::proto::String* temp = display_;
  display_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Coding::mutable_display() {
  
  if (display_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    display_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Coding.display)
  return display_;
}
inline void Coding::set_allocated_display(::google::fhir::stu3::proto::String* display) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete display_;
  }
  if (display) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      display = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, display, submessage_arena);
    }
    
  } else {
    
  }
  display_ = display;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Coding.display)
}

// .google.fhir.stu3.proto.Boolean user_selected = 7;
inline bool Coding::has_user_selected() const {
  return this != internal_default_instance() && user_selected_ != NULL;
}
inline void Coding::clear_user_selected() {
  if (GetArenaNoVirtual() == NULL && user_selected_ != NULL) {
    delete user_selected_;
  }
  user_selected_ = NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& Coding::_internal_user_selected() const {
  return *user_selected_;
}
inline const ::google::fhir::stu3::proto::Boolean& Coding::user_selected() const {
  const ::google::fhir::stu3::proto::Boolean* p = user_selected_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Coding.user_selected)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* Coding::release_user_selected() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Coding.user_selected)
  
  ::google::fhir::stu3::proto::Boolean* temp = user_selected_;
  user_selected_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* Coding::mutable_user_selected() {
  
  if (user_selected_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    user_selected_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Coding.user_selected)
  return user_selected_;
}
inline void Coding::set_allocated_user_selected(::google::fhir::stu3::proto::Boolean* user_selected) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_selected_;
  }
  if (user_selected) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_selected = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_selected, submessage_arena);
    }
    
  } else {
    
  }
  user_selected_ = user_selected;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Coding.user_selected)
}

// -------------------------------------------------------------------

// ContactPoint

// .google.fhir.stu3.proto.String id = 1;
inline bool ContactPoint::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void ContactPoint::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& ContactPoint::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ContactPoint::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ContactPoint.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ContactPoint::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ContactPoint.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ContactPoint::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ContactPoint.id)
  return id_;
}
inline void ContactPoint::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ContactPoint.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int ContactPoint::extension_size() const {
  return extension_.size();
}
inline void ContactPoint::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* ContactPoint::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ContactPoint.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
ContactPoint::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.ContactPoint.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& ContactPoint::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ContactPoint.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* ContactPoint::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.ContactPoint.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
ContactPoint::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.ContactPoint.extension)
  return extension_;
}

// .google.fhir.stu3.proto.ContactPointSystemCode system = 3;
inline bool ContactPoint::has_system() const {
  return this != internal_default_instance() && system_ != NULL;
}
inline void ContactPoint::clear_system() {
  if (GetArenaNoVirtual() == NULL && system_ != NULL) {
    delete system_;
  }
  system_ = NULL;
}
inline const ::google::fhir::stu3::proto::ContactPointSystemCode& ContactPoint::_internal_system() const {
  return *system_;
}
inline const ::google::fhir::stu3::proto::ContactPointSystemCode& ContactPoint::system() const {
  const ::google::fhir::stu3::proto::ContactPointSystemCode* p = system_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ContactPoint.system)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::ContactPointSystemCode*>(
      &::google::fhir::stu3::proto::_ContactPointSystemCode_default_instance_);
}
inline ::google::fhir::stu3::proto::ContactPointSystemCode* ContactPoint::release_system() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ContactPoint.system)
  
  ::google::fhir::stu3::proto::ContactPointSystemCode* temp = system_;
  system_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::ContactPointSystemCode* ContactPoint::mutable_system() {
  
  if (system_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::ContactPointSystemCode>(GetArenaNoVirtual());
    system_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ContactPoint.system)
  return system_;
}
inline void ContactPoint::set_allocated_system(::google::fhir::stu3::proto::ContactPointSystemCode* system) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete system_;
  }
  if (system) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      system = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, system, submessage_arena);
    }
    
  } else {
    
  }
  system_ = system;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ContactPoint.system)
}

// .google.fhir.stu3.proto.String value = 4;
inline bool ContactPoint::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void ContactPoint::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& ContactPoint::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::String& ContactPoint::value() const {
  const ::google::fhir::stu3::proto::String* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ContactPoint.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ContactPoint::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ContactPoint.value)
  
  ::google::fhir::stu3::proto::String* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ContactPoint::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ContactPoint.value)
  return value_;
}
inline void ContactPoint::set_allocated_value(::google::fhir::stu3::proto::String* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ContactPoint.value)
}

// .google.fhir.stu3.proto.ContactPointUseCode use = 5;
inline bool ContactPoint::has_use() const {
  return this != internal_default_instance() && use_ != NULL;
}
inline void ContactPoint::clear_use() {
  if (GetArenaNoVirtual() == NULL && use_ != NULL) {
    delete use_;
  }
  use_ = NULL;
}
inline const ::google::fhir::stu3::proto::ContactPointUseCode& ContactPoint::_internal_use() const {
  return *use_;
}
inline const ::google::fhir::stu3::proto::ContactPointUseCode& ContactPoint::use() const {
  const ::google::fhir::stu3::proto::ContactPointUseCode* p = use_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ContactPoint.use)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::ContactPointUseCode*>(
      &::google::fhir::stu3::proto::_ContactPointUseCode_default_instance_);
}
inline ::google::fhir::stu3::proto::ContactPointUseCode* ContactPoint::release_use() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ContactPoint.use)
  
  ::google::fhir::stu3::proto::ContactPointUseCode* temp = use_;
  use_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::ContactPointUseCode* ContactPoint::mutable_use() {
  
  if (use_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::ContactPointUseCode>(GetArenaNoVirtual());
    use_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ContactPoint.use)
  return use_;
}
inline void ContactPoint::set_allocated_use(::google::fhir::stu3::proto::ContactPointUseCode* use) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete use_;
  }
  if (use) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      use = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, use, submessage_arena);
    }
    
  } else {
    
  }
  use_ = use;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ContactPoint.use)
}

// .google.fhir.stu3.proto.PositiveInt rank = 6;
inline bool ContactPoint::has_rank() const {
  return this != internal_default_instance() && rank_ != NULL;
}
inline void ContactPoint::clear_rank() {
  if (GetArenaNoVirtual() == NULL && rank_ != NULL) {
    delete rank_;
  }
  rank_ = NULL;
}
inline const ::google::fhir::stu3::proto::PositiveInt& ContactPoint::_internal_rank() const {
  return *rank_;
}
inline const ::google::fhir::stu3::proto::PositiveInt& ContactPoint::rank() const {
  const ::google::fhir::stu3::proto::PositiveInt* p = rank_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ContactPoint.rank)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::PositiveInt*>(
      &::google::fhir::stu3::proto::_PositiveInt_default_instance_);
}
inline ::google::fhir::stu3::proto::PositiveInt* ContactPoint::release_rank() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ContactPoint.rank)
  
  ::google::fhir::stu3::proto::PositiveInt* temp = rank_;
  rank_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::PositiveInt* ContactPoint::mutable_rank() {
  
  if (rank_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::PositiveInt>(GetArenaNoVirtual());
    rank_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ContactPoint.rank)
  return rank_;
}
inline void ContactPoint::set_allocated_rank(::google::fhir::stu3::proto::PositiveInt* rank) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rank_;
  }
  if (rank) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rank = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rank, submessage_arena);
    }
    
  } else {
    
  }
  rank_ = rank;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ContactPoint.rank)
}

// .google.fhir.stu3.proto.Period period = 7;
inline bool ContactPoint::has_period() const {
  return this != internal_default_instance() && period_ != NULL;
}
inline void ContactPoint::clear_period() {
  if (GetArenaNoVirtual() == NULL && period_ != NULL) {
    delete period_;
  }
  period_ = NULL;
}
inline const ::google::fhir::stu3::proto::Period& ContactPoint::_internal_period() const {
  return *period_;
}
inline const ::google::fhir::stu3::proto::Period& ContactPoint::period() const {
  const ::google::fhir::stu3::proto::Period* p = period_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ContactPoint.period)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Period*>(
      &::google::fhir::stu3::proto::_Period_default_instance_);
}
inline ::google::fhir::stu3::proto::Period* ContactPoint::release_period() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ContactPoint.period)
  
  ::google::fhir::stu3::proto::Period* temp = period_;
  period_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Period* ContactPoint::mutable_period() {
  
  if (period_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Period>(GetArenaNoVirtual());
    period_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ContactPoint.period)
  return period_;
}
inline void ContactPoint::set_allocated_period(::google::fhir::stu3::proto::Period* period) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete period_;
  }
  if (period) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      period = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, period, submessage_arena);
    }
    
  } else {
    
  }
  period_ = period;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ContactPoint.period)
}

// -------------------------------------------------------------------

// Count

// .google.fhir.stu3.proto.String id = 1;
inline bool Count::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Count::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Count::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Count::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Count.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Count::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Count.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Count::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Count.id)
  return id_;
}
inline void Count::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Count.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int Count::extension_size() const {
  return extension_.size();
}
inline void Count::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Count::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Count.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Count::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Count.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Count::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Count.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Count::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Count.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Count::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Count.extension)
  return extension_;
}

// .google.fhir.stu3.proto.Decimal value = 3;
inline bool Count::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void Count::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& Count::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::Decimal& Count::value() const {
  const ::google::fhir::stu3::proto::Decimal* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Count.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* Count::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Count.value)
  
  ::google::fhir::stu3::proto::Decimal* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* Count::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Count.value)
  return value_;
}
inline void Count::set_allocated_value(::google::fhir::stu3::proto::Decimal* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Count.value)
}

// .google.fhir.stu3.proto.QuantityComparatorCode comparator = 4;
inline bool Count::has_comparator() const {
  return this != internal_default_instance() && comparator_ != NULL;
}
inline void Count::clear_comparator() {
  if (GetArenaNoVirtual() == NULL && comparator_ != NULL) {
    delete comparator_;
  }
  comparator_ = NULL;
}
inline const ::google::fhir::stu3::proto::QuantityComparatorCode& Count::_internal_comparator() const {
  return *comparator_;
}
inline const ::google::fhir::stu3::proto::QuantityComparatorCode& Count::comparator() const {
  const ::google::fhir::stu3::proto::QuantityComparatorCode* p = comparator_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Count.comparator)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::QuantityComparatorCode*>(
      &::google::fhir::stu3::proto::_QuantityComparatorCode_default_instance_);
}
inline ::google::fhir::stu3::proto::QuantityComparatorCode* Count::release_comparator() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Count.comparator)
  
  ::google::fhir::stu3::proto::QuantityComparatorCode* temp = comparator_;
  comparator_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::QuantityComparatorCode* Count::mutable_comparator() {
  
  if (comparator_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::QuantityComparatorCode>(GetArenaNoVirtual());
    comparator_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Count.comparator)
  return comparator_;
}
inline void Count::set_allocated_comparator(::google::fhir::stu3::proto::QuantityComparatorCode* comparator) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete comparator_;
  }
  if (comparator) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      comparator = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, comparator, submessage_arena);
    }
    
  } else {
    
  }
  comparator_ = comparator;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Count.comparator)
}

// .google.fhir.stu3.proto.String unit = 5;
inline bool Count::has_unit() const {
  return this != internal_default_instance() && unit_ != NULL;
}
inline void Count::clear_unit() {
  if (GetArenaNoVirtual() == NULL && unit_ != NULL) {
    delete unit_;
  }
  unit_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Count::_internal_unit() const {
  return *unit_;
}
inline const ::google::fhir::stu3::proto::String& Count::unit() const {
  const ::google::fhir::stu3::proto::String* p = unit_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Count.unit)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Count::release_unit() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Count.unit)
  
  ::google::fhir::stu3::proto::String* temp = unit_;
  unit_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Count::mutable_unit() {
  
  if (unit_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    unit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Count.unit)
  return unit_;
}
inline void Count::set_allocated_unit(::google::fhir::stu3::proto::String* unit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete unit_;
  }
  if (unit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unit, submessage_arena);
    }
    
  } else {
    
  }
  unit_ = unit;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Count.unit)
}

// .google.fhir.stu3.proto.Uri system = 6;
inline bool Count::has_system() const {
  return this != internal_default_instance() && system_ != NULL;
}
inline void Count::clear_system() {
  if (GetArenaNoVirtual() == NULL && system_ != NULL) {
    delete system_;
  }
  system_ = NULL;
}
inline const ::google::fhir::stu3::proto::Uri& Count::_internal_system() const {
  return *system_;
}
inline const ::google::fhir::stu3::proto::Uri& Count::system() const {
  const ::google::fhir::stu3::proto::Uri* p = system_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Count.system)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* Count::release_system() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Count.system)
  
  ::google::fhir::stu3::proto::Uri* temp = system_;
  system_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* Count::mutable_system() {
  
  if (system_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    system_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Count.system)
  return system_;
}
inline void Count::set_allocated_system(::google::fhir::stu3::proto::Uri* system) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete system_;
  }
  if (system) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      system = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, system, submessage_arena);
    }
    
  } else {
    
  }
  system_ = system;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Count.system)
}

// .google.fhir.stu3.proto.Code code = 7;
inline bool Count::has_code() const {
  return this != internal_default_instance() && code_ != NULL;
}
inline void Count::clear_code() {
  if (GetArenaNoVirtual() == NULL && code_ != NULL) {
    delete code_;
  }
  code_ = NULL;
}
inline const ::google::fhir::stu3::proto::Code& Count::_internal_code() const {
  return *code_;
}
inline const ::google::fhir::stu3::proto::Code& Count::code() const {
  const ::google::fhir::stu3::proto::Code* p = code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Count.code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Code*>(
      &::google::fhir::stu3::proto::_Code_default_instance_);
}
inline ::google::fhir::stu3::proto::Code* Count::release_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Count.code)
  
  ::google::fhir::stu3::proto::Code* temp = code_;
  code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Code* Count::mutable_code() {
  
  if (code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Code>(GetArenaNoVirtual());
    code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Count.code)
  return code_;
}
inline void Count::set_allocated_code(::google::fhir::stu3::proto::Code* code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete code_;
  }
  if (code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Count.code)
}

// -------------------------------------------------------------------

// Distance

// .google.fhir.stu3.proto.String id = 1;
inline bool Distance::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Distance::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Distance::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Distance::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Distance.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Distance::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Distance.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Distance::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Distance.id)
  return id_;
}
inline void Distance::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Distance.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int Distance::extension_size() const {
  return extension_.size();
}
inline void Distance::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Distance::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Distance.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Distance::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Distance.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Distance::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Distance.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Distance::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Distance.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Distance::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Distance.extension)
  return extension_;
}

// .google.fhir.stu3.proto.Decimal value = 3;
inline bool Distance::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void Distance::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& Distance::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::Decimal& Distance::value() const {
  const ::google::fhir::stu3::proto::Decimal* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Distance.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* Distance::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Distance.value)
  
  ::google::fhir::stu3::proto::Decimal* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* Distance::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Distance.value)
  return value_;
}
inline void Distance::set_allocated_value(::google::fhir::stu3::proto::Decimal* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Distance.value)
}

// .google.fhir.stu3.proto.QuantityComparatorCode comparator = 4;
inline bool Distance::has_comparator() const {
  return this != internal_default_instance() && comparator_ != NULL;
}
inline void Distance::clear_comparator() {
  if (GetArenaNoVirtual() == NULL && comparator_ != NULL) {
    delete comparator_;
  }
  comparator_ = NULL;
}
inline const ::google::fhir::stu3::proto::QuantityComparatorCode& Distance::_internal_comparator() const {
  return *comparator_;
}
inline const ::google::fhir::stu3::proto::QuantityComparatorCode& Distance::comparator() const {
  const ::google::fhir::stu3::proto::QuantityComparatorCode* p = comparator_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Distance.comparator)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::QuantityComparatorCode*>(
      &::google::fhir::stu3::proto::_QuantityComparatorCode_default_instance_);
}
inline ::google::fhir::stu3::proto::QuantityComparatorCode* Distance::release_comparator() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Distance.comparator)
  
  ::google::fhir::stu3::proto::QuantityComparatorCode* temp = comparator_;
  comparator_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::QuantityComparatorCode* Distance::mutable_comparator() {
  
  if (comparator_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::QuantityComparatorCode>(GetArenaNoVirtual());
    comparator_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Distance.comparator)
  return comparator_;
}
inline void Distance::set_allocated_comparator(::google::fhir::stu3::proto::QuantityComparatorCode* comparator) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete comparator_;
  }
  if (comparator) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      comparator = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, comparator, submessage_arena);
    }
    
  } else {
    
  }
  comparator_ = comparator;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Distance.comparator)
}

// .google.fhir.stu3.proto.String unit = 5;
inline bool Distance::has_unit() const {
  return this != internal_default_instance() && unit_ != NULL;
}
inline void Distance::clear_unit() {
  if (GetArenaNoVirtual() == NULL && unit_ != NULL) {
    delete unit_;
  }
  unit_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Distance::_internal_unit() const {
  return *unit_;
}
inline const ::google::fhir::stu3::proto::String& Distance::unit() const {
  const ::google::fhir::stu3::proto::String* p = unit_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Distance.unit)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Distance::release_unit() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Distance.unit)
  
  ::google::fhir::stu3::proto::String* temp = unit_;
  unit_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Distance::mutable_unit() {
  
  if (unit_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    unit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Distance.unit)
  return unit_;
}
inline void Distance::set_allocated_unit(::google::fhir::stu3::proto::String* unit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete unit_;
  }
  if (unit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unit, submessage_arena);
    }
    
  } else {
    
  }
  unit_ = unit;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Distance.unit)
}

// .google.fhir.stu3.proto.Uri system = 6;
inline bool Distance::has_system() const {
  return this != internal_default_instance() && system_ != NULL;
}
inline void Distance::clear_system() {
  if (GetArenaNoVirtual() == NULL && system_ != NULL) {
    delete system_;
  }
  system_ = NULL;
}
inline const ::google::fhir::stu3::proto::Uri& Distance::_internal_system() const {
  return *system_;
}
inline const ::google::fhir::stu3::proto::Uri& Distance::system() const {
  const ::google::fhir::stu3::proto::Uri* p = system_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Distance.system)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* Distance::release_system() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Distance.system)
  
  ::google::fhir::stu3::proto::Uri* temp = system_;
  system_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* Distance::mutable_system() {
  
  if (system_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    system_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Distance.system)
  return system_;
}
inline void Distance::set_allocated_system(::google::fhir::stu3::proto::Uri* system) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete system_;
  }
  if (system) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      system = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, system, submessage_arena);
    }
    
  } else {
    
  }
  system_ = system;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Distance.system)
}

// .google.fhir.stu3.proto.Code code = 7;
inline bool Distance::has_code() const {
  return this != internal_default_instance() && code_ != NULL;
}
inline void Distance::clear_code() {
  if (GetArenaNoVirtual() == NULL && code_ != NULL) {
    delete code_;
  }
  code_ = NULL;
}
inline const ::google::fhir::stu3::proto::Code& Distance::_internal_code() const {
  return *code_;
}
inline const ::google::fhir::stu3::proto::Code& Distance::code() const {
  const ::google::fhir::stu3::proto::Code* p = code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Distance.code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Code*>(
      &::google::fhir::stu3::proto::_Code_default_instance_);
}
inline ::google::fhir::stu3::proto::Code* Distance::release_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Distance.code)
  
  ::google::fhir::stu3::proto::Code* temp = code_;
  code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Code* Distance::mutable_code() {
  
  if (code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Code>(GetArenaNoVirtual());
    code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Distance.code)
  return code_;
}
inline void Distance::set_allocated_code(::google::fhir::stu3::proto::Code* code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete code_;
  }
  if (code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Distance.code)
}

// -------------------------------------------------------------------

// Dosage_AsNeeded

// .google.fhir.stu3.proto.Boolean boolean = 1;
inline bool Dosage_AsNeeded::has_boolean() const {
  return as_needed_case() == kBoolean;
}
inline void Dosage_AsNeeded::set_has_boolean() {
  _oneof_case_[0] = kBoolean;
}
inline void Dosage_AsNeeded::clear_boolean() {
  if (has_boolean()) {
    delete as_needed_.boolean_;
    clear_has_as_needed();
  }
}
inline const ::google::fhir::stu3::proto::Boolean& Dosage_AsNeeded::_internal_boolean() const {
  return *as_needed_.boolean_;
}
inline ::google::fhir::stu3::proto::Boolean* Dosage_AsNeeded::release_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Dosage.AsNeeded.boolean)
  if (has_boolean()) {
    clear_has_as_needed();
      ::google::fhir::stu3::proto::Boolean* temp = as_needed_.boolean_;
    as_needed_.boolean_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Boolean& Dosage_AsNeeded::boolean() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.AsNeeded.boolean)
  return has_boolean()
      ? *as_needed_.boolean_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Boolean*>(&::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* Dosage_AsNeeded::mutable_boolean() {
  if (!has_boolean()) {
    clear_as_needed();
    set_has_boolean();
    as_needed_.boolean_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Boolean >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.AsNeeded.boolean)
  return as_needed_.boolean_;
}

// .google.fhir.stu3.proto.CodeableConcept codeable_concept = 2;
inline bool Dosage_AsNeeded::has_codeable_concept() const {
  return as_needed_case() == kCodeableConcept;
}
inline void Dosage_AsNeeded::set_has_codeable_concept() {
  _oneof_case_[0] = kCodeableConcept;
}
inline void Dosage_AsNeeded::clear_codeable_concept() {
  if (has_codeable_concept()) {
    delete as_needed_.codeable_concept_;
    clear_has_as_needed();
  }
}
inline const ::google::fhir::stu3::proto::CodeableConcept& Dosage_AsNeeded::_internal_codeable_concept() const {
  return *as_needed_.codeable_concept_;
}
inline ::google::fhir::stu3::proto::CodeableConcept* Dosage_AsNeeded::release_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Dosage.AsNeeded.codeable_concept)
  if (has_codeable_concept()) {
    clear_has_as_needed();
      ::google::fhir::stu3::proto::CodeableConcept* temp = as_needed_.codeable_concept_;
    as_needed_.codeable_concept_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::CodeableConcept& Dosage_AsNeeded::codeable_concept() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.AsNeeded.codeable_concept)
  return has_codeable_concept()
      ? *as_needed_.codeable_concept_
      : *reinterpret_cast< ::google::fhir::stu3::proto::CodeableConcept*>(&::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* Dosage_AsNeeded::mutable_codeable_concept() {
  if (!has_codeable_concept()) {
    clear_as_needed();
    set_has_codeable_concept();
    as_needed_.codeable_concept_ = CreateMaybeMessage< ::google::fhir::stu3::proto::CodeableConcept >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.AsNeeded.codeable_concept)
  return as_needed_.codeable_concept_;
}

inline bool Dosage_AsNeeded::has_as_needed() const {
  return as_needed_case() != AS_NEEDED_NOT_SET;
}
inline void Dosage_AsNeeded::clear_has_as_needed() {
  _oneof_case_[0] = AS_NEEDED_NOT_SET;
}
inline Dosage_AsNeeded::AsNeededCase Dosage_AsNeeded::as_needed_case() const {
  return Dosage_AsNeeded::AsNeededCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Dosage_Dose

// .google.fhir.stu3.proto.Range range = 1;
inline bool Dosage_Dose::has_range() const {
  return dose_case() == kRange;
}
inline void Dosage_Dose::set_has_range() {
  _oneof_case_[0] = kRange;
}
inline void Dosage_Dose::clear_range() {
  if (has_range()) {
    delete dose_.range_;
    clear_has_dose();
  }
}
inline const ::google::fhir::stu3::proto::Range& Dosage_Dose::_internal_range() const {
  return *dose_.range_;
}
inline ::google::fhir::stu3::proto::Range* Dosage_Dose::release_range() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Dosage.Dose.range)
  if (has_range()) {
    clear_has_dose();
      ::google::fhir::stu3::proto::Range* temp = dose_.range_;
    dose_.range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Range& Dosage_Dose::range() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.Dose.range)
  return has_range()
      ? *dose_.range_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Range*>(&::google::fhir::stu3::proto::_Range_default_instance_);
}
inline ::google::fhir::stu3::proto::Range* Dosage_Dose::mutable_range() {
  if (!has_range()) {
    clear_dose();
    set_has_range();
    dose_.range_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Range >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.Dose.range)
  return dose_.range_;
}

// .google.fhir.stu3.proto.SimpleQuantity quantity = 2;
inline bool Dosage_Dose::has_quantity() const {
  return dose_case() == kQuantity;
}
inline void Dosage_Dose::set_has_quantity() {
  _oneof_case_[0] = kQuantity;
}
inline void Dosage_Dose::clear_quantity() {
  if (has_quantity()) {
    delete dose_.quantity_;
    clear_has_dose();
  }
}
inline const ::google::fhir::stu3::proto::SimpleQuantity& Dosage_Dose::_internal_quantity() const {
  return *dose_.quantity_;
}
inline ::google::fhir::stu3::proto::SimpleQuantity* Dosage_Dose::release_quantity() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Dosage.Dose.quantity)
  if (has_quantity()) {
    clear_has_dose();
      ::google::fhir::stu3::proto::SimpleQuantity* temp = dose_.quantity_;
    dose_.quantity_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::SimpleQuantity& Dosage_Dose::quantity() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.Dose.quantity)
  return has_quantity()
      ? *dose_.quantity_
      : *reinterpret_cast< ::google::fhir::stu3::proto::SimpleQuantity*>(&::google::fhir::stu3::proto::_SimpleQuantity_default_instance_);
}
inline ::google::fhir::stu3::proto::SimpleQuantity* Dosage_Dose::mutable_quantity() {
  if (!has_quantity()) {
    clear_dose();
    set_has_quantity();
    dose_.quantity_ = CreateMaybeMessage< ::google::fhir::stu3::proto::SimpleQuantity >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.Dose.quantity)
  return dose_.quantity_;
}

inline bool Dosage_Dose::has_dose() const {
  return dose_case() != DOSE_NOT_SET;
}
inline void Dosage_Dose::clear_has_dose() {
  _oneof_case_[0] = DOSE_NOT_SET;
}
inline Dosage_Dose::DoseCase Dosage_Dose::dose_case() const {
  return Dosage_Dose::DoseCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Dosage_Rate

// .google.fhir.stu3.proto.Ratio ratio = 1;
inline bool Dosage_Rate::has_ratio() const {
  return rate_case() == kRatio;
}
inline void Dosage_Rate::set_has_ratio() {
  _oneof_case_[0] = kRatio;
}
inline void Dosage_Rate::clear_ratio() {
  if (has_ratio()) {
    delete rate_.ratio_;
    clear_has_rate();
  }
}
inline const ::google::fhir::stu3::proto::Ratio& Dosage_Rate::_internal_ratio() const {
  return *rate_.ratio_;
}
inline ::google::fhir::stu3::proto::Ratio* Dosage_Rate::release_ratio() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Dosage.Rate.ratio)
  if (has_ratio()) {
    clear_has_rate();
      ::google::fhir::stu3::proto::Ratio* temp = rate_.ratio_;
    rate_.ratio_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Ratio& Dosage_Rate::ratio() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.Rate.ratio)
  return has_ratio()
      ? *rate_.ratio_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Ratio*>(&::google::fhir::stu3::proto::_Ratio_default_instance_);
}
inline ::google::fhir::stu3::proto::Ratio* Dosage_Rate::mutable_ratio() {
  if (!has_ratio()) {
    clear_rate();
    set_has_ratio();
    rate_.ratio_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Ratio >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.Rate.ratio)
  return rate_.ratio_;
}

// .google.fhir.stu3.proto.Range range = 2;
inline bool Dosage_Rate::has_range() const {
  return rate_case() == kRange;
}
inline void Dosage_Rate::set_has_range() {
  _oneof_case_[0] = kRange;
}
inline void Dosage_Rate::clear_range() {
  if (has_range()) {
    delete rate_.range_;
    clear_has_rate();
  }
}
inline const ::google::fhir::stu3::proto::Range& Dosage_Rate::_internal_range() const {
  return *rate_.range_;
}
inline ::google::fhir::stu3::proto::Range* Dosage_Rate::release_range() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Dosage.Rate.range)
  if (has_range()) {
    clear_has_rate();
      ::google::fhir::stu3::proto::Range* temp = rate_.range_;
    rate_.range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Range& Dosage_Rate::range() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.Rate.range)
  return has_range()
      ? *rate_.range_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Range*>(&::google::fhir::stu3::proto::_Range_default_instance_);
}
inline ::google::fhir::stu3::proto::Range* Dosage_Rate::mutable_range() {
  if (!has_range()) {
    clear_rate();
    set_has_range();
    rate_.range_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Range >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.Rate.range)
  return rate_.range_;
}

// .google.fhir.stu3.proto.SimpleQuantity quantity = 3;
inline bool Dosage_Rate::has_quantity() const {
  return rate_case() == kQuantity;
}
inline void Dosage_Rate::set_has_quantity() {
  _oneof_case_[0] = kQuantity;
}
inline void Dosage_Rate::clear_quantity() {
  if (has_quantity()) {
    delete rate_.quantity_;
    clear_has_rate();
  }
}
inline const ::google::fhir::stu3::proto::SimpleQuantity& Dosage_Rate::_internal_quantity() const {
  return *rate_.quantity_;
}
inline ::google::fhir::stu3::proto::SimpleQuantity* Dosage_Rate::release_quantity() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Dosage.Rate.quantity)
  if (has_quantity()) {
    clear_has_rate();
      ::google::fhir::stu3::proto::SimpleQuantity* temp = rate_.quantity_;
    rate_.quantity_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::SimpleQuantity& Dosage_Rate::quantity() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.Rate.quantity)
  return has_quantity()
      ? *rate_.quantity_
      : *reinterpret_cast< ::google::fhir::stu3::proto::SimpleQuantity*>(&::google::fhir::stu3::proto::_SimpleQuantity_default_instance_);
}
inline ::google::fhir::stu3::proto::SimpleQuantity* Dosage_Rate::mutable_quantity() {
  if (!has_quantity()) {
    clear_rate();
    set_has_quantity();
    rate_.quantity_ = CreateMaybeMessage< ::google::fhir::stu3::proto::SimpleQuantity >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.Rate.quantity)
  return rate_.quantity_;
}

inline bool Dosage_Rate::has_rate() const {
  return rate_case() != RATE_NOT_SET;
}
inline void Dosage_Rate::clear_has_rate() {
  _oneof_case_[0] = RATE_NOT_SET;
}
inline Dosage_Rate::RateCase Dosage_Rate::rate_case() const {
  return Dosage_Rate::RateCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Dosage

// .google.fhir.stu3.proto.String id = 1;
inline bool Dosage::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Dosage::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Dosage::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Dosage::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Dosage::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Dosage.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Dosage::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.id)
  return id_;
}
inline void Dosage::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Dosage.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int Dosage::extension_size() const {
  return extension_.size();
}
inline void Dosage::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Dosage::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Dosage::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Dosage.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Dosage::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Dosage::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Dosage.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Dosage::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Dosage.extension)
  return extension_;
}

// .google.fhir.stu3.proto.Integer sequence = 3;
inline bool Dosage::has_sequence() const {
  return this != internal_default_instance() && sequence_ != NULL;
}
inline void Dosage::clear_sequence() {
  if (GetArenaNoVirtual() == NULL && sequence_ != NULL) {
    delete sequence_;
  }
  sequence_ = NULL;
}
inline const ::google::fhir::stu3::proto::Integer& Dosage::_internal_sequence() const {
  return *sequence_;
}
inline const ::google::fhir::stu3::proto::Integer& Dosage::sequence() const {
  const ::google::fhir::stu3::proto::Integer* p = sequence_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.sequence)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Integer*>(
      &::google::fhir::stu3::proto::_Integer_default_instance_);
}
inline ::google::fhir::stu3::proto::Integer* Dosage::release_sequence() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Dosage.sequence)
  
  ::google::fhir::stu3::proto::Integer* temp = sequence_;
  sequence_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Integer* Dosage::mutable_sequence() {
  
  if (sequence_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Integer>(GetArenaNoVirtual());
    sequence_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.sequence)
  return sequence_;
}
inline void Dosage::set_allocated_sequence(::google::fhir::stu3::proto::Integer* sequence) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sequence_;
  }
  if (sequence) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sequence = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sequence, submessage_arena);
    }
    
  } else {
    
  }
  sequence_ = sequence;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Dosage.sequence)
}

// .google.fhir.stu3.proto.String text = 4;
inline bool Dosage::has_text() const {
  return this != internal_default_instance() && text_ != NULL;
}
inline void Dosage::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) {
    delete text_;
  }
  text_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Dosage::_internal_text() const {
  return *text_;
}
inline const ::google::fhir::stu3::proto::String& Dosage::text() const {
  const ::google::fhir::stu3::proto::String* p = text_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.text)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Dosage::release_text() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Dosage.text)
  
  ::google::fhir::stu3::proto::String* temp = text_;
  text_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Dosage::mutable_text() {
  
  if (text_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    text_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.text)
  return text_;
}
inline void Dosage::set_allocated_text(::google::fhir::stu3::proto::String* text) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete text_;
  }
  if (text) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      text = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Dosage.text)
}

// repeated .google.fhir.stu3.proto.CodeableConcept additional_instruction = 5;
inline int Dosage::additional_instruction_size() const {
  return additional_instruction_.size();
}
inline void Dosage::clear_additional_instruction() {
  additional_instruction_.Clear();
}
inline ::google::fhir::stu3::proto::CodeableConcept* Dosage::mutable_additional_instruction(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.additional_instruction)
  return additional_instruction_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::CodeableConcept >*
Dosage::mutable_additional_instruction() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Dosage.additional_instruction)
  return &additional_instruction_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& Dosage::additional_instruction(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.additional_instruction)
  return additional_instruction_.Get(index);
}
inline ::google::fhir::stu3::proto::CodeableConcept* Dosage::add_additional_instruction() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Dosage.additional_instruction)
  return additional_instruction_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::CodeableConcept >&
Dosage::additional_instruction() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Dosage.additional_instruction)
  return additional_instruction_;
}

// .google.fhir.stu3.proto.String patient_instruction = 6;
inline bool Dosage::has_patient_instruction() const {
  return this != internal_default_instance() && patient_instruction_ != NULL;
}
inline void Dosage::clear_patient_instruction() {
  if (GetArenaNoVirtual() == NULL && patient_instruction_ != NULL) {
    delete patient_instruction_;
  }
  patient_instruction_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Dosage::_internal_patient_instruction() const {
  return *patient_instruction_;
}
inline const ::google::fhir::stu3::proto::String& Dosage::patient_instruction() const {
  const ::google::fhir::stu3::proto::String* p = patient_instruction_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.patient_instruction)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Dosage::release_patient_instruction() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Dosage.patient_instruction)
  
  ::google::fhir::stu3::proto::String* temp = patient_instruction_;
  patient_instruction_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Dosage::mutable_patient_instruction() {
  
  if (patient_instruction_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    patient_instruction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.patient_instruction)
  return patient_instruction_;
}
inline void Dosage::set_allocated_patient_instruction(::google::fhir::stu3::proto::String* patient_instruction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete patient_instruction_;
  }
  if (patient_instruction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      patient_instruction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, patient_instruction, submessage_arena);
    }
    
  } else {
    
  }
  patient_instruction_ = patient_instruction;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Dosage.patient_instruction)
}

// .google.fhir.stu3.proto.Timing timing = 7;
inline bool Dosage::has_timing() const {
  return this != internal_default_instance() && timing_ != NULL;
}
inline void Dosage::clear_timing() {
  if (GetArenaNoVirtual() == NULL && timing_ != NULL) {
    delete timing_;
  }
  timing_ = NULL;
}
inline const ::google::fhir::stu3::proto::Timing& Dosage::_internal_timing() const {
  return *timing_;
}
inline const ::google::fhir::stu3::proto::Timing& Dosage::timing() const {
  const ::google::fhir::stu3::proto::Timing* p = timing_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.timing)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Timing*>(
      &::google::fhir::stu3::proto::_Timing_default_instance_);
}
inline ::google::fhir::stu3::proto::Timing* Dosage::release_timing() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Dosage.timing)
  
  ::google::fhir::stu3::proto::Timing* temp = timing_;
  timing_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Timing* Dosage::mutable_timing() {
  
  if (timing_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Timing>(GetArenaNoVirtual());
    timing_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.timing)
  return timing_;
}
inline void Dosage::set_allocated_timing(::google::fhir::stu3::proto::Timing* timing) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete timing_;
  }
  if (timing) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timing = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timing, submessage_arena);
    }
    
  } else {
    
  }
  timing_ = timing;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Dosage.timing)
}

// .google.fhir.stu3.proto.Dosage.AsNeeded as_needed = 8 [(.google.fhir.stu3.proto.is_choice_type) = true];
inline bool Dosage::has_as_needed() const {
  return this != internal_default_instance() && as_needed_ != NULL;
}
inline void Dosage::clear_as_needed() {
  if (GetArenaNoVirtual() == NULL && as_needed_ != NULL) {
    delete as_needed_;
  }
  as_needed_ = NULL;
}
inline const ::google::fhir::stu3::proto::Dosage_AsNeeded& Dosage::_internal_as_needed() const {
  return *as_needed_;
}
inline const ::google::fhir::stu3::proto::Dosage_AsNeeded& Dosage::as_needed() const {
  const ::google::fhir::stu3::proto::Dosage_AsNeeded* p = as_needed_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.as_needed)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Dosage_AsNeeded*>(
      &::google::fhir::stu3::proto::_Dosage_AsNeeded_default_instance_);
}
inline ::google::fhir::stu3::proto::Dosage_AsNeeded* Dosage::release_as_needed() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Dosage.as_needed)
  
  ::google::fhir::stu3::proto::Dosage_AsNeeded* temp = as_needed_;
  as_needed_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Dosage_AsNeeded* Dosage::mutable_as_needed() {
  
  if (as_needed_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Dosage_AsNeeded>(GetArenaNoVirtual());
    as_needed_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.as_needed)
  return as_needed_;
}
inline void Dosage::set_allocated_as_needed(::google::fhir::stu3::proto::Dosage_AsNeeded* as_needed) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete as_needed_;
  }
  if (as_needed) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      as_needed = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, as_needed, submessage_arena);
    }
    
  } else {
    
  }
  as_needed_ = as_needed;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Dosage.as_needed)
}

// .google.fhir.stu3.proto.CodeableConcept site = 9;
inline bool Dosage::has_site() const {
  return this != internal_default_instance() && site_ != NULL;
}
inline void Dosage::clear_site() {
  if (GetArenaNoVirtual() == NULL && site_ != NULL) {
    delete site_;
  }
  site_ = NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& Dosage::_internal_site() const {
  return *site_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& Dosage::site() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = site_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.site)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* Dosage::release_site() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Dosage.site)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = site_;
  site_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* Dosage::mutable_site() {
  
  if (site_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    site_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.site)
  return site_;
}
inline void Dosage::set_allocated_site(::google::fhir::stu3::proto::CodeableConcept* site) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete site_;
  }
  if (site) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      site = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, site, submessage_arena);
    }
    
  } else {
    
  }
  site_ = site;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Dosage.site)
}

// .google.fhir.stu3.proto.CodeableConcept route = 10;
inline bool Dosage::has_route() const {
  return this != internal_default_instance() && route_ != NULL;
}
inline void Dosage::clear_route() {
  if (GetArenaNoVirtual() == NULL && route_ != NULL) {
    delete route_;
  }
  route_ = NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& Dosage::_internal_route() const {
  return *route_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& Dosage::route() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = route_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.route)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* Dosage::release_route() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Dosage.route)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = route_;
  route_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* Dosage::mutable_route() {
  
  if (route_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    route_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.route)
  return route_;
}
inline void Dosage::set_allocated_route(::google::fhir::stu3::proto::CodeableConcept* route) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete route_;
  }
  if (route) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      route = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    
  } else {
    
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Dosage.route)
}

// .google.fhir.stu3.proto.CodeableConcept method = 11;
inline bool Dosage::has_method() const {
  return this != internal_default_instance() && method_ != NULL;
}
inline void Dosage::clear_method() {
  if (GetArenaNoVirtual() == NULL && method_ != NULL) {
    delete method_;
  }
  method_ = NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& Dosage::_internal_method() const {
  return *method_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& Dosage::method() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = method_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.method)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* Dosage::release_method() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Dosage.method)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = method_;
  method_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* Dosage::mutable_method() {
  
  if (method_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    method_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.method)
  return method_;
}
inline void Dosage::set_allocated_method(::google::fhir::stu3::proto::CodeableConcept* method) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete method_;
  }
  if (method) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      method = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, method, submessage_arena);
    }
    
  } else {
    
  }
  method_ = method;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Dosage.method)
}

// .google.fhir.stu3.proto.Dosage.Dose dose = 12 [(.google.fhir.stu3.proto.is_choice_type) = true];
inline bool Dosage::has_dose() const {
  return this != internal_default_instance() && dose_ != NULL;
}
inline void Dosage::clear_dose() {
  if (GetArenaNoVirtual() == NULL && dose_ != NULL) {
    delete dose_;
  }
  dose_ = NULL;
}
inline const ::google::fhir::stu3::proto::Dosage_Dose& Dosage::_internal_dose() const {
  return *dose_;
}
inline const ::google::fhir::stu3::proto::Dosage_Dose& Dosage::dose() const {
  const ::google::fhir::stu3::proto::Dosage_Dose* p = dose_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.dose)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Dosage_Dose*>(
      &::google::fhir::stu3::proto::_Dosage_Dose_default_instance_);
}
inline ::google::fhir::stu3::proto::Dosage_Dose* Dosage::release_dose() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Dosage.dose)
  
  ::google::fhir::stu3::proto::Dosage_Dose* temp = dose_;
  dose_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Dosage_Dose* Dosage::mutable_dose() {
  
  if (dose_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Dosage_Dose>(GetArenaNoVirtual());
    dose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.dose)
  return dose_;
}
inline void Dosage::set_allocated_dose(::google::fhir::stu3::proto::Dosage_Dose* dose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dose_;
  }
  if (dose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dose, submessage_arena);
    }
    
  } else {
    
  }
  dose_ = dose;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Dosage.dose)
}

// .google.fhir.stu3.proto.Ratio max_dose_per_period = 13;
inline bool Dosage::has_max_dose_per_period() const {
  return this != internal_default_instance() && max_dose_per_period_ != NULL;
}
inline void Dosage::clear_max_dose_per_period() {
  if (GetArenaNoVirtual() == NULL && max_dose_per_period_ != NULL) {
    delete max_dose_per_period_;
  }
  max_dose_per_period_ = NULL;
}
inline const ::google::fhir::stu3::proto::Ratio& Dosage::_internal_max_dose_per_period() const {
  return *max_dose_per_period_;
}
inline const ::google::fhir::stu3::proto::Ratio& Dosage::max_dose_per_period() const {
  const ::google::fhir::stu3::proto::Ratio* p = max_dose_per_period_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.max_dose_per_period)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Ratio*>(
      &::google::fhir::stu3::proto::_Ratio_default_instance_);
}
inline ::google::fhir::stu3::proto::Ratio* Dosage::release_max_dose_per_period() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Dosage.max_dose_per_period)
  
  ::google::fhir::stu3::proto::Ratio* temp = max_dose_per_period_;
  max_dose_per_period_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Ratio* Dosage::mutable_max_dose_per_period() {
  
  if (max_dose_per_period_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Ratio>(GetArenaNoVirtual());
    max_dose_per_period_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.max_dose_per_period)
  return max_dose_per_period_;
}
inline void Dosage::set_allocated_max_dose_per_period(::google::fhir::stu3::proto::Ratio* max_dose_per_period) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete max_dose_per_period_;
  }
  if (max_dose_per_period) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max_dose_per_period = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_dose_per_period, submessage_arena);
    }
    
  } else {
    
  }
  max_dose_per_period_ = max_dose_per_period;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Dosage.max_dose_per_period)
}

// .google.fhir.stu3.proto.SimpleQuantity max_dose_per_administration = 14;
inline bool Dosage::has_max_dose_per_administration() const {
  return this != internal_default_instance() && max_dose_per_administration_ != NULL;
}
inline void Dosage::clear_max_dose_per_administration() {
  if (GetArenaNoVirtual() == NULL && max_dose_per_administration_ != NULL) {
    delete max_dose_per_administration_;
  }
  max_dose_per_administration_ = NULL;
}
inline const ::google::fhir::stu3::proto::SimpleQuantity& Dosage::_internal_max_dose_per_administration() const {
  return *max_dose_per_administration_;
}
inline const ::google::fhir::stu3::proto::SimpleQuantity& Dosage::max_dose_per_administration() const {
  const ::google::fhir::stu3::proto::SimpleQuantity* p = max_dose_per_administration_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.max_dose_per_administration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::SimpleQuantity*>(
      &::google::fhir::stu3::proto::_SimpleQuantity_default_instance_);
}
inline ::google::fhir::stu3::proto::SimpleQuantity* Dosage::release_max_dose_per_administration() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Dosage.max_dose_per_administration)
  
  ::google::fhir::stu3::proto::SimpleQuantity* temp = max_dose_per_administration_;
  max_dose_per_administration_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::SimpleQuantity* Dosage::mutable_max_dose_per_administration() {
  
  if (max_dose_per_administration_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::SimpleQuantity>(GetArenaNoVirtual());
    max_dose_per_administration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.max_dose_per_administration)
  return max_dose_per_administration_;
}
inline void Dosage::set_allocated_max_dose_per_administration(::google::fhir::stu3::proto::SimpleQuantity* max_dose_per_administration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete max_dose_per_administration_;
  }
  if (max_dose_per_administration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max_dose_per_administration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_dose_per_administration, submessage_arena);
    }
    
  } else {
    
  }
  max_dose_per_administration_ = max_dose_per_administration;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Dosage.max_dose_per_administration)
}

// .google.fhir.stu3.proto.SimpleQuantity max_dose_per_lifetime = 15;
inline bool Dosage::has_max_dose_per_lifetime() const {
  return this != internal_default_instance() && max_dose_per_lifetime_ != NULL;
}
inline void Dosage::clear_max_dose_per_lifetime() {
  if (GetArenaNoVirtual() == NULL && max_dose_per_lifetime_ != NULL) {
    delete max_dose_per_lifetime_;
  }
  max_dose_per_lifetime_ = NULL;
}
inline const ::google::fhir::stu3::proto::SimpleQuantity& Dosage::_internal_max_dose_per_lifetime() const {
  return *max_dose_per_lifetime_;
}
inline const ::google::fhir::stu3::proto::SimpleQuantity& Dosage::max_dose_per_lifetime() const {
  const ::google::fhir::stu3::proto::SimpleQuantity* p = max_dose_per_lifetime_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.max_dose_per_lifetime)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::SimpleQuantity*>(
      &::google::fhir::stu3::proto::_SimpleQuantity_default_instance_);
}
inline ::google::fhir::stu3::proto::SimpleQuantity* Dosage::release_max_dose_per_lifetime() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Dosage.max_dose_per_lifetime)
  
  ::google::fhir::stu3::proto::SimpleQuantity* temp = max_dose_per_lifetime_;
  max_dose_per_lifetime_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::SimpleQuantity* Dosage::mutable_max_dose_per_lifetime() {
  
  if (max_dose_per_lifetime_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::SimpleQuantity>(GetArenaNoVirtual());
    max_dose_per_lifetime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.max_dose_per_lifetime)
  return max_dose_per_lifetime_;
}
inline void Dosage::set_allocated_max_dose_per_lifetime(::google::fhir::stu3::proto::SimpleQuantity* max_dose_per_lifetime) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete max_dose_per_lifetime_;
  }
  if (max_dose_per_lifetime) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      max_dose_per_lifetime = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_dose_per_lifetime, submessage_arena);
    }
    
  } else {
    
  }
  max_dose_per_lifetime_ = max_dose_per_lifetime;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Dosage.max_dose_per_lifetime)
}

// .google.fhir.stu3.proto.Dosage.Rate rate = 16 [(.google.fhir.stu3.proto.is_choice_type) = true];
inline bool Dosage::has_rate() const {
  return this != internal_default_instance() && rate_ != NULL;
}
inline void Dosage::clear_rate() {
  if (GetArenaNoVirtual() == NULL && rate_ != NULL) {
    delete rate_;
  }
  rate_ = NULL;
}
inline const ::google::fhir::stu3::proto::Dosage_Rate& Dosage::_internal_rate() const {
  return *rate_;
}
inline const ::google::fhir::stu3::proto::Dosage_Rate& Dosage::rate() const {
  const ::google::fhir::stu3::proto::Dosage_Rate* p = rate_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Dosage.rate)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Dosage_Rate*>(
      &::google::fhir::stu3::proto::_Dosage_Rate_default_instance_);
}
inline ::google::fhir::stu3::proto::Dosage_Rate* Dosage::release_rate() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Dosage.rate)
  
  ::google::fhir::stu3::proto::Dosage_Rate* temp = rate_;
  rate_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Dosage_Rate* Dosage::mutable_rate() {
  
  if (rate_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Dosage_Rate>(GetArenaNoVirtual());
    rate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Dosage.rate)
  return rate_;
}
inline void Dosage::set_allocated_rate(::google::fhir::stu3::proto::Dosage_Rate* rate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rate_;
  }
  if (rate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rate, submessage_arena);
    }
    
  } else {
    
  }
  rate_ = rate;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Dosage.rate)
}

// -------------------------------------------------------------------

// Duration

// .google.fhir.stu3.proto.String id = 1;
inline bool Duration::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Duration::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Duration::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Duration::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Duration.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Duration::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Duration.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Duration::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Duration.id)
  return id_;
}
inline void Duration::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Duration.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int Duration::extension_size() const {
  return extension_.size();
}
inline void Duration::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Duration::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Duration.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Duration::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Duration.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Duration::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Duration.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Duration::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Duration.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Duration::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Duration.extension)
  return extension_;
}

// .google.fhir.stu3.proto.Decimal value = 3;
inline bool Duration::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void Duration::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& Duration::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::Decimal& Duration::value() const {
  const ::google::fhir::stu3::proto::Decimal* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Duration.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* Duration::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Duration.value)
  
  ::google::fhir::stu3::proto::Decimal* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* Duration::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Duration.value)
  return value_;
}
inline void Duration::set_allocated_value(::google::fhir::stu3::proto::Decimal* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Duration.value)
}

// .google.fhir.stu3.proto.QuantityComparatorCode comparator = 4;
inline bool Duration::has_comparator() const {
  return this != internal_default_instance() && comparator_ != NULL;
}
inline void Duration::clear_comparator() {
  if (GetArenaNoVirtual() == NULL && comparator_ != NULL) {
    delete comparator_;
  }
  comparator_ = NULL;
}
inline const ::google::fhir::stu3::proto::QuantityComparatorCode& Duration::_internal_comparator() const {
  return *comparator_;
}
inline const ::google::fhir::stu3::proto::QuantityComparatorCode& Duration::comparator() const {
  const ::google::fhir::stu3::proto::QuantityComparatorCode* p = comparator_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Duration.comparator)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::QuantityComparatorCode*>(
      &::google::fhir::stu3::proto::_QuantityComparatorCode_default_instance_);
}
inline ::google::fhir::stu3::proto::QuantityComparatorCode* Duration::release_comparator() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Duration.comparator)
  
  ::google::fhir::stu3::proto::QuantityComparatorCode* temp = comparator_;
  comparator_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::QuantityComparatorCode* Duration::mutable_comparator() {
  
  if (comparator_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::QuantityComparatorCode>(GetArenaNoVirtual());
    comparator_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Duration.comparator)
  return comparator_;
}
inline void Duration::set_allocated_comparator(::google::fhir::stu3::proto::QuantityComparatorCode* comparator) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete comparator_;
  }
  if (comparator) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      comparator = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, comparator, submessage_arena);
    }
    
  } else {
    
  }
  comparator_ = comparator;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Duration.comparator)
}

// .google.fhir.stu3.proto.String unit = 5;
inline bool Duration::has_unit() const {
  return this != internal_default_instance() && unit_ != NULL;
}
inline void Duration::clear_unit() {
  if (GetArenaNoVirtual() == NULL && unit_ != NULL) {
    delete unit_;
  }
  unit_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Duration::_internal_unit() const {
  return *unit_;
}
inline const ::google::fhir::stu3::proto::String& Duration::unit() const {
  const ::google::fhir::stu3::proto::String* p = unit_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Duration.unit)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Duration::release_unit() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Duration.unit)
  
  ::google::fhir::stu3::proto::String* temp = unit_;
  unit_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Duration::mutable_unit() {
  
  if (unit_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    unit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Duration.unit)
  return unit_;
}
inline void Duration::set_allocated_unit(::google::fhir::stu3::proto::String* unit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete unit_;
  }
  if (unit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unit, submessage_arena);
    }
    
  } else {
    
  }
  unit_ = unit;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Duration.unit)
}

// .google.fhir.stu3.proto.Uri system = 6;
inline bool Duration::has_system() const {
  return this != internal_default_instance() && system_ != NULL;
}
inline void Duration::clear_system() {
  if (GetArenaNoVirtual() == NULL && system_ != NULL) {
    delete system_;
  }
  system_ = NULL;
}
inline const ::google::fhir::stu3::proto::Uri& Duration::_internal_system() const {
  return *system_;
}
inline const ::google::fhir::stu3::proto::Uri& Duration::system() const {
  const ::google::fhir::stu3::proto::Uri* p = system_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Duration.system)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* Duration::release_system() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Duration.system)
  
  ::google::fhir::stu3::proto::Uri* temp = system_;
  system_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* Duration::mutable_system() {
  
  if (system_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    system_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Duration.system)
  return system_;
}
inline void Duration::set_allocated_system(::google::fhir::stu3::proto::Uri* system) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete system_;
  }
  if (system) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      system = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, system, submessage_arena);
    }
    
  } else {
    
  }
  system_ = system;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Duration.system)
}

// .google.fhir.stu3.proto.Code code = 7;
inline bool Duration::has_code() const {
  return this != internal_default_instance() && code_ != NULL;
}
inline void Duration::clear_code() {
  if (GetArenaNoVirtual() == NULL && code_ != NULL) {
    delete code_;
  }
  code_ = NULL;
}
inline const ::google::fhir::stu3::proto::Code& Duration::_internal_code() const {
  return *code_;
}
inline const ::google::fhir::stu3::proto::Code& Duration::code() const {
  const ::google::fhir::stu3::proto::Code* p = code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Duration.code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Code*>(
      &::google::fhir::stu3::proto::_Code_default_instance_);
}
inline ::google::fhir::stu3::proto::Code* Duration::release_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Duration.code)
  
  ::google::fhir::stu3::proto::Code* temp = code_;
  code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Code* Duration::mutable_code() {
  
  if (code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Code>(GetArenaNoVirtual());
    code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Duration.code)
  return code_;
}
inline void Duration::set_allocated_code(::google::fhir::stu3::proto::Code* code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete code_;
  }
  if (code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Duration.code)
}

// -------------------------------------------------------------------

// HumanName

// .google.fhir.stu3.proto.String id = 1;
inline bool HumanName::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void HumanName::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& HumanName::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& HumanName::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanName.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* HumanName::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanName.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* HumanName::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanName.id)
  return id_;
}
inline void HumanName::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanName.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int HumanName::extension_size() const {
  return extension_.size();
}
inline void HumanName::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* HumanName::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanName.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
HumanName::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.HumanName.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& HumanName::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanName.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* HumanName::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.HumanName.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
HumanName::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.HumanName.extension)
  return extension_;
}

// .google.fhir.stu3.proto.NameUseCode use = 3;
inline bool HumanName::has_use() const {
  return this != internal_default_instance() && use_ != NULL;
}
inline void HumanName::clear_use() {
  if (GetArenaNoVirtual() == NULL && use_ != NULL) {
    delete use_;
  }
  use_ = NULL;
}
inline const ::google::fhir::stu3::proto::NameUseCode& HumanName::_internal_use() const {
  return *use_;
}
inline const ::google::fhir::stu3::proto::NameUseCode& HumanName::use() const {
  const ::google::fhir::stu3::proto::NameUseCode* p = use_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanName.use)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::NameUseCode*>(
      &::google::fhir::stu3::proto::_NameUseCode_default_instance_);
}
inline ::google::fhir::stu3::proto::NameUseCode* HumanName::release_use() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanName.use)
  
  ::google::fhir::stu3::proto::NameUseCode* temp = use_;
  use_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::NameUseCode* HumanName::mutable_use() {
  
  if (use_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::NameUseCode>(GetArenaNoVirtual());
    use_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanName.use)
  return use_;
}
inline void HumanName::set_allocated_use(::google::fhir::stu3::proto::NameUseCode* use) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete use_;
  }
  if (use) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      use = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, use, submessage_arena);
    }
    
  } else {
    
  }
  use_ = use;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanName.use)
}

// .google.fhir.stu3.proto.String text = 4;
inline bool HumanName::has_text() const {
  return this != internal_default_instance() && text_ != NULL;
}
inline void HumanName::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) {
    delete text_;
  }
  text_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& HumanName::_internal_text() const {
  return *text_;
}
inline const ::google::fhir::stu3::proto::String& HumanName::text() const {
  const ::google::fhir::stu3::proto::String* p = text_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanName.text)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* HumanName::release_text() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanName.text)
  
  ::google::fhir::stu3::proto::String* temp = text_;
  text_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* HumanName::mutable_text() {
  
  if (text_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    text_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanName.text)
  return text_;
}
inline void HumanName::set_allocated_text(::google::fhir::stu3::proto::String* text) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete text_;
  }
  if (text) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      text = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanName.text)
}

// .google.fhir.stu3.proto.String family = 5;
inline bool HumanName::has_family() const {
  return this != internal_default_instance() && family_ != NULL;
}
inline void HumanName::clear_family() {
  if (GetArenaNoVirtual() == NULL && family_ != NULL) {
    delete family_;
  }
  family_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& HumanName::_internal_family() const {
  return *family_;
}
inline const ::google::fhir::stu3::proto::String& HumanName::family() const {
  const ::google::fhir::stu3::proto::String* p = family_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanName.family)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* HumanName::release_family() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanName.family)
  
  ::google::fhir::stu3::proto::String* temp = family_;
  family_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* HumanName::mutable_family() {
  
  if (family_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    family_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanName.family)
  return family_;
}
inline void HumanName::set_allocated_family(::google::fhir::stu3::proto::String* family) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete family_;
  }
  if (family) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      family = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, family, submessage_arena);
    }
    
  } else {
    
  }
  family_ = family;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanName.family)
}

// repeated .google.fhir.stu3.proto.String given = 6;
inline int HumanName::given_size() const {
  return given_.size();
}
inline void HumanName::clear_given() {
  given_.Clear();
}
inline ::google::fhir::stu3::proto::String* HumanName::mutable_given(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanName.given)
  return given_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >*
HumanName::mutable_given() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.HumanName.given)
  return &given_;
}
inline const ::google::fhir::stu3::proto::String& HumanName::given(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanName.given)
  return given_.Get(index);
}
inline ::google::fhir::stu3::proto::String* HumanName::add_given() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.HumanName.given)
  return given_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >&
HumanName::given() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.HumanName.given)
  return given_;
}

// repeated .google.fhir.stu3.proto.String prefix = 7;
inline int HumanName::prefix_size() const {
  return prefix_.size();
}
inline void HumanName::clear_prefix() {
  prefix_.Clear();
}
inline ::google::fhir::stu3::proto::String* HumanName::mutable_prefix(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanName.prefix)
  return prefix_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >*
HumanName::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.HumanName.prefix)
  return &prefix_;
}
inline const ::google::fhir::stu3::proto::String& HumanName::prefix(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanName.prefix)
  return prefix_.Get(index);
}
inline ::google::fhir::stu3::proto::String* HumanName::add_prefix() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.HumanName.prefix)
  return prefix_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >&
HumanName::prefix() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.HumanName.prefix)
  return prefix_;
}

// repeated .google.fhir.stu3.proto.String suffix = 8;
inline int HumanName::suffix_size() const {
  return suffix_.size();
}
inline void HumanName::clear_suffix() {
  suffix_.Clear();
}
inline ::google::fhir::stu3::proto::String* HumanName::mutable_suffix(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanName.suffix)
  return suffix_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >*
HumanName::mutable_suffix() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.HumanName.suffix)
  return &suffix_;
}
inline const ::google::fhir::stu3::proto::String& HumanName::suffix(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanName.suffix)
  return suffix_.Get(index);
}
inline ::google::fhir::stu3::proto::String* HumanName::add_suffix() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.HumanName.suffix)
  return suffix_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::String >&
HumanName::suffix() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.HumanName.suffix)
  return suffix_;
}

// .google.fhir.stu3.proto.Period period = 9;
inline bool HumanName::has_period() const {
  return this != internal_default_instance() && period_ != NULL;
}
inline void HumanName::clear_period() {
  if (GetArenaNoVirtual() == NULL && period_ != NULL) {
    delete period_;
  }
  period_ = NULL;
}
inline const ::google::fhir::stu3::proto::Period& HumanName::_internal_period() const {
  return *period_;
}
inline const ::google::fhir::stu3::proto::Period& HumanName::period() const {
  const ::google::fhir::stu3::proto::Period* p = period_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.HumanName.period)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Period*>(
      &::google::fhir::stu3::proto::_Period_default_instance_);
}
inline ::google::fhir::stu3::proto::Period* HumanName::release_period() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.HumanName.period)
  
  ::google::fhir::stu3::proto::Period* temp = period_;
  period_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Period* HumanName::mutable_period() {
  
  if (period_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Period>(GetArenaNoVirtual());
    period_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.HumanName.period)
  return period_;
}
inline void HumanName::set_allocated_period(::google::fhir::stu3::proto::Period* period) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete period_;
  }
  if (period) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      period = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, period, submessage_arena);
    }
    
  } else {
    
  }
  period_ = period;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.HumanName.period)
}

// -------------------------------------------------------------------

// Identifier

// .google.fhir.stu3.proto.String id = 1;
inline bool Identifier::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Identifier::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Identifier::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Identifier::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Identifier.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Identifier::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Identifier.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Identifier::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Identifier.id)
  return id_;
}
inline void Identifier::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Identifier.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int Identifier::extension_size() const {
  return extension_.size();
}
inline void Identifier::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Identifier::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Identifier.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Identifier::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Identifier.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Identifier::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Identifier.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Identifier::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Identifier.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Identifier::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Identifier.extension)
  return extension_;
}

// .google.fhir.stu3.proto.IdentifierUseCode use = 3;
inline bool Identifier::has_use() const {
  return this != internal_default_instance() && use_ != NULL;
}
inline void Identifier::clear_use() {
  if (GetArenaNoVirtual() == NULL && use_ != NULL) {
    delete use_;
  }
  use_ = NULL;
}
inline const ::google::fhir::stu3::proto::IdentifierUseCode& Identifier::_internal_use() const {
  return *use_;
}
inline const ::google::fhir::stu3::proto::IdentifierUseCode& Identifier::use() const {
  const ::google::fhir::stu3::proto::IdentifierUseCode* p = use_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Identifier.use)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::IdentifierUseCode*>(
      &::google::fhir::stu3::proto::_IdentifierUseCode_default_instance_);
}
inline ::google::fhir::stu3::proto::IdentifierUseCode* Identifier::release_use() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Identifier.use)
  
  ::google::fhir::stu3::proto::IdentifierUseCode* temp = use_;
  use_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::IdentifierUseCode* Identifier::mutable_use() {
  
  if (use_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::IdentifierUseCode>(GetArenaNoVirtual());
    use_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Identifier.use)
  return use_;
}
inline void Identifier::set_allocated_use(::google::fhir::stu3::proto::IdentifierUseCode* use) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete use_;
  }
  if (use) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      use = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, use, submessage_arena);
    }
    
  } else {
    
  }
  use_ = use;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Identifier.use)
}

// .google.fhir.stu3.proto.CodeableConcept type = 4;
inline bool Identifier::has_type() const {
  return this != internal_default_instance() && type_ != NULL;
}
inline void Identifier::clear_type() {
  if (GetArenaNoVirtual() == NULL && type_ != NULL) {
    delete type_;
  }
  type_ = NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& Identifier::_internal_type() const {
  return *type_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& Identifier::type() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = type_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Identifier.type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* Identifier::release_type() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Identifier.type)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = type_;
  type_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* Identifier::mutable_type() {
  
  if (type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Identifier.type)
  return type_;
}
inline void Identifier::set_allocated_type(::google::fhir::stu3::proto::CodeableConcept* type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete type_;
  }
  if (type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Identifier.type)
}

// .google.fhir.stu3.proto.Uri system = 5;
inline bool Identifier::has_system() const {
  return this != internal_default_instance() && system_ != NULL;
}
inline void Identifier::clear_system() {
  if (GetArenaNoVirtual() == NULL && system_ != NULL) {
    delete system_;
  }
  system_ = NULL;
}
inline const ::google::fhir::stu3::proto::Uri& Identifier::_internal_system() const {
  return *system_;
}
inline const ::google::fhir::stu3::proto::Uri& Identifier::system() const {
  const ::google::fhir::stu3::proto::Uri* p = system_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Identifier.system)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* Identifier::release_system() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Identifier.system)
  
  ::google::fhir::stu3::proto::Uri* temp = system_;
  system_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* Identifier::mutable_system() {
  
  if (system_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    system_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Identifier.system)
  return system_;
}
inline void Identifier::set_allocated_system(::google::fhir::stu3::proto::Uri* system) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete system_;
  }
  if (system) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      system = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, system, submessage_arena);
    }
    
  } else {
    
  }
  system_ = system;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Identifier.system)
}

// .google.fhir.stu3.proto.String value = 6;
inline bool Identifier::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void Identifier::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Identifier::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::String& Identifier::value() const {
  const ::google::fhir::stu3::proto::String* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Identifier.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Identifier::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Identifier.value)
  
  ::google::fhir::stu3::proto::String* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Identifier::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Identifier.value)
  return value_;
}
inline void Identifier::set_allocated_value(::google::fhir::stu3::proto::String* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Identifier.value)
}

// .google.fhir.stu3.proto.Period period = 7;
inline bool Identifier::has_period() const {
  return this != internal_default_instance() && period_ != NULL;
}
inline void Identifier::clear_period() {
  if (GetArenaNoVirtual() == NULL && period_ != NULL) {
    delete period_;
  }
  period_ = NULL;
}
inline const ::google::fhir::stu3::proto::Period& Identifier::_internal_period() const {
  return *period_;
}
inline const ::google::fhir::stu3::proto::Period& Identifier::period() const {
  const ::google::fhir::stu3::proto::Period* p = period_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Identifier.period)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Period*>(
      &::google::fhir::stu3::proto::_Period_default_instance_);
}
inline ::google::fhir::stu3::proto::Period* Identifier::release_period() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Identifier.period)
  
  ::google::fhir::stu3::proto::Period* temp = period_;
  period_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Period* Identifier::mutable_period() {
  
  if (period_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Period>(GetArenaNoVirtual());
    period_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Identifier.period)
  return period_;
}
inline void Identifier::set_allocated_period(::google::fhir::stu3::proto::Period* period) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete period_;
  }
  if (period) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      period = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, period, submessage_arena);
    }
    
  } else {
    
  }
  period_ = period;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Identifier.period)
}

// .google.fhir.stu3.proto.Reference assigner = 8 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Organization"];
inline bool Identifier::has_assigner() const {
  return this != internal_default_instance() && assigner_ != NULL;
}
inline void Identifier::clear_assigner() {
  if (GetArenaNoVirtual() == NULL && assigner_ != NULL) {
    delete assigner_;
  }
  assigner_ = NULL;
}
inline const ::google::fhir::stu3::proto::Reference& Identifier::_internal_assigner() const {
  return *assigner_;
}
inline const ::google::fhir::stu3::proto::Reference& Identifier::assigner() const {
  const ::google::fhir::stu3::proto::Reference* p = assigner_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Identifier.assigner)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Reference*>(
      &::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* Identifier::release_assigner() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Identifier.assigner)
  
  ::google::fhir::stu3::proto::Reference* temp = assigner_;
  assigner_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Reference* Identifier::mutable_assigner() {
  
  if (assigner_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Reference>(GetArenaNoVirtual());
    assigner_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Identifier.assigner)
  return assigner_;
}
inline void Identifier::set_allocated_assigner(::google::fhir::stu3::proto::Reference* assigner) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete assigner_;
  }
  if (assigner) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      assigner = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, assigner, submessage_arena);
    }
    
  } else {
    
  }
  assigner_ = assigner;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Identifier.assigner)
}

// -------------------------------------------------------------------

// Meta

// .google.fhir.stu3.proto.String id = 1;
inline bool Meta::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Meta::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Meta::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Meta::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Meta.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Meta::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Meta.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Meta::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Meta.id)
  return id_;
}
inline void Meta::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Meta.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int Meta::extension_size() const {
  return extension_.size();
}
inline void Meta::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Meta::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Meta.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Meta::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Meta.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Meta::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Meta.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Meta::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Meta.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Meta::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Meta.extension)
  return extension_;
}

// .google.fhir.stu3.proto.Id version_id = 3;
inline bool Meta::has_version_id() const {
  return this != internal_default_instance() && version_id_ != NULL;
}
inline void Meta::clear_version_id() {
  if (GetArenaNoVirtual() == NULL && version_id_ != NULL) {
    delete version_id_;
  }
  version_id_ = NULL;
}
inline const ::google::fhir::stu3::proto::Id& Meta::_internal_version_id() const {
  return *version_id_;
}
inline const ::google::fhir::stu3::proto::Id& Meta::version_id() const {
  const ::google::fhir::stu3::proto::Id* p = version_id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Meta.version_id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Id*>(
      &::google::fhir::stu3::proto::_Id_default_instance_);
}
inline ::google::fhir::stu3::proto::Id* Meta::release_version_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Meta.version_id)
  
  ::google::fhir::stu3::proto::Id* temp = version_id_;
  version_id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Id* Meta::mutable_version_id() {
  
  if (version_id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Id>(GetArenaNoVirtual());
    version_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Meta.version_id)
  return version_id_;
}
inline void Meta::set_allocated_version_id(::google::fhir::stu3::proto::Id* version_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete version_id_;
  }
  if (version_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      version_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, version_id, submessage_arena);
    }
    
  } else {
    
  }
  version_id_ = version_id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Meta.version_id)
}

// .google.fhir.stu3.proto.Instant last_updated = 4;
inline bool Meta::has_last_updated() const {
  return this != internal_default_instance() && last_updated_ != NULL;
}
inline void Meta::clear_last_updated() {
  if (GetArenaNoVirtual() == NULL && last_updated_ != NULL) {
    delete last_updated_;
  }
  last_updated_ = NULL;
}
inline const ::google::fhir::stu3::proto::Instant& Meta::_internal_last_updated() const {
  return *last_updated_;
}
inline const ::google::fhir::stu3::proto::Instant& Meta::last_updated() const {
  const ::google::fhir::stu3::proto::Instant* p = last_updated_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Meta.last_updated)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Instant*>(
      &::google::fhir::stu3::proto::_Instant_default_instance_);
}
inline ::google::fhir::stu3::proto::Instant* Meta::release_last_updated() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Meta.last_updated)
  
  ::google::fhir::stu3::proto::Instant* temp = last_updated_;
  last_updated_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Instant* Meta::mutable_last_updated() {
  
  if (last_updated_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Instant>(GetArenaNoVirtual());
    last_updated_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Meta.last_updated)
  return last_updated_;
}
inline void Meta::set_allocated_last_updated(::google::fhir::stu3::proto::Instant* last_updated) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete last_updated_;
  }
  if (last_updated) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      last_updated = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, last_updated, submessage_arena);
    }
    
  } else {
    
  }
  last_updated_ = last_updated;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Meta.last_updated)
}

// repeated .google.fhir.stu3.proto.Uri profile = 5;
inline int Meta::profile_size() const {
  return profile_.size();
}
inline void Meta::clear_profile() {
  profile_.Clear();
}
inline ::google::fhir::stu3::proto::Uri* Meta::mutable_profile(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Meta.profile)
  return profile_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Uri >*
Meta::mutable_profile() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Meta.profile)
  return &profile_;
}
inline const ::google::fhir::stu3::proto::Uri& Meta::profile(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Meta.profile)
  return profile_.Get(index);
}
inline ::google::fhir::stu3::proto::Uri* Meta::add_profile() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Meta.profile)
  return profile_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Uri >&
Meta::profile() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Meta.profile)
  return profile_;
}

// repeated .google.fhir.stu3.proto.Coding security = 6;
inline int Meta::security_size() const {
  return security_.size();
}
inline void Meta::clear_security() {
  security_.Clear();
}
inline ::google::fhir::stu3::proto::Coding* Meta::mutable_security(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Meta.security)
  return security_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Coding >*
Meta::mutable_security() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Meta.security)
  return &security_;
}
inline const ::google::fhir::stu3::proto::Coding& Meta::security(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Meta.security)
  return security_.Get(index);
}
inline ::google::fhir::stu3::proto::Coding* Meta::add_security() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Meta.security)
  return security_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Coding >&
Meta::security() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Meta.security)
  return security_;
}

// repeated .google.fhir.stu3.proto.Coding tag = 7;
inline int Meta::tag_size() const {
  return tag_.size();
}
inline void Meta::clear_tag() {
  tag_.Clear();
}
inline ::google::fhir::stu3::proto::Coding* Meta::mutable_tag(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Meta.tag)
  return tag_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Coding >*
Meta::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Meta.tag)
  return &tag_;
}
inline const ::google::fhir::stu3::proto::Coding& Meta::tag(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Meta.tag)
  return tag_.Get(index);
}
inline ::google::fhir::stu3::proto::Coding* Meta::add_tag() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Meta.tag)
  return tag_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Coding >&
Meta::tag() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Meta.tag)
  return tag_;
}

// -------------------------------------------------------------------

// Money

// .google.fhir.stu3.proto.String id = 1;
inline bool Money::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Money::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Money::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Money::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Money.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Money::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Money.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Money::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Money.id)
  return id_;
}
inline void Money::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Money.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int Money::extension_size() const {
  return extension_.size();
}
inline void Money::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Money::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Money.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Money::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Money.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Money::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Money.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Money::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Money.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Money::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Money.extension)
  return extension_;
}

// .google.fhir.stu3.proto.Decimal value = 3;
inline bool Money::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void Money::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& Money::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::Decimal& Money::value() const {
  const ::google::fhir::stu3::proto::Decimal* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Money.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* Money::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Money.value)
  
  ::google::fhir::stu3::proto::Decimal* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* Money::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Money.value)
  return value_;
}
inline void Money::set_allocated_value(::google::fhir::stu3::proto::Decimal* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Money.value)
}

// .google.fhir.stu3.proto.QuantityComparatorCode comparator = 4;
inline bool Money::has_comparator() const {
  return this != internal_default_instance() && comparator_ != NULL;
}
inline void Money::clear_comparator() {
  if (GetArenaNoVirtual() == NULL && comparator_ != NULL) {
    delete comparator_;
  }
  comparator_ = NULL;
}
inline const ::google::fhir::stu3::proto::QuantityComparatorCode& Money::_internal_comparator() const {
  return *comparator_;
}
inline const ::google::fhir::stu3::proto::QuantityComparatorCode& Money::comparator() const {
  const ::google::fhir::stu3::proto::QuantityComparatorCode* p = comparator_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Money.comparator)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::QuantityComparatorCode*>(
      &::google::fhir::stu3::proto::_QuantityComparatorCode_default_instance_);
}
inline ::google::fhir::stu3::proto::QuantityComparatorCode* Money::release_comparator() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Money.comparator)
  
  ::google::fhir::stu3::proto::QuantityComparatorCode* temp = comparator_;
  comparator_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::QuantityComparatorCode* Money::mutable_comparator() {
  
  if (comparator_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::QuantityComparatorCode>(GetArenaNoVirtual());
    comparator_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Money.comparator)
  return comparator_;
}
inline void Money::set_allocated_comparator(::google::fhir::stu3::proto::QuantityComparatorCode* comparator) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete comparator_;
  }
  if (comparator) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      comparator = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, comparator, submessage_arena);
    }
    
  } else {
    
  }
  comparator_ = comparator;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Money.comparator)
}

// .google.fhir.stu3.proto.String unit = 5;
inline bool Money::has_unit() const {
  return this != internal_default_instance() && unit_ != NULL;
}
inline void Money::clear_unit() {
  if (GetArenaNoVirtual() == NULL && unit_ != NULL) {
    delete unit_;
  }
  unit_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Money::_internal_unit() const {
  return *unit_;
}
inline const ::google::fhir::stu3::proto::String& Money::unit() const {
  const ::google::fhir::stu3::proto::String* p = unit_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Money.unit)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Money::release_unit() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Money.unit)
  
  ::google::fhir::stu3::proto::String* temp = unit_;
  unit_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Money::mutable_unit() {
  
  if (unit_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    unit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Money.unit)
  return unit_;
}
inline void Money::set_allocated_unit(::google::fhir::stu3::proto::String* unit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete unit_;
  }
  if (unit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unit, submessage_arena);
    }
    
  } else {
    
  }
  unit_ = unit;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Money.unit)
}

// .google.fhir.stu3.proto.Uri system = 6;
inline bool Money::has_system() const {
  return this != internal_default_instance() && system_ != NULL;
}
inline void Money::clear_system() {
  if (GetArenaNoVirtual() == NULL && system_ != NULL) {
    delete system_;
  }
  system_ = NULL;
}
inline const ::google::fhir::stu3::proto::Uri& Money::_internal_system() const {
  return *system_;
}
inline const ::google::fhir::stu3::proto::Uri& Money::system() const {
  const ::google::fhir::stu3::proto::Uri* p = system_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Money.system)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* Money::release_system() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Money.system)
  
  ::google::fhir::stu3::proto::Uri* temp = system_;
  system_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* Money::mutable_system() {
  
  if (system_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    system_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Money.system)
  return system_;
}
inline void Money::set_allocated_system(::google::fhir::stu3::proto::Uri* system) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete system_;
  }
  if (system) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      system = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, system, submessage_arena);
    }
    
  } else {
    
  }
  system_ = system;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Money.system)
}

// .google.fhir.stu3.proto.Code code = 7;
inline bool Money::has_code() const {
  return this != internal_default_instance() && code_ != NULL;
}
inline void Money::clear_code() {
  if (GetArenaNoVirtual() == NULL && code_ != NULL) {
    delete code_;
  }
  code_ = NULL;
}
inline const ::google::fhir::stu3::proto::Code& Money::_internal_code() const {
  return *code_;
}
inline const ::google::fhir::stu3::proto::Code& Money::code() const {
  const ::google::fhir::stu3::proto::Code* p = code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Money.code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Code*>(
      &::google::fhir::stu3::proto::_Code_default_instance_);
}
inline ::google::fhir::stu3::proto::Code* Money::release_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Money.code)
  
  ::google::fhir::stu3::proto::Code* temp = code_;
  code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Code* Money::mutable_code() {
  
  if (code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Code>(GetArenaNoVirtual());
    code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Money.code)
  return code_;
}
inline void Money::set_allocated_code(::google::fhir::stu3::proto::Code* code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete code_;
  }
  if (code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Money.code)
}

// -------------------------------------------------------------------

// Period

// .google.fhir.stu3.proto.String id = 1;
inline bool Period::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Period::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Period::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Period::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Period.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Period::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Period.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Period::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Period.id)
  return id_;
}
inline void Period::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Period.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int Period::extension_size() const {
  return extension_.size();
}
inline void Period::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Period::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Period.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Period::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Period.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Period::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Period.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Period::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Period.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Period::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Period.extension)
  return extension_;
}

// .google.fhir.stu3.proto.DateTime start = 3;
inline bool Period::has_start() const {
  return this != internal_default_instance() && start_ != NULL;
}
inline void Period::clear_start() {
  if (GetArenaNoVirtual() == NULL && start_ != NULL) {
    delete start_;
  }
  start_ = NULL;
}
inline const ::google::fhir::stu3::proto::DateTime& Period::_internal_start() const {
  return *start_;
}
inline const ::google::fhir::stu3::proto::DateTime& Period::start() const {
  const ::google::fhir::stu3::proto::DateTime* p = start_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Period.start)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::DateTime*>(
      &::google::fhir::stu3::proto::_DateTime_default_instance_);
}
inline ::google::fhir::stu3::proto::DateTime* Period::release_start() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Period.start)
  
  ::google::fhir::stu3::proto::DateTime* temp = start_;
  start_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::DateTime* Period::mutable_start() {
  
  if (start_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::DateTime>(GetArenaNoVirtual());
    start_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Period.start)
  return start_;
}
inline void Period::set_allocated_start(::google::fhir::stu3::proto::DateTime* start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete start_;
  }
  if (start) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Period.start)
}

// .google.fhir.stu3.proto.DateTime end = 4;
inline bool Period::has_end() const {
  return this != internal_default_instance() && end_ != NULL;
}
inline void Period::clear_end() {
  if (GetArenaNoVirtual() == NULL && end_ != NULL) {
    delete end_;
  }
  end_ = NULL;
}
inline const ::google::fhir::stu3::proto::DateTime& Period::_internal_end() const {
  return *end_;
}
inline const ::google::fhir::stu3::proto::DateTime& Period::end() const {
  const ::google::fhir::stu3::proto::DateTime* p = end_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Period.end)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::DateTime*>(
      &::google::fhir::stu3::proto::_DateTime_default_instance_);
}
inline ::google::fhir::stu3::proto::DateTime* Period::release_end() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Period.end)
  
  ::google::fhir::stu3::proto::DateTime* temp = end_;
  end_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::DateTime* Period::mutable_end() {
  
  if (end_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::DateTime>(GetArenaNoVirtual());
    end_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Period.end)
  return end_;
}
inline void Period::set_allocated_end(::google::fhir::stu3::proto::DateTime* end) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete end_;
  }
  if (end) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      end = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Period.end)
}

// -------------------------------------------------------------------

// Quantity

// .google.fhir.stu3.proto.String id = 1;
inline bool Quantity::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Quantity::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Quantity::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Quantity::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Quantity.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Quantity::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Quantity.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Quantity::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Quantity.id)
  return id_;
}
inline void Quantity::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Quantity.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int Quantity::extension_size() const {
  return extension_.size();
}
inline void Quantity::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Quantity::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Quantity.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Quantity::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Quantity.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Quantity::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Quantity.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Quantity::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Quantity.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Quantity::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Quantity.extension)
  return extension_;
}

// .google.fhir.stu3.proto.Decimal value = 3;
inline bool Quantity::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void Quantity::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& Quantity::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::Decimal& Quantity::value() const {
  const ::google::fhir::stu3::proto::Decimal* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Quantity.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* Quantity::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Quantity.value)
  
  ::google::fhir::stu3::proto::Decimal* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* Quantity::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Quantity.value)
  return value_;
}
inline void Quantity::set_allocated_value(::google::fhir::stu3::proto::Decimal* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Quantity.value)
}

// .google.fhir.stu3.proto.QuantityComparatorCode comparator = 4;
inline bool Quantity::has_comparator() const {
  return this != internal_default_instance() && comparator_ != NULL;
}
inline void Quantity::clear_comparator() {
  if (GetArenaNoVirtual() == NULL && comparator_ != NULL) {
    delete comparator_;
  }
  comparator_ = NULL;
}
inline const ::google::fhir::stu3::proto::QuantityComparatorCode& Quantity::_internal_comparator() const {
  return *comparator_;
}
inline const ::google::fhir::stu3::proto::QuantityComparatorCode& Quantity::comparator() const {
  const ::google::fhir::stu3::proto::QuantityComparatorCode* p = comparator_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Quantity.comparator)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::QuantityComparatorCode*>(
      &::google::fhir::stu3::proto::_QuantityComparatorCode_default_instance_);
}
inline ::google::fhir::stu3::proto::QuantityComparatorCode* Quantity::release_comparator() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Quantity.comparator)
  
  ::google::fhir::stu3::proto::QuantityComparatorCode* temp = comparator_;
  comparator_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::QuantityComparatorCode* Quantity::mutable_comparator() {
  
  if (comparator_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::QuantityComparatorCode>(GetArenaNoVirtual());
    comparator_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Quantity.comparator)
  return comparator_;
}
inline void Quantity::set_allocated_comparator(::google::fhir::stu3::proto::QuantityComparatorCode* comparator) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete comparator_;
  }
  if (comparator) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      comparator = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, comparator, submessage_arena);
    }
    
  } else {
    
  }
  comparator_ = comparator;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Quantity.comparator)
}

// .google.fhir.stu3.proto.String unit = 5;
inline bool Quantity::has_unit() const {
  return this != internal_default_instance() && unit_ != NULL;
}
inline void Quantity::clear_unit() {
  if (GetArenaNoVirtual() == NULL && unit_ != NULL) {
    delete unit_;
  }
  unit_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Quantity::_internal_unit() const {
  return *unit_;
}
inline const ::google::fhir::stu3::proto::String& Quantity::unit() const {
  const ::google::fhir::stu3::proto::String* p = unit_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Quantity.unit)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Quantity::release_unit() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Quantity.unit)
  
  ::google::fhir::stu3::proto::String* temp = unit_;
  unit_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Quantity::mutable_unit() {
  
  if (unit_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    unit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Quantity.unit)
  return unit_;
}
inline void Quantity::set_allocated_unit(::google::fhir::stu3::proto::String* unit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete unit_;
  }
  if (unit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unit, submessage_arena);
    }
    
  } else {
    
  }
  unit_ = unit;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Quantity.unit)
}

// .google.fhir.stu3.proto.Uri system = 6;
inline bool Quantity::has_system() const {
  return this != internal_default_instance() && system_ != NULL;
}
inline void Quantity::clear_system() {
  if (GetArenaNoVirtual() == NULL && system_ != NULL) {
    delete system_;
  }
  system_ = NULL;
}
inline const ::google::fhir::stu3::proto::Uri& Quantity::_internal_system() const {
  return *system_;
}
inline const ::google::fhir::stu3::proto::Uri& Quantity::system() const {
  const ::google::fhir::stu3::proto::Uri* p = system_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Quantity.system)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* Quantity::release_system() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Quantity.system)
  
  ::google::fhir::stu3::proto::Uri* temp = system_;
  system_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* Quantity::mutable_system() {
  
  if (system_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    system_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Quantity.system)
  return system_;
}
inline void Quantity::set_allocated_system(::google::fhir::stu3::proto::Uri* system) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete system_;
  }
  if (system) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      system = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, system, submessage_arena);
    }
    
  } else {
    
  }
  system_ = system;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Quantity.system)
}

// .google.fhir.stu3.proto.Code code = 7;
inline bool Quantity::has_code() const {
  return this != internal_default_instance() && code_ != NULL;
}
inline void Quantity::clear_code() {
  if (GetArenaNoVirtual() == NULL && code_ != NULL) {
    delete code_;
  }
  code_ = NULL;
}
inline const ::google::fhir::stu3::proto::Code& Quantity::_internal_code() const {
  return *code_;
}
inline const ::google::fhir::stu3::proto::Code& Quantity::code() const {
  const ::google::fhir::stu3::proto::Code* p = code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Quantity.code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Code*>(
      &::google::fhir::stu3::proto::_Code_default_instance_);
}
inline ::google::fhir::stu3::proto::Code* Quantity::release_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Quantity.code)
  
  ::google::fhir::stu3::proto::Code* temp = code_;
  code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Code* Quantity::mutable_code() {
  
  if (code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Code>(GetArenaNoVirtual());
    code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Quantity.code)
  return code_;
}
inline void Quantity::set_allocated_code(::google::fhir::stu3::proto::Code* code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete code_;
  }
  if (code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Quantity.code)
}

// -------------------------------------------------------------------

// Range

// .google.fhir.stu3.proto.String id = 1;
inline bool Range::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Range::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Range::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Range::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Range.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Range::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Range.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Range::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Range.id)
  return id_;
}
inline void Range::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Range.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int Range::extension_size() const {
  return extension_.size();
}
inline void Range::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Range::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Range.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Range::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Range.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Range::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Range.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Range::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Range.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Range::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Range.extension)
  return extension_;
}

// .google.fhir.stu3.proto.SimpleQuantity low = 3;
inline bool Range::has_low() const {
  return this != internal_default_instance() && low_ != NULL;
}
inline void Range::clear_low() {
  if (GetArenaNoVirtual() == NULL && low_ != NULL) {
    delete low_;
  }
  low_ = NULL;
}
inline const ::google::fhir::stu3::proto::SimpleQuantity& Range::_internal_low() const {
  return *low_;
}
inline const ::google::fhir::stu3::proto::SimpleQuantity& Range::low() const {
  const ::google::fhir::stu3::proto::SimpleQuantity* p = low_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Range.low)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::SimpleQuantity*>(
      &::google::fhir::stu3::proto::_SimpleQuantity_default_instance_);
}
inline ::google::fhir::stu3::proto::SimpleQuantity* Range::release_low() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Range.low)
  
  ::google::fhir::stu3::proto::SimpleQuantity* temp = low_;
  low_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::SimpleQuantity* Range::mutable_low() {
  
  if (low_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::SimpleQuantity>(GetArenaNoVirtual());
    low_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Range.low)
  return low_;
}
inline void Range::set_allocated_low(::google::fhir::stu3::proto::SimpleQuantity* low) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete low_;
  }
  if (low) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      low = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, low, submessage_arena);
    }
    
  } else {
    
  }
  low_ = low;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Range.low)
}

// .google.fhir.stu3.proto.SimpleQuantity high = 4;
inline bool Range::has_high() const {
  return this != internal_default_instance() && high_ != NULL;
}
inline void Range::clear_high() {
  if (GetArenaNoVirtual() == NULL && high_ != NULL) {
    delete high_;
  }
  high_ = NULL;
}
inline const ::google::fhir::stu3::proto::SimpleQuantity& Range::_internal_high() const {
  return *high_;
}
inline const ::google::fhir::stu3::proto::SimpleQuantity& Range::high() const {
  const ::google::fhir::stu3::proto::SimpleQuantity* p = high_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Range.high)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::SimpleQuantity*>(
      &::google::fhir::stu3::proto::_SimpleQuantity_default_instance_);
}
inline ::google::fhir::stu3::proto::SimpleQuantity* Range::release_high() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Range.high)
  
  ::google::fhir::stu3::proto::SimpleQuantity* temp = high_;
  high_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::SimpleQuantity* Range::mutable_high() {
  
  if (high_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::SimpleQuantity>(GetArenaNoVirtual());
    high_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Range.high)
  return high_;
}
inline void Range::set_allocated_high(::google::fhir::stu3::proto::SimpleQuantity* high) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete high_;
  }
  if (high) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      high = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, high, submessage_arena);
    }
    
  } else {
    
  }
  high_ = high;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Range.high)
}

// -------------------------------------------------------------------

// Ratio

// .google.fhir.stu3.proto.String id = 1;
inline bool Ratio::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Ratio::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Ratio::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Ratio::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Ratio.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Ratio::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Ratio.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Ratio::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Ratio.id)
  return id_;
}
inline void Ratio::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Ratio.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int Ratio::extension_size() const {
  return extension_.size();
}
inline void Ratio::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Ratio::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Ratio.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Ratio::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Ratio.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Ratio::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Ratio.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Ratio::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Ratio.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Ratio::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Ratio.extension)
  return extension_;
}

// .google.fhir.stu3.proto.Quantity numerator = 3;
inline bool Ratio::has_numerator() const {
  return this != internal_default_instance() && numerator_ != NULL;
}
inline void Ratio::clear_numerator() {
  if (GetArenaNoVirtual() == NULL && numerator_ != NULL) {
    delete numerator_;
  }
  numerator_ = NULL;
}
inline const ::google::fhir::stu3::proto::Quantity& Ratio::_internal_numerator() const {
  return *numerator_;
}
inline const ::google::fhir::stu3::proto::Quantity& Ratio::numerator() const {
  const ::google::fhir::stu3::proto::Quantity* p = numerator_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Ratio.numerator)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Quantity*>(
      &::google::fhir::stu3::proto::_Quantity_default_instance_);
}
inline ::google::fhir::stu3::proto::Quantity* Ratio::release_numerator() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Ratio.numerator)
  
  ::google::fhir::stu3::proto::Quantity* temp = numerator_;
  numerator_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Quantity* Ratio::mutable_numerator() {
  
  if (numerator_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Quantity>(GetArenaNoVirtual());
    numerator_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Ratio.numerator)
  return numerator_;
}
inline void Ratio::set_allocated_numerator(::google::fhir::stu3::proto::Quantity* numerator) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete numerator_;
  }
  if (numerator) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      numerator = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, numerator, submessage_arena);
    }
    
  } else {
    
  }
  numerator_ = numerator;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Ratio.numerator)
}

// .google.fhir.stu3.proto.Quantity denominator = 4;
inline bool Ratio::has_denominator() const {
  return this != internal_default_instance() && denominator_ != NULL;
}
inline void Ratio::clear_denominator() {
  if (GetArenaNoVirtual() == NULL && denominator_ != NULL) {
    delete denominator_;
  }
  denominator_ = NULL;
}
inline const ::google::fhir::stu3::proto::Quantity& Ratio::_internal_denominator() const {
  return *denominator_;
}
inline const ::google::fhir::stu3::proto::Quantity& Ratio::denominator() const {
  const ::google::fhir::stu3::proto::Quantity* p = denominator_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Ratio.denominator)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Quantity*>(
      &::google::fhir::stu3::proto::_Quantity_default_instance_);
}
inline ::google::fhir::stu3::proto::Quantity* Ratio::release_denominator() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Ratio.denominator)
  
  ::google::fhir::stu3::proto::Quantity* temp = denominator_;
  denominator_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Quantity* Ratio::mutable_denominator() {
  
  if (denominator_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Quantity>(GetArenaNoVirtual());
    denominator_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Ratio.denominator)
  return denominator_;
}
inline void Ratio::set_allocated_denominator(::google::fhir::stu3::proto::Quantity* denominator) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete denominator_;
  }
  if (denominator) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      denominator = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, denominator, submessage_arena);
    }
    
  } else {
    
  }
  denominator_ = denominator;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Ratio.denominator)
}

// -------------------------------------------------------------------

// SampledData

// .google.fhir.stu3.proto.String id = 1;
inline bool SampledData::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void SampledData::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& SampledData::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& SampledData::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SampledData.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* SampledData::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SampledData.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* SampledData::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SampledData.id)
  return id_;
}
inline void SampledData::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SampledData.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int SampledData::extension_size() const {
  return extension_.size();
}
inline void SampledData::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* SampledData::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SampledData.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
SampledData::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.SampledData.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& SampledData::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SampledData.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* SampledData::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.SampledData.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
SampledData::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.SampledData.extension)
  return extension_;
}

// .google.fhir.stu3.proto.SimpleQuantity origin = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool SampledData::has_origin() const {
  return this != internal_default_instance() && origin_ != NULL;
}
inline void SampledData::clear_origin() {
  if (GetArenaNoVirtual() == NULL && origin_ != NULL) {
    delete origin_;
  }
  origin_ = NULL;
}
inline const ::google::fhir::stu3::proto::SimpleQuantity& SampledData::_internal_origin() const {
  return *origin_;
}
inline const ::google::fhir::stu3::proto::SimpleQuantity& SampledData::origin() const {
  const ::google::fhir::stu3::proto::SimpleQuantity* p = origin_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SampledData.origin)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::SimpleQuantity*>(
      &::google::fhir::stu3::proto::_SimpleQuantity_default_instance_);
}
inline ::google::fhir::stu3::proto::SimpleQuantity* SampledData::release_origin() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SampledData.origin)
  
  ::google::fhir::stu3::proto::SimpleQuantity* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::SimpleQuantity* SampledData::mutable_origin() {
  
  if (origin_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::SimpleQuantity>(GetArenaNoVirtual());
    origin_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SampledData.origin)
  return origin_;
}
inline void SampledData::set_allocated_origin(::google::fhir::stu3::proto::SimpleQuantity* origin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete origin_;
  }
  if (origin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      origin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    
  } else {
    
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SampledData.origin)
}

// .google.fhir.stu3.proto.Decimal period = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool SampledData::has_period() const {
  return this != internal_default_instance() && period_ != NULL;
}
inline void SampledData::clear_period() {
  if (GetArenaNoVirtual() == NULL && period_ != NULL) {
    delete period_;
  }
  period_ = NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& SampledData::_internal_period() const {
  return *period_;
}
inline const ::google::fhir::stu3::proto::Decimal& SampledData::period() const {
  const ::google::fhir::stu3::proto::Decimal* p = period_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SampledData.period)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* SampledData::release_period() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SampledData.period)
  
  ::google::fhir::stu3::proto::Decimal* temp = period_;
  period_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* SampledData::mutable_period() {
  
  if (period_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    period_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SampledData.period)
  return period_;
}
inline void SampledData::set_allocated_period(::google::fhir::stu3::proto::Decimal* period) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete period_;
  }
  if (period) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      period = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, period, submessage_arena);
    }
    
  } else {
    
  }
  period_ = period;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SampledData.period)
}

// .google.fhir.stu3.proto.Decimal factor = 5;
inline bool SampledData::has_factor() const {
  return this != internal_default_instance() && factor_ != NULL;
}
inline void SampledData::clear_factor() {
  if (GetArenaNoVirtual() == NULL && factor_ != NULL) {
    delete factor_;
  }
  factor_ = NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& SampledData::_internal_factor() const {
  return *factor_;
}
inline const ::google::fhir::stu3::proto::Decimal& SampledData::factor() const {
  const ::google::fhir::stu3::proto::Decimal* p = factor_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SampledData.factor)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* SampledData::release_factor() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SampledData.factor)
  
  ::google::fhir::stu3::proto::Decimal* temp = factor_;
  factor_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* SampledData::mutable_factor() {
  
  if (factor_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    factor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SampledData.factor)
  return factor_;
}
inline void SampledData::set_allocated_factor(::google::fhir::stu3::proto::Decimal* factor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete factor_;
  }
  if (factor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      factor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, factor, submessage_arena);
    }
    
  } else {
    
  }
  factor_ = factor;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SampledData.factor)
}

// .google.fhir.stu3.proto.Decimal lower_limit = 6;
inline bool SampledData::has_lower_limit() const {
  return this != internal_default_instance() && lower_limit_ != NULL;
}
inline void SampledData::clear_lower_limit() {
  if (GetArenaNoVirtual() == NULL && lower_limit_ != NULL) {
    delete lower_limit_;
  }
  lower_limit_ = NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& SampledData::_internal_lower_limit() const {
  return *lower_limit_;
}
inline const ::google::fhir::stu3::proto::Decimal& SampledData::lower_limit() const {
  const ::google::fhir::stu3::proto::Decimal* p = lower_limit_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SampledData.lower_limit)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* SampledData::release_lower_limit() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SampledData.lower_limit)
  
  ::google::fhir::stu3::proto::Decimal* temp = lower_limit_;
  lower_limit_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* SampledData::mutable_lower_limit() {
  
  if (lower_limit_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    lower_limit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SampledData.lower_limit)
  return lower_limit_;
}
inline void SampledData::set_allocated_lower_limit(::google::fhir::stu3::proto::Decimal* lower_limit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lower_limit_;
  }
  if (lower_limit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lower_limit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lower_limit, submessage_arena);
    }
    
  } else {
    
  }
  lower_limit_ = lower_limit;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SampledData.lower_limit)
}

// .google.fhir.stu3.proto.Decimal upper_limit = 7;
inline bool SampledData::has_upper_limit() const {
  return this != internal_default_instance() && upper_limit_ != NULL;
}
inline void SampledData::clear_upper_limit() {
  if (GetArenaNoVirtual() == NULL && upper_limit_ != NULL) {
    delete upper_limit_;
  }
  upper_limit_ = NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& SampledData::_internal_upper_limit() const {
  return *upper_limit_;
}
inline const ::google::fhir::stu3::proto::Decimal& SampledData::upper_limit() const {
  const ::google::fhir::stu3::proto::Decimal* p = upper_limit_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SampledData.upper_limit)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* SampledData::release_upper_limit() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SampledData.upper_limit)
  
  ::google::fhir::stu3::proto::Decimal* temp = upper_limit_;
  upper_limit_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* SampledData::mutable_upper_limit() {
  
  if (upper_limit_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    upper_limit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SampledData.upper_limit)
  return upper_limit_;
}
inline void SampledData::set_allocated_upper_limit(::google::fhir::stu3::proto::Decimal* upper_limit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete upper_limit_;
  }
  if (upper_limit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      upper_limit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upper_limit, submessage_arena);
    }
    
  } else {
    
  }
  upper_limit_ = upper_limit;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SampledData.upper_limit)
}

// .google.fhir.stu3.proto.PositiveInt dimensions = 8 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool SampledData::has_dimensions() const {
  return this != internal_default_instance() && dimensions_ != NULL;
}
inline void SampledData::clear_dimensions() {
  if (GetArenaNoVirtual() == NULL && dimensions_ != NULL) {
    delete dimensions_;
  }
  dimensions_ = NULL;
}
inline const ::google::fhir::stu3::proto::PositiveInt& SampledData::_internal_dimensions() const {
  return *dimensions_;
}
inline const ::google::fhir::stu3::proto::PositiveInt& SampledData::dimensions() const {
  const ::google::fhir::stu3::proto::PositiveInt* p = dimensions_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SampledData.dimensions)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::PositiveInt*>(
      &::google::fhir::stu3::proto::_PositiveInt_default_instance_);
}
inline ::google::fhir::stu3::proto::PositiveInt* SampledData::release_dimensions() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SampledData.dimensions)
  
  ::google::fhir::stu3::proto::PositiveInt* temp = dimensions_;
  dimensions_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::PositiveInt* SampledData::mutable_dimensions() {
  
  if (dimensions_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::PositiveInt>(GetArenaNoVirtual());
    dimensions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SampledData.dimensions)
  return dimensions_;
}
inline void SampledData::set_allocated_dimensions(::google::fhir::stu3::proto::PositiveInt* dimensions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dimensions_;
  }
  if (dimensions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dimensions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dimensions, submessage_arena);
    }
    
  } else {
    
  }
  dimensions_ = dimensions;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SampledData.dimensions)
}

// .google.fhir.stu3.proto.String data = 9 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool SampledData::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline void SampledData::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& SampledData::_internal_data() const {
  return *data_;
}
inline const ::google::fhir::stu3::proto::String& SampledData::data() const {
  const ::google::fhir::stu3::proto::String* p = data_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SampledData.data)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* SampledData::release_data() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SampledData.data)
  
  ::google::fhir::stu3::proto::String* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* SampledData::mutable_data() {
  
  if (data_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SampledData.data)
  return data_;
}
inline void SampledData::set_allocated_data(::google::fhir::stu3::proto::String* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SampledData.data)
}

// -------------------------------------------------------------------

// Signature_Who

// .google.fhir.stu3.proto.Uri uri = 1;
inline bool Signature_Who::has_uri() const {
  return who_case() == kUri;
}
inline void Signature_Who::set_has_uri() {
  _oneof_case_[0] = kUri;
}
inline void Signature_Who::clear_uri() {
  if (has_uri()) {
    delete who_.uri_;
    clear_has_who();
  }
}
inline const ::google::fhir::stu3::proto::Uri& Signature_Who::_internal_uri() const {
  return *who_.uri_;
}
inline ::google::fhir::stu3::proto::Uri* Signature_Who::release_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Signature.Who.uri)
  if (has_uri()) {
    clear_has_who();
      ::google::fhir::stu3::proto::Uri* temp = who_.uri_;
    who_.uri_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Uri& Signature_Who::uri() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Signature.Who.uri)
  return has_uri()
      ? *who_.uri_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Uri*>(&::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* Signature_Who::mutable_uri() {
  if (!has_uri()) {
    clear_who();
    set_has_uri();
    who_.uri_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Uri >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Signature.Who.uri)
  return who_.uri_;
}

// .google.fhir.stu3.proto.Reference reference = 2 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/RelatedPerson", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Patient", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Device", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Organization"];
inline bool Signature_Who::has_reference() const {
  return who_case() == kReference;
}
inline void Signature_Who::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline void Signature_Who::clear_reference() {
  if (has_reference()) {
    delete who_.reference_;
    clear_has_who();
  }
}
inline const ::google::fhir::stu3::proto::Reference& Signature_Who::_internal_reference() const {
  return *who_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* Signature_Who::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Signature.Who.reference)
  if (has_reference()) {
    clear_has_who();
      ::google::fhir::stu3::proto::Reference* temp = who_.reference_;
    who_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& Signature_Who::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Signature.Who.reference)
  return has_reference()
      ? *who_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* Signature_Who::mutable_reference() {
  if (!has_reference()) {
    clear_who();
    set_has_reference();
    who_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Signature.Who.reference)
  return who_.reference_;
}

inline bool Signature_Who::has_who() const {
  return who_case() != WHO_NOT_SET;
}
inline void Signature_Who::clear_has_who() {
  _oneof_case_[0] = WHO_NOT_SET;
}
inline Signature_Who::WhoCase Signature_Who::who_case() const {
  return Signature_Who::WhoCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Signature_OnBehalfOf

// .google.fhir.stu3.proto.Uri uri = 1;
inline bool Signature_OnBehalfOf::has_uri() const {
  return on_behalf_of_case() == kUri;
}
inline void Signature_OnBehalfOf::set_has_uri() {
  _oneof_case_[0] = kUri;
}
inline void Signature_OnBehalfOf::clear_uri() {
  if (has_uri()) {
    delete on_behalf_of_.uri_;
    clear_has_on_behalf_of();
  }
}
inline const ::google::fhir::stu3::proto::Uri& Signature_OnBehalfOf::_internal_uri() const {
  return *on_behalf_of_.uri_;
}
inline ::google::fhir::stu3::proto::Uri* Signature_OnBehalfOf::release_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Signature.OnBehalfOf.uri)
  if (has_uri()) {
    clear_has_on_behalf_of();
      ::google::fhir::stu3::proto::Uri* temp = on_behalf_of_.uri_;
    on_behalf_of_.uri_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Uri& Signature_OnBehalfOf::uri() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Signature.OnBehalfOf.uri)
  return has_uri()
      ? *on_behalf_of_.uri_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Uri*>(&::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* Signature_OnBehalfOf::mutable_uri() {
  if (!has_uri()) {
    clear_on_behalf_of();
    set_has_uri();
    on_behalf_of_.uri_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Uri >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Signature.OnBehalfOf.uri)
  return on_behalf_of_.uri_;
}

// .google.fhir.stu3.proto.Reference reference = 2 [(.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Practitioner", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/RelatedPerson", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Patient", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Device", (.google.fhir.stu3.proto.valid_reference_type) = "http://hl7.org/fhir/StructureDefinition/Organization"];
inline bool Signature_OnBehalfOf::has_reference() const {
  return on_behalf_of_case() == kReference;
}
inline void Signature_OnBehalfOf::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline void Signature_OnBehalfOf::clear_reference() {
  if (has_reference()) {
    delete on_behalf_of_.reference_;
    clear_has_on_behalf_of();
  }
}
inline const ::google::fhir::stu3::proto::Reference& Signature_OnBehalfOf::_internal_reference() const {
  return *on_behalf_of_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* Signature_OnBehalfOf::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Signature.OnBehalfOf.reference)
  if (has_reference()) {
    clear_has_on_behalf_of();
      ::google::fhir::stu3::proto::Reference* temp = on_behalf_of_.reference_;
    on_behalf_of_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& Signature_OnBehalfOf::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Signature.OnBehalfOf.reference)
  return has_reference()
      ? *on_behalf_of_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* Signature_OnBehalfOf::mutable_reference() {
  if (!has_reference()) {
    clear_on_behalf_of();
    set_has_reference();
    on_behalf_of_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Signature.OnBehalfOf.reference)
  return on_behalf_of_.reference_;
}

inline bool Signature_OnBehalfOf::has_on_behalf_of() const {
  return on_behalf_of_case() != ON_BEHALF_OF_NOT_SET;
}
inline void Signature_OnBehalfOf::clear_has_on_behalf_of() {
  _oneof_case_[0] = ON_BEHALF_OF_NOT_SET;
}
inline Signature_OnBehalfOf::OnBehalfOfCase Signature_OnBehalfOf::on_behalf_of_case() const {
  return Signature_OnBehalfOf::OnBehalfOfCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Signature

// .google.fhir.stu3.proto.String id = 1;
inline bool Signature::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Signature::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Signature::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Signature::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Signature.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Signature::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Signature.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Signature::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Signature.id)
  return id_;
}
inline void Signature::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Signature.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int Signature::extension_size() const {
  return extension_.size();
}
inline void Signature::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Signature::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Signature.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Signature::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Signature.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Signature::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Signature.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Signature::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Signature.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Signature::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Signature.extension)
  return extension_;
}

// repeated .google.fhir.stu3.proto.Coding type = 3 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline int Signature::type_size() const {
  return type_.size();
}
inline void Signature::clear_type() {
  type_.Clear();
}
inline ::google::fhir::stu3::proto::Coding* Signature::mutable_type(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Signature.type)
  return type_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Coding >*
Signature::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Signature.type)
  return &type_;
}
inline const ::google::fhir::stu3::proto::Coding& Signature::type(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Signature.type)
  return type_.Get(index);
}
inline ::google::fhir::stu3::proto::Coding* Signature::add_type() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Signature.type)
  return type_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Coding >&
Signature::type() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Signature.type)
  return type_;
}

// .google.fhir.stu3.proto.Instant when = 4 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool Signature::has_when() const {
  return this != internal_default_instance() && when_ != NULL;
}
inline void Signature::clear_when() {
  if (GetArenaNoVirtual() == NULL && when_ != NULL) {
    delete when_;
  }
  when_ = NULL;
}
inline const ::google::fhir::stu3::proto::Instant& Signature::_internal_when() const {
  return *when_;
}
inline const ::google::fhir::stu3::proto::Instant& Signature::when() const {
  const ::google::fhir::stu3::proto::Instant* p = when_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Signature.when)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Instant*>(
      &::google::fhir::stu3::proto::_Instant_default_instance_);
}
inline ::google::fhir::stu3::proto::Instant* Signature::release_when() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Signature.when)
  
  ::google::fhir::stu3::proto::Instant* temp = when_;
  when_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Instant* Signature::mutable_when() {
  
  if (when_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Instant>(GetArenaNoVirtual());
    when_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Signature.when)
  return when_;
}
inline void Signature::set_allocated_when(::google::fhir::stu3::proto::Instant* when) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete when_;
  }
  if (when) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      when = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, when, submessage_arena);
    }
    
  } else {
    
  }
  when_ = when;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Signature.when)
}

// .google.fhir.stu3.proto.Signature.Who who = 5 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR, (.google.fhir.stu3.proto.is_choice_type) = true];
inline bool Signature::has_who() const {
  return this != internal_default_instance() && who_ != NULL;
}
inline void Signature::clear_who() {
  if (GetArenaNoVirtual() == NULL && who_ != NULL) {
    delete who_;
  }
  who_ = NULL;
}
inline const ::google::fhir::stu3::proto::Signature_Who& Signature::_internal_who() const {
  return *who_;
}
inline const ::google::fhir::stu3::proto::Signature_Who& Signature::who() const {
  const ::google::fhir::stu3::proto::Signature_Who* p = who_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Signature.who)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Signature_Who*>(
      &::google::fhir::stu3::proto::_Signature_Who_default_instance_);
}
inline ::google::fhir::stu3::proto::Signature_Who* Signature::release_who() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Signature.who)
  
  ::google::fhir::stu3::proto::Signature_Who* temp = who_;
  who_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Signature_Who* Signature::mutable_who() {
  
  if (who_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Signature_Who>(GetArenaNoVirtual());
    who_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Signature.who)
  return who_;
}
inline void Signature::set_allocated_who(::google::fhir::stu3::proto::Signature_Who* who) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete who_;
  }
  if (who) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      who = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, who, submessage_arena);
    }
    
  } else {
    
  }
  who_ = who;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Signature.who)
}

// .google.fhir.stu3.proto.Signature.OnBehalfOf on_behalf_of = 6 [(.google.fhir.stu3.proto.is_choice_type) = true];
inline bool Signature::has_on_behalf_of() const {
  return this != internal_default_instance() && on_behalf_of_ != NULL;
}
inline void Signature::clear_on_behalf_of() {
  if (GetArenaNoVirtual() == NULL && on_behalf_of_ != NULL) {
    delete on_behalf_of_;
  }
  on_behalf_of_ = NULL;
}
inline const ::google::fhir::stu3::proto::Signature_OnBehalfOf& Signature::_internal_on_behalf_of() const {
  return *on_behalf_of_;
}
inline const ::google::fhir::stu3::proto::Signature_OnBehalfOf& Signature::on_behalf_of() const {
  const ::google::fhir::stu3::proto::Signature_OnBehalfOf* p = on_behalf_of_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Signature.on_behalf_of)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Signature_OnBehalfOf*>(
      &::google::fhir::stu3::proto::_Signature_OnBehalfOf_default_instance_);
}
inline ::google::fhir::stu3::proto::Signature_OnBehalfOf* Signature::release_on_behalf_of() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Signature.on_behalf_of)
  
  ::google::fhir::stu3::proto::Signature_OnBehalfOf* temp = on_behalf_of_;
  on_behalf_of_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Signature_OnBehalfOf* Signature::mutable_on_behalf_of() {
  
  if (on_behalf_of_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Signature_OnBehalfOf>(GetArenaNoVirtual());
    on_behalf_of_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Signature.on_behalf_of)
  return on_behalf_of_;
}
inline void Signature::set_allocated_on_behalf_of(::google::fhir::stu3::proto::Signature_OnBehalfOf* on_behalf_of) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete on_behalf_of_;
  }
  if (on_behalf_of) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      on_behalf_of = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, on_behalf_of, submessage_arena);
    }
    
  } else {
    
  }
  on_behalf_of_ = on_behalf_of;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Signature.on_behalf_of)
}

// .google.fhir.stu3.proto.MimeTypeCode content_type = 7;
inline bool Signature::has_content_type() const {
  return this != internal_default_instance() && content_type_ != NULL;
}
inline void Signature::clear_content_type() {
  if (GetArenaNoVirtual() == NULL && content_type_ != NULL) {
    delete content_type_;
  }
  content_type_ = NULL;
}
inline const ::google::fhir::stu3::proto::MimeTypeCode& Signature::_internal_content_type() const {
  return *content_type_;
}
inline const ::google::fhir::stu3::proto::MimeTypeCode& Signature::content_type() const {
  const ::google::fhir::stu3::proto::MimeTypeCode* p = content_type_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Signature.content_type)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::MimeTypeCode*>(
      &::google::fhir::stu3::proto::_MimeTypeCode_default_instance_);
}
inline ::google::fhir::stu3::proto::MimeTypeCode* Signature::release_content_type() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Signature.content_type)
  
  ::google::fhir::stu3::proto::MimeTypeCode* temp = content_type_;
  content_type_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::MimeTypeCode* Signature::mutable_content_type() {
  
  if (content_type_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::MimeTypeCode>(GetArenaNoVirtual());
    content_type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Signature.content_type)
  return content_type_;
}
inline void Signature::set_allocated_content_type(::google::fhir::stu3::proto::MimeTypeCode* content_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete content_type_;
  }
  if (content_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      content_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, content_type, submessage_arena);
    }
    
  } else {
    
  }
  content_type_ = content_type;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Signature.content_type)
}

// .google.fhir.stu3.proto.Base64Binary blob = 8;
inline bool Signature::has_blob() const {
  return this != internal_default_instance() && blob_ != NULL;
}
inline void Signature::clear_blob() {
  if (GetArenaNoVirtual() == NULL && blob_ != NULL) {
    delete blob_;
  }
  blob_ = NULL;
}
inline const ::google::fhir::stu3::proto::Base64Binary& Signature::_internal_blob() const {
  return *blob_;
}
inline const ::google::fhir::stu3::proto::Base64Binary& Signature::blob() const {
  const ::google::fhir::stu3::proto::Base64Binary* p = blob_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Signature.blob)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Base64Binary*>(
      &::google::fhir::stu3::proto::_Base64Binary_default_instance_);
}
inline ::google::fhir::stu3::proto::Base64Binary* Signature::release_blob() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Signature.blob)
  
  ::google::fhir::stu3::proto::Base64Binary* temp = blob_;
  blob_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Base64Binary* Signature::mutable_blob() {
  
  if (blob_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Base64Binary>(GetArenaNoVirtual());
    blob_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Signature.blob)
  return blob_;
}
inline void Signature::set_allocated_blob(::google::fhir::stu3::proto::Base64Binary* blob) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete blob_;
  }
  if (blob) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      blob = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, blob, submessage_arena);
    }
    
  } else {
    
  }
  blob_ = blob;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Signature.blob)
}

// -------------------------------------------------------------------

// SimpleQuantity

// .google.fhir.stu3.proto.String id = 1;
inline bool SimpleQuantity::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void SimpleQuantity::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& SimpleQuantity::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& SimpleQuantity::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SimpleQuantity.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* SimpleQuantity::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SimpleQuantity.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* SimpleQuantity::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SimpleQuantity.id)
  return id_;
}
inline void SimpleQuantity::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SimpleQuantity.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int SimpleQuantity::extension_size() const {
  return extension_.size();
}
inline void SimpleQuantity::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* SimpleQuantity::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SimpleQuantity.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
SimpleQuantity::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.SimpleQuantity.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& SimpleQuantity::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SimpleQuantity.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* SimpleQuantity::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.SimpleQuantity.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
SimpleQuantity::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.SimpleQuantity.extension)
  return extension_;
}

// .google.fhir.stu3.proto.Decimal value = 3;
inline bool SimpleQuantity::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void SimpleQuantity::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& SimpleQuantity::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::Decimal& SimpleQuantity::value() const {
  const ::google::fhir::stu3::proto::Decimal* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SimpleQuantity.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* SimpleQuantity::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SimpleQuantity.value)
  
  ::google::fhir::stu3::proto::Decimal* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* SimpleQuantity::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SimpleQuantity.value)
  return value_;
}
inline void SimpleQuantity::set_allocated_value(::google::fhir::stu3::proto::Decimal* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SimpleQuantity.value)
}

// .google.fhir.stu3.proto.String unit = 5;
inline bool SimpleQuantity::has_unit() const {
  return this != internal_default_instance() && unit_ != NULL;
}
inline void SimpleQuantity::clear_unit() {
  if (GetArenaNoVirtual() == NULL && unit_ != NULL) {
    delete unit_;
  }
  unit_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& SimpleQuantity::_internal_unit() const {
  return *unit_;
}
inline const ::google::fhir::stu3::proto::String& SimpleQuantity::unit() const {
  const ::google::fhir::stu3::proto::String* p = unit_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SimpleQuantity.unit)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* SimpleQuantity::release_unit() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SimpleQuantity.unit)
  
  ::google::fhir::stu3::proto::String* temp = unit_;
  unit_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* SimpleQuantity::mutable_unit() {
  
  if (unit_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    unit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SimpleQuantity.unit)
  return unit_;
}
inline void SimpleQuantity::set_allocated_unit(::google::fhir::stu3::proto::String* unit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete unit_;
  }
  if (unit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      unit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, unit, submessage_arena);
    }
    
  } else {
    
  }
  unit_ = unit;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SimpleQuantity.unit)
}

// .google.fhir.stu3.proto.Uri system = 6;
inline bool SimpleQuantity::has_system() const {
  return this != internal_default_instance() && system_ != NULL;
}
inline void SimpleQuantity::clear_system() {
  if (GetArenaNoVirtual() == NULL && system_ != NULL) {
    delete system_;
  }
  system_ = NULL;
}
inline const ::google::fhir::stu3::proto::Uri& SimpleQuantity::_internal_system() const {
  return *system_;
}
inline const ::google::fhir::stu3::proto::Uri& SimpleQuantity::system() const {
  const ::google::fhir::stu3::proto::Uri* p = system_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SimpleQuantity.system)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* SimpleQuantity::release_system() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SimpleQuantity.system)
  
  ::google::fhir::stu3::proto::Uri* temp = system_;
  system_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* SimpleQuantity::mutable_system() {
  
  if (system_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    system_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SimpleQuantity.system)
  return system_;
}
inline void SimpleQuantity::set_allocated_system(::google::fhir::stu3::proto::Uri* system) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete system_;
  }
  if (system) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      system = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, system, submessage_arena);
    }
    
  } else {
    
  }
  system_ = system;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SimpleQuantity.system)
}

// .google.fhir.stu3.proto.Code code = 7;
inline bool SimpleQuantity::has_code() const {
  return this != internal_default_instance() && code_ != NULL;
}
inline void SimpleQuantity::clear_code() {
  if (GetArenaNoVirtual() == NULL && code_ != NULL) {
    delete code_;
  }
  code_ = NULL;
}
inline const ::google::fhir::stu3::proto::Code& SimpleQuantity::_internal_code() const {
  return *code_;
}
inline const ::google::fhir::stu3::proto::Code& SimpleQuantity::code() const {
  const ::google::fhir::stu3::proto::Code* p = code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.SimpleQuantity.code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Code*>(
      &::google::fhir::stu3::proto::_Code_default_instance_);
}
inline ::google::fhir::stu3::proto::Code* SimpleQuantity::release_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.SimpleQuantity.code)
  
  ::google::fhir::stu3::proto::Code* temp = code_;
  code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Code* SimpleQuantity::mutable_code() {
  
  if (code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Code>(GetArenaNoVirtual());
    code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.SimpleQuantity.code)
  return code_;
}
inline void SimpleQuantity::set_allocated_code(::google::fhir::stu3::proto::Code* code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete code_;
  }
  if (code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.SimpleQuantity.code)
}

// -------------------------------------------------------------------

// Timing_Repeat_Bounds

// .google.fhir.stu3.proto.Duration duration = 1;
inline bool Timing_Repeat_Bounds::has_duration() const {
  return bounds_case() == kDuration;
}
inline void Timing_Repeat_Bounds::set_has_duration() {
  _oneof_case_[0] = kDuration;
}
inline void Timing_Repeat_Bounds::clear_duration() {
  if (has_duration()) {
    delete bounds_.duration_;
    clear_has_bounds();
  }
}
inline const ::google::fhir::stu3::proto::Duration& Timing_Repeat_Bounds::_internal_duration() const {
  return *bounds_.duration_;
}
inline ::google::fhir::stu3::proto::Duration* Timing_Repeat_Bounds::release_duration() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Timing.Repeat.Bounds.duration)
  if (has_duration()) {
    clear_has_bounds();
      ::google::fhir::stu3::proto::Duration* temp = bounds_.duration_;
    bounds_.duration_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Duration& Timing_Repeat_Bounds::duration() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.Repeat.Bounds.duration)
  return has_duration()
      ? *bounds_.duration_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Duration*>(&::google::fhir::stu3::proto::_Duration_default_instance_);
}
inline ::google::fhir::stu3::proto::Duration* Timing_Repeat_Bounds::mutable_duration() {
  if (!has_duration()) {
    clear_bounds();
    set_has_duration();
    bounds_.duration_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Duration >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.Repeat.Bounds.duration)
  return bounds_.duration_;
}

// .google.fhir.stu3.proto.Range range = 2;
inline bool Timing_Repeat_Bounds::has_range() const {
  return bounds_case() == kRange;
}
inline void Timing_Repeat_Bounds::set_has_range() {
  _oneof_case_[0] = kRange;
}
inline void Timing_Repeat_Bounds::clear_range() {
  if (has_range()) {
    delete bounds_.range_;
    clear_has_bounds();
  }
}
inline const ::google::fhir::stu3::proto::Range& Timing_Repeat_Bounds::_internal_range() const {
  return *bounds_.range_;
}
inline ::google::fhir::stu3::proto::Range* Timing_Repeat_Bounds::release_range() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Timing.Repeat.Bounds.range)
  if (has_range()) {
    clear_has_bounds();
      ::google::fhir::stu3::proto::Range* temp = bounds_.range_;
    bounds_.range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Range& Timing_Repeat_Bounds::range() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.Repeat.Bounds.range)
  return has_range()
      ? *bounds_.range_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Range*>(&::google::fhir::stu3::proto::_Range_default_instance_);
}
inline ::google::fhir::stu3::proto::Range* Timing_Repeat_Bounds::mutable_range() {
  if (!has_range()) {
    clear_bounds();
    set_has_range();
    bounds_.range_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Range >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.Repeat.Bounds.range)
  return bounds_.range_;
}

// .google.fhir.stu3.proto.Period period = 3;
inline bool Timing_Repeat_Bounds::has_period() const {
  return bounds_case() == kPeriod;
}
inline void Timing_Repeat_Bounds::set_has_period() {
  _oneof_case_[0] = kPeriod;
}
inline void Timing_Repeat_Bounds::clear_period() {
  if (has_period()) {
    delete bounds_.period_;
    clear_has_bounds();
  }
}
inline const ::google::fhir::stu3::proto::Period& Timing_Repeat_Bounds::_internal_period() const {
  return *bounds_.period_;
}
inline ::google::fhir::stu3::proto::Period* Timing_Repeat_Bounds::release_period() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Timing.Repeat.Bounds.period)
  if (has_period()) {
    clear_has_bounds();
      ::google::fhir::stu3::proto::Period* temp = bounds_.period_;
    bounds_.period_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Period& Timing_Repeat_Bounds::period() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.Repeat.Bounds.period)
  return has_period()
      ? *bounds_.period_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Period*>(&::google::fhir::stu3::proto::_Period_default_instance_);
}
inline ::google::fhir::stu3::proto::Period* Timing_Repeat_Bounds::mutable_period() {
  if (!has_period()) {
    clear_bounds();
    set_has_period();
    bounds_.period_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Period >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.Repeat.Bounds.period)
  return bounds_.period_;
}

inline bool Timing_Repeat_Bounds::has_bounds() const {
  return bounds_case() != BOUNDS_NOT_SET;
}
inline void Timing_Repeat_Bounds::clear_has_bounds() {
  _oneof_case_[0] = BOUNDS_NOT_SET;
}
inline Timing_Repeat_Bounds::BoundsCase Timing_Repeat_Bounds::bounds_case() const {
  return Timing_Repeat_Bounds::BoundsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Timing_Repeat

// .google.fhir.stu3.proto.String id = 1;
inline bool Timing_Repeat::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Timing_Repeat::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Timing_Repeat::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Timing_Repeat::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.Repeat.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Timing_Repeat::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Timing.Repeat.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Timing_Repeat::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.Repeat.id)
  return id_;
}
inline void Timing_Repeat::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Timing.Repeat.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int Timing_Repeat::extension_size() const {
  return extension_.size();
}
inline void Timing_Repeat::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Timing_Repeat::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.Repeat.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Timing_Repeat::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Timing.Repeat.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Timing_Repeat::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.Repeat.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Timing_Repeat::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Timing.Repeat.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Timing_Repeat::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Timing.Repeat.extension)
  return extension_;
}

// .google.fhir.stu3.proto.Timing.Repeat.Bounds bounds = 3 [(.google.fhir.stu3.proto.is_choice_type) = true];
inline bool Timing_Repeat::has_bounds() const {
  return this != internal_default_instance() && bounds_ != NULL;
}
inline void Timing_Repeat::clear_bounds() {
  if (GetArenaNoVirtual() == NULL && bounds_ != NULL) {
    delete bounds_;
  }
  bounds_ = NULL;
}
inline const ::google::fhir::stu3::proto::Timing_Repeat_Bounds& Timing_Repeat::_internal_bounds() const {
  return *bounds_;
}
inline const ::google::fhir::stu3::proto::Timing_Repeat_Bounds& Timing_Repeat::bounds() const {
  const ::google::fhir::stu3::proto::Timing_Repeat_Bounds* p = bounds_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.Repeat.bounds)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Timing_Repeat_Bounds*>(
      &::google::fhir::stu3::proto::_Timing_Repeat_Bounds_default_instance_);
}
inline ::google::fhir::stu3::proto::Timing_Repeat_Bounds* Timing_Repeat::release_bounds() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Timing.Repeat.bounds)
  
  ::google::fhir::stu3::proto::Timing_Repeat_Bounds* temp = bounds_;
  bounds_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Timing_Repeat_Bounds* Timing_Repeat::mutable_bounds() {
  
  if (bounds_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Timing_Repeat_Bounds>(GetArenaNoVirtual());
    bounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.Repeat.bounds)
  return bounds_;
}
inline void Timing_Repeat::set_allocated_bounds(::google::fhir::stu3::proto::Timing_Repeat_Bounds* bounds) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bounds_;
  }
  if (bounds) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bounds = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bounds, submessage_arena);
    }
    
  } else {
    
  }
  bounds_ = bounds;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Timing.Repeat.bounds)
}

// .google.fhir.stu3.proto.Integer count = 4;
inline bool Timing_Repeat::has_count() const {
  return this != internal_default_instance() && count_ != NULL;
}
inline void Timing_Repeat::clear_count() {
  if (GetArenaNoVirtual() == NULL && count_ != NULL) {
    delete count_;
  }
  count_ = NULL;
}
inline const ::google::fhir::stu3::proto::Integer& Timing_Repeat::_internal_count() const {
  return *count_;
}
inline const ::google::fhir::stu3::proto::Integer& Timing_Repeat::count() const {
  const ::google::fhir::stu3::proto::Integer* p = count_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.Repeat.count)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Integer*>(
      &::google::fhir::stu3::proto::_Integer_default_instance_);
}
inline ::google::fhir::stu3::proto::Integer* Timing_Repeat::release_count() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Timing.Repeat.count)
  
  ::google::fhir::stu3::proto::Integer* temp = count_;
  count_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Integer* Timing_Repeat::mutable_count() {
  
  if (count_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Integer>(GetArenaNoVirtual());
    count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.Repeat.count)
  return count_;
}
inline void Timing_Repeat::set_allocated_count(::google::fhir::stu3::proto::Integer* count) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete count_;
  }
  if (count) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      count = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, count, submessage_arena);
    }
    
  } else {
    
  }
  count_ = count;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Timing.Repeat.count)
}

// .google.fhir.stu3.proto.Integer count_max = 5;
inline bool Timing_Repeat::has_count_max() const {
  return this != internal_default_instance() && count_max_ != NULL;
}
inline void Timing_Repeat::clear_count_max() {
  if (GetArenaNoVirtual() == NULL && count_max_ != NULL) {
    delete count_max_;
  }
  count_max_ = NULL;
}
inline const ::google::fhir::stu3::proto::Integer& Timing_Repeat::_internal_count_max() const {
  return *count_max_;
}
inline const ::google::fhir::stu3::proto::Integer& Timing_Repeat::count_max() const {
  const ::google::fhir::stu3::proto::Integer* p = count_max_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.Repeat.count_max)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Integer*>(
      &::google::fhir::stu3::proto::_Integer_default_instance_);
}
inline ::google::fhir::stu3::proto::Integer* Timing_Repeat::release_count_max() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Timing.Repeat.count_max)
  
  ::google::fhir::stu3::proto::Integer* temp = count_max_;
  count_max_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Integer* Timing_Repeat::mutable_count_max() {
  
  if (count_max_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Integer>(GetArenaNoVirtual());
    count_max_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.Repeat.count_max)
  return count_max_;
}
inline void Timing_Repeat::set_allocated_count_max(::google::fhir::stu3::proto::Integer* count_max) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete count_max_;
  }
  if (count_max) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      count_max = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, count_max, submessage_arena);
    }
    
  } else {
    
  }
  count_max_ = count_max;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Timing.Repeat.count_max)
}

// .google.fhir.stu3.proto.Decimal duration = 6;
inline bool Timing_Repeat::has_duration() const {
  return this != internal_default_instance() && duration_ != NULL;
}
inline void Timing_Repeat::clear_duration() {
  if (GetArenaNoVirtual() == NULL && duration_ != NULL) {
    delete duration_;
  }
  duration_ = NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& Timing_Repeat::_internal_duration() const {
  return *duration_;
}
inline const ::google::fhir::stu3::proto::Decimal& Timing_Repeat::duration() const {
  const ::google::fhir::stu3::proto::Decimal* p = duration_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.Repeat.duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* Timing_Repeat::release_duration() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Timing.Repeat.duration)
  
  ::google::fhir::stu3::proto::Decimal* temp = duration_;
  duration_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* Timing_Repeat::mutable_duration() {
  
  if (duration_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.Repeat.duration)
  return duration_;
}
inline void Timing_Repeat::set_allocated_duration(::google::fhir::stu3::proto::Decimal* duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete duration_;
  }
  if (duration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Timing.Repeat.duration)
}

// .google.fhir.stu3.proto.Decimal duration_max = 7;
inline bool Timing_Repeat::has_duration_max() const {
  return this != internal_default_instance() && duration_max_ != NULL;
}
inline void Timing_Repeat::clear_duration_max() {
  if (GetArenaNoVirtual() == NULL && duration_max_ != NULL) {
    delete duration_max_;
  }
  duration_max_ = NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& Timing_Repeat::_internal_duration_max() const {
  return *duration_max_;
}
inline const ::google::fhir::stu3::proto::Decimal& Timing_Repeat::duration_max() const {
  const ::google::fhir::stu3::proto::Decimal* p = duration_max_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.Repeat.duration_max)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* Timing_Repeat::release_duration_max() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Timing.Repeat.duration_max)
  
  ::google::fhir::stu3::proto::Decimal* temp = duration_max_;
  duration_max_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* Timing_Repeat::mutable_duration_max() {
  
  if (duration_max_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    duration_max_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.Repeat.duration_max)
  return duration_max_;
}
inline void Timing_Repeat::set_allocated_duration_max(::google::fhir::stu3::proto::Decimal* duration_max) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete duration_max_;
  }
  if (duration_max) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      duration_max = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, duration_max, submessage_arena);
    }
    
  } else {
    
  }
  duration_max_ = duration_max;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Timing.Repeat.duration_max)
}

// .google.fhir.stu3.proto.UnitsOfTimeCode duration_unit = 8;
inline bool Timing_Repeat::has_duration_unit() const {
  return this != internal_default_instance() && duration_unit_ != NULL;
}
inline void Timing_Repeat::clear_duration_unit() {
  if (GetArenaNoVirtual() == NULL && duration_unit_ != NULL) {
    delete duration_unit_;
  }
  duration_unit_ = NULL;
}
inline const ::google::fhir::stu3::proto::UnitsOfTimeCode& Timing_Repeat::_internal_duration_unit() const {
  return *duration_unit_;
}
inline const ::google::fhir::stu3::proto::UnitsOfTimeCode& Timing_Repeat::duration_unit() const {
  const ::google::fhir::stu3::proto::UnitsOfTimeCode* p = duration_unit_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.Repeat.duration_unit)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::UnitsOfTimeCode*>(
      &::google::fhir::stu3::proto::_UnitsOfTimeCode_default_instance_);
}
inline ::google::fhir::stu3::proto::UnitsOfTimeCode* Timing_Repeat::release_duration_unit() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Timing.Repeat.duration_unit)
  
  ::google::fhir::stu3::proto::UnitsOfTimeCode* temp = duration_unit_;
  duration_unit_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::UnitsOfTimeCode* Timing_Repeat::mutable_duration_unit() {
  
  if (duration_unit_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::UnitsOfTimeCode>(GetArenaNoVirtual());
    duration_unit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.Repeat.duration_unit)
  return duration_unit_;
}
inline void Timing_Repeat::set_allocated_duration_unit(::google::fhir::stu3::proto::UnitsOfTimeCode* duration_unit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete duration_unit_;
  }
  if (duration_unit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      duration_unit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, duration_unit, submessage_arena);
    }
    
  } else {
    
  }
  duration_unit_ = duration_unit;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Timing.Repeat.duration_unit)
}

// .google.fhir.stu3.proto.Integer frequency = 9;
inline bool Timing_Repeat::has_frequency() const {
  return this != internal_default_instance() && frequency_ != NULL;
}
inline void Timing_Repeat::clear_frequency() {
  if (GetArenaNoVirtual() == NULL && frequency_ != NULL) {
    delete frequency_;
  }
  frequency_ = NULL;
}
inline const ::google::fhir::stu3::proto::Integer& Timing_Repeat::_internal_frequency() const {
  return *frequency_;
}
inline const ::google::fhir::stu3::proto::Integer& Timing_Repeat::frequency() const {
  const ::google::fhir::stu3::proto::Integer* p = frequency_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.Repeat.frequency)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Integer*>(
      &::google::fhir::stu3::proto::_Integer_default_instance_);
}
inline ::google::fhir::stu3::proto::Integer* Timing_Repeat::release_frequency() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Timing.Repeat.frequency)
  
  ::google::fhir::stu3::proto::Integer* temp = frequency_;
  frequency_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Integer* Timing_Repeat::mutable_frequency() {
  
  if (frequency_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Integer>(GetArenaNoVirtual());
    frequency_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.Repeat.frequency)
  return frequency_;
}
inline void Timing_Repeat::set_allocated_frequency(::google::fhir::stu3::proto::Integer* frequency) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete frequency_;
  }
  if (frequency) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      frequency = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, frequency, submessage_arena);
    }
    
  } else {
    
  }
  frequency_ = frequency;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Timing.Repeat.frequency)
}

// .google.fhir.stu3.proto.Integer frequency_max = 10;
inline bool Timing_Repeat::has_frequency_max() const {
  return this != internal_default_instance() && frequency_max_ != NULL;
}
inline void Timing_Repeat::clear_frequency_max() {
  if (GetArenaNoVirtual() == NULL && frequency_max_ != NULL) {
    delete frequency_max_;
  }
  frequency_max_ = NULL;
}
inline const ::google::fhir::stu3::proto::Integer& Timing_Repeat::_internal_frequency_max() const {
  return *frequency_max_;
}
inline const ::google::fhir::stu3::proto::Integer& Timing_Repeat::frequency_max() const {
  const ::google::fhir::stu3::proto::Integer* p = frequency_max_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.Repeat.frequency_max)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Integer*>(
      &::google::fhir::stu3::proto::_Integer_default_instance_);
}
inline ::google::fhir::stu3::proto::Integer* Timing_Repeat::release_frequency_max() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Timing.Repeat.frequency_max)
  
  ::google::fhir::stu3::proto::Integer* temp = frequency_max_;
  frequency_max_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Integer* Timing_Repeat::mutable_frequency_max() {
  
  if (frequency_max_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Integer>(GetArenaNoVirtual());
    frequency_max_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.Repeat.frequency_max)
  return frequency_max_;
}
inline void Timing_Repeat::set_allocated_frequency_max(::google::fhir::stu3::proto::Integer* frequency_max) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete frequency_max_;
  }
  if (frequency_max) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      frequency_max = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, frequency_max, submessage_arena);
    }
    
  } else {
    
  }
  frequency_max_ = frequency_max;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Timing.Repeat.frequency_max)
}

// .google.fhir.stu3.proto.Decimal period = 11;
inline bool Timing_Repeat::has_period() const {
  return this != internal_default_instance() && period_ != NULL;
}
inline void Timing_Repeat::clear_period() {
  if (GetArenaNoVirtual() == NULL && period_ != NULL) {
    delete period_;
  }
  period_ = NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& Timing_Repeat::_internal_period() const {
  return *period_;
}
inline const ::google::fhir::stu3::proto::Decimal& Timing_Repeat::period() const {
  const ::google::fhir::stu3::proto::Decimal* p = period_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.Repeat.period)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* Timing_Repeat::release_period() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Timing.Repeat.period)
  
  ::google::fhir::stu3::proto::Decimal* temp = period_;
  period_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* Timing_Repeat::mutable_period() {
  
  if (period_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    period_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.Repeat.period)
  return period_;
}
inline void Timing_Repeat::set_allocated_period(::google::fhir::stu3::proto::Decimal* period) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete period_;
  }
  if (period) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      period = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, period, submessage_arena);
    }
    
  } else {
    
  }
  period_ = period;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Timing.Repeat.period)
}

// .google.fhir.stu3.proto.Decimal period_max = 12;
inline bool Timing_Repeat::has_period_max() const {
  return this != internal_default_instance() && period_max_ != NULL;
}
inline void Timing_Repeat::clear_period_max() {
  if (GetArenaNoVirtual() == NULL && period_max_ != NULL) {
    delete period_max_;
  }
  period_max_ = NULL;
}
inline const ::google::fhir::stu3::proto::Decimal& Timing_Repeat::_internal_period_max() const {
  return *period_max_;
}
inline const ::google::fhir::stu3::proto::Decimal& Timing_Repeat::period_max() const {
  const ::google::fhir::stu3::proto::Decimal* p = period_max_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.Repeat.period_max)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Decimal*>(
      &::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* Timing_Repeat::release_period_max() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Timing.Repeat.period_max)
  
  ::google::fhir::stu3::proto::Decimal* temp = period_max_;
  period_max_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Decimal* Timing_Repeat::mutable_period_max() {
  
  if (period_max_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Decimal>(GetArenaNoVirtual());
    period_max_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.Repeat.period_max)
  return period_max_;
}
inline void Timing_Repeat::set_allocated_period_max(::google::fhir::stu3::proto::Decimal* period_max) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete period_max_;
  }
  if (period_max) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      period_max = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, period_max, submessage_arena);
    }
    
  } else {
    
  }
  period_max_ = period_max;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Timing.Repeat.period_max)
}

// .google.fhir.stu3.proto.UnitsOfTimeCode period_unit = 13;
inline bool Timing_Repeat::has_period_unit() const {
  return this != internal_default_instance() && period_unit_ != NULL;
}
inline void Timing_Repeat::clear_period_unit() {
  if (GetArenaNoVirtual() == NULL && period_unit_ != NULL) {
    delete period_unit_;
  }
  period_unit_ = NULL;
}
inline const ::google::fhir::stu3::proto::UnitsOfTimeCode& Timing_Repeat::_internal_period_unit() const {
  return *period_unit_;
}
inline const ::google::fhir::stu3::proto::UnitsOfTimeCode& Timing_Repeat::period_unit() const {
  const ::google::fhir::stu3::proto::UnitsOfTimeCode* p = period_unit_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.Repeat.period_unit)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::UnitsOfTimeCode*>(
      &::google::fhir::stu3::proto::_UnitsOfTimeCode_default_instance_);
}
inline ::google::fhir::stu3::proto::UnitsOfTimeCode* Timing_Repeat::release_period_unit() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Timing.Repeat.period_unit)
  
  ::google::fhir::stu3::proto::UnitsOfTimeCode* temp = period_unit_;
  period_unit_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::UnitsOfTimeCode* Timing_Repeat::mutable_period_unit() {
  
  if (period_unit_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::UnitsOfTimeCode>(GetArenaNoVirtual());
    period_unit_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.Repeat.period_unit)
  return period_unit_;
}
inline void Timing_Repeat::set_allocated_period_unit(::google::fhir::stu3::proto::UnitsOfTimeCode* period_unit) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete period_unit_;
  }
  if (period_unit) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      period_unit = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, period_unit, submessage_arena);
    }
    
  } else {
    
  }
  period_unit_ = period_unit;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Timing.Repeat.period_unit)
}

// repeated .google.fhir.stu3.proto.DaysOfWeekCode day_of_week = 14;
inline int Timing_Repeat::day_of_week_size() const {
  return day_of_week_.size();
}
inline void Timing_Repeat::clear_day_of_week() {
  day_of_week_.Clear();
}
inline ::google::fhir::stu3::proto::DaysOfWeekCode* Timing_Repeat::mutable_day_of_week(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.Repeat.day_of_week)
  return day_of_week_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::DaysOfWeekCode >*
Timing_Repeat::mutable_day_of_week() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Timing.Repeat.day_of_week)
  return &day_of_week_;
}
inline const ::google::fhir::stu3::proto::DaysOfWeekCode& Timing_Repeat::day_of_week(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.Repeat.day_of_week)
  return day_of_week_.Get(index);
}
inline ::google::fhir::stu3::proto::DaysOfWeekCode* Timing_Repeat::add_day_of_week() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Timing.Repeat.day_of_week)
  return day_of_week_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::DaysOfWeekCode >&
Timing_Repeat::day_of_week() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Timing.Repeat.day_of_week)
  return day_of_week_;
}

// repeated .google.fhir.stu3.proto.Time time_of_day = 15;
inline int Timing_Repeat::time_of_day_size() const {
  return time_of_day_.size();
}
inline void Timing_Repeat::clear_time_of_day() {
  time_of_day_.Clear();
}
inline ::google::fhir::stu3::proto::Time* Timing_Repeat::mutable_time_of_day(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.Repeat.time_of_day)
  return time_of_day_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Time >*
Timing_Repeat::mutable_time_of_day() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Timing.Repeat.time_of_day)
  return &time_of_day_;
}
inline const ::google::fhir::stu3::proto::Time& Timing_Repeat::time_of_day(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.Repeat.time_of_day)
  return time_of_day_.Get(index);
}
inline ::google::fhir::stu3::proto::Time* Timing_Repeat::add_time_of_day() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Timing.Repeat.time_of_day)
  return time_of_day_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Time >&
Timing_Repeat::time_of_day() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Timing.Repeat.time_of_day)
  return time_of_day_;
}

// repeated .google.fhir.stu3.proto.EventTimingCode when = 16;
inline int Timing_Repeat::when_size() const {
  return when_.size();
}
inline void Timing_Repeat::clear_when() {
  when_.Clear();
}
inline ::google::fhir::stu3::proto::EventTimingCode* Timing_Repeat::mutable_when(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.Repeat.when)
  return when_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::EventTimingCode >*
Timing_Repeat::mutable_when() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Timing.Repeat.when)
  return &when_;
}
inline const ::google::fhir::stu3::proto::EventTimingCode& Timing_Repeat::when(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.Repeat.when)
  return when_.Get(index);
}
inline ::google::fhir::stu3::proto::EventTimingCode* Timing_Repeat::add_when() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Timing.Repeat.when)
  return when_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::EventTimingCode >&
Timing_Repeat::when() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Timing.Repeat.when)
  return when_;
}

// .google.fhir.stu3.proto.UnsignedInt offset = 17;
inline bool Timing_Repeat::has_offset() const {
  return this != internal_default_instance() && offset_ != NULL;
}
inline void Timing_Repeat::clear_offset() {
  if (GetArenaNoVirtual() == NULL && offset_ != NULL) {
    delete offset_;
  }
  offset_ = NULL;
}
inline const ::google::fhir::stu3::proto::UnsignedInt& Timing_Repeat::_internal_offset() const {
  return *offset_;
}
inline const ::google::fhir::stu3::proto::UnsignedInt& Timing_Repeat::offset() const {
  const ::google::fhir::stu3::proto::UnsignedInt* p = offset_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.Repeat.offset)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::UnsignedInt*>(
      &::google::fhir::stu3::proto::_UnsignedInt_default_instance_);
}
inline ::google::fhir::stu3::proto::UnsignedInt* Timing_Repeat::release_offset() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Timing.Repeat.offset)
  
  ::google::fhir::stu3::proto::UnsignedInt* temp = offset_;
  offset_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::UnsignedInt* Timing_Repeat::mutable_offset() {
  
  if (offset_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::UnsignedInt>(GetArenaNoVirtual());
    offset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.Repeat.offset)
  return offset_;
}
inline void Timing_Repeat::set_allocated_offset(::google::fhir::stu3::proto::UnsignedInt* offset) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete offset_;
  }
  if (offset) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      offset = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    
  } else {
    
  }
  offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Timing.Repeat.offset)
}

// -------------------------------------------------------------------

// Timing

// .google.fhir.stu3.proto.String id = 1;
inline bool Timing::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Timing::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Timing::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Timing::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Timing::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Timing.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Timing::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.id)
  return id_;
}
inline void Timing::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Timing.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int Timing::extension_size() const {
  return extension_.size();
}
inline void Timing::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Timing::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Timing::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Timing.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Timing::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Timing::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Timing.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Timing::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Timing.extension)
  return extension_;
}

// repeated .google.fhir.stu3.proto.DateTime event = 3;
inline int Timing::event_size() const {
  return event_.size();
}
inline void Timing::clear_event() {
  event_.Clear();
}
inline ::google::fhir::stu3::proto::DateTime* Timing::mutable_event(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.event)
  return event_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::DateTime >*
Timing::mutable_event() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Timing.event)
  return &event_;
}
inline const ::google::fhir::stu3::proto::DateTime& Timing::event(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.event)
  return event_.Get(index);
}
inline ::google::fhir::stu3::proto::DateTime* Timing::add_event() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Timing.event)
  return event_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::DateTime >&
Timing::event() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Timing.event)
  return event_;
}

// .google.fhir.stu3.proto.Timing.Repeat repeat = 4;
inline bool Timing::has_repeat() const {
  return this != internal_default_instance() && repeat_ != NULL;
}
inline void Timing::clear_repeat() {
  if (GetArenaNoVirtual() == NULL && repeat_ != NULL) {
    delete repeat_;
  }
  repeat_ = NULL;
}
inline const ::google::fhir::stu3::proto::Timing_Repeat& Timing::_internal_repeat() const {
  return *repeat_;
}
inline const ::google::fhir::stu3::proto::Timing_Repeat& Timing::repeat() const {
  const ::google::fhir::stu3::proto::Timing_Repeat* p = repeat_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.repeat)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Timing_Repeat*>(
      &::google::fhir::stu3::proto::_Timing_Repeat_default_instance_);
}
inline ::google::fhir::stu3::proto::Timing_Repeat* Timing::release_repeat() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Timing.repeat)
  
  ::google::fhir::stu3::proto::Timing_Repeat* temp = repeat_;
  repeat_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Timing_Repeat* Timing::mutable_repeat() {
  
  if (repeat_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Timing_Repeat>(GetArenaNoVirtual());
    repeat_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.repeat)
  return repeat_;
}
inline void Timing::set_allocated_repeat(::google::fhir::stu3::proto::Timing_Repeat* repeat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete repeat_;
  }
  if (repeat) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      repeat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, repeat, submessage_arena);
    }
    
  } else {
    
  }
  repeat_ = repeat;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Timing.repeat)
}

// .google.fhir.stu3.proto.CodeableConcept code = 5;
inline bool Timing::has_code() const {
  return this != internal_default_instance() && code_ != NULL;
}
inline void Timing::clear_code() {
  if (GetArenaNoVirtual() == NULL && code_ != NULL) {
    delete code_;
  }
  code_ = NULL;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& Timing::_internal_code() const {
  return *code_;
}
inline const ::google::fhir::stu3::proto::CodeableConcept& Timing::code() const {
  const ::google::fhir::stu3::proto::CodeableConcept* p = code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Timing.code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::CodeableConcept*>(
      &::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* Timing::release_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Timing.code)
  
  ::google::fhir::stu3::proto::CodeableConcept* temp = code_;
  code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::CodeableConcept* Timing::mutable_code() {
  
  if (code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::CodeableConcept>(GetArenaNoVirtual());
    code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Timing.code)
  return code_;
}
inline void Timing::set_allocated_code(::google::fhir::stu3::proto::CodeableConcept* code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete code_;
  }
  if (code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Timing.code)
}

// -------------------------------------------------------------------

// Extension_Value

// .google.fhir.stu3.proto.Base64Binary base64_binary = 1;
inline bool Extension_Value::has_base64_binary() const {
  return value_case() == kBase64Binary;
}
inline void Extension_Value::set_has_base64_binary() {
  _oneof_case_[0] = kBase64Binary;
}
inline void Extension_Value::clear_base64_binary() {
  if (has_base64_binary()) {
    delete value_.base64_binary_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Base64Binary& Extension_Value::_internal_base64_binary() const {
  return *value_.base64_binary_;
}
inline ::google::fhir::stu3::proto::Base64Binary* Extension_Value::release_base64_binary() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.base64_binary)
  if (has_base64_binary()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Base64Binary* temp = value_.base64_binary_;
    value_.base64_binary_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Base64Binary& Extension_Value::base64_binary() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.base64_binary)
  return has_base64_binary()
      ? *value_.base64_binary_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Base64Binary*>(&::google::fhir::stu3::proto::_Base64Binary_default_instance_);
}
inline ::google::fhir::stu3::proto::Base64Binary* Extension_Value::mutable_base64_binary() {
  if (!has_base64_binary()) {
    clear_value();
    set_has_base64_binary();
    value_.base64_binary_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Base64Binary >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.base64_binary)
  return value_.base64_binary_;
}

// .google.fhir.stu3.proto.Boolean boolean = 2;
inline bool Extension_Value::has_boolean() const {
  return value_case() == kBoolean;
}
inline void Extension_Value::set_has_boolean() {
  _oneof_case_[0] = kBoolean;
}
inline void Extension_Value::clear_boolean() {
  if (has_boolean()) {
    delete value_.boolean_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Boolean& Extension_Value::_internal_boolean() const {
  return *value_.boolean_;
}
inline ::google::fhir::stu3::proto::Boolean* Extension_Value::release_boolean() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.boolean)
  if (has_boolean()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Boolean* temp = value_.boolean_;
    value_.boolean_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Boolean& Extension_Value::boolean() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.boolean)
  return has_boolean()
      ? *value_.boolean_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Boolean*>(&::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* Extension_Value::mutable_boolean() {
  if (!has_boolean()) {
    clear_value();
    set_has_boolean();
    value_.boolean_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Boolean >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.boolean)
  return value_.boolean_;
}

// .google.fhir.stu3.proto.Code code = 3;
inline bool Extension_Value::has_code() const {
  return value_case() == kCode;
}
inline void Extension_Value::set_has_code() {
  _oneof_case_[0] = kCode;
}
inline void Extension_Value::clear_code() {
  if (has_code()) {
    delete value_.code_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Code& Extension_Value::_internal_code() const {
  return *value_.code_;
}
inline ::google::fhir::stu3::proto::Code* Extension_Value::release_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.code)
  if (has_code()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Code* temp = value_.code_;
    value_.code_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Code& Extension_Value::code() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.code)
  return has_code()
      ? *value_.code_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Code*>(&::google::fhir::stu3::proto::_Code_default_instance_);
}
inline ::google::fhir::stu3::proto::Code* Extension_Value::mutable_code() {
  if (!has_code()) {
    clear_value();
    set_has_code();
    value_.code_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Code >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.code)
  return value_.code_;
}

// .google.fhir.stu3.proto.Date date = 4;
inline bool Extension_Value::has_date() const {
  return value_case() == kDate;
}
inline void Extension_Value::set_has_date() {
  _oneof_case_[0] = kDate;
}
inline void Extension_Value::clear_date() {
  if (has_date()) {
    delete value_.date_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Date& Extension_Value::_internal_date() const {
  return *value_.date_;
}
inline ::google::fhir::stu3::proto::Date* Extension_Value::release_date() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.date)
  if (has_date()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Date* temp = value_.date_;
    value_.date_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Date& Extension_Value::date() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.date)
  return has_date()
      ? *value_.date_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Date*>(&::google::fhir::stu3::proto::_Date_default_instance_);
}
inline ::google::fhir::stu3::proto::Date* Extension_Value::mutable_date() {
  if (!has_date()) {
    clear_value();
    set_has_date();
    value_.date_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Date >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.date)
  return value_.date_;
}

// .google.fhir.stu3.proto.DateTime date_time = 5;
inline bool Extension_Value::has_date_time() const {
  return value_case() == kDateTime;
}
inline void Extension_Value::set_has_date_time() {
  _oneof_case_[0] = kDateTime;
}
inline void Extension_Value::clear_date_time() {
  if (has_date_time()) {
    delete value_.date_time_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::DateTime& Extension_Value::_internal_date_time() const {
  return *value_.date_time_;
}
inline ::google::fhir::stu3::proto::DateTime* Extension_Value::release_date_time() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.date_time)
  if (has_date_time()) {
    clear_has_value();
      ::google::fhir::stu3::proto::DateTime* temp = value_.date_time_;
    value_.date_time_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::DateTime& Extension_Value::date_time() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.date_time)
  return has_date_time()
      ? *value_.date_time_
      : *reinterpret_cast< ::google::fhir::stu3::proto::DateTime*>(&::google::fhir::stu3::proto::_DateTime_default_instance_);
}
inline ::google::fhir::stu3::proto::DateTime* Extension_Value::mutable_date_time() {
  if (!has_date_time()) {
    clear_value();
    set_has_date_time();
    value_.date_time_ = CreateMaybeMessage< ::google::fhir::stu3::proto::DateTime >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.date_time)
  return value_.date_time_;
}

// .google.fhir.stu3.proto.Decimal decimal = 6;
inline bool Extension_Value::has_decimal() const {
  return value_case() == kDecimal;
}
inline void Extension_Value::set_has_decimal() {
  _oneof_case_[0] = kDecimal;
}
inline void Extension_Value::clear_decimal() {
  if (has_decimal()) {
    delete value_.decimal_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Decimal& Extension_Value::_internal_decimal() const {
  return *value_.decimal_;
}
inline ::google::fhir::stu3::proto::Decimal* Extension_Value::release_decimal() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.decimal)
  if (has_decimal()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Decimal* temp = value_.decimal_;
    value_.decimal_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Decimal& Extension_Value::decimal() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.decimal)
  return has_decimal()
      ? *value_.decimal_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Decimal*>(&::google::fhir::stu3::proto::_Decimal_default_instance_);
}
inline ::google::fhir::stu3::proto::Decimal* Extension_Value::mutable_decimal() {
  if (!has_decimal()) {
    clear_value();
    set_has_decimal();
    value_.decimal_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Decimal >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.decimal)
  return value_.decimal_;
}

// .google.fhir.stu3.proto.Id id = 7;
inline bool Extension_Value::has_id() const {
  return value_case() == kId;
}
inline void Extension_Value::set_has_id() {
  _oneof_case_[0] = kId;
}
inline void Extension_Value::clear_id() {
  if (has_id()) {
    delete value_.id_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Id& Extension_Value::_internal_id() const {
  return *value_.id_;
}
inline ::google::fhir::stu3::proto::Id* Extension_Value::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.id)
  if (has_id()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Id* temp = value_.id_;
    value_.id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Id& Extension_Value::id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.id)
  return has_id()
      ? *value_.id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Id*>(&::google::fhir::stu3::proto::_Id_default_instance_);
}
inline ::google::fhir::stu3::proto::Id* Extension_Value::mutable_id() {
  if (!has_id()) {
    clear_value();
    set_has_id();
    value_.id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Id >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.id)
  return value_.id_;
}

// .google.fhir.stu3.proto.Instant instant = 8;
inline bool Extension_Value::has_instant() const {
  return value_case() == kInstant;
}
inline void Extension_Value::set_has_instant() {
  _oneof_case_[0] = kInstant;
}
inline void Extension_Value::clear_instant() {
  if (has_instant()) {
    delete value_.instant_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Instant& Extension_Value::_internal_instant() const {
  return *value_.instant_;
}
inline ::google::fhir::stu3::proto::Instant* Extension_Value::release_instant() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.instant)
  if (has_instant()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Instant* temp = value_.instant_;
    value_.instant_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Instant& Extension_Value::instant() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.instant)
  return has_instant()
      ? *value_.instant_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Instant*>(&::google::fhir::stu3::proto::_Instant_default_instance_);
}
inline ::google::fhir::stu3::proto::Instant* Extension_Value::mutable_instant() {
  if (!has_instant()) {
    clear_value();
    set_has_instant();
    value_.instant_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Instant >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.instant)
  return value_.instant_;
}

// .google.fhir.stu3.proto.Integer integer = 9;
inline bool Extension_Value::has_integer() const {
  return value_case() == kInteger;
}
inline void Extension_Value::set_has_integer() {
  _oneof_case_[0] = kInteger;
}
inline void Extension_Value::clear_integer() {
  if (has_integer()) {
    delete value_.integer_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Integer& Extension_Value::_internal_integer() const {
  return *value_.integer_;
}
inline ::google::fhir::stu3::proto::Integer* Extension_Value::release_integer() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.integer)
  if (has_integer()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Integer* temp = value_.integer_;
    value_.integer_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Integer& Extension_Value::integer() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.integer)
  return has_integer()
      ? *value_.integer_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Integer*>(&::google::fhir::stu3::proto::_Integer_default_instance_);
}
inline ::google::fhir::stu3::proto::Integer* Extension_Value::mutable_integer() {
  if (!has_integer()) {
    clear_value();
    set_has_integer();
    value_.integer_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Integer >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.integer)
  return value_.integer_;
}

// .google.fhir.stu3.proto.Markdown markdown = 10;
inline bool Extension_Value::has_markdown() const {
  return value_case() == kMarkdown;
}
inline void Extension_Value::set_has_markdown() {
  _oneof_case_[0] = kMarkdown;
}
inline void Extension_Value::clear_markdown() {
  if (has_markdown()) {
    delete value_.markdown_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Markdown& Extension_Value::_internal_markdown() const {
  return *value_.markdown_;
}
inline ::google::fhir::stu3::proto::Markdown* Extension_Value::release_markdown() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.markdown)
  if (has_markdown()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Markdown* temp = value_.markdown_;
    value_.markdown_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Markdown& Extension_Value::markdown() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.markdown)
  return has_markdown()
      ? *value_.markdown_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Markdown*>(&::google::fhir::stu3::proto::_Markdown_default_instance_);
}
inline ::google::fhir::stu3::proto::Markdown* Extension_Value::mutable_markdown() {
  if (!has_markdown()) {
    clear_value();
    set_has_markdown();
    value_.markdown_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Markdown >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.markdown)
  return value_.markdown_;
}

// .google.fhir.stu3.proto.Oid oid = 11;
inline bool Extension_Value::has_oid() const {
  return value_case() == kOid;
}
inline void Extension_Value::set_has_oid() {
  _oneof_case_[0] = kOid;
}
inline void Extension_Value::clear_oid() {
  if (has_oid()) {
    delete value_.oid_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Oid& Extension_Value::_internal_oid() const {
  return *value_.oid_;
}
inline ::google::fhir::stu3::proto::Oid* Extension_Value::release_oid() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.oid)
  if (has_oid()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Oid* temp = value_.oid_;
    value_.oid_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Oid& Extension_Value::oid() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.oid)
  return has_oid()
      ? *value_.oid_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Oid*>(&::google::fhir::stu3::proto::_Oid_default_instance_);
}
inline ::google::fhir::stu3::proto::Oid* Extension_Value::mutable_oid() {
  if (!has_oid()) {
    clear_value();
    set_has_oid();
    value_.oid_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Oid >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.oid)
  return value_.oid_;
}

// .google.fhir.stu3.proto.PositiveInt positive_int = 12;
inline bool Extension_Value::has_positive_int() const {
  return value_case() == kPositiveInt;
}
inline void Extension_Value::set_has_positive_int() {
  _oneof_case_[0] = kPositiveInt;
}
inline void Extension_Value::clear_positive_int() {
  if (has_positive_int()) {
    delete value_.positive_int_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::PositiveInt& Extension_Value::_internal_positive_int() const {
  return *value_.positive_int_;
}
inline ::google::fhir::stu3::proto::PositiveInt* Extension_Value::release_positive_int() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.positive_int)
  if (has_positive_int()) {
    clear_has_value();
      ::google::fhir::stu3::proto::PositiveInt* temp = value_.positive_int_;
    value_.positive_int_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::PositiveInt& Extension_Value::positive_int() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.positive_int)
  return has_positive_int()
      ? *value_.positive_int_
      : *reinterpret_cast< ::google::fhir::stu3::proto::PositiveInt*>(&::google::fhir::stu3::proto::_PositiveInt_default_instance_);
}
inline ::google::fhir::stu3::proto::PositiveInt* Extension_Value::mutable_positive_int() {
  if (!has_positive_int()) {
    clear_value();
    set_has_positive_int();
    value_.positive_int_ = CreateMaybeMessage< ::google::fhir::stu3::proto::PositiveInt >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.positive_int)
  return value_.positive_int_;
}

// .google.fhir.stu3.proto.String string_value = 13[json_name = "string"];
inline bool Extension_Value::has_string_value() const {
  return value_case() == kStringValue;
}
inline void Extension_Value::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void Extension_Value::clear_string_value() {
  if (has_string_value()) {
    delete value_.string_value_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::String& Extension_Value::_internal_string_value() const {
  return *value_.string_value_;
}
inline ::google::fhir::stu3::proto::String* Extension_Value::release_string_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.string_value)
  if (has_string_value()) {
    clear_has_value();
      ::google::fhir::stu3::proto::String* temp = value_.string_value_;
    value_.string_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::String& Extension_Value::string_value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.string_value)
  return has_string_value()
      ? *value_.string_value_
      : *reinterpret_cast< ::google::fhir::stu3::proto::String*>(&::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Extension_Value::mutable_string_value() {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_ = CreateMaybeMessage< ::google::fhir::stu3::proto::String >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.string_value)
  return value_.string_value_;
}

// .google.fhir.stu3.proto.Time time = 14;
inline bool Extension_Value::has_time() const {
  return value_case() == kTime;
}
inline void Extension_Value::set_has_time() {
  _oneof_case_[0] = kTime;
}
inline void Extension_Value::clear_time() {
  if (has_time()) {
    delete value_.time_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Time& Extension_Value::_internal_time() const {
  return *value_.time_;
}
inline ::google::fhir::stu3::proto::Time* Extension_Value::release_time() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.time)
  if (has_time()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Time* temp = value_.time_;
    value_.time_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Time& Extension_Value::time() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.time)
  return has_time()
      ? *value_.time_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Time*>(&::google::fhir::stu3::proto::_Time_default_instance_);
}
inline ::google::fhir::stu3::proto::Time* Extension_Value::mutable_time() {
  if (!has_time()) {
    clear_value();
    set_has_time();
    value_.time_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Time >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.time)
  return value_.time_;
}

// .google.fhir.stu3.proto.UnsignedInt unsigned_int = 15;
inline bool Extension_Value::has_unsigned_int() const {
  return value_case() == kUnsignedInt;
}
inline void Extension_Value::set_has_unsigned_int() {
  _oneof_case_[0] = kUnsignedInt;
}
inline void Extension_Value::clear_unsigned_int() {
  if (has_unsigned_int()) {
    delete value_.unsigned_int_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::UnsignedInt& Extension_Value::_internal_unsigned_int() const {
  return *value_.unsigned_int_;
}
inline ::google::fhir::stu3::proto::UnsignedInt* Extension_Value::release_unsigned_int() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.unsigned_int)
  if (has_unsigned_int()) {
    clear_has_value();
      ::google::fhir::stu3::proto::UnsignedInt* temp = value_.unsigned_int_;
    value_.unsigned_int_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::UnsignedInt& Extension_Value::unsigned_int() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.unsigned_int)
  return has_unsigned_int()
      ? *value_.unsigned_int_
      : *reinterpret_cast< ::google::fhir::stu3::proto::UnsignedInt*>(&::google::fhir::stu3::proto::_UnsignedInt_default_instance_);
}
inline ::google::fhir::stu3::proto::UnsignedInt* Extension_Value::mutable_unsigned_int() {
  if (!has_unsigned_int()) {
    clear_value();
    set_has_unsigned_int();
    value_.unsigned_int_ = CreateMaybeMessage< ::google::fhir::stu3::proto::UnsignedInt >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.unsigned_int)
  return value_.unsigned_int_;
}

// .google.fhir.stu3.proto.Uri uri = 16;
inline bool Extension_Value::has_uri() const {
  return value_case() == kUri;
}
inline void Extension_Value::set_has_uri() {
  _oneof_case_[0] = kUri;
}
inline void Extension_Value::clear_uri() {
  if (has_uri()) {
    delete value_.uri_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Uri& Extension_Value::_internal_uri() const {
  return *value_.uri_;
}
inline ::google::fhir::stu3::proto::Uri* Extension_Value::release_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.uri)
  if (has_uri()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Uri* temp = value_.uri_;
    value_.uri_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Uri& Extension_Value::uri() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.uri)
  return has_uri()
      ? *value_.uri_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Uri*>(&::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* Extension_Value::mutable_uri() {
  if (!has_uri()) {
    clear_value();
    set_has_uri();
    value_.uri_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Uri >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.uri)
  return value_.uri_;
}

// .google.fhir.stu3.proto.Address address = 17;
inline bool Extension_Value::has_address() const {
  return value_case() == kAddress;
}
inline void Extension_Value::set_has_address() {
  _oneof_case_[0] = kAddress;
}
inline void Extension_Value::clear_address() {
  if (has_address()) {
    delete value_.address_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Address& Extension_Value::_internal_address() const {
  return *value_.address_;
}
inline ::google::fhir::stu3::proto::Address* Extension_Value::release_address() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.address)
  if (has_address()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Address* temp = value_.address_;
    value_.address_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Address& Extension_Value::address() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.address)
  return has_address()
      ? *value_.address_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Address*>(&::google::fhir::stu3::proto::_Address_default_instance_);
}
inline ::google::fhir::stu3::proto::Address* Extension_Value::mutable_address() {
  if (!has_address()) {
    clear_value();
    set_has_address();
    value_.address_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Address >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.address)
  return value_.address_;
}

// .google.fhir.stu3.proto.Age age = 18;
inline bool Extension_Value::has_age() const {
  return value_case() == kAge;
}
inline void Extension_Value::set_has_age() {
  _oneof_case_[0] = kAge;
}
inline void Extension_Value::clear_age() {
  if (has_age()) {
    delete value_.age_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Age& Extension_Value::_internal_age() const {
  return *value_.age_;
}
inline ::google::fhir::stu3::proto::Age* Extension_Value::release_age() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.age)
  if (has_age()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Age* temp = value_.age_;
    value_.age_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Age& Extension_Value::age() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.age)
  return has_age()
      ? *value_.age_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Age*>(&::google::fhir::stu3::proto::_Age_default_instance_);
}
inline ::google::fhir::stu3::proto::Age* Extension_Value::mutable_age() {
  if (!has_age()) {
    clear_value();
    set_has_age();
    value_.age_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Age >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.age)
  return value_.age_;
}

// .google.fhir.stu3.proto.Annotation annotation = 19;
inline bool Extension_Value::has_annotation() const {
  return value_case() == kAnnotation;
}
inline void Extension_Value::set_has_annotation() {
  _oneof_case_[0] = kAnnotation;
}
inline void Extension_Value::clear_annotation() {
  if (has_annotation()) {
    delete value_.annotation_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Annotation& Extension_Value::_internal_annotation() const {
  return *value_.annotation_;
}
inline ::google::fhir::stu3::proto::Annotation* Extension_Value::release_annotation() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.annotation)
  if (has_annotation()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Annotation* temp = value_.annotation_;
    value_.annotation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Annotation& Extension_Value::annotation() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.annotation)
  return has_annotation()
      ? *value_.annotation_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Annotation*>(&::google::fhir::stu3::proto::_Annotation_default_instance_);
}
inline ::google::fhir::stu3::proto::Annotation* Extension_Value::mutable_annotation() {
  if (!has_annotation()) {
    clear_value();
    set_has_annotation();
    value_.annotation_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Annotation >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.annotation)
  return value_.annotation_;
}

// .google.fhir.stu3.proto.Attachment attachment = 20;
inline bool Extension_Value::has_attachment() const {
  return value_case() == kAttachment;
}
inline void Extension_Value::set_has_attachment() {
  _oneof_case_[0] = kAttachment;
}
inline void Extension_Value::clear_attachment() {
  if (has_attachment()) {
    delete value_.attachment_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Attachment& Extension_Value::_internal_attachment() const {
  return *value_.attachment_;
}
inline ::google::fhir::stu3::proto::Attachment* Extension_Value::release_attachment() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.attachment)
  if (has_attachment()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Attachment* temp = value_.attachment_;
    value_.attachment_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Attachment& Extension_Value::attachment() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.attachment)
  return has_attachment()
      ? *value_.attachment_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Attachment*>(&::google::fhir::stu3::proto::_Attachment_default_instance_);
}
inline ::google::fhir::stu3::proto::Attachment* Extension_Value::mutable_attachment() {
  if (!has_attachment()) {
    clear_value();
    set_has_attachment();
    value_.attachment_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Attachment >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.attachment)
  return value_.attachment_;
}

// .google.fhir.stu3.proto.CodeableConcept codeable_concept = 21;
inline bool Extension_Value::has_codeable_concept() const {
  return value_case() == kCodeableConcept;
}
inline void Extension_Value::set_has_codeable_concept() {
  _oneof_case_[0] = kCodeableConcept;
}
inline void Extension_Value::clear_codeable_concept() {
  if (has_codeable_concept()) {
    delete value_.codeable_concept_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::CodeableConcept& Extension_Value::_internal_codeable_concept() const {
  return *value_.codeable_concept_;
}
inline ::google::fhir::stu3::proto::CodeableConcept* Extension_Value::release_codeable_concept() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.codeable_concept)
  if (has_codeable_concept()) {
    clear_has_value();
      ::google::fhir::stu3::proto::CodeableConcept* temp = value_.codeable_concept_;
    value_.codeable_concept_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::CodeableConcept& Extension_Value::codeable_concept() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.codeable_concept)
  return has_codeable_concept()
      ? *value_.codeable_concept_
      : *reinterpret_cast< ::google::fhir::stu3::proto::CodeableConcept*>(&::google::fhir::stu3::proto::_CodeableConcept_default_instance_);
}
inline ::google::fhir::stu3::proto::CodeableConcept* Extension_Value::mutable_codeable_concept() {
  if (!has_codeable_concept()) {
    clear_value();
    set_has_codeable_concept();
    value_.codeable_concept_ = CreateMaybeMessage< ::google::fhir::stu3::proto::CodeableConcept >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.codeable_concept)
  return value_.codeable_concept_;
}

// .google.fhir.stu3.proto.Coding coding = 22;
inline bool Extension_Value::has_coding() const {
  return value_case() == kCoding;
}
inline void Extension_Value::set_has_coding() {
  _oneof_case_[0] = kCoding;
}
inline void Extension_Value::clear_coding() {
  if (has_coding()) {
    delete value_.coding_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Coding& Extension_Value::_internal_coding() const {
  return *value_.coding_;
}
inline ::google::fhir::stu3::proto::Coding* Extension_Value::release_coding() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.coding)
  if (has_coding()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Coding* temp = value_.coding_;
    value_.coding_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Coding& Extension_Value::coding() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.coding)
  return has_coding()
      ? *value_.coding_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Coding*>(&::google::fhir::stu3::proto::_Coding_default_instance_);
}
inline ::google::fhir::stu3::proto::Coding* Extension_Value::mutable_coding() {
  if (!has_coding()) {
    clear_value();
    set_has_coding();
    value_.coding_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Coding >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.coding)
  return value_.coding_;
}

// .google.fhir.stu3.proto.ContactPoint contact_point = 23;
inline bool Extension_Value::has_contact_point() const {
  return value_case() == kContactPoint;
}
inline void Extension_Value::set_has_contact_point() {
  _oneof_case_[0] = kContactPoint;
}
inline void Extension_Value::clear_contact_point() {
  if (has_contact_point()) {
    delete value_.contact_point_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::ContactPoint& Extension_Value::_internal_contact_point() const {
  return *value_.contact_point_;
}
inline ::google::fhir::stu3::proto::ContactPoint* Extension_Value::release_contact_point() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.contact_point)
  if (has_contact_point()) {
    clear_has_value();
      ::google::fhir::stu3::proto::ContactPoint* temp = value_.contact_point_;
    value_.contact_point_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ContactPoint& Extension_Value::contact_point() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.contact_point)
  return has_contact_point()
      ? *value_.contact_point_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ContactPoint*>(&::google::fhir::stu3::proto::_ContactPoint_default_instance_);
}
inline ::google::fhir::stu3::proto::ContactPoint* Extension_Value::mutable_contact_point() {
  if (!has_contact_point()) {
    clear_value();
    set_has_contact_point();
    value_.contact_point_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ContactPoint >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.contact_point)
  return value_.contact_point_;
}

// .google.fhir.stu3.proto.Count count = 24;
inline bool Extension_Value::has_count() const {
  return value_case() == kCount;
}
inline void Extension_Value::set_has_count() {
  _oneof_case_[0] = kCount;
}
inline void Extension_Value::clear_count() {
  if (has_count()) {
    delete value_.count_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Count& Extension_Value::_internal_count() const {
  return *value_.count_;
}
inline ::google::fhir::stu3::proto::Count* Extension_Value::release_count() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.count)
  if (has_count()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Count* temp = value_.count_;
    value_.count_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Count& Extension_Value::count() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.count)
  return has_count()
      ? *value_.count_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Count*>(&::google::fhir::stu3::proto::_Count_default_instance_);
}
inline ::google::fhir::stu3::proto::Count* Extension_Value::mutable_count() {
  if (!has_count()) {
    clear_value();
    set_has_count();
    value_.count_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Count >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.count)
  return value_.count_;
}

// .google.fhir.stu3.proto.Distance distance = 25;
inline bool Extension_Value::has_distance() const {
  return value_case() == kDistance;
}
inline void Extension_Value::set_has_distance() {
  _oneof_case_[0] = kDistance;
}
inline void Extension_Value::clear_distance() {
  if (has_distance()) {
    delete value_.distance_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Distance& Extension_Value::_internal_distance() const {
  return *value_.distance_;
}
inline ::google::fhir::stu3::proto::Distance* Extension_Value::release_distance() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.distance)
  if (has_distance()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Distance* temp = value_.distance_;
    value_.distance_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Distance& Extension_Value::distance() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.distance)
  return has_distance()
      ? *value_.distance_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Distance*>(&::google::fhir::stu3::proto::_Distance_default_instance_);
}
inline ::google::fhir::stu3::proto::Distance* Extension_Value::mutable_distance() {
  if (!has_distance()) {
    clear_value();
    set_has_distance();
    value_.distance_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Distance >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.distance)
  return value_.distance_;
}

// .google.fhir.stu3.proto.Duration duration = 26;
inline bool Extension_Value::has_duration() const {
  return value_case() == kDuration;
}
inline void Extension_Value::set_has_duration() {
  _oneof_case_[0] = kDuration;
}
inline void Extension_Value::clear_duration() {
  if (has_duration()) {
    delete value_.duration_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Duration& Extension_Value::_internal_duration() const {
  return *value_.duration_;
}
inline ::google::fhir::stu3::proto::Duration* Extension_Value::release_duration() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.duration)
  if (has_duration()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Duration* temp = value_.duration_;
    value_.duration_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Duration& Extension_Value::duration() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.duration)
  return has_duration()
      ? *value_.duration_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Duration*>(&::google::fhir::stu3::proto::_Duration_default_instance_);
}
inline ::google::fhir::stu3::proto::Duration* Extension_Value::mutable_duration() {
  if (!has_duration()) {
    clear_value();
    set_has_duration();
    value_.duration_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Duration >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.duration)
  return value_.duration_;
}

// .google.fhir.stu3.proto.HumanName human_name = 27;
inline bool Extension_Value::has_human_name() const {
  return value_case() == kHumanName;
}
inline void Extension_Value::set_has_human_name() {
  _oneof_case_[0] = kHumanName;
}
inline void Extension_Value::clear_human_name() {
  if (has_human_name()) {
    delete value_.human_name_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::HumanName& Extension_Value::_internal_human_name() const {
  return *value_.human_name_;
}
inline ::google::fhir::stu3::proto::HumanName* Extension_Value::release_human_name() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.human_name)
  if (has_human_name()) {
    clear_has_value();
      ::google::fhir::stu3::proto::HumanName* temp = value_.human_name_;
    value_.human_name_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::HumanName& Extension_Value::human_name() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.human_name)
  return has_human_name()
      ? *value_.human_name_
      : *reinterpret_cast< ::google::fhir::stu3::proto::HumanName*>(&::google::fhir::stu3::proto::_HumanName_default_instance_);
}
inline ::google::fhir::stu3::proto::HumanName* Extension_Value::mutable_human_name() {
  if (!has_human_name()) {
    clear_value();
    set_has_human_name();
    value_.human_name_ = CreateMaybeMessage< ::google::fhir::stu3::proto::HumanName >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.human_name)
  return value_.human_name_;
}

// .google.fhir.stu3.proto.Identifier identifier = 28;
inline bool Extension_Value::has_identifier() const {
  return value_case() == kIdentifier;
}
inline void Extension_Value::set_has_identifier() {
  _oneof_case_[0] = kIdentifier;
}
inline void Extension_Value::clear_identifier() {
  if (has_identifier()) {
    delete value_.identifier_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Identifier& Extension_Value::_internal_identifier() const {
  return *value_.identifier_;
}
inline ::google::fhir::stu3::proto::Identifier* Extension_Value::release_identifier() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.identifier)
  if (has_identifier()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Identifier* temp = value_.identifier_;
    value_.identifier_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Identifier& Extension_Value::identifier() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.identifier)
  return has_identifier()
      ? *value_.identifier_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Identifier*>(&::google::fhir::stu3::proto::_Identifier_default_instance_);
}
inline ::google::fhir::stu3::proto::Identifier* Extension_Value::mutable_identifier() {
  if (!has_identifier()) {
    clear_value();
    set_has_identifier();
    value_.identifier_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Identifier >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.identifier)
  return value_.identifier_;
}

// .google.fhir.stu3.proto.Money money = 29;
inline bool Extension_Value::has_money() const {
  return value_case() == kMoney;
}
inline void Extension_Value::set_has_money() {
  _oneof_case_[0] = kMoney;
}
inline void Extension_Value::clear_money() {
  if (has_money()) {
    delete value_.money_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Money& Extension_Value::_internal_money() const {
  return *value_.money_;
}
inline ::google::fhir::stu3::proto::Money* Extension_Value::release_money() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.money)
  if (has_money()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Money* temp = value_.money_;
    value_.money_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Money& Extension_Value::money() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.money)
  return has_money()
      ? *value_.money_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Money*>(&::google::fhir::stu3::proto::_Money_default_instance_);
}
inline ::google::fhir::stu3::proto::Money* Extension_Value::mutable_money() {
  if (!has_money()) {
    clear_value();
    set_has_money();
    value_.money_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Money >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.money)
  return value_.money_;
}

// .google.fhir.stu3.proto.Period period = 30;
inline bool Extension_Value::has_period() const {
  return value_case() == kPeriod;
}
inline void Extension_Value::set_has_period() {
  _oneof_case_[0] = kPeriod;
}
inline void Extension_Value::clear_period() {
  if (has_period()) {
    delete value_.period_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Period& Extension_Value::_internal_period() const {
  return *value_.period_;
}
inline ::google::fhir::stu3::proto::Period* Extension_Value::release_period() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.period)
  if (has_period()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Period* temp = value_.period_;
    value_.period_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Period& Extension_Value::period() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.period)
  return has_period()
      ? *value_.period_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Period*>(&::google::fhir::stu3::proto::_Period_default_instance_);
}
inline ::google::fhir::stu3::proto::Period* Extension_Value::mutable_period() {
  if (!has_period()) {
    clear_value();
    set_has_period();
    value_.period_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Period >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.period)
  return value_.period_;
}

// .google.fhir.stu3.proto.Quantity quantity = 31;
inline bool Extension_Value::has_quantity() const {
  return value_case() == kQuantity;
}
inline void Extension_Value::set_has_quantity() {
  _oneof_case_[0] = kQuantity;
}
inline void Extension_Value::clear_quantity() {
  if (has_quantity()) {
    delete value_.quantity_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Quantity& Extension_Value::_internal_quantity() const {
  return *value_.quantity_;
}
inline ::google::fhir::stu3::proto::Quantity* Extension_Value::release_quantity() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.quantity)
  if (has_quantity()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Quantity* temp = value_.quantity_;
    value_.quantity_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Quantity& Extension_Value::quantity() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.quantity)
  return has_quantity()
      ? *value_.quantity_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Quantity*>(&::google::fhir::stu3::proto::_Quantity_default_instance_);
}
inline ::google::fhir::stu3::proto::Quantity* Extension_Value::mutable_quantity() {
  if (!has_quantity()) {
    clear_value();
    set_has_quantity();
    value_.quantity_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Quantity >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.quantity)
  return value_.quantity_;
}

// .google.fhir.stu3.proto.Range range = 32;
inline bool Extension_Value::has_range() const {
  return value_case() == kRange;
}
inline void Extension_Value::set_has_range() {
  _oneof_case_[0] = kRange;
}
inline void Extension_Value::clear_range() {
  if (has_range()) {
    delete value_.range_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Range& Extension_Value::_internal_range() const {
  return *value_.range_;
}
inline ::google::fhir::stu3::proto::Range* Extension_Value::release_range() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.range)
  if (has_range()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Range* temp = value_.range_;
    value_.range_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Range& Extension_Value::range() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.range)
  return has_range()
      ? *value_.range_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Range*>(&::google::fhir::stu3::proto::_Range_default_instance_);
}
inline ::google::fhir::stu3::proto::Range* Extension_Value::mutable_range() {
  if (!has_range()) {
    clear_value();
    set_has_range();
    value_.range_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Range >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.range)
  return value_.range_;
}

// .google.fhir.stu3.proto.Ratio ratio = 33;
inline bool Extension_Value::has_ratio() const {
  return value_case() == kRatio;
}
inline void Extension_Value::set_has_ratio() {
  _oneof_case_[0] = kRatio;
}
inline void Extension_Value::clear_ratio() {
  if (has_ratio()) {
    delete value_.ratio_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Ratio& Extension_Value::_internal_ratio() const {
  return *value_.ratio_;
}
inline ::google::fhir::stu3::proto::Ratio* Extension_Value::release_ratio() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.ratio)
  if (has_ratio()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Ratio* temp = value_.ratio_;
    value_.ratio_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Ratio& Extension_Value::ratio() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.ratio)
  return has_ratio()
      ? *value_.ratio_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Ratio*>(&::google::fhir::stu3::proto::_Ratio_default_instance_);
}
inline ::google::fhir::stu3::proto::Ratio* Extension_Value::mutable_ratio() {
  if (!has_ratio()) {
    clear_value();
    set_has_ratio();
    value_.ratio_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Ratio >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.ratio)
  return value_.ratio_;
}

// .google.fhir.stu3.proto.Reference reference = 34;
inline bool Extension_Value::has_reference() const {
  return value_case() == kReference;
}
inline void Extension_Value::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline void Extension_Value::clear_reference() {
  if (has_reference()) {
    delete value_.reference_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Reference& Extension_Value::_internal_reference() const {
  return *value_.reference_;
}
inline ::google::fhir::stu3::proto::Reference* Extension_Value::release_reference() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.reference)
  if (has_reference()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Reference* temp = value_.reference_;
    value_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Reference& Extension_Value::reference() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.reference)
  return has_reference()
      ? *value_.reference_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Reference*>(&::google::fhir::stu3::proto::_Reference_default_instance_);
}
inline ::google::fhir::stu3::proto::Reference* Extension_Value::mutable_reference() {
  if (!has_reference()) {
    clear_value();
    set_has_reference();
    value_.reference_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Reference >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.reference)
  return value_.reference_;
}

// .google.fhir.stu3.proto.SampledData sampled_data = 35;
inline bool Extension_Value::has_sampled_data() const {
  return value_case() == kSampledData;
}
inline void Extension_Value::set_has_sampled_data() {
  _oneof_case_[0] = kSampledData;
}
inline void Extension_Value::clear_sampled_data() {
  if (has_sampled_data()) {
    delete value_.sampled_data_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::SampledData& Extension_Value::_internal_sampled_data() const {
  return *value_.sampled_data_;
}
inline ::google::fhir::stu3::proto::SampledData* Extension_Value::release_sampled_data() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.sampled_data)
  if (has_sampled_data()) {
    clear_has_value();
      ::google::fhir::stu3::proto::SampledData* temp = value_.sampled_data_;
    value_.sampled_data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::SampledData& Extension_Value::sampled_data() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.sampled_data)
  return has_sampled_data()
      ? *value_.sampled_data_
      : *reinterpret_cast< ::google::fhir::stu3::proto::SampledData*>(&::google::fhir::stu3::proto::_SampledData_default_instance_);
}
inline ::google::fhir::stu3::proto::SampledData* Extension_Value::mutable_sampled_data() {
  if (!has_sampled_data()) {
    clear_value();
    set_has_sampled_data();
    value_.sampled_data_ = CreateMaybeMessage< ::google::fhir::stu3::proto::SampledData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.sampled_data)
  return value_.sampled_data_;
}

// .google.fhir.stu3.proto.Signature signature = 36;
inline bool Extension_Value::has_signature() const {
  return value_case() == kSignature;
}
inline void Extension_Value::set_has_signature() {
  _oneof_case_[0] = kSignature;
}
inline void Extension_Value::clear_signature() {
  if (has_signature()) {
    delete value_.signature_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Signature& Extension_Value::_internal_signature() const {
  return *value_.signature_;
}
inline ::google::fhir::stu3::proto::Signature* Extension_Value::release_signature() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.signature)
  if (has_signature()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Signature* temp = value_.signature_;
    value_.signature_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Signature& Extension_Value::signature() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.signature)
  return has_signature()
      ? *value_.signature_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Signature*>(&::google::fhir::stu3::proto::_Signature_default_instance_);
}
inline ::google::fhir::stu3::proto::Signature* Extension_Value::mutable_signature() {
  if (!has_signature()) {
    clear_value();
    set_has_signature();
    value_.signature_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Signature >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.signature)
  return value_.signature_;
}

// .google.fhir.stu3.proto.Timing timing = 37;
inline bool Extension_Value::has_timing() const {
  return value_case() == kTiming;
}
inline void Extension_Value::set_has_timing() {
  _oneof_case_[0] = kTiming;
}
inline void Extension_Value::clear_timing() {
  if (has_timing()) {
    delete value_.timing_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Timing& Extension_Value::_internal_timing() const {
  return *value_.timing_;
}
inline ::google::fhir::stu3::proto::Timing* Extension_Value::release_timing() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.timing)
  if (has_timing()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Timing* temp = value_.timing_;
    value_.timing_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Timing& Extension_Value::timing() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.timing)
  return has_timing()
      ? *value_.timing_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Timing*>(&::google::fhir::stu3::proto::_Timing_default_instance_);
}
inline ::google::fhir::stu3::proto::Timing* Extension_Value::mutable_timing() {
  if (!has_timing()) {
    clear_value();
    set_has_timing();
    value_.timing_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Timing >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.timing)
  return value_.timing_;
}

// .google.fhir.stu3.proto.Meta meta = 38;
inline bool Extension_Value::has_meta() const {
  return value_case() == kMeta;
}
inline void Extension_Value::set_has_meta() {
  _oneof_case_[0] = kMeta;
}
inline void Extension_Value::clear_meta() {
  if (has_meta()) {
    delete value_.meta_;
    clear_has_value();
  }
}
inline const ::google::fhir::stu3::proto::Meta& Extension_Value::_internal_meta() const {
  return *value_.meta_;
}
inline ::google::fhir::stu3::proto::Meta* Extension_Value::release_meta() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.Value.meta)
  if (has_meta()) {
    clear_has_value();
      ::google::fhir::stu3::proto::Meta* temp = value_.meta_;
    value_.meta_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::Meta& Extension_Value::meta() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.Value.meta)
  return has_meta()
      ? *value_.meta_
      : *reinterpret_cast< ::google::fhir::stu3::proto::Meta*>(&::google::fhir::stu3::proto::_Meta_default_instance_);
}
inline ::google::fhir::stu3::proto::Meta* Extension_Value::mutable_meta() {
  if (!has_meta()) {
    clear_value();
    set_has_meta();
    value_.meta_ = CreateMaybeMessage< ::google::fhir::stu3::proto::Meta >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.Value.meta)
  return value_.meta_;
}

inline bool Extension_Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Extension_Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Extension_Value::ValueCase Extension_Value::value_case() const {
  return Extension_Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Extension

// .google.fhir.stu3.proto.String id = 1;
inline bool Extension::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Extension::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Extension::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Extension::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Extension::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Extension::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.id)
  return id_;
}
inline void Extension::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Extension.id)
}

// .google.fhir.stu3.proto.Uri url = 2 [(.google.fhir.stu3.proto.validation_requirement) = REQUIRED_BY_FHIR];
inline bool Extension::has_url() const {
  return this != internal_default_instance() && url_ != NULL;
}
inline void Extension::clear_url() {
  if (GetArenaNoVirtual() == NULL && url_ != NULL) {
    delete url_;
  }
  url_ = NULL;
}
inline const ::google::fhir::stu3::proto::Uri& Extension::_internal_url() const {
  return *url_;
}
inline const ::google::fhir::stu3::proto::Uri& Extension::url() const {
  const ::google::fhir::stu3::proto::Uri* p = url_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.url)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Uri*>(
      &::google::fhir::stu3::proto::_Uri_default_instance_);
}
inline ::google::fhir::stu3::proto::Uri* Extension::release_url() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.url)
  
  ::google::fhir::stu3::proto::Uri* temp = url_;
  url_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Uri* Extension::mutable_url() {
  
  if (url_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Uri>(GetArenaNoVirtual());
    url_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.url)
  return url_;
}
inline void Extension::set_allocated_url(::google::fhir::stu3::proto::Uri* url) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete url_;
  }
  if (url) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      url = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, url, submessage_arena);
    }
    
  } else {
    
  }
  url_ = url;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Extension.url)
}

// .google.fhir.stu3.proto.Extension.Value value = 3 [(.google.fhir.stu3.proto.is_choice_type) = true];
inline bool Extension::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void Extension::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
inline const ::google::fhir::stu3::proto::Extension_Value& Extension::_internal_value() const {
  return *value_;
}
inline const ::google::fhir::stu3::proto::Extension_Value& Extension::value() const {
  const ::google::fhir::stu3::proto::Extension_Value* p = value_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.value)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Extension_Value*>(
      &::google::fhir::stu3::proto::_Extension_Value_default_instance_);
}
inline ::google::fhir::stu3::proto::Extension_Value* Extension::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Extension.value)
  
  ::google::fhir::stu3::proto::Extension_Value* temp = value_;
  value_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Extension_Value* Extension::mutable_value() {
  
  if (value_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Extension_Value>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.value)
  return value_;
}
inline void Extension::set_allocated_value(::google::fhir::stu3::proto::Extension_Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Extension.value)
}

// repeated .google.fhir.stu3.proto.Extension extension = 4;
inline int Extension::extension_size() const {
  return extension_.size();
}
inline void Extension::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Extension::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Extension.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Extension::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Extension.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Extension::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Extension.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Extension::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Extension.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Extension::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Extension.extension)
  return extension_;
}

// -------------------------------------------------------------------

// CodingWithFixedSystem

// .google.fhir.stu3.proto.String id = 1;
inline bool CodingWithFixedSystem::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void CodingWithFixedSystem::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& CodingWithFixedSystem::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodingWithFixedSystem::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodingWithFixedSystem.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodingWithFixedSystem::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodingWithFixedSystem.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodingWithFixedSystem::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodingWithFixedSystem.id)
  return id_;
}
inline void CodingWithFixedSystem::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodingWithFixedSystem.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int CodingWithFixedSystem::extension_size() const {
  return extension_.size();
}
inline void CodingWithFixedSystem::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* CodingWithFixedSystem::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodingWithFixedSystem.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
CodingWithFixedSystem::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.CodingWithFixedSystem.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& CodingWithFixedSystem::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodingWithFixedSystem.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* CodingWithFixedSystem::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.CodingWithFixedSystem.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
CodingWithFixedSystem::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.CodingWithFixedSystem.extension)
  return extension_;
}

// .google.fhir.stu3.proto.String version = 4;
inline bool CodingWithFixedSystem::has_version() const {
  return this != internal_default_instance() && version_ != NULL;
}
inline void CodingWithFixedSystem::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& CodingWithFixedSystem::_internal_version() const {
  return *version_;
}
inline const ::google::fhir::stu3::proto::String& CodingWithFixedSystem::version() const {
  const ::google::fhir::stu3::proto::String* p = version_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodingWithFixedSystem.version)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodingWithFixedSystem::release_version() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodingWithFixedSystem.version)
  
  ::google::fhir::stu3::proto::String* temp = version_;
  version_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodingWithFixedSystem::mutable_version() {
  
  if (version_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodingWithFixedSystem.version)
  return version_;
}
inline void CodingWithFixedSystem::set_allocated_version(::google::fhir::stu3::proto::String* version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete version_;
  }
  if (version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodingWithFixedSystem.version)
}

// .google.fhir.stu3.proto.Code code = 5;
inline bool CodingWithFixedSystem::has_code() const {
  return this != internal_default_instance() && code_ != NULL;
}
inline void CodingWithFixedSystem::clear_code() {
  if (GetArenaNoVirtual() == NULL && code_ != NULL) {
    delete code_;
  }
  code_ = NULL;
}
inline const ::google::fhir::stu3::proto::Code& CodingWithFixedSystem::_internal_code() const {
  return *code_;
}
inline const ::google::fhir::stu3::proto::Code& CodingWithFixedSystem::code() const {
  const ::google::fhir::stu3::proto::Code* p = code_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodingWithFixedSystem.code)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Code*>(
      &::google::fhir::stu3::proto::_Code_default_instance_);
}
inline ::google::fhir::stu3::proto::Code* CodingWithFixedSystem::release_code() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodingWithFixedSystem.code)
  
  ::google::fhir::stu3::proto::Code* temp = code_;
  code_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Code* CodingWithFixedSystem::mutable_code() {
  
  if (code_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Code>(GetArenaNoVirtual());
    code_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodingWithFixedSystem.code)
  return code_;
}
inline void CodingWithFixedSystem::set_allocated_code(::google::fhir::stu3::proto::Code* code) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete code_;
  }
  if (code) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      code = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, code, submessage_arena);
    }
    
  } else {
    
  }
  code_ = code;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodingWithFixedSystem.code)
}

// .google.fhir.stu3.proto.String display = 6;
inline bool CodingWithFixedSystem::has_display() const {
  return this != internal_default_instance() && display_ != NULL;
}
inline void CodingWithFixedSystem::clear_display() {
  if (GetArenaNoVirtual() == NULL && display_ != NULL) {
    delete display_;
  }
  display_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& CodingWithFixedSystem::_internal_display() const {
  return *display_;
}
inline const ::google::fhir::stu3::proto::String& CodingWithFixedSystem::display() const {
  const ::google::fhir::stu3::proto::String* p = display_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodingWithFixedSystem.display)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodingWithFixedSystem::release_display() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodingWithFixedSystem.display)
  
  ::google::fhir::stu3::proto::String* temp = display_;
  display_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodingWithFixedSystem::mutable_display() {
  
  if (display_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    display_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodingWithFixedSystem.display)
  return display_;
}
inline void CodingWithFixedSystem::set_allocated_display(::google::fhir::stu3::proto::String* display) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete display_;
  }
  if (display) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      display = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, display, submessage_arena);
    }
    
  } else {
    
  }
  display_ = display;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodingWithFixedSystem.display)
}

// .google.fhir.stu3.proto.Boolean user_selected = 7;
inline bool CodingWithFixedSystem::has_user_selected() const {
  return this != internal_default_instance() && user_selected_ != NULL;
}
inline void CodingWithFixedSystem::clear_user_selected() {
  if (GetArenaNoVirtual() == NULL && user_selected_ != NULL) {
    delete user_selected_;
  }
  user_selected_ = NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& CodingWithFixedSystem::_internal_user_selected() const {
  return *user_selected_;
}
inline const ::google::fhir::stu3::proto::Boolean& CodingWithFixedSystem::user_selected() const {
  const ::google::fhir::stu3::proto::Boolean* p = user_selected_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodingWithFixedSystem.user_selected)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* CodingWithFixedSystem::release_user_selected() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodingWithFixedSystem.user_selected)
  
  ::google::fhir::stu3::proto::Boolean* temp = user_selected_;
  user_selected_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* CodingWithFixedSystem::mutable_user_selected() {
  
  if (user_selected_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    user_selected_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodingWithFixedSystem.user_selected)
  return user_selected_;
}
inline void CodingWithFixedSystem::set_allocated_user_selected(::google::fhir::stu3::proto::Boolean* user_selected) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_selected_;
  }
  if (user_selected) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_selected = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_selected, submessage_arena);
    }
    
  } else {
    
  }
  user_selected_ = user_selected;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodingWithFixedSystem.user_selected)
}

// -------------------------------------------------------------------

// CodingWithFixedCode

// .google.fhir.stu3.proto.String id = 1;
inline bool CodingWithFixedCode::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void CodingWithFixedCode::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& CodingWithFixedCode::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& CodingWithFixedCode::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodingWithFixedCode.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodingWithFixedCode::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodingWithFixedCode.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodingWithFixedCode::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodingWithFixedCode.id)
  return id_;
}
inline void CodingWithFixedCode::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodingWithFixedCode.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int CodingWithFixedCode::extension_size() const {
  return extension_.size();
}
inline void CodingWithFixedCode::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* CodingWithFixedCode::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodingWithFixedCode.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
CodingWithFixedCode::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.CodingWithFixedCode.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& CodingWithFixedCode::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodingWithFixedCode.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* CodingWithFixedCode::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.CodingWithFixedCode.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
CodingWithFixedCode::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.CodingWithFixedCode.extension)
  return extension_;
}

// .google.fhir.stu3.proto.String version = 4;
inline bool CodingWithFixedCode::has_version() const {
  return this != internal_default_instance() && version_ != NULL;
}
inline void CodingWithFixedCode::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& CodingWithFixedCode::_internal_version() const {
  return *version_;
}
inline const ::google::fhir::stu3::proto::String& CodingWithFixedCode::version() const {
  const ::google::fhir::stu3::proto::String* p = version_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodingWithFixedCode.version)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodingWithFixedCode::release_version() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodingWithFixedCode.version)
  
  ::google::fhir::stu3::proto::String* temp = version_;
  version_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodingWithFixedCode::mutable_version() {
  
  if (version_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodingWithFixedCode.version)
  return version_;
}
inline void CodingWithFixedCode::set_allocated_version(::google::fhir::stu3::proto::String* version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete version_;
  }
  if (version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodingWithFixedCode.version)
}

// .google.fhir.stu3.proto.String display = 6;
inline bool CodingWithFixedCode::has_display() const {
  return this != internal_default_instance() && display_ != NULL;
}
inline void CodingWithFixedCode::clear_display() {
  if (GetArenaNoVirtual() == NULL && display_ != NULL) {
    delete display_;
  }
  display_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& CodingWithFixedCode::_internal_display() const {
  return *display_;
}
inline const ::google::fhir::stu3::proto::String& CodingWithFixedCode::display() const {
  const ::google::fhir::stu3::proto::String* p = display_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodingWithFixedCode.display)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* CodingWithFixedCode::release_display() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodingWithFixedCode.display)
  
  ::google::fhir::stu3::proto::String* temp = display_;
  display_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* CodingWithFixedCode::mutable_display() {
  
  if (display_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    display_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodingWithFixedCode.display)
  return display_;
}
inline void CodingWithFixedCode::set_allocated_display(::google::fhir::stu3::proto::String* display) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete display_;
  }
  if (display) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      display = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, display, submessage_arena);
    }
    
  } else {
    
  }
  display_ = display;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodingWithFixedCode.display)
}

// .google.fhir.stu3.proto.Boolean user_selected = 7;
inline bool CodingWithFixedCode::has_user_selected() const {
  return this != internal_default_instance() && user_selected_ != NULL;
}
inline void CodingWithFixedCode::clear_user_selected() {
  if (GetArenaNoVirtual() == NULL && user_selected_ != NULL) {
    delete user_selected_;
  }
  user_selected_ = NULL;
}
inline const ::google::fhir::stu3::proto::Boolean& CodingWithFixedCode::_internal_user_selected() const {
  return *user_selected_;
}
inline const ::google::fhir::stu3::proto::Boolean& CodingWithFixedCode::user_selected() const {
  const ::google::fhir::stu3::proto::Boolean* p = user_selected_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.CodingWithFixedCode.user_selected)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Boolean*>(
      &::google::fhir::stu3::proto::_Boolean_default_instance_);
}
inline ::google::fhir::stu3::proto::Boolean* CodingWithFixedCode::release_user_selected() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.CodingWithFixedCode.user_selected)
  
  ::google::fhir::stu3::proto::Boolean* temp = user_selected_;
  user_selected_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Boolean* CodingWithFixedCode::mutable_user_selected() {
  
  if (user_selected_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Boolean>(GetArenaNoVirtual());
    user_selected_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.CodingWithFixedCode.user_selected)
  return user_selected_;
}
inline void CodingWithFixedCode::set_allocated_user_selected(::google::fhir::stu3::proto::Boolean* user_selected) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete user_selected_;
  }
  if (user_selected) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_selected = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_selected, submessage_arena);
    }
    
  } else {
    
  }
  user_selected_ = user_selected;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.CodingWithFixedCode.user_selected)
}

// -------------------------------------------------------------------

// Reference

// .google.fhir.stu3.proto.String id = 1;
inline bool Reference::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void Reference::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Reference::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& Reference::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Reference::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Reference::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.id)
  return id_;
}
inline void Reference::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Reference.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 2;
inline int Reference::extension_size() const {
  return extension_.size();
}
inline void Reference::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* Reference::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
Reference::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.Reference.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& Reference::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* Reference::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.Reference.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
Reference::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.Reference.extension)
  return extension_;
}

// .google.fhir.stu3.proto.String uri = 3[json_name = "reference"];
inline bool Reference::has_uri() const {
  return reference_case() == kUri;
}
inline void Reference::set_has_uri() {
  _oneof_case_[0] = kUri;
}
inline void Reference::clear_uri() {
  if (has_uri()) {
    delete reference_.uri_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::String& Reference::_internal_uri() const {
  return *reference_.uri_;
}
inline ::google::fhir::stu3::proto::String* Reference::release_uri() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.uri)
  if (has_uri()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::String* temp = reference_.uri_;
    reference_.uri_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::String& Reference::uri() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.uri)
  return has_uri()
      ? *reference_.uri_
      : *reinterpret_cast< ::google::fhir::stu3::proto::String*>(&::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Reference::mutable_uri() {
  if (!has_uri()) {
    clear_reference();
    set_has_uri();
    reference_.uri_ = CreateMaybeMessage< ::google::fhir::stu3::proto::String >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.uri)
  return reference_.uri_;
}

// .google.fhir.stu3.proto.String fragment = 4;
inline bool Reference::has_fragment() const {
  return reference_case() == kFragment;
}
inline void Reference::set_has_fragment() {
  _oneof_case_[0] = kFragment;
}
inline void Reference::clear_fragment() {
  if (has_fragment()) {
    delete reference_.fragment_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::String& Reference::_internal_fragment() const {
  return *reference_.fragment_;
}
inline ::google::fhir::stu3::proto::String* Reference::release_fragment() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.fragment)
  if (has_fragment()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::String* temp = reference_.fragment_;
    reference_.fragment_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::String& Reference::fragment() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.fragment)
  return has_fragment()
      ? *reference_.fragment_
      : *reinterpret_cast< ::google::fhir::stu3::proto::String*>(&::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Reference::mutable_fragment() {
  if (!has_fragment()) {
    clear_reference();
    set_has_fragment();
    reference_.fragment_ = CreateMaybeMessage< ::google::fhir::stu3::proto::String >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.fragment)
  return reference_.fragment_;
}

// .google.fhir.stu3.proto.ReferenceId account_id = 5;
inline bool Reference::has_account_id() const {
  return reference_case() == kAccountId;
}
inline void Reference::set_has_account_id() {
  _oneof_case_[0] = kAccountId;
}
inline void Reference::clear_account_id() {
  if (has_account_id()) {
    delete reference_.account_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_account_id() const {
  return *reference_.account_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_account_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.account_id)
  if (has_account_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.account_id_;
    reference_.account_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::account_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.account_id)
  return has_account_id()
      ? *reference_.account_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_account_id() {
  if (!has_account_id()) {
    clear_reference();
    set_has_account_id();
    reference_.account_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.account_id)
  return reference_.account_id_;
}

// .google.fhir.stu3.proto.ReferenceId activity_definition_id = 6;
inline bool Reference::has_activity_definition_id() const {
  return reference_case() == kActivityDefinitionId;
}
inline void Reference::set_has_activity_definition_id() {
  _oneof_case_[0] = kActivityDefinitionId;
}
inline void Reference::clear_activity_definition_id() {
  if (has_activity_definition_id()) {
    delete reference_.activity_definition_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_activity_definition_id() const {
  return *reference_.activity_definition_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_activity_definition_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.activity_definition_id)
  if (has_activity_definition_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.activity_definition_id_;
    reference_.activity_definition_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::activity_definition_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.activity_definition_id)
  return has_activity_definition_id()
      ? *reference_.activity_definition_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_activity_definition_id() {
  if (!has_activity_definition_id()) {
    clear_reference();
    set_has_activity_definition_id();
    reference_.activity_definition_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.activity_definition_id)
  return reference_.activity_definition_id_;
}

// .google.fhir.stu3.proto.ReferenceId adverse_event_id = 7;
inline bool Reference::has_adverse_event_id() const {
  return reference_case() == kAdverseEventId;
}
inline void Reference::set_has_adverse_event_id() {
  _oneof_case_[0] = kAdverseEventId;
}
inline void Reference::clear_adverse_event_id() {
  if (has_adverse_event_id()) {
    delete reference_.adverse_event_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_adverse_event_id() const {
  return *reference_.adverse_event_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_adverse_event_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.adverse_event_id)
  if (has_adverse_event_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.adverse_event_id_;
    reference_.adverse_event_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::adverse_event_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.adverse_event_id)
  return has_adverse_event_id()
      ? *reference_.adverse_event_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_adverse_event_id() {
  if (!has_adverse_event_id()) {
    clear_reference();
    set_has_adverse_event_id();
    reference_.adverse_event_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.adverse_event_id)
  return reference_.adverse_event_id_;
}

// .google.fhir.stu3.proto.ReferenceId allergy_intolerance_id = 8;
inline bool Reference::has_allergy_intolerance_id() const {
  return reference_case() == kAllergyIntoleranceId;
}
inline void Reference::set_has_allergy_intolerance_id() {
  _oneof_case_[0] = kAllergyIntoleranceId;
}
inline void Reference::clear_allergy_intolerance_id() {
  if (has_allergy_intolerance_id()) {
    delete reference_.allergy_intolerance_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_allergy_intolerance_id() const {
  return *reference_.allergy_intolerance_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_allergy_intolerance_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.allergy_intolerance_id)
  if (has_allergy_intolerance_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.allergy_intolerance_id_;
    reference_.allergy_intolerance_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::allergy_intolerance_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.allergy_intolerance_id)
  return has_allergy_intolerance_id()
      ? *reference_.allergy_intolerance_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_allergy_intolerance_id() {
  if (!has_allergy_intolerance_id()) {
    clear_reference();
    set_has_allergy_intolerance_id();
    reference_.allergy_intolerance_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.allergy_intolerance_id)
  return reference_.allergy_intolerance_id_;
}

// .google.fhir.stu3.proto.ReferenceId appointment_id = 9;
inline bool Reference::has_appointment_id() const {
  return reference_case() == kAppointmentId;
}
inline void Reference::set_has_appointment_id() {
  _oneof_case_[0] = kAppointmentId;
}
inline void Reference::clear_appointment_id() {
  if (has_appointment_id()) {
    delete reference_.appointment_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_appointment_id() const {
  return *reference_.appointment_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_appointment_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.appointment_id)
  if (has_appointment_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.appointment_id_;
    reference_.appointment_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::appointment_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.appointment_id)
  return has_appointment_id()
      ? *reference_.appointment_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_appointment_id() {
  if (!has_appointment_id()) {
    clear_reference();
    set_has_appointment_id();
    reference_.appointment_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.appointment_id)
  return reference_.appointment_id_;
}

// .google.fhir.stu3.proto.ReferenceId appointment_response_id = 10;
inline bool Reference::has_appointment_response_id() const {
  return reference_case() == kAppointmentResponseId;
}
inline void Reference::set_has_appointment_response_id() {
  _oneof_case_[0] = kAppointmentResponseId;
}
inline void Reference::clear_appointment_response_id() {
  if (has_appointment_response_id()) {
    delete reference_.appointment_response_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_appointment_response_id() const {
  return *reference_.appointment_response_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_appointment_response_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.appointment_response_id)
  if (has_appointment_response_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.appointment_response_id_;
    reference_.appointment_response_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::appointment_response_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.appointment_response_id)
  return has_appointment_response_id()
      ? *reference_.appointment_response_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_appointment_response_id() {
  if (!has_appointment_response_id()) {
    clear_reference();
    set_has_appointment_response_id();
    reference_.appointment_response_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.appointment_response_id)
  return reference_.appointment_response_id_;
}

// .google.fhir.stu3.proto.ReferenceId audit_event_id = 11;
inline bool Reference::has_audit_event_id() const {
  return reference_case() == kAuditEventId;
}
inline void Reference::set_has_audit_event_id() {
  _oneof_case_[0] = kAuditEventId;
}
inline void Reference::clear_audit_event_id() {
  if (has_audit_event_id()) {
    delete reference_.audit_event_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_audit_event_id() const {
  return *reference_.audit_event_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_audit_event_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.audit_event_id)
  if (has_audit_event_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.audit_event_id_;
    reference_.audit_event_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::audit_event_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.audit_event_id)
  return has_audit_event_id()
      ? *reference_.audit_event_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_audit_event_id() {
  if (!has_audit_event_id()) {
    clear_reference();
    set_has_audit_event_id();
    reference_.audit_event_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.audit_event_id)
  return reference_.audit_event_id_;
}

// .google.fhir.stu3.proto.ReferenceId basic_id = 12;
inline bool Reference::has_basic_id() const {
  return reference_case() == kBasicId;
}
inline void Reference::set_has_basic_id() {
  _oneof_case_[0] = kBasicId;
}
inline void Reference::clear_basic_id() {
  if (has_basic_id()) {
    delete reference_.basic_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_basic_id() const {
  return *reference_.basic_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_basic_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.basic_id)
  if (has_basic_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.basic_id_;
    reference_.basic_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::basic_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.basic_id)
  return has_basic_id()
      ? *reference_.basic_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_basic_id() {
  if (!has_basic_id()) {
    clear_reference();
    set_has_basic_id();
    reference_.basic_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.basic_id)
  return reference_.basic_id_;
}

// .google.fhir.stu3.proto.ReferenceId binary_id = 13;
inline bool Reference::has_binary_id() const {
  return reference_case() == kBinaryId;
}
inline void Reference::set_has_binary_id() {
  _oneof_case_[0] = kBinaryId;
}
inline void Reference::clear_binary_id() {
  if (has_binary_id()) {
    delete reference_.binary_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_binary_id() const {
  return *reference_.binary_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_binary_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.binary_id)
  if (has_binary_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.binary_id_;
    reference_.binary_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::binary_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.binary_id)
  return has_binary_id()
      ? *reference_.binary_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_binary_id() {
  if (!has_binary_id()) {
    clear_reference();
    set_has_binary_id();
    reference_.binary_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.binary_id)
  return reference_.binary_id_;
}

// .google.fhir.stu3.proto.ReferenceId body_site_id = 14;
inline bool Reference::has_body_site_id() const {
  return reference_case() == kBodySiteId;
}
inline void Reference::set_has_body_site_id() {
  _oneof_case_[0] = kBodySiteId;
}
inline void Reference::clear_body_site_id() {
  if (has_body_site_id()) {
    delete reference_.body_site_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_body_site_id() const {
  return *reference_.body_site_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_body_site_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.body_site_id)
  if (has_body_site_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.body_site_id_;
    reference_.body_site_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::body_site_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.body_site_id)
  return has_body_site_id()
      ? *reference_.body_site_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_body_site_id() {
  if (!has_body_site_id()) {
    clear_reference();
    set_has_body_site_id();
    reference_.body_site_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.body_site_id)
  return reference_.body_site_id_;
}

// .google.fhir.stu3.proto.ReferenceId bundle_id = 15;
inline bool Reference::has_bundle_id() const {
  return reference_case() == kBundleId;
}
inline void Reference::set_has_bundle_id() {
  _oneof_case_[0] = kBundleId;
}
inline void Reference::clear_bundle_id() {
  if (has_bundle_id()) {
    delete reference_.bundle_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_bundle_id() const {
  return *reference_.bundle_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_bundle_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.bundle_id)
  if (has_bundle_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.bundle_id_;
    reference_.bundle_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::bundle_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.bundle_id)
  return has_bundle_id()
      ? *reference_.bundle_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_bundle_id() {
  if (!has_bundle_id()) {
    clear_reference();
    set_has_bundle_id();
    reference_.bundle_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.bundle_id)
  return reference_.bundle_id_;
}

// .google.fhir.stu3.proto.ReferenceId capability_statement_id = 16;
inline bool Reference::has_capability_statement_id() const {
  return reference_case() == kCapabilityStatementId;
}
inline void Reference::set_has_capability_statement_id() {
  _oneof_case_[0] = kCapabilityStatementId;
}
inline void Reference::clear_capability_statement_id() {
  if (has_capability_statement_id()) {
    delete reference_.capability_statement_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_capability_statement_id() const {
  return *reference_.capability_statement_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_capability_statement_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.capability_statement_id)
  if (has_capability_statement_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.capability_statement_id_;
    reference_.capability_statement_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::capability_statement_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.capability_statement_id)
  return has_capability_statement_id()
      ? *reference_.capability_statement_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_capability_statement_id() {
  if (!has_capability_statement_id()) {
    clear_reference();
    set_has_capability_statement_id();
    reference_.capability_statement_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.capability_statement_id)
  return reference_.capability_statement_id_;
}

// .google.fhir.stu3.proto.ReferenceId care_plan_id = 17;
inline bool Reference::has_care_plan_id() const {
  return reference_case() == kCarePlanId;
}
inline void Reference::set_has_care_plan_id() {
  _oneof_case_[0] = kCarePlanId;
}
inline void Reference::clear_care_plan_id() {
  if (has_care_plan_id()) {
    delete reference_.care_plan_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_care_plan_id() const {
  return *reference_.care_plan_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_care_plan_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.care_plan_id)
  if (has_care_plan_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.care_plan_id_;
    reference_.care_plan_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::care_plan_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.care_plan_id)
  return has_care_plan_id()
      ? *reference_.care_plan_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_care_plan_id() {
  if (!has_care_plan_id()) {
    clear_reference();
    set_has_care_plan_id();
    reference_.care_plan_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.care_plan_id)
  return reference_.care_plan_id_;
}

// .google.fhir.stu3.proto.ReferenceId care_team_id = 18;
inline bool Reference::has_care_team_id() const {
  return reference_case() == kCareTeamId;
}
inline void Reference::set_has_care_team_id() {
  _oneof_case_[0] = kCareTeamId;
}
inline void Reference::clear_care_team_id() {
  if (has_care_team_id()) {
    delete reference_.care_team_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_care_team_id() const {
  return *reference_.care_team_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_care_team_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.care_team_id)
  if (has_care_team_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.care_team_id_;
    reference_.care_team_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::care_team_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.care_team_id)
  return has_care_team_id()
      ? *reference_.care_team_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_care_team_id() {
  if (!has_care_team_id()) {
    clear_reference();
    set_has_care_team_id();
    reference_.care_team_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.care_team_id)
  return reference_.care_team_id_;
}

// .google.fhir.stu3.proto.ReferenceId charge_item_id = 19;
inline bool Reference::has_charge_item_id() const {
  return reference_case() == kChargeItemId;
}
inline void Reference::set_has_charge_item_id() {
  _oneof_case_[0] = kChargeItemId;
}
inline void Reference::clear_charge_item_id() {
  if (has_charge_item_id()) {
    delete reference_.charge_item_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_charge_item_id() const {
  return *reference_.charge_item_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_charge_item_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.charge_item_id)
  if (has_charge_item_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.charge_item_id_;
    reference_.charge_item_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::charge_item_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.charge_item_id)
  return has_charge_item_id()
      ? *reference_.charge_item_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_charge_item_id() {
  if (!has_charge_item_id()) {
    clear_reference();
    set_has_charge_item_id();
    reference_.charge_item_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.charge_item_id)
  return reference_.charge_item_id_;
}

// .google.fhir.stu3.proto.ReferenceId claim_id = 20;
inline bool Reference::has_claim_id() const {
  return reference_case() == kClaimId;
}
inline void Reference::set_has_claim_id() {
  _oneof_case_[0] = kClaimId;
}
inline void Reference::clear_claim_id() {
  if (has_claim_id()) {
    delete reference_.claim_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_claim_id() const {
  return *reference_.claim_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_claim_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.claim_id)
  if (has_claim_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.claim_id_;
    reference_.claim_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::claim_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.claim_id)
  return has_claim_id()
      ? *reference_.claim_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_claim_id() {
  if (!has_claim_id()) {
    clear_reference();
    set_has_claim_id();
    reference_.claim_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.claim_id)
  return reference_.claim_id_;
}

// .google.fhir.stu3.proto.ReferenceId claim_response_id = 21;
inline bool Reference::has_claim_response_id() const {
  return reference_case() == kClaimResponseId;
}
inline void Reference::set_has_claim_response_id() {
  _oneof_case_[0] = kClaimResponseId;
}
inline void Reference::clear_claim_response_id() {
  if (has_claim_response_id()) {
    delete reference_.claim_response_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_claim_response_id() const {
  return *reference_.claim_response_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_claim_response_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.claim_response_id)
  if (has_claim_response_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.claim_response_id_;
    reference_.claim_response_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::claim_response_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.claim_response_id)
  return has_claim_response_id()
      ? *reference_.claim_response_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_claim_response_id() {
  if (!has_claim_response_id()) {
    clear_reference();
    set_has_claim_response_id();
    reference_.claim_response_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.claim_response_id)
  return reference_.claim_response_id_;
}

// .google.fhir.stu3.proto.ReferenceId clinical_impression_id = 22;
inline bool Reference::has_clinical_impression_id() const {
  return reference_case() == kClinicalImpressionId;
}
inline void Reference::set_has_clinical_impression_id() {
  _oneof_case_[0] = kClinicalImpressionId;
}
inline void Reference::clear_clinical_impression_id() {
  if (has_clinical_impression_id()) {
    delete reference_.clinical_impression_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_clinical_impression_id() const {
  return *reference_.clinical_impression_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_clinical_impression_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.clinical_impression_id)
  if (has_clinical_impression_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.clinical_impression_id_;
    reference_.clinical_impression_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::clinical_impression_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.clinical_impression_id)
  return has_clinical_impression_id()
      ? *reference_.clinical_impression_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_clinical_impression_id() {
  if (!has_clinical_impression_id()) {
    clear_reference();
    set_has_clinical_impression_id();
    reference_.clinical_impression_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.clinical_impression_id)
  return reference_.clinical_impression_id_;
}

// .google.fhir.stu3.proto.ReferenceId code_system_id = 23;
inline bool Reference::has_code_system_id() const {
  return reference_case() == kCodeSystemId;
}
inline void Reference::set_has_code_system_id() {
  _oneof_case_[0] = kCodeSystemId;
}
inline void Reference::clear_code_system_id() {
  if (has_code_system_id()) {
    delete reference_.code_system_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_code_system_id() const {
  return *reference_.code_system_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_code_system_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.code_system_id)
  if (has_code_system_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.code_system_id_;
    reference_.code_system_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::code_system_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.code_system_id)
  return has_code_system_id()
      ? *reference_.code_system_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_code_system_id() {
  if (!has_code_system_id()) {
    clear_reference();
    set_has_code_system_id();
    reference_.code_system_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.code_system_id)
  return reference_.code_system_id_;
}

// .google.fhir.stu3.proto.ReferenceId communication_id = 24;
inline bool Reference::has_communication_id() const {
  return reference_case() == kCommunicationId;
}
inline void Reference::set_has_communication_id() {
  _oneof_case_[0] = kCommunicationId;
}
inline void Reference::clear_communication_id() {
  if (has_communication_id()) {
    delete reference_.communication_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_communication_id() const {
  return *reference_.communication_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_communication_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.communication_id)
  if (has_communication_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.communication_id_;
    reference_.communication_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::communication_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.communication_id)
  return has_communication_id()
      ? *reference_.communication_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_communication_id() {
  if (!has_communication_id()) {
    clear_reference();
    set_has_communication_id();
    reference_.communication_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.communication_id)
  return reference_.communication_id_;
}

// .google.fhir.stu3.proto.ReferenceId communication_request_id = 25;
inline bool Reference::has_communication_request_id() const {
  return reference_case() == kCommunicationRequestId;
}
inline void Reference::set_has_communication_request_id() {
  _oneof_case_[0] = kCommunicationRequestId;
}
inline void Reference::clear_communication_request_id() {
  if (has_communication_request_id()) {
    delete reference_.communication_request_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_communication_request_id() const {
  return *reference_.communication_request_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_communication_request_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.communication_request_id)
  if (has_communication_request_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.communication_request_id_;
    reference_.communication_request_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::communication_request_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.communication_request_id)
  return has_communication_request_id()
      ? *reference_.communication_request_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_communication_request_id() {
  if (!has_communication_request_id()) {
    clear_reference();
    set_has_communication_request_id();
    reference_.communication_request_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.communication_request_id)
  return reference_.communication_request_id_;
}

// .google.fhir.stu3.proto.ReferenceId compartment_definition_id = 26;
inline bool Reference::has_compartment_definition_id() const {
  return reference_case() == kCompartmentDefinitionId;
}
inline void Reference::set_has_compartment_definition_id() {
  _oneof_case_[0] = kCompartmentDefinitionId;
}
inline void Reference::clear_compartment_definition_id() {
  if (has_compartment_definition_id()) {
    delete reference_.compartment_definition_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_compartment_definition_id() const {
  return *reference_.compartment_definition_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_compartment_definition_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.compartment_definition_id)
  if (has_compartment_definition_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.compartment_definition_id_;
    reference_.compartment_definition_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::compartment_definition_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.compartment_definition_id)
  return has_compartment_definition_id()
      ? *reference_.compartment_definition_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_compartment_definition_id() {
  if (!has_compartment_definition_id()) {
    clear_reference();
    set_has_compartment_definition_id();
    reference_.compartment_definition_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.compartment_definition_id)
  return reference_.compartment_definition_id_;
}

// .google.fhir.stu3.proto.ReferenceId composition_id = 27;
inline bool Reference::has_composition_id() const {
  return reference_case() == kCompositionId;
}
inline void Reference::set_has_composition_id() {
  _oneof_case_[0] = kCompositionId;
}
inline void Reference::clear_composition_id() {
  if (has_composition_id()) {
    delete reference_.composition_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_composition_id() const {
  return *reference_.composition_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_composition_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.composition_id)
  if (has_composition_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.composition_id_;
    reference_.composition_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::composition_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.composition_id)
  return has_composition_id()
      ? *reference_.composition_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_composition_id() {
  if (!has_composition_id()) {
    clear_reference();
    set_has_composition_id();
    reference_.composition_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.composition_id)
  return reference_.composition_id_;
}

// .google.fhir.stu3.proto.ReferenceId concept_map_id = 28;
inline bool Reference::has_concept_map_id() const {
  return reference_case() == kConceptMapId;
}
inline void Reference::set_has_concept_map_id() {
  _oneof_case_[0] = kConceptMapId;
}
inline void Reference::clear_concept_map_id() {
  if (has_concept_map_id()) {
    delete reference_.concept_map_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_concept_map_id() const {
  return *reference_.concept_map_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_concept_map_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.concept_map_id)
  if (has_concept_map_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.concept_map_id_;
    reference_.concept_map_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::concept_map_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.concept_map_id)
  return has_concept_map_id()
      ? *reference_.concept_map_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_concept_map_id() {
  if (!has_concept_map_id()) {
    clear_reference();
    set_has_concept_map_id();
    reference_.concept_map_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.concept_map_id)
  return reference_.concept_map_id_;
}

// .google.fhir.stu3.proto.ReferenceId condition_id = 29;
inline bool Reference::has_condition_id() const {
  return reference_case() == kConditionId;
}
inline void Reference::set_has_condition_id() {
  _oneof_case_[0] = kConditionId;
}
inline void Reference::clear_condition_id() {
  if (has_condition_id()) {
    delete reference_.condition_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_condition_id() const {
  return *reference_.condition_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_condition_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.condition_id)
  if (has_condition_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.condition_id_;
    reference_.condition_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::condition_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.condition_id)
  return has_condition_id()
      ? *reference_.condition_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_condition_id() {
  if (!has_condition_id()) {
    clear_reference();
    set_has_condition_id();
    reference_.condition_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.condition_id)
  return reference_.condition_id_;
}

// .google.fhir.stu3.proto.ReferenceId consent_id = 30;
inline bool Reference::has_consent_id() const {
  return reference_case() == kConsentId;
}
inline void Reference::set_has_consent_id() {
  _oneof_case_[0] = kConsentId;
}
inline void Reference::clear_consent_id() {
  if (has_consent_id()) {
    delete reference_.consent_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_consent_id() const {
  return *reference_.consent_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_consent_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.consent_id)
  if (has_consent_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.consent_id_;
    reference_.consent_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::consent_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.consent_id)
  return has_consent_id()
      ? *reference_.consent_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_consent_id() {
  if (!has_consent_id()) {
    clear_reference();
    set_has_consent_id();
    reference_.consent_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.consent_id)
  return reference_.consent_id_;
}

// .google.fhir.stu3.proto.ReferenceId contract_id = 31;
inline bool Reference::has_contract_id() const {
  return reference_case() == kContractId;
}
inline void Reference::set_has_contract_id() {
  _oneof_case_[0] = kContractId;
}
inline void Reference::clear_contract_id() {
  if (has_contract_id()) {
    delete reference_.contract_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_contract_id() const {
  return *reference_.contract_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_contract_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.contract_id)
  if (has_contract_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.contract_id_;
    reference_.contract_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::contract_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.contract_id)
  return has_contract_id()
      ? *reference_.contract_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_contract_id() {
  if (!has_contract_id()) {
    clear_reference();
    set_has_contract_id();
    reference_.contract_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.contract_id)
  return reference_.contract_id_;
}

// .google.fhir.stu3.proto.ReferenceId coverage_id = 32;
inline bool Reference::has_coverage_id() const {
  return reference_case() == kCoverageId;
}
inline void Reference::set_has_coverage_id() {
  _oneof_case_[0] = kCoverageId;
}
inline void Reference::clear_coverage_id() {
  if (has_coverage_id()) {
    delete reference_.coverage_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_coverage_id() const {
  return *reference_.coverage_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_coverage_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.coverage_id)
  if (has_coverage_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.coverage_id_;
    reference_.coverage_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::coverage_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.coverage_id)
  return has_coverage_id()
      ? *reference_.coverage_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_coverage_id() {
  if (!has_coverage_id()) {
    clear_reference();
    set_has_coverage_id();
    reference_.coverage_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.coverage_id)
  return reference_.coverage_id_;
}

// .google.fhir.stu3.proto.ReferenceId data_element_id = 33;
inline bool Reference::has_data_element_id() const {
  return reference_case() == kDataElementId;
}
inline void Reference::set_has_data_element_id() {
  _oneof_case_[0] = kDataElementId;
}
inline void Reference::clear_data_element_id() {
  if (has_data_element_id()) {
    delete reference_.data_element_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_data_element_id() const {
  return *reference_.data_element_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_data_element_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.data_element_id)
  if (has_data_element_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.data_element_id_;
    reference_.data_element_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::data_element_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.data_element_id)
  return has_data_element_id()
      ? *reference_.data_element_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_data_element_id() {
  if (!has_data_element_id()) {
    clear_reference();
    set_has_data_element_id();
    reference_.data_element_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.data_element_id)
  return reference_.data_element_id_;
}

// .google.fhir.stu3.proto.ReferenceId detected_issue_id = 34;
inline bool Reference::has_detected_issue_id() const {
  return reference_case() == kDetectedIssueId;
}
inline void Reference::set_has_detected_issue_id() {
  _oneof_case_[0] = kDetectedIssueId;
}
inline void Reference::clear_detected_issue_id() {
  if (has_detected_issue_id()) {
    delete reference_.detected_issue_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_detected_issue_id() const {
  return *reference_.detected_issue_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_detected_issue_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.detected_issue_id)
  if (has_detected_issue_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.detected_issue_id_;
    reference_.detected_issue_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::detected_issue_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.detected_issue_id)
  return has_detected_issue_id()
      ? *reference_.detected_issue_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_detected_issue_id() {
  if (!has_detected_issue_id()) {
    clear_reference();
    set_has_detected_issue_id();
    reference_.detected_issue_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.detected_issue_id)
  return reference_.detected_issue_id_;
}

// .google.fhir.stu3.proto.ReferenceId device_id = 35;
inline bool Reference::has_device_id() const {
  return reference_case() == kDeviceId;
}
inline void Reference::set_has_device_id() {
  _oneof_case_[0] = kDeviceId;
}
inline void Reference::clear_device_id() {
  if (has_device_id()) {
    delete reference_.device_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_device_id() const {
  return *reference_.device_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_device_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.device_id)
  if (has_device_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.device_id_;
    reference_.device_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::device_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.device_id)
  return has_device_id()
      ? *reference_.device_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_device_id() {
  if (!has_device_id()) {
    clear_reference();
    set_has_device_id();
    reference_.device_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.device_id)
  return reference_.device_id_;
}

// .google.fhir.stu3.proto.ReferenceId device_component_id = 36;
inline bool Reference::has_device_component_id() const {
  return reference_case() == kDeviceComponentId;
}
inline void Reference::set_has_device_component_id() {
  _oneof_case_[0] = kDeviceComponentId;
}
inline void Reference::clear_device_component_id() {
  if (has_device_component_id()) {
    delete reference_.device_component_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_device_component_id() const {
  return *reference_.device_component_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_device_component_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.device_component_id)
  if (has_device_component_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.device_component_id_;
    reference_.device_component_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::device_component_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.device_component_id)
  return has_device_component_id()
      ? *reference_.device_component_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_device_component_id() {
  if (!has_device_component_id()) {
    clear_reference();
    set_has_device_component_id();
    reference_.device_component_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.device_component_id)
  return reference_.device_component_id_;
}

// .google.fhir.stu3.proto.ReferenceId device_metric_id = 37;
inline bool Reference::has_device_metric_id() const {
  return reference_case() == kDeviceMetricId;
}
inline void Reference::set_has_device_metric_id() {
  _oneof_case_[0] = kDeviceMetricId;
}
inline void Reference::clear_device_metric_id() {
  if (has_device_metric_id()) {
    delete reference_.device_metric_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_device_metric_id() const {
  return *reference_.device_metric_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_device_metric_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.device_metric_id)
  if (has_device_metric_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.device_metric_id_;
    reference_.device_metric_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::device_metric_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.device_metric_id)
  return has_device_metric_id()
      ? *reference_.device_metric_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_device_metric_id() {
  if (!has_device_metric_id()) {
    clear_reference();
    set_has_device_metric_id();
    reference_.device_metric_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.device_metric_id)
  return reference_.device_metric_id_;
}

// .google.fhir.stu3.proto.ReferenceId device_request_id = 38;
inline bool Reference::has_device_request_id() const {
  return reference_case() == kDeviceRequestId;
}
inline void Reference::set_has_device_request_id() {
  _oneof_case_[0] = kDeviceRequestId;
}
inline void Reference::clear_device_request_id() {
  if (has_device_request_id()) {
    delete reference_.device_request_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_device_request_id() const {
  return *reference_.device_request_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_device_request_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.device_request_id)
  if (has_device_request_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.device_request_id_;
    reference_.device_request_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::device_request_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.device_request_id)
  return has_device_request_id()
      ? *reference_.device_request_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_device_request_id() {
  if (!has_device_request_id()) {
    clear_reference();
    set_has_device_request_id();
    reference_.device_request_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.device_request_id)
  return reference_.device_request_id_;
}

// .google.fhir.stu3.proto.ReferenceId device_use_statement_id = 39;
inline bool Reference::has_device_use_statement_id() const {
  return reference_case() == kDeviceUseStatementId;
}
inline void Reference::set_has_device_use_statement_id() {
  _oneof_case_[0] = kDeviceUseStatementId;
}
inline void Reference::clear_device_use_statement_id() {
  if (has_device_use_statement_id()) {
    delete reference_.device_use_statement_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_device_use_statement_id() const {
  return *reference_.device_use_statement_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_device_use_statement_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.device_use_statement_id)
  if (has_device_use_statement_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.device_use_statement_id_;
    reference_.device_use_statement_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::device_use_statement_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.device_use_statement_id)
  return has_device_use_statement_id()
      ? *reference_.device_use_statement_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_device_use_statement_id() {
  if (!has_device_use_statement_id()) {
    clear_reference();
    set_has_device_use_statement_id();
    reference_.device_use_statement_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.device_use_statement_id)
  return reference_.device_use_statement_id_;
}

// .google.fhir.stu3.proto.ReferenceId diagnostic_report_id = 40;
inline bool Reference::has_diagnostic_report_id() const {
  return reference_case() == kDiagnosticReportId;
}
inline void Reference::set_has_diagnostic_report_id() {
  _oneof_case_[0] = kDiagnosticReportId;
}
inline void Reference::clear_diagnostic_report_id() {
  if (has_diagnostic_report_id()) {
    delete reference_.diagnostic_report_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_diagnostic_report_id() const {
  return *reference_.diagnostic_report_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_diagnostic_report_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.diagnostic_report_id)
  if (has_diagnostic_report_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.diagnostic_report_id_;
    reference_.diagnostic_report_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::diagnostic_report_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.diagnostic_report_id)
  return has_diagnostic_report_id()
      ? *reference_.diagnostic_report_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_diagnostic_report_id() {
  if (!has_diagnostic_report_id()) {
    clear_reference();
    set_has_diagnostic_report_id();
    reference_.diagnostic_report_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.diagnostic_report_id)
  return reference_.diagnostic_report_id_;
}

// .google.fhir.stu3.proto.ReferenceId document_manifest_id = 41;
inline bool Reference::has_document_manifest_id() const {
  return reference_case() == kDocumentManifestId;
}
inline void Reference::set_has_document_manifest_id() {
  _oneof_case_[0] = kDocumentManifestId;
}
inline void Reference::clear_document_manifest_id() {
  if (has_document_manifest_id()) {
    delete reference_.document_manifest_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_document_manifest_id() const {
  return *reference_.document_manifest_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_document_manifest_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.document_manifest_id)
  if (has_document_manifest_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.document_manifest_id_;
    reference_.document_manifest_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::document_manifest_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.document_manifest_id)
  return has_document_manifest_id()
      ? *reference_.document_manifest_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_document_manifest_id() {
  if (!has_document_manifest_id()) {
    clear_reference();
    set_has_document_manifest_id();
    reference_.document_manifest_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.document_manifest_id)
  return reference_.document_manifest_id_;
}

// .google.fhir.stu3.proto.ReferenceId document_reference_id = 42;
inline bool Reference::has_document_reference_id() const {
  return reference_case() == kDocumentReferenceId;
}
inline void Reference::set_has_document_reference_id() {
  _oneof_case_[0] = kDocumentReferenceId;
}
inline void Reference::clear_document_reference_id() {
  if (has_document_reference_id()) {
    delete reference_.document_reference_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_document_reference_id() const {
  return *reference_.document_reference_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_document_reference_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.document_reference_id)
  if (has_document_reference_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.document_reference_id_;
    reference_.document_reference_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::document_reference_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.document_reference_id)
  return has_document_reference_id()
      ? *reference_.document_reference_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_document_reference_id() {
  if (!has_document_reference_id()) {
    clear_reference();
    set_has_document_reference_id();
    reference_.document_reference_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.document_reference_id)
  return reference_.document_reference_id_;
}

// .google.fhir.stu3.proto.ReferenceId eligibility_request_id = 43;
inline bool Reference::has_eligibility_request_id() const {
  return reference_case() == kEligibilityRequestId;
}
inline void Reference::set_has_eligibility_request_id() {
  _oneof_case_[0] = kEligibilityRequestId;
}
inline void Reference::clear_eligibility_request_id() {
  if (has_eligibility_request_id()) {
    delete reference_.eligibility_request_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_eligibility_request_id() const {
  return *reference_.eligibility_request_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_eligibility_request_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.eligibility_request_id)
  if (has_eligibility_request_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.eligibility_request_id_;
    reference_.eligibility_request_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::eligibility_request_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.eligibility_request_id)
  return has_eligibility_request_id()
      ? *reference_.eligibility_request_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_eligibility_request_id() {
  if (!has_eligibility_request_id()) {
    clear_reference();
    set_has_eligibility_request_id();
    reference_.eligibility_request_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.eligibility_request_id)
  return reference_.eligibility_request_id_;
}

// .google.fhir.stu3.proto.ReferenceId eligibility_response_id = 44;
inline bool Reference::has_eligibility_response_id() const {
  return reference_case() == kEligibilityResponseId;
}
inline void Reference::set_has_eligibility_response_id() {
  _oneof_case_[0] = kEligibilityResponseId;
}
inline void Reference::clear_eligibility_response_id() {
  if (has_eligibility_response_id()) {
    delete reference_.eligibility_response_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_eligibility_response_id() const {
  return *reference_.eligibility_response_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_eligibility_response_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.eligibility_response_id)
  if (has_eligibility_response_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.eligibility_response_id_;
    reference_.eligibility_response_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::eligibility_response_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.eligibility_response_id)
  return has_eligibility_response_id()
      ? *reference_.eligibility_response_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_eligibility_response_id() {
  if (!has_eligibility_response_id()) {
    clear_reference();
    set_has_eligibility_response_id();
    reference_.eligibility_response_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.eligibility_response_id)
  return reference_.eligibility_response_id_;
}

// .google.fhir.stu3.proto.ReferenceId encounter_id = 45;
inline bool Reference::has_encounter_id() const {
  return reference_case() == kEncounterId;
}
inline void Reference::set_has_encounter_id() {
  _oneof_case_[0] = kEncounterId;
}
inline void Reference::clear_encounter_id() {
  if (has_encounter_id()) {
    delete reference_.encounter_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_encounter_id() const {
  return *reference_.encounter_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_encounter_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.encounter_id)
  if (has_encounter_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.encounter_id_;
    reference_.encounter_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::encounter_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.encounter_id)
  return has_encounter_id()
      ? *reference_.encounter_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_encounter_id() {
  if (!has_encounter_id()) {
    clear_reference();
    set_has_encounter_id();
    reference_.encounter_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.encounter_id)
  return reference_.encounter_id_;
}

// .google.fhir.stu3.proto.ReferenceId endpoint_id = 46;
inline bool Reference::has_endpoint_id() const {
  return reference_case() == kEndpointId;
}
inline void Reference::set_has_endpoint_id() {
  _oneof_case_[0] = kEndpointId;
}
inline void Reference::clear_endpoint_id() {
  if (has_endpoint_id()) {
    delete reference_.endpoint_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_endpoint_id() const {
  return *reference_.endpoint_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_endpoint_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.endpoint_id)
  if (has_endpoint_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.endpoint_id_;
    reference_.endpoint_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::endpoint_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.endpoint_id)
  return has_endpoint_id()
      ? *reference_.endpoint_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_endpoint_id() {
  if (!has_endpoint_id()) {
    clear_reference();
    set_has_endpoint_id();
    reference_.endpoint_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.endpoint_id)
  return reference_.endpoint_id_;
}

// .google.fhir.stu3.proto.ReferenceId enrollment_request_id = 47;
inline bool Reference::has_enrollment_request_id() const {
  return reference_case() == kEnrollmentRequestId;
}
inline void Reference::set_has_enrollment_request_id() {
  _oneof_case_[0] = kEnrollmentRequestId;
}
inline void Reference::clear_enrollment_request_id() {
  if (has_enrollment_request_id()) {
    delete reference_.enrollment_request_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_enrollment_request_id() const {
  return *reference_.enrollment_request_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_enrollment_request_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.enrollment_request_id)
  if (has_enrollment_request_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.enrollment_request_id_;
    reference_.enrollment_request_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::enrollment_request_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.enrollment_request_id)
  return has_enrollment_request_id()
      ? *reference_.enrollment_request_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_enrollment_request_id() {
  if (!has_enrollment_request_id()) {
    clear_reference();
    set_has_enrollment_request_id();
    reference_.enrollment_request_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.enrollment_request_id)
  return reference_.enrollment_request_id_;
}

// .google.fhir.stu3.proto.ReferenceId enrollment_response_id = 48;
inline bool Reference::has_enrollment_response_id() const {
  return reference_case() == kEnrollmentResponseId;
}
inline void Reference::set_has_enrollment_response_id() {
  _oneof_case_[0] = kEnrollmentResponseId;
}
inline void Reference::clear_enrollment_response_id() {
  if (has_enrollment_response_id()) {
    delete reference_.enrollment_response_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_enrollment_response_id() const {
  return *reference_.enrollment_response_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_enrollment_response_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.enrollment_response_id)
  if (has_enrollment_response_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.enrollment_response_id_;
    reference_.enrollment_response_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::enrollment_response_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.enrollment_response_id)
  return has_enrollment_response_id()
      ? *reference_.enrollment_response_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_enrollment_response_id() {
  if (!has_enrollment_response_id()) {
    clear_reference();
    set_has_enrollment_response_id();
    reference_.enrollment_response_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.enrollment_response_id)
  return reference_.enrollment_response_id_;
}

// .google.fhir.stu3.proto.ReferenceId episode_of_care_id = 49;
inline bool Reference::has_episode_of_care_id() const {
  return reference_case() == kEpisodeOfCareId;
}
inline void Reference::set_has_episode_of_care_id() {
  _oneof_case_[0] = kEpisodeOfCareId;
}
inline void Reference::clear_episode_of_care_id() {
  if (has_episode_of_care_id()) {
    delete reference_.episode_of_care_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_episode_of_care_id() const {
  return *reference_.episode_of_care_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_episode_of_care_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.episode_of_care_id)
  if (has_episode_of_care_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.episode_of_care_id_;
    reference_.episode_of_care_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::episode_of_care_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.episode_of_care_id)
  return has_episode_of_care_id()
      ? *reference_.episode_of_care_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_episode_of_care_id() {
  if (!has_episode_of_care_id()) {
    clear_reference();
    set_has_episode_of_care_id();
    reference_.episode_of_care_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.episode_of_care_id)
  return reference_.episode_of_care_id_;
}

// .google.fhir.stu3.proto.ReferenceId expansion_profile_id = 50;
inline bool Reference::has_expansion_profile_id() const {
  return reference_case() == kExpansionProfileId;
}
inline void Reference::set_has_expansion_profile_id() {
  _oneof_case_[0] = kExpansionProfileId;
}
inline void Reference::clear_expansion_profile_id() {
  if (has_expansion_profile_id()) {
    delete reference_.expansion_profile_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_expansion_profile_id() const {
  return *reference_.expansion_profile_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_expansion_profile_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.expansion_profile_id)
  if (has_expansion_profile_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.expansion_profile_id_;
    reference_.expansion_profile_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::expansion_profile_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.expansion_profile_id)
  return has_expansion_profile_id()
      ? *reference_.expansion_profile_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_expansion_profile_id() {
  if (!has_expansion_profile_id()) {
    clear_reference();
    set_has_expansion_profile_id();
    reference_.expansion_profile_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.expansion_profile_id)
  return reference_.expansion_profile_id_;
}

// .google.fhir.stu3.proto.ReferenceId explanation_of_benefit_id = 51;
inline bool Reference::has_explanation_of_benefit_id() const {
  return reference_case() == kExplanationOfBenefitId;
}
inline void Reference::set_has_explanation_of_benefit_id() {
  _oneof_case_[0] = kExplanationOfBenefitId;
}
inline void Reference::clear_explanation_of_benefit_id() {
  if (has_explanation_of_benefit_id()) {
    delete reference_.explanation_of_benefit_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_explanation_of_benefit_id() const {
  return *reference_.explanation_of_benefit_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_explanation_of_benefit_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.explanation_of_benefit_id)
  if (has_explanation_of_benefit_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.explanation_of_benefit_id_;
    reference_.explanation_of_benefit_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::explanation_of_benefit_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.explanation_of_benefit_id)
  return has_explanation_of_benefit_id()
      ? *reference_.explanation_of_benefit_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_explanation_of_benefit_id() {
  if (!has_explanation_of_benefit_id()) {
    clear_reference();
    set_has_explanation_of_benefit_id();
    reference_.explanation_of_benefit_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.explanation_of_benefit_id)
  return reference_.explanation_of_benefit_id_;
}

// .google.fhir.stu3.proto.ReferenceId family_member_history_id = 52;
inline bool Reference::has_family_member_history_id() const {
  return reference_case() == kFamilyMemberHistoryId;
}
inline void Reference::set_has_family_member_history_id() {
  _oneof_case_[0] = kFamilyMemberHistoryId;
}
inline void Reference::clear_family_member_history_id() {
  if (has_family_member_history_id()) {
    delete reference_.family_member_history_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_family_member_history_id() const {
  return *reference_.family_member_history_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_family_member_history_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.family_member_history_id)
  if (has_family_member_history_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.family_member_history_id_;
    reference_.family_member_history_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::family_member_history_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.family_member_history_id)
  return has_family_member_history_id()
      ? *reference_.family_member_history_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_family_member_history_id() {
  if (!has_family_member_history_id()) {
    clear_reference();
    set_has_family_member_history_id();
    reference_.family_member_history_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.family_member_history_id)
  return reference_.family_member_history_id_;
}

// .google.fhir.stu3.proto.ReferenceId flag_id = 53;
inline bool Reference::has_flag_id() const {
  return reference_case() == kFlagId;
}
inline void Reference::set_has_flag_id() {
  _oneof_case_[0] = kFlagId;
}
inline void Reference::clear_flag_id() {
  if (has_flag_id()) {
    delete reference_.flag_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_flag_id() const {
  return *reference_.flag_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_flag_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.flag_id)
  if (has_flag_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.flag_id_;
    reference_.flag_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::flag_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.flag_id)
  return has_flag_id()
      ? *reference_.flag_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_flag_id() {
  if (!has_flag_id()) {
    clear_reference();
    set_has_flag_id();
    reference_.flag_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.flag_id)
  return reference_.flag_id_;
}

// .google.fhir.stu3.proto.ReferenceId goal_id = 54;
inline bool Reference::has_goal_id() const {
  return reference_case() == kGoalId;
}
inline void Reference::set_has_goal_id() {
  _oneof_case_[0] = kGoalId;
}
inline void Reference::clear_goal_id() {
  if (has_goal_id()) {
    delete reference_.goal_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_goal_id() const {
  return *reference_.goal_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_goal_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.goal_id)
  if (has_goal_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.goal_id_;
    reference_.goal_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::goal_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.goal_id)
  return has_goal_id()
      ? *reference_.goal_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_goal_id() {
  if (!has_goal_id()) {
    clear_reference();
    set_has_goal_id();
    reference_.goal_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.goal_id)
  return reference_.goal_id_;
}

// .google.fhir.stu3.proto.ReferenceId graph_definition_id = 55;
inline bool Reference::has_graph_definition_id() const {
  return reference_case() == kGraphDefinitionId;
}
inline void Reference::set_has_graph_definition_id() {
  _oneof_case_[0] = kGraphDefinitionId;
}
inline void Reference::clear_graph_definition_id() {
  if (has_graph_definition_id()) {
    delete reference_.graph_definition_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_graph_definition_id() const {
  return *reference_.graph_definition_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_graph_definition_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.graph_definition_id)
  if (has_graph_definition_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.graph_definition_id_;
    reference_.graph_definition_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::graph_definition_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.graph_definition_id)
  return has_graph_definition_id()
      ? *reference_.graph_definition_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_graph_definition_id() {
  if (!has_graph_definition_id()) {
    clear_reference();
    set_has_graph_definition_id();
    reference_.graph_definition_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.graph_definition_id)
  return reference_.graph_definition_id_;
}

// .google.fhir.stu3.proto.ReferenceId group_id = 56;
inline bool Reference::has_group_id() const {
  return reference_case() == kGroupId;
}
inline void Reference::set_has_group_id() {
  _oneof_case_[0] = kGroupId;
}
inline void Reference::clear_group_id() {
  if (has_group_id()) {
    delete reference_.group_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_group_id() const {
  return *reference_.group_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_group_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.group_id)
  if (has_group_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.group_id_;
    reference_.group_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::group_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.group_id)
  return has_group_id()
      ? *reference_.group_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_group_id() {
  if (!has_group_id()) {
    clear_reference();
    set_has_group_id();
    reference_.group_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.group_id)
  return reference_.group_id_;
}

// .google.fhir.stu3.proto.ReferenceId guidance_response_id = 57;
inline bool Reference::has_guidance_response_id() const {
  return reference_case() == kGuidanceResponseId;
}
inline void Reference::set_has_guidance_response_id() {
  _oneof_case_[0] = kGuidanceResponseId;
}
inline void Reference::clear_guidance_response_id() {
  if (has_guidance_response_id()) {
    delete reference_.guidance_response_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_guidance_response_id() const {
  return *reference_.guidance_response_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_guidance_response_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.guidance_response_id)
  if (has_guidance_response_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.guidance_response_id_;
    reference_.guidance_response_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::guidance_response_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.guidance_response_id)
  return has_guidance_response_id()
      ? *reference_.guidance_response_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_guidance_response_id() {
  if (!has_guidance_response_id()) {
    clear_reference();
    set_has_guidance_response_id();
    reference_.guidance_response_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.guidance_response_id)
  return reference_.guidance_response_id_;
}

// .google.fhir.stu3.proto.ReferenceId healthcare_service_id = 58;
inline bool Reference::has_healthcare_service_id() const {
  return reference_case() == kHealthcareServiceId;
}
inline void Reference::set_has_healthcare_service_id() {
  _oneof_case_[0] = kHealthcareServiceId;
}
inline void Reference::clear_healthcare_service_id() {
  if (has_healthcare_service_id()) {
    delete reference_.healthcare_service_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_healthcare_service_id() const {
  return *reference_.healthcare_service_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_healthcare_service_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.healthcare_service_id)
  if (has_healthcare_service_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.healthcare_service_id_;
    reference_.healthcare_service_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::healthcare_service_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.healthcare_service_id)
  return has_healthcare_service_id()
      ? *reference_.healthcare_service_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_healthcare_service_id() {
  if (!has_healthcare_service_id()) {
    clear_reference();
    set_has_healthcare_service_id();
    reference_.healthcare_service_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.healthcare_service_id)
  return reference_.healthcare_service_id_;
}

// .google.fhir.stu3.proto.ReferenceId imaging_manifest_id = 59;
inline bool Reference::has_imaging_manifest_id() const {
  return reference_case() == kImagingManifestId;
}
inline void Reference::set_has_imaging_manifest_id() {
  _oneof_case_[0] = kImagingManifestId;
}
inline void Reference::clear_imaging_manifest_id() {
  if (has_imaging_manifest_id()) {
    delete reference_.imaging_manifest_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_imaging_manifest_id() const {
  return *reference_.imaging_manifest_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_imaging_manifest_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.imaging_manifest_id)
  if (has_imaging_manifest_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.imaging_manifest_id_;
    reference_.imaging_manifest_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::imaging_manifest_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.imaging_manifest_id)
  return has_imaging_manifest_id()
      ? *reference_.imaging_manifest_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_imaging_manifest_id() {
  if (!has_imaging_manifest_id()) {
    clear_reference();
    set_has_imaging_manifest_id();
    reference_.imaging_manifest_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.imaging_manifest_id)
  return reference_.imaging_manifest_id_;
}

// .google.fhir.stu3.proto.ReferenceId imaging_study_id = 60;
inline bool Reference::has_imaging_study_id() const {
  return reference_case() == kImagingStudyId;
}
inline void Reference::set_has_imaging_study_id() {
  _oneof_case_[0] = kImagingStudyId;
}
inline void Reference::clear_imaging_study_id() {
  if (has_imaging_study_id()) {
    delete reference_.imaging_study_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_imaging_study_id() const {
  return *reference_.imaging_study_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_imaging_study_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.imaging_study_id)
  if (has_imaging_study_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.imaging_study_id_;
    reference_.imaging_study_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::imaging_study_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.imaging_study_id)
  return has_imaging_study_id()
      ? *reference_.imaging_study_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_imaging_study_id() {
  if (!has_imaging_study_id()) {
    clear_reference();
    set_has_imaging_study_id();
    reference_.imaging_study_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.imaging_study_id)
  return reference_.imaging_study_id_;
}

// .google.fhir.stu3.proto.ReferenceId immunization_id = 61;
inline bool Reference::has_immunization_id() const {
  return reference_case() == kImmunizationId;
}
inline void Reference::set_has_immunization_id() {
  _oneof_case_[0] = kImmunizationId;
}
inline void Reference::clear_immunization_id() {
  if (has_immunization_id()) {
    delete reference_.immunization_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_immunization_id() const {
  return *reference_.immunization_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_immunization_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.immunization_id)
  if (has_immunization_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.immunization_id_;
    reference_.immunization_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::immunization_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.immunization_id)
  return has_immunization_id()
      ? *reference_.immunization_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_immunization_id() {
  if (!has_immunization_id()) {
    clear_reference();
    set_has_immunization_id();
    reference_.immunization_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.immunization_id)
  return reference_.immunization_id_;
}

// .google.fhir.stu3.proto.ReferenceId immunization_recommendation_id = 62;
inline bool Reference::has_immunization_recommendation_id() const {
  return reference_case() == kImmunizationRecommendationId;
}
inline void Reference::set_has_immunization_recommendation_id() {
  _oneof_case_[0] = kImmunizationRecommendationId;
}
inline void Reference::clear_immunization_recommendation_id() {
  if (has_immunization_recommendation_id()) {
    delete reference_.immunization_recommendation_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_immunization_recommendation_id() const {
  return *reference_.immunization_recommendation_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_immunization_recommendation_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.immunization_recommendation_id)
  if (has_immunization_recommendation_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.immunization_recommendation_id_;
    reference_.immunization_recommendation_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::immunization_recommendation_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.immunization_recommendation_id)
  return has_immunization_recommendation_id()
      ? *reference_.immunization_recommendation_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_immunization_recommendation_id() {
  if (!has_immunization_recommendation_id()) {
    clear_reference();
    set_has_immunization_recommendation_id();
    reference_.immunization_recommendation_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.immunization_recommendation_id)
  return reference_.immunization_recommendation_id_;
}

// .google.fhir.stu3.proto.ReferenceId implementation_guide_id = 63;
inline bool Reference::has_implementation_guide_id() const {
  return reference_case() == kImplementationGuideId;
}
inline void Reference::set_has_implementation_guide_id() {
  _oneof_case_[0] = kImplementationGuideId;
}
inline void Reference::clear_implementation_guide_id() {
  if (has_implementation_guide_id()) {
    delete reference_.implementation_guide_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_implementation_guide_id() const {
  return *reference_.implementation_guide_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_implementation_guide_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.implementation_guide_id)
  if (has_implementation_guide_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.implementation_guide_id_;
    reference_.implementation_guide_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::implementation_guide_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.implementation_guide_id)
  return has_implementation_guide_id()
      ? *reference_.implementation_guide_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_implementation_guide_id() {
  if (!has_implementation_guide_id()) {
    clear_reference();
    set_has_implementation_guide_id();
    reference_.implementation_guide_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.implementation_guide_id)
  return reference_.implementation_guide_id_;
}

// .google.fhir.stu3.proto.ReferenceId library_id = 64;
inline bool Reference::has_library_id() const {
  return reference_case() == kLibraryId;
}
inline void Reference::set_has_library_id() {
  _oneof_case_[0] = kLibraryId;
}
inline void Reference::clear_library_id() {
  if (has_library_id()) {
    delete reference_.library_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_library_id() const {
  return *reference_.library_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_library_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.library_id)
  if (has_library_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.library_id_;
    reference_.library_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::library_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.library_id)
  return has_library_id()
      ? *reference_.library_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_library_id() {
  if (!has_library_id()) {
    clear_reference();
    set_has_library_id();
    reference_.library_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.library_id)
  return reference_.library_id_;
}

// .google.fhir.stu3.proto.ReferenceId linkage_id = 65;
inline bool Reference::has_linkage_id() const {
  return reference_case() == kLinkageId;
}
inline void Reference::set_has_linkage_id() {
  _oneof_case_[0] = kLinkageId;
}
inline void Reference::clear_linkage_id() {
  if (has_linkage_id()) {
    delete reference_.linkage_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_linkage_id() const {
  return *reference_.linkage_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_linkage_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.linkage_id)
  if (has_linkage_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.linkage_id_;
    reference_.linkage_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::linkage_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.linkage_id)
  return has_linkage_id()
      ? *reference_.linkage_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_linkage_id() {
  if (!has_linkage_id()) {
    clear_reference();
    set_has_linkage_id();
    reference_.linkage_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.linkage_id)
  return reference_.linkage_id_;
}

// .google.fhir.stu3.proto.ReferenceId list_id = 66;
inline bool Reference::has_list_id() const {
  return reference_case() == kListId;
}
inline void Reference::set_has_list_id() {
  _oneof_case_[0] = kListId;
}
inline void Reference::clear_list_id() {
  if (has_list_id()) {
    delete reference_.list_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_list_id() const {
  return *reference_.list_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_list_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.list_id)
  if (has_list_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.list_id_;
    reference_.list_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::list_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.list_id)
  return has_list_id()
      ? *reference_.list_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_list_id() {
  if (!has_list_id()) {
    clear_reference();
    set_has_list_id();
    reference_.list_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.list_id)
  return reference_.list_id_;
}

// .google.fhir.stu3.proto.ReferenceId location_id = 67;
inline bool Reference::has_location_id() const {
  return reference_case() == kLocationId;
}
inline void Reference::set_has_location_id() {
  _oneof_case_[0] = kLocationId;
}
inline void Reference::clear_location_id() {
  if (has_location_id()) {
    delete reference_.location_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_location_id() const {
  return *reference_.location_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_location_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.location_id)
  if (has_location_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.location_id_;
    reference_.location_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::location_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.location_id)
  return has_location_id()
      ? *reference_.location_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_location_id() {
  if (!has_location_id()) {
    clear_reference();
    set_has_location_id();
    reference_.location_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.location_id)
  return reference_.location_id_;
}

// .google.fhir.stu3.proto.ReferenceId measure_id = 68;
inline bool Reference::has_measure_id() const {
  return reference_case() == kMeasureId;
}
inline void Reference::set_has_measure_id() {
  _oneof_case_[0] = kMeasureId;
}
inline void Reference::clear_measure_id() {
  if (has_measure_id()) {
    delete reference_.measure_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_measure_id() const {
  return *reference_.measure_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_measure_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.measure_id)
  if (has_measure_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.measure_id_;
    reference_.measure_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::measure_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.measure_id)
  return has_measure_id()
      ? *reference_.measure_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_measure_id() {
  if (!has_measure_id()) {
    clear_reference();
    set_has_measure_id();
    reference_.measure_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.measure_id)
  return reference_.measure_id_;
}

// .google.fhir.stu3.proto.ReferenceId measure_report_id = 69;
inline bool Reference::has_measure_report_id() const {
  return reference_case() == kMeasureReportId;
}
inline void Reference::set_has_measure_report_id() {
  _oneof_case_[0] = kMeasureReportId;
}
inline void Reference::clear_measure_report_id() {
  if (has_measure_report_id()) {
    delete reference_.measure_report_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_measure_report_id() const {
  return *reference_.measure_report_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_measure_report_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.measure_report_id)
  if (has_measure_report_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.measure_report_id_;
    reference_.measure_report_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::measure_report_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.measure_report_id)
  return has_measure_report_id()
      ? *reference_.measure_report_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_measure_report_id() {
  if (!has_measure_report_id()) {
    clear_reference();
    set_has_measure_report_id();
    reference_.measure_report_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.measure_report_id)
  return reference_.measure_report_id_;
}

// .google.fhir.stu3.proto.ReferenceId media_id = 70;
inline bool Reference::has_media_id() const {
  return reference_case() == kMediaId;
}
inline void Reference::set_has_media_id() {
  _oneof_case_[0] = kMediaId;
}
inline void Reference::clear_media_id() {
  if (has_media_id()) {
    delete reference_.media_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_media_id() const {
  return *reference_.media_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_media_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.media_id)
  if (has_media_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.media_id_;
    reference_.media_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::media_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.media_id)
  return has_media_id()
      ? *reference_.media_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_media_id() {
  if (!has_media_id()) {
    clear_reference();
    set_has_media_id();
    reference_.media_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.media_id)
  return reference_.media_id_;
}

// .google.fhir.stu3.proto.ReferenceId medication_id = 71;
inline bool Reference::has_medication_id() const {
  return reference_case() == kMedicationId;
}
inline void Reference::set_has_medication_id() {
  _oneof_case_[0] = kMedicationId;
}
inline void Reference::clear_medication_id() {
  if (has_medication_id()) {
    delete reference_.medication_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_medication_id() const {
  return *reference_.medication_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_medication_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.medication_id)
  if (has_medication_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.medication_id_;
    reference_.medication_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::medication_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.medication_id)
  return has_medication_id()
      ? *reference_.medication_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_medication_id() {
  if (!has_medication_id()) {
    clear_reference();
    set_has_medication_id();
    reference_.medication_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.medication_id)
  return reference_.medication_id_;
}

// .google.fhir.stu3.proto.ReferenceId medication_administration_id = 72;
inline bool Reference::has_medication_administration_id() const {
  return reference_case() == kMedicationAdministrationId;
}
inline void Reference::set_has_medication_administration_id() {
  _oneof_case_[0] = kMedicationAdministrationId;
}
inline void Reference::clear_medication_administration_id() {
  if (has_medication_administration_id()) {
    delete reference_.medication_administration_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_medication_administration_id() const {
  return *reference_.medication_administration_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_medication_administration_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.medication_administration_id)
  if (has_medication_administration_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.medication_administration_id_;
    reference_.medication_administration_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::medication_administration_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.medication_administration_id)
  return has_medication_administration_id()
      ? *reference_.medication_administration_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_medication_administration_id() {
  if (!has_medication_administration_id()) {
    clear_reference();
    set_has_medication_administration_id();
    reference_.medication_administration_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.medication_administration_id)
  return reference_.medication_administration_id_;
}

// .google.fhir.stu3.proto.ReferenceId medication_dispense_id = 73;
inline bool Reference::has_medication_dispense_id() const {
  return reference_case() == kMedicationDispenseId;
}
inline void Reference::set_has_medication_dispense_id() {
  _oneof_case_[0] = kMedicationDispenseId;
}
inline void Reference::clear_medication_dispense_id() {
  if (has_medication_dispense_id()) {
    delete reference_.medication_dispense_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_medication_dispense_id() const {
  return *reference_.medication_dispense_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_medication_dispense_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.medication_dispense_id)
  if (has_medication_dispense_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.medication_dispense_id_;
    reference_.medication_dispense_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::medication_dispense_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.medication_dispense_id)
  return has_medication_dispense_id()
      ? *reference_.medication_dispense_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_medication_dispense_id() {
  if (!has_medication_dispense_id()) {
    clear_reference();
    set_has_medication_dispense_id();
    reference_.medication_dispense_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.medication_dispense_id)
  return reference_.medication_dispense_id_;
}

// .google.fhir.stu3.proto.ReferenceId medication_request_id = 74;
inline bool Reference::has_medication_request_id() const {
  return reference_case() == kMedicationRequestId;
}
inline void Reference::set_has_medication_request_id() {
  _oneof_case_[0] = kMedicationRequestId;
}
inline void Reference::clear_medication_request_id() {
  if (has_medication_request_id()) {
    delete reference_.medication_request_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_medication_request_id() const {
  return *reference_.medication_request_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_medication_request_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.medication_request_id)
  if (has_medication_request_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.medication_request_id_;
    reference_.medication_request_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::medication_request_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.medication_request_id)
  return has_medication_request_id()
      ? *reference_.medication_request_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_medication_request_id() {
  if (!has_medication_request_id()) {
    clear_reference();
    set_has_medication_request_id();
    reference_.medication_request_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.medication_request_id)
  return reference_.medication_request_id_;
}

// .google.fhir.stu3.proto.ReferenceId medication_statement_id = 75;
inline bool Reference::has_medication_statement_id() const {
  return reference_case() == kMedicationStatementId;
}
inline void Reference::set_has_medication_statement_id() {
  _oneof_case_[0] = kMedicationStatementId;
}
inline void Reference::clear_medication_statement_id() {
  if (has_medication_statement_id()) {
    delete reference_.medication_statement_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_medication_statement_id() const {
  return *reference_.medication_statement_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_medication_statement_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.medication_statement_id)
  if (has_medication_statement_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.medication_statement_id_;
    reference_.medication_statement_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::medication_statement_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.medication_statement_id)
  return has_medication_statement_id()
      ? *reference_.medication_statement_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_medication_statement_id() {
  if (!has_medication_statement_id()) {
    clear_reference();
    set_has_medication_statement_id();
    reference_.medication_statement_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.medication_statement_id)
  return reference_.medication_statement_id_;
}

// .google.fhir.stu3.proto.ReferenceId message_definition_id = 76;
inline bool Reference::has_message_definition_id() const {
  return reference_case() == kMessageDefinitionId;
}
inline void Reference::set_has_message_definition_id() {
  _oneof_case_[0] = kMessageDefinitionId;
}
inline void Reference::clear_message_definition_id() {
  if (has_message_definition_id()) {
    delete reference_.message_definition_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_message_definition_id() const {
  return *reference_.message_definition_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_message_definition_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.message_definition_id)
  if (has_message_definition_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.message_definition_id_;
    reference_.message_definition_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::message_definition_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.message_definition_id)
  return has_message_definition_id()
      ? *reference_.message_definition_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_message_definition_id() {
  if (!has_message_definition_id()) {
    clear_reference();
    set_has_message_definition_id();
    reference_.message_definition_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.message_definition_id)
  return reference_.message_definition_id_;
}

// .google.fhir.stu3.proto.ReferenceId message_header_id = 77;
inline bool Reference::has_message_header_id() const {
  return reference_case() == kMessageHeaderId;
}
inline void Reference::set_has_message_header_id() {
  _oneof_case_[0] = kMessageHeaderId;
}
inline void Reference::clear_message_header_id() {
  if (has_message_header_id()) {
    delete reference_.message_header_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_message_header_id() const {
  return *reference_.message_header_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_message_header_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.message_header_id)
  if (has_message_header_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.message_header_id_;
    reference_.message_header_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::message_header_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.message_header_id)
  return has_message_header_id()
      ? *reference_.message_header_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_message_header_id() {
  if (!has_message_header_id()) {
    clear_reference();
    set_has_message_header_id();
    reference_.message_header_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.message_header_id)
  return reference_.message_header_id_;
}

// .google.fhir.stu3.proto.ReferenceId naming_system_id = 78;
inline bool Reference::has_naming_system_id() const {
  return reference_case() == kNamingSystemId;
}
inline void Reference::set_has_naming_system_id() {
  _oneof_case_[0] = kNamingSystemId;
}
inline void Reference::clear_naming_system_id() {
  if (has_naming_system_id()) {
    delete reference_.naming_system_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_naming_system_id() const {
  return *reference_.naming_system_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_naming_system_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.naming_system_id)
  if (has_naming_system_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.naming_system_id_;
    reference_.naming_system_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::naming_system_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.naming_system_id)
  return has_naming_system_id()
      ? *reference_.naming_system_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_naming_system_id() {
  if (!has_naming_system_id()) {
    clear_reference();
    set_has_naming_system_id();
    reference_.naming_system_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.naming_system_id)
  return reference_.naming_system_id_;
}

// .google.fhir.stu3.proto.ReferenceId nutrition_order_id = 79;
inline bool Reference::has_nutrition_order_id() const {
  return reference_case() == kNutritionOrderId;
}
inline void Reference::set_has_nutrition_order_id() {
  _oneof_case_[0] = kNutritionOrderId;
}
inline void Reference::clear_nutrition_order_id() {
  if (has_nutrition_order_id()) {
    delete reference_.nutrition_order_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_nutrition_order_id() const {
  return *reference_.nutrition_order_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_nutrition_order_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.nutrition_order_id)
  if (has_nutrition_order_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.nutrition_order_id_;
    reference_.nutrition_order_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::nutrition_order_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.nutrition_order_id)
  return has_nutrition_order_id()
      ? *reference_.nutrition_order_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_nutrition_order_id() {
  if (!has_nutrition_order_id()) {
    clear_reference();
    set_has_nutrition_order_id();
    reference_.nutrition_order_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.nutrition_order_id)
  return reference_.nutrition_order_id_;
}

// .google.fhir.stu3.proto.ReferenceId observation_id = 80;
inline bool Reference::has_observation_id() const {
  return reference_case() == kObservationId;
}
inline void Reference::set_has_observation_id() {
  _oneof_case_[0] = kObservationId;
}
inline void Reference::clear_observation_id() {
  if (has_observation_id()) {
    delete reference_.observation_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_observation_id() const {
  return *reference_.observation_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_observation_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.observation_id)
  if (has_observation_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.observation_id_;
    reference_.observation_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::observation_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.observation_id)
  return has_observation_id()
      ? *reference_.observation_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_observation_id() {
  if (!has_observation_id()) {
    clear_reference();
    set_has_observation_id();
    reference_.observation_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.observation_id)
  return reference_.observation_id_;
}

// .google.fhir.stu3.proto.ReferenceId operation_definition_id = 81;
inline bool Reference::has_operation_definition_id() const {
  return reference_case() == kOperationDefinitionId;
}
inline void Reference::set_has_operation_definition_id() {
  _oneof_case_[0] = kOperationDefinitionId;
}
inline void Reference::clear_operation_definition_id() {
  if (has_operation_definition_id()) {
    delete reference_.operation_definition_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_operation_definition_id() const {
  return *reference_.operation_definition_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_operation_definition_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.operation_definition_id)
  if (has_operation_definition_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.operation_definition_id_;
    reference_.operation_definition_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::operation_definition_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.operation_definition_id)
  return has_operation_definition_id()
      ? *reference_.operation_definition_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_operation_definition_id() {
  if (!has_operation_definition_id()) {
    clear_reference();
    set_has_operation_definition_id();
    reference_.operation_definition_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.operation_definition_id)
  return reference_.operation_definition_id_;
}

// .google.fhir.stu3.proto.ReferenceId operation_outcome_id = 82;
inline bool Reference::has_operation_outcome_id() const {
  return reference_case() == kOperationOutcomeId;
}
inline void Reference::set_has_operation_outcome_id() {
  _oneof_case_[0] = kOperationOutcomeId;
}
inline void Reference::clear_operation_outcome_id() {
  if (has_operation_outcome_id()) {
    delete reference_.operation_outcome_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_operation_outcome_id() const {
  return *reference_.operation_outcome_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_operation_outcome_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.operation_outcome_id)
  if (has_operation_outcome_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.operation_outcome_id_;
    reference_.operation_outcome_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::operation_outcome_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.operation_outcome_id)
  return has_operation_outcome_id()
      ? *reference_.operation_outcome_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_operation_outcome_id() {
  if (!has_operation_outcome_id()) {
    clear_reference();
    set_has_operation_outcome_id();
    reference_.operation_outcome_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.operation_outcome_id)
  return reference_.operation_outcome_id_;
}

// .google.fhir.stu3.proto.ReferenceId organization_id = 83;
inline bool Reference::has_organization_id() const {
  return reference_case() == kOrganizationId;
}
inline void Reference::set_has_organization_id() {
  _oneof_case_[0] = kOrganizationId;
}
inline void Reference::clear_organization_id() {
  if (has_organization_id()) {
    delete reference_.organization_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_organization_id() const {
  return *reference_.organization_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_organization_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.organization_id)
  if (has_organization_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.organization_id_;
    reference_.organization_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::organization_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.organization_id)
  return has_organization_id()
      ? *reference_.organization_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_organization_id() {
  if (!has_organization_id()) {
    clear_reference();
    set_has_organization_id();
    reference_.organization_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.organization_id)
  return reference_.organization_id_;
}

// .google.fhir.stu3.proto.ReferenceId parameters_id = 84;
inline bool Reference::has_parameters_id() const {
  return reference_case() == kParametersId;
}
inline void Reference::set_has_parameters_id() {
  _oneof_case_[0] = kParametersId;
}
inline void Reference::clear_parameters_id() {
  if (has_parameters_id()) {
    delete reference_.parameters_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_parameters_id() const {
  return *reference_.parameters_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_parameters_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.parameters_id)
  if (has_parameters_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.parameters_id_;
    reference_.parameters_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::parameters_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.parameters_id)
  return has_parameters_id()
      ? *reference_.parameters_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_parameters_id() {
  if (!has_parameters_id()) {
    clear_reference();
    set_has_parameters_id();
    reference_.parameters_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.parameters_id)
  return reference_.parameters_id_;
}

// .google.fhir.stu3.proto.ReferenceId patient_id = 85;
inline bool Reference::has_patient_id() const {
  return reference_case() == kPatientId;
}
inline void Reference::set_has_patient_id() {
  _oneof_case_[0] = kPatientId;
}
inline void Reference::clear_patient_id() {
  if (has_patient_id()) {
    delete reference_.patient_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_patient_id() const {
  return *reference_.patient_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_patient_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.patient_id)
  if (has_patient_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.patient_id_;
    reference_.patient_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::patient_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.patient_id)
  return has_patient_id()
      ? *reference_.patient_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_patient_id() {
  if (!has_patient_id()) {
    clear_reference();
    set_has_patient_id();
    reference_.patient_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.patient_id)
  return reference_.patient_id_;
}

// .google.fhir.stu3.proto.ReferenceId payment_notice_id = 86;
inline bool Reference::has_payment_notice_id() const {
  return reference_case() == kPaymentNoticeId;
}
inline void Reference::set_has_payment_notice_id() {
  _oneof_case_[0] = kPaymentNoticeId;
}
inline void Reference::clear_payment_notice_id() {
  if (has_payment_notice_id()) {
    delete reference_.payment_notice_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_payment_notice_id() const {
  return *reference_.payment_notice_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_payment_notice_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.payment_notice_id)
  if (has_payment_notice_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.payment_notice_id_;
    reference_.payment_notice_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::payment_notice_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.payment_notice_id)
  return has_payment_notice_id()
      ? *reference_.payment_notice_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_payment_notice_id() {
  if (!has_payment_notice_id()) {
    clear_reference();
    set_has_payment_notice_id();
    reference_.payment_notice_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.payment_notice_id)
  return reference_.payment_notice_id_;
}

// .google.fhir.stu3.proto.ReferenceId payment_reconciliation_id = 87;
inline bool Reference::has_payment_reconciliation_id() const {
  return reference_case() == kPaymentReconciliationId;
}
inline void Reference::set_has_payment_reconciliation_id() {
  _oneof_case_[0] = kPaymentReconciliationId;
}
inline void Reference::clear_payment_reconciliation_id() {
  if (has_payment_reconciliation_id()) {
    delete reference_.payment_reconciliation_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_payment_reconciliation_id() const {
  return *reference_.payment_reconciliation_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_payment_reconciliation_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.payment_reconciliation_id)
  if (has_payment_reconciliation_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.payment_reconciliation_id_;
    reference_.payment_reconciliation_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::payment_reconciliation_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.payment_reconciliation_id)
  return has_payment_reconciliation_id()
      ? *reference_.payment_reconciliation_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_payment_reconciliation_id() {
  if (!has_payment_reconciliation_id()) {
    clear_reference();
    set_has_payment_reconciliation_id();
    reference_.payment_reconciliation_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.payment_reconciliation_id)
  return reference_.payment_reconciliation_id_;
}

// .google.fhir.stu3.proto.ReferenceId person_id = 88;
inline bool Reference::has_person_id() const {
  return reference_case() == kPersonId;
}
inline void Reference::set_has_person_id() {
  _oneof_case_[0] = kPersonId;
}
inline void Reference::clear_person_id() {
  if (has_person_id()) {
    delete reference_.person_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_person_id() const {
  return *reference_.person_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_person_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.person_id)
  if (has_person_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.person_id_;
    reference_.person_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::person_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.person_id)
  return has_person_id()
      ? *reference_.person_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_person_id() {
  if (!has_person_id()) {
    clear_reference();
    set_has_person_id();
    reference_.person_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.person_id)
  return reference_.person_id_;
}

// .google.fhir.stu3.proto.ReferenceId plan_definition_id = 89;
inline bool Reference::has_plan_definition_id() const {
  return reference_case() == kPlanDefinitionId;
}
inline void Reference::set_has_plan_definition_id() {
  _oneof_case_[0] = kPlanDefinitionId;
}
inline void Reference::clear_plan_definition_id() {
  if (has_plan_definition_id()) {
    delete reference_.plan_definition_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_plan_definition_id() const {
  return *reference_.plan_definition_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_plan_definition_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.plan_definition_id)
  if (has_plan_definition_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.plan_definition_id_;
    reference_.plan_definition_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::plan_definition_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.plan_definition_id)
  return has_plan_definition_id()
      ? *reference_.plan_definition_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_plan_definition_id() {
  if (!has_plan_definition_id()) {
    clear_reference();
    set_has_plan_definition_id();
    reference_.plan_definition_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.plan_definition_id)
  return reference_.plan_definition_id_;
}

// .google.fhir.stu3.proto.ReferenceId practitioner_id = 90;
inline bool Reference::has_practitioner_id() const {
  return reference_case() == kPractitionerId;
}
inline void Reference::set_has_practitioner_id() {
  _oneof_case_[0] = kPractitionerId;
}
inline void Reference::clear_practitioner_id() {
  if (has_practitioner_id()) {
    delete reference_.practitioner_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_practitioner_id() const {
  return *reference_.practitioner_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_practitioner_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.practitioner_id)
  if (has_practitioner_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.practitioner_id_;
    reference_.practitioner_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::practitioner_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.practitioner_id)
  return has_practitioner_id()
      ? *reference_.practitioner_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_practitioner_id() {
  if (!has_practitioner_id()) {
    clear_reference();
    set_has_practitioner_id();
    reference_.practitioner_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.practitioner_id)
  return reference_.practitioner_id_;
}

// .google.fhir.stu3.proto.ReferenceId practitioner_role_id = 91;
inline bool Reference::has_practitioner_role_id() const {
  return reference_case() == kPractitionerRoleId;
}
inline void Reference::set_has_practitioner_role_id() {
  _oneof_case_[0] = kPractitionerRoleId;
}
inline void Reference::clear_practitioner_role_id() {
  if (has_practitioner_role_id()) {
    delete reference_.practitioner_role_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_practitioner_role_id() const {
  return *reference_.practitioner_role_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_practitioner_role_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.practitioner_role_id)
  if (has_practitioner_role_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.practitioner_role_id_;
    reference_.practitioner_role_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::practitioner_role_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.practitioner_role_id)
  return has_practitioner_role_id()
      ? *reference_.practitioner_role_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_practitioner_role_id() {
  if (!has_practitioner_role_id()) {
    clear_reference();
    set_has_practitioner_role_id();
    reference_.practitioner_role_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.practitioner_role_id)
  return reference_.practitioner_role_id_;
}

// .google.fhir.stu3.proto.ReferenceId procedure_id = 92;
inline bool Reference::has_procedure_id() const {
  return reference_case() == kProcedureId;
}
inline void Reference::set_has_procedure_id() {
  _oneof_case_[0] = kProcedureId;
}
inline void Reference::clear_procedure_id() {
  if (has_procedure_id()) {
    delete reference_.procedure_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_procedure_id() const {
  return *reference_.procedure_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_procedure_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.procedure_id)
  if (has_procedure_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.procedure_id_;
    reference_.procedure_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::procedure_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.procedure_id)
  return has_procedure_id()
      ? *reference_.procedure_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_procedure_id() {
  if (!has_procedure_id()) {
    clear_reference();
    set_has_procedure_id();
    reference_.procedure_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.procedure_id)
  return reference_.procedure_id_;
}

// .google.fhir.stu3.proto.ReferenceId procedure_request_id = 93;
inline bool Reference::has_procedure_request_id() const {
  return reference_case() == kProcedureRequestId;
}
inline void Reference::set_has_procedure_request_id() {
  _oneof_case_[0] = kProcedureRequestId;
}
inline void Reference::clear_procedure_request_id() {
  if (has_procedure_request_id()) {
    delete reference_.procedure_request_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_procedure_request_id() const {
  return *reference_.procedure_request_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_procedure_request_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.procedure_request_id)
  if (has_procedure_request_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.procedure_request_id_;
    reference_.procedure_request_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::procedure_request_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.procedure_request_id)
  return has_procedure_request_id()
      ? *reference_.procedure_request_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_procedure_request_id() {
  if (!has_procedure_request_id()) {
    clear_reference();
    set_has_procedure_request_id();
    reference_.procedure_request_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.procedure_request_id)
  return reference_.procedure_request_id_;
}

// .google.fhir.stu3.proto.ReferenceId process_request_id = 94;
inline bool Reference::has_process_request_id() const {
  return reference_case() == kProcessRequestId;
}
inline void Reference::set_has_process_request_id() {
  _oneof_case_[0] = kProcessRequestId;
}
inline void Reference::clear_process_request_id() {
  if (has_process_request_id()) {
    delete reference_.process_request_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_process_request_id() const {
  return *reference_.process_request_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_process_request_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.process_request_id)
  if (has_process_request_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.process_request_id_;
    reference_.process_request_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::process_request_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.process_request_id)
  return has_process_request_id()
      ? *reference_.process_request_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_process_request_id() {
  if (!has_process_request_id()) {
    clear_reference();
    set_has_process_request_id();
    reference_.process_request_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.process_request_id)
  return reference_.process_request_id_;
}

// .google.fhir.stu3.proto.ReferenceId process_response_id = 95;
inline bool Reference::has_process_response_id() const {
  return reference_case() == kProcessResponseId;
}
inline void Reference::set_has_process_response_id() {
  _oneof_case_[0] = kProcessResponseId;
}
inline void Reference::clear_process_response_id() {
  if (has_process_response_id()) {
    delete reference_.process_response_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_process_response_id() const {
  return *reference_.process_response_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_process_response_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.process_response_id)
  if (has_process_response_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.process_response_id_;
    reference_.process_response_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::process_response_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.process_response_id)
  return has_process_response_id()
      ? *reference_.process_response_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_process_response_id() {
  if (!has_process_response_id()) {
    clear_reference();
    set_has_process_response_id();
    reference_.process_response_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.process_response_id)
  return reference_.process_response_id_;
}

// .google.fhir.stu3.proto.ReferenceId provenance_id = 96;
inline bool Reference::has_provenance_id() const {
  return reference_case() == kProvenanceId;
}
inline void Reference::set_has_provenance_id() {
  _oneof_case_[0] = kProvenanceId;
}
inline void Reference::clear_provenance_id() {
  if (has_provenance_id()) {
    delete reference_.provenance_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_provenance_id() const {
  return *reference_.provenance_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_provenance_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.provenance_id)
  if (has_provenance_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.provenance_id_;
    reference_.provenance_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::provenance_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.provenance_id)
  return has_provenance_id()
      ? *reference_.provenance_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_provenance_id() {
  if (!has_provenance_id()) {
    clear_reference();
    set_has_provenance_id();
    reference_.provenance_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.provenance_id)
  return reference_.provenance_id_;
}

// .google.fhir.stu3.proto.ReferenceId questionnaire_id = 97;
inline bool Reference::has_questionnaire_id() const {
  return reference_case() == kQuestionnaireId;
}
inline void Reference::set_has_questionnaire_id() {
  _oneof_case_[0] = kQuestionnaireId;
}
inline void Reference::clear_questionnaire_id() {
  if (has_questionnaire_id()) {
    delete reference_.questionnaire_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_questionnaire_id() const {
  return *reference_.questionnaire_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_questionnaire_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.questionnaire_id)
  if (has_questionnaire_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.questionnaire_id_;
    reference_.questionnaire_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::questionnaire_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.questionnaire_id)
  return has_questionnaire_id()
      ? *reference_.questionnaire_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_questionnaire_id() {
  if (!has_questionnaire_id()) {
    clear_reference();
    set_has_questionnaire_id();
    reference_.questionnaire_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.questionnaire_id)
  return reference_.questionnaire_id_;
}

// .google.fhir.stu3.proto.ReferenceId questionnaire_response_id = 98;
inline bool Reference::has_questionnaire_response_id() const {
  return reference_case() == kQuestionnaireResponseId;
}
inline void Reference::set_has_questionnaire_response_id() {
  _oneof_case_[0] = kQuestionnaireResponseId;
}
inline void Reference::clear_questionnaire_response_id() {
  if (has_questionnaire_response_id()) {
    delete reference_.questionnaire_response_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_questionnaire_response_id() const {
  return *reference_.questionnaire_response_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_questionnaire_response_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.questionnaire_response_id)
  if (has_questionnaire_response_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.questionnaire_response_id_;
    reference_.questionnaire_response_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::questionnaire_response_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.questionnaire_response_id)
  return has_questionnaire_response_id()
      ? *reference_.questionnaire_response_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_questionnaire_response_id() {
  if (!has_questionnaire_response_id()) {
    clear_reference();
    set_has_questionnaire_response_id();
    reference_.questionnaire_response_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.questionnaire_response_id)
  return reference_.questionnaire_response_id_;
}

// .google.fhir.stu3.proto.ReferenceId referral_request_id = 99;
inline bool Reference::has_referral_request_id() const {
  return reference_case() == kReferralRequestId;
}
inline void Reference::set_has_referral_request_id() {
  _oneof_case_[0] = kReferralRequestId;
}
inline void Reference::clear_referral_request_id() {
  if (has_referral_request_id()) {
    delete reference_.referral_request_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_referral_request_id() const {
  return *reference_.referral_request_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_referral_request_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.referral_request_id)
  if (has_referral_request_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.referral_request_id_;
    reference_.referral_request_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::referral_request_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.referral_request_id)
  return has_referral_request_id()
      ? *reference_.referral_request_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_referral_request_id() {
  if (!has_referral_request_id()) {
    clear_reference();
    set_has_referral_request_id();
    reference_.referral_request_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.referral_request_id)
  return reference_.referral_request_id_;
}

// .google.fhir.stu3.proto.ReferenceId related_person_id = 100;
inline bool Reference::has_related_person_id() const {
  return reference_case() == kRelatedPersonId;
}
inline void Reference::set_has_related_person_id() {
  _oneof_case_[0] = kRelatedPersonId;
}
inline void Reference::clear_related_person_id() {
  if (has_related_person_id()) {
    delete reference_.related_person_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_related_person_id() const {
  return *reference_.related_person_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_related_person_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.related_person_id)
  if (has_related_person_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.related_person_id_;
    reference_.related_person_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::related_person_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.related_person_id)
  return has_related_person_id()
      ? *reference_.related_person_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_related_person_id() {
  if (!has_related_person_id()) {
    clear_reference();
    set_has_related_person_id();
    reference_.related_person_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.related_person_id)
  return reference_.related_person_id_;
}

// .google.fhir.stu3.proto.ReferenceId request_group_id = 101;
inline bool Reference::has_request_group_id() const {
  return reference_case() == kRequestGroupId;
}
inline void Reference::set_has_request_group_id() {
  _oneof_case_[0] = kRequestGroupId;
}
inline void Reference::clear_request_group_id() {
  if (has_request_group_id()) {
    delete reference_.request_group_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_request_group_id() const {
  return *reference_.request_group_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_request_group_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.request_group_id)
  if (has_request_group_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.request_group_id_;
    reference_.request_group_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::request_group_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.request_group_id)
  return has_request_group_id()
      ? *reference_.request_group_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_request_group_id() {
  if (!has_request_group_id()) {
    clear_reference();
    set_has_request_group_id();
    reference_.request_group_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.request_group_id)
  return reference_.request_group_id_;
}

// .google.fhir.stu3.proto.ReferenceId research_study_id = 102;
inline bool Reference::has_research_study_id() const {
  return reference_case() == kResearchStudyId;
}
inline void Reference::set_has_research_study_id() {
  _oneof_case_[0] = kResearchStudyId;
}
inline void Reference::clear_research_study_id() {
  if (has_research_study_id()) {
    delete reference_.research_study_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_research_study_id() const {
  return *reference_.research_study_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_research_study_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.research_study_id)
  if (has_research_study_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.research_study_id_;
    reference_.research_study_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::research_study_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.research_study_id)
  return has_research_study_id()
      ? *reference_.research_study_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_research_study_id() {
  if (!has_research_study_id()) {
    clear_reference();
    set_has_research_study_id();
    reference_.research_study_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.research_study_id)
  return reference_.research_study_id_;
}

// .google.fhir.stu3.proto.ReferenceId research_subject_id = 103;
inline bool Reference::has_research_subject_id() const {
  return reference_case() == kResearchSubjectId;
}
inline void Reference::set_has_research_subject_id() {
  _oneof_case_[0] = kResearchSubjectId;
}
inline void Reference::clear_research_subject_id() {
  if (has_research_subject_id()) {
    delete reference_.research_subject_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_research_subject_id() const {
  return *reference_.research_subject_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_research_subject_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.research_subject_id)
  if (has_research_subject_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.research_subject_id_;
    reference_.research_subject_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::research_subject_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.research_subject_id)
  return has_research_subject_id()
      ? *reference_.research_subject_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_research_subject_id() {
  if (!has_research_subject_id()) {
    clear_reference();
    set_has_research_subject_id();
    reference_.research_subject_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.research_subject_id)
  return reference_.research_subject_id_;
}

// .google.fhir.stu3.proto.ReferenceId risk_assessment_id = 104;
inline bool Reference::has_risk_assessment_id() const {
  return reference_case() == kRiskAssessmentId;
}
inline void Reference::set_has_risk_assessment_id() {
  _oneof_case_[0] = kRiskAssessmentId;
}
inline void Reference::clear_risk_assessment_id() {
  if (has_risk_assessment_id()) {
    delete reference_.risk_assessment_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_risk_assessment_id() const {
  return *reference_.risk_assessment_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_risk_assessment_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.risk_assessment_id)
  if (has_risk_assessment_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.risk_assessment_id_;
    reference_.risk_assessment_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::risk_assessment_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.risk_assessment_id)
  return has_risk_assessment_id()
      ? *reference_.risk_assessment_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_risk_assessment_id() {
  if (!has_risk_assessment_id()) {
    clear_reference();
    set_has_risk_assessment_id();
    reference_.risk_assessment_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.risk_assessment_id)
  return reference_.risk_assessment_id_;
}

// .google.fhir.stu3.proto.ReferenceId schedule_id = 105;
inline bool Reference::has_schedule_id() const {
  return reference_case() == kScheduleId;
}
inline void Reference::set_has_schedule_id() {
  _oneof_case_[0] = kScheduleId;
}
inline void Reference::clear_schedule_id() {
  if (has_schedule_id()) {
    delete reference_.schedule_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_schedule_id() const {
  return *reference_.schedule_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_schedule_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.schedule_id)
  if (has_schedule_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.schedule_id_;
    reference_.schedule_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::schedule_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.schedule_id)
  return has_schedule_id()
      ? *reference_.schedule_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_schedule_id() {
  if (!has_schedule_id()) {
    clear_reference();
    set_has_schedule_id();
    reference_.schedule_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.schedule_id)
  return reference_.schedule_id_;
}

// .google.fhir.stu3.proto.ReferenceId search_parameter_id = 106;
inline bool Reference::has_search_parameter_id() const {
  return reference_case() == kSearchParameterId;
}
inline void Reference::set_has_search_parameter_id() {
  _oneof_case_[0] = kSearchParameterId;
}
inline void Reference::clear_search_parameter_id() {
  if (has_search_parameter_id()) {
    delete reference_.search_parameter_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_search_parameter_id() const {
  return *reference_.search_parameter_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_search_parameter_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.search_parameter_id)
  if (has_search_parameter_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.search_parameter_id_;
    reference_.search_parameter_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::search_parameter_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.search_parameter_id)
  return has_search_parameter_id()
      ? *reference_.search_parameter_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_search_parameter_id() {
  if (!has_search_parameter_id()) {
    clear_reference();
    set_has_search_parameter_id();
    reference_.search_parameter_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.search_parameter_id)
  return reference_.search_parameter_id_;
}

// .google.fhir.stu3.proto.ReferenceId sequence_id = 107;
inline bool Reference::has_sequence_id() const {
  return reference_case() == kSequenceId;
}
inline void Reference::set_has_sequence_id() {
  _oneof_case_[0] = kSequenceId;
}
inline void Reference::clear_sequence_id() {
  if (has_sequence_id()) {
    delete reference_.sequence_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_sequence_id() const {
  return *reference_.sequence_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_sequence_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.sequence_id)
  if (has_sequence_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.sequence_id_;
    reference_.sequence_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::sequence_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.sequence_id)
  return has_sequence_id()
      ? *reference_.sequence_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_sequence_id() {
  if (!has_sequence_id()) {
    clear_reference();
    set_has_sequence_id();
    reference_.sequence_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.sequence_id)
  return reference_.sequence_id_;
}

// .google.fhir.stu3.proto.ReferenceId service_definition_id = 108;
inline bool Reference::has_service_definition_id() const {
  return reference_case() == kServiceDefinitionId;
}
inline void Reference::set_has_service_definition_id() {
  _oneof_case_[0] = kServiceDefinitionId;
}
inline void Reference::clear_service_definition_id() {
  if (has_service_definition_id()) {
    delete reference_.service_definition_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_service_definition_id() const {
  return *reference_.service_definition_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_service_definition_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.service_definition_id)
  if (has_service_definition_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.service_definition_id_;
    reference_.service_definition_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::service_definition_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.service_definition_id)
  return has_service_definition_id()
      ? *reference_.service_definition_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_service_definition_id() {
  if (!has_service_definition_id()) {
    clear_reference();
    set_has_service_definition_id();
    reference_.service_definition_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.service_definition_id)
  return reference_.service_definition_id_;
}

// .google.fhir.stu3.proto.ReferenceId slot_id = 109;
inline bool Reference::has_slot_id() const {
  return reference_case() == kSlotId;
}
inline void Reference::set_has_slot_id() {
  _oneof_case_[0] = kSlotId;
}
inline void Reference::clear_slot_id() {
  if (has_slot_id()) {
    delete reference_.slot_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_slot_id() const {
  return *reference_.slot_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_slot_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.slot_id)
  if (has_slot_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.slot_id_;
    reference_.slot_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::slot_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.slot_id)
  return has_slot_id()
      ? *reference_.slot_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_slot_id() {
  if (!has_slot_id()) {
    clear_reference();
    set_has_slot_id();
    reference_.slot_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.slot_id)
  return reference_.slot_id_;
}

// .google.fhir.stu3.proto.ReferenceId specimen_id = 110;
inline bool Reference::has_specimen_id() const {
  return reference_case() == kSpecimenId;
}
inline void Reference::set_has_specimen_id() {
  _oneof_case_[0] = kSpecimenId;
}
inline void Reference::clear_specimen_id() {
  if (has_specimen_id()) {
    delete reference_.specimen_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_specimen_id() const {
  return *reference_.specimen_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_specimen_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.specimen_id)
  if (has_specimen_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.specimen_id_;
    reference_.specimen_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::specimen_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.specimen_id)
  return has_specimen_id()
      ? *reference_.specimen_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_specimen_id() {
  if (!has_specimen_id()) {
    clear_reference();
    set_has_specimen_id();
    reference_.specimen_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.specimen_id)
  return reference_.specimen_id_;
}

// .google.fhir.stu3.proto.ReferenceId structure_definition_id = 111;
inline bool Reference::has_structure_definition_id() const {
  return reference_case() == kStructureDefinitionId;
}
inline void Reference::set_has_structure_definition_id() {
  _oneof_case_[0] = kStructureDefinitionId;
}
inline void Reference::clear_structure_definition_id() {
  if (has_structure_definition_id()) {
    delete reference_.structure_definition_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_structure_definition_id() const {
  return *reference_.structure_definition_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_structure_definition_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.structure_definition_id)
  if (has_structure_definition_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.structure_definition_id_;
    reference_.structure_definition_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::structure_definition_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.structure_definition_id)
  return has_structure_definition_id()
      ? *reference_.structure_definition_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_structure_definition_id() {
  if (!has_structure_definition_id()) {
    clear_reference();
    set_has_structure_definition_id();
    reference_.structure_definition_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.structure_definition_id)
  return reference_.structure_definition_id_;
}

// .google.fhir.stu3.proto.ReferenceId structure_map_id = 112;
inline bool Reference::has_structure_map_id() const {
  return reference_case() == kStructureMapId;
}
inline void Reference::set_has_structure_map_id() {
  _oneof_case_[0] = kStructureMapId;
}
inline void Reference::clear_structure_map_id() {
  if (has_structure_map_id()) {
    delete reference_.structure_map_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_structure_map_id() const {
  return *reference_.structure_map_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_structure_map_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.structure_map_id)
  if (has_structure_map_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.structure_map_id_;
    reference_.structure_map_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::structure_map_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.structure_map_id)
  return has_structure_map_id()
      ? *reference_.structure_map_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_structure_map_id() {
  if (!has_structure_map_id()) {
    clear_reference();
    set_has_structure_map_id();
    reference_.structure_map_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.structure_map_id)
  return reference_.structure_map_id_;
}

// .google.fhir.stu3.proto.ReferenceId subscription_id = 113;
inline bool Reference::has_subscription_id() const {
  return reference_case() == kSubscriptionId;
}
inline void Reference::set_has_subscription_id() {
  _oneof_case_[0] = kSubscriptionId;
}
inline void Reference::clear_subscription_id() {
  if (has_subscription_id()) {
    delete reference_.subscription_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_subscription_id() const {
  return *reference_.subscription_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_subscription_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.subscription_id)
  if (has_subscription_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.subscription_id_;
    reference_.subscription_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::subscription_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.subscription_id)
  return has_subscription_id()
      ? *reference_.subscription_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_subscription_id() {
  if (!has_subscription_id()) {
    clear_reference();
    set_has_subscription_id();
    reference_.subscription_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.subscription_id)
  return reference_.subscription_id_;
}

// .google.fhir.stu3.proto.ReferenceId substance_id = 114;
inline bool Reference::has_substance_id() const {
  return reference_case() == kSubstanceId;
}
inline void Reference::set_has_substance_id() {
  _oneof_case_[0] = kSubstanceId;
}
inline void Reference::clear_substance_id() {
  if (has_substance_id()) {
    delete reference_.substance_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_substance_id() const {
  return *reference_.substance_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_substance_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.substance_id)
  if (has_substance_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.substance_id_;
    reference_.substance_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::substance_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.substance_id)
  return has_substance_id()
      ? *reference_.substance_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_substance_id() {
  if (!has_substance_id()) {
    clear_reference();
    set_has_substance_id();
    reference_.substance_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.substance_id)
  return reference_.substance_id_;
}

// .google.fhir.stu3.proto.ReferenceId supply_delivery_id = 115;
inline bool Reference::has_supply_delivery_id() const {
  return reference_case() == kSupplyDeliveryId;
}
inline void Reference::set_has_supply_delivery_id() {
  _oneof_case_[0] = kSupplyDeliveryId;
}
inline void Reference::clear_supply_delivery_id() {
  if (has_supply_delivery_id()) {
    delete reference_.supply_delivery_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_supply_delivery_id() const {
  return *reference_.supply_delivery_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_supply_delivery_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.supply_delivery_id)
  if (has_supply_delivery_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.supply_delivery_id_;
    reference_.supply_delivery_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::supply_delivery_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.supply_delivery_id)
  return has_supply_delivery_id()
      ? *reference_.supply_delivery_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_supply_delivery_id() {
  if (!has_supply_delivery_id()) {
    clear_reference();
    set_has_supply_delivery_id();
    reference_.supply_delivery_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.supply_delivery_id)
  return reference_.supply_delivery_id_;
}

// .google.fhir.stu3.proto.ReferenceId supply_request_id = 116;
inline bool Reference::has_supply_request_id() const {
  return reference_case() == kSupplyRequestId;
}
inline void Reference::set_has_supply_request_id() {
  _oneof_case_[0] = kSupplyRequestId;
}
inline void Reference::clear_supply_request_id() {
  if (has_supply_request_id()) {
    delete reference_.supply_request_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_supply_request_id() const {
  return *reference_.supply_request_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_supply_request_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.supply_request_id)
  if (has_supply_request_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.supply_request_id_;
    reference_.supply_request_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::supply_request_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.supply_request_id)
  return has_supply_request_id()
      ? *reference_.supply_request_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_supply_request_id() {
  if (!has_supply_request_id()) {
    clear_reference();
    set_has_supply_request_id();
    reference_.supply_request_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.supply_request_id)
  return reference_.supply_request_id_;
}

// .google.fhir.stu3.proto.ReferenceId task_id = 117;
inline bool Reference::has_task_id() const {
  return reference_case() == kTaskId;
}
inline void Reference::set_has_task_id() {
  _oneof_case_[0] = kTaskId;
}
inline void Reference::clear_task_id() {
  if (has_task_id()) {
    delete reference_.task_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_task_id() const {
  return *reference_.task_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_task_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.task_id)
  if (has_task_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.task_id_;
    reference_.task_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::task_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.task_id)
  return has_task_id()
      ? *reference_.task_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_task_id() {
  if (!has_task_id()) {
    clear_reference();
    set_has_task_id();
    reference_.task_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.task_id)
  return reference_.task_id_;
}

// .google.fhir.stu3.proto.ReferenceId test_report_id = 118;
inline bool Reference::has_test_report_id() const {
  return reference_case() == kTestReportId;
}
inline void Reference::set_has_test_report_id() {
  _oneof_case_[0] = kTestReportId;
}
inline void Reference::clear_test_report_id() {
  if (has_test_report_id()) {
    delete reference_.test_report_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_test_report_id() const {
  return *reference_.test_report_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_test_report_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.test_report_id)
  if (has_test_report_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.test_report_id_;
    reference_.test_report_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::test_report_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.test_report_id)
  return has_test_report_id()
      ? *reference_.test_report_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_test_report_id() {
  if (!has_test_report_id()) {
    clear_reference();
    set_has_test_report_id();
    reference_.test_report_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.test_report_id)
  return reference_.test_report_id_;
}

// .google.fhir.stu3.proto.ReferenceId test_script_id = 119;
inline bool Reference::has_test_script_id() const {
  return reference_case() == kTestScriptId;
}
inline void Reference::set_has_test_script_id() {
  _oneof_case_[0] = kTestScriptId;
}
inline void Reference::clear_test_script_id() {
  if (has_test_script_id()) {
    delete reference_.test_script_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_test_script_id() const {
  return *reference_.test_script_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_test_script_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.test_script_id)
  if (has_test_script_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.test_script_id_;
    reference_.test_script_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::test_script_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.test_script_id)
  return has_test_script_id()
      ? *reference_.test_script_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_test_script_id() {
  if (!has_test_script_id()) {
    clear_reference();
    set_has_test_script_id();
    reference_.test_script_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.test_script_id)
  return reference_.test_script_id_;
}

// .google.fhir.stu3.proto.ReferenceId value_set_id = 120;
inline bool Reference::has_value_set_id() const {
  return reference_case() == kValueSetId;
}
inline void Reference::set_has_value_set_id() {
  _oneof_case_[0] = kValueSetId;
}
inline void Reference::clear_value_set_id() {
  if (has_value_set_id()) {
    delete reference_.value_set_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_value_set_id() const {
  return *reference_.value_set_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_value_set_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.value_set_id)
  if (has_value_set_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.value_set_id_;
    reference_.value_set_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::value_set_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.value_set_id)
  return has_value_set_id()
      ? *reference_.value_set_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_value_set_id() {
  if (!has_value_set_id()) {
    clear_reference();
    set_has_value_set_id();
    reference_.value_set_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.value_set_id)
  return reference_.value_set_id_;
}

// .google.fhir.stu3.proto.ReferenceId vision_prescription_id = 121;
inline bool Reference::has_vision_prescription_id() const {
  return reference_case() == kVisionPrescriptionId;
}
inline void Reference::set_has_vision_prescription_id() {
  _oneof_case_[0] = kVisionPrescriptionId;
}
inline void Reference::clear_vision_prescription_id() {
  if (has_vision_prescription_id()) {
    delete reference_.vision_prescription_id_;
    clear_has_reference();
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::_internal_vision_prescription_id() const {
  return *reference_.vision_prescription_id_;
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::release_vision_prescription_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.vision_prescription_id)
  if (has_vision_prescription_id()) {
    clear_has_reference();
      ::google::fhir::stu3::proto::ReferenceId* temp = reference_.vision_prescription_id_;
    reference_.vision_prescription_id_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::fhir::stu3::proto::ReferenceId& Reference::vision_prescription_id() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.vision_prescription_id)
  return has_vision_prescription_id()
      ? *reference_.vision_prescription_id_
      : *reinterpret_cast< ::google::fhir::stu3::proto::ReferenceId*>(&::google::fhir::stu3::proto::_ReferenceId_default_instance_);
}
inline ::google::fhir::stu3::proto::ReferenceId* Reference::mutable_vision_prescription_id() {
  if (!has_vision_prescription_id()) {
    clear_reference();
    set_has_vision_prescription_id();
    reference_.vision_prescription_id_ = CreateMaybeMessage< ::google::fhir::stu3::proto::ReferenceId >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.vision_prescription_id)
  return reference_.vision_prescription_id_;
}

// .google.fhir.stu3.proto.Identifier identifier = 122;
inline bool Reference::has_identifier() const {
  return this != internal_default_instance() && identifier_ != NULL;
}
inline void Reference::clear_identifier() {
  if (GetArenaNoVirtual() == NULL && identifier_ != NULL) {
    delete identifier_;
  }
  identifier_ = NULL;
}
inline const ::google::fhir::stu3::proto::Identifier& Reference::_internal_identifier() const {
  return *identifier_;
}
inline const ::google::fhir::stu3::proto::Identifier& Reference::identifier() const {
  const ::google::fhir::stu3::proto::Identifier* p = identifier_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.identifier)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Identifier*>(
      &::google::fhir::stu3::proto::_Identifier_default_instance_);
}
inline ::google::fhir::stu3::proto::Identifier* Reference::release_identifier() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.identifier)
  
  ::google::fhir::stu3::proto::Identifier* temp = identifier_;
  identifier_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Identifier* Reference::mutable_identifier() {
  
  if (identifier_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Identifier>(GetArenaNoVirtual());
    identifier_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.identifier)
  return identifier_;
}
inline void Reference::set_allocated_identifier(::google::fhir::stu3::proto::Identifier* identifier) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete identifier_;
  }
  if (identifier) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      identifier = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    
  } else {
    
  }
  identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Reference.identifier)
}

// .google.fhir.stu3.proto.String display = 123;
inline bool Reference::has_display() const {
  return this != internal_default_instance() && display_ != NULL;
}
inline void Reference::clear_display() {
  if (GetArenaNoVirtual() == NULL && display_ != NULL) {
    delete display_;
  }
  display_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& Reference::_internal_display() const {
  return *display_;
}
inline const ::google::fhir::stu3::proto::String& Reference::display() const {
  const ::google::fhir::stu3::proto::String* p = display_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.Reference.display)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* Reference::release_display() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.Reference.display)
  
  ::google::fhir::stu3::proto::String* temp = display_;
  display_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* Reference::mutable_display() {
  
  if (display_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    display_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.Reference.display)
  return display_;
}
inline void Reference::set_allocated_display(::google::fhir::stu3::proto::String* display) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete display_;
  }
  if (display) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      display = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, display, submessage_arena);
    }
    
  } else {
    
  }
  display_ = display;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.Reference.display)
}

inline bool Reference::has_reference() const {
  return reference_case() != REFERENCE_NOT_SET;
}
inline void Reference::clear_has_reference() {
  _oneof_case_[0] = REFERENCE_NOT_SET;
}
inline Reference::ReferenceCase Reference::reference_case() const {
  return Reference::ReferenceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ReferenceId

// string value = 1;
inline void ReferenceId::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReferenceId::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ReferenceId.value)
  return value_.GetNoArena();
}
inline void ReferenceId::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.ReferenceId.value)
}
#if LANG_CXX11
inline void ReferenceId::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.stu3.proto.ReferenceId.value)
}
#endif
inline void ReferenceId::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.stu3.proto.ReferenceId.value)
}
inline void ReferenceId::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.stu3.proto.ReferenceId.value)
}
inline ::std::string* ReferenceId::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ReferenceId.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReferenceId::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ReferenceId.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReferenceId::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ReferenceId.value)
}

// .google.fhir.stu3.proto.Id history = 2;
inline bool ReferenceId::has_history() const {
  return this != internal_default_instance() && history_ != NULL;
}
inline void ReferenceId::clear_history() {
  if (GetArenaNoVirtual() == NULL && history_ != NULL) {
    delete history_;
  }
  history_ = NULL;
}
inline const ::google::fhir::stu3::proto::Id& ReferenceId::_internal_history() const {
  return *history_;
}
inline const ::google::fhir::stu3::proto::Id& ReferenceId::history() const {
  const ::google::fhir::stu3::proto::Id* p = history_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ReferenceId.history)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::Id*>(
      &::google::fhir::stu3::proto::_Id_default_instance_);
}
inline ::google::fhir::stu3::proto::Id* ReferenceId::release_history() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ReferenceId.history)
  
  ::google::fhir::stu3::proto::Id* temp = history_;
  history_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::Id* ReferenceId::mutable_history() {
  
  if (history_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::Id>(GetArenaNoVirtual());
    history_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ReferenceId.history)
  return history_;
}
inline void ReferenceId::set_allocated_history(::google::fhir::stu3::proto::Id* history) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete history_;
  }
  if (history) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      history = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, history, submessage_arena);
    }
    
  } else {
    
  }
  history_ = history;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ReferenceId.history)
}

// .google.fhir.stu3.proto.String id = 3;
inline bool ReferenceId::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void ReferenceId::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& ReferenceId::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ReferenceId::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ReferenceId.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ReferenceId::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ReferenceId.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ReferenceId::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ReferenceId.id)
  return id_;
}
inline void ReferenceId::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ReferenceId.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 4;
inline int ReferenceId::extension_size() const {
  return extension_.size();
}
inline void ReferenceId::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* ReferenceId::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ReferenceId.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
ReferenceId::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.ReferenceId.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& ReferenceId::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ReferenceId.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* ReferenceId::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.ReferenceId.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
ReferenceId::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.ReferenceId.extension)
  return extension_;
}

// -------------------------------------------------------------------

// AddressTypeCode

// .google.fhir.stu3.proto.AddressTypeCode.Value value = 1;
inline void AddressTypeCode::clear_value() {
  value_ = 0;
}
inline ::google::fhir::stu3::proto::AddressTypeCode_Value AddressTypeCode::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressTypeCode.value)
  return static_cast< ::google::fhir::stu3::proto::AddressTypeCode_Value >(value_);
}
inline void AddressTypeCode::set_value(::google::fhir::stu3::proto::AddressTypeCode_Value value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.AddressTypeCode.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool AddressTypeCode::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void AddressTypeCode::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressTypeCode::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressTypeCode::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressTypeCode.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressTypeCode::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressTypeCode.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressTypeCode::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressTypeCode.id)
  return id_;
}
inline void AddressTypeCode::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressTypeCode.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int AddressTypeCode::extension_size() const {
  return extension_.size();
}
inline void AddressTypeCode::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* AddressTypeCode::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressTypeCode.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
AddressTypeCode::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.AddressTypeCode.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& AddressTypeCode::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressTypeCode.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* AddressTypeCode::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.AddressTypeCode.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
AddressTypeCode::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.AddressTypeCode.extension)
  return extension_;
}

// -------------------------------------------------------------------

// AddressUseCode

// .google.fhir.stu3.proto.AddressUseCode.Value value = 1;
inline void AddressUseCode::clear_value() {
  value_ = 0;
}
inline ::google::fhir::stu3::proto::AddressUseCode_Value AddressUseCode::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressUseCode.value)
  return static_cast< ::google::fhir::stu3::proto::AddressUseCode_Value >(value_);
}
inline void AddressUseCode::set_value(::google::fhir::stu3::proto::AddressUseCode_Value value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.AddressUseCode.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool AddressUseCode::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void AddressUseCode::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& AddressUseCode::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AddressUseCode::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressUseCode.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AddressUseCode::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AddressUseCode.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AddressUseCode::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressUseCode.id)
  return id_;
}
inline void AddressUseCode::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AddressUseCode.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int AddressUseCode::extension_size() const {
  return extension_.size();
}
inline void AddressUseCode::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* AddressUseCode::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AddressUseCode.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
AddressUseCode::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.AddressUseCode.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& AddressUseCode::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AddressUseCode.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* AddressUseCode::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.AddressUseCode.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
AddressUseCode::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.AddressUseCode.extension)
  return extension_;
}

// -------------------------------------------------------------------

// ContactPointSystemCode

// .google.fhir.stu3.proto.ContactPointSystemCode.Value value = 1;
inline void ContactPointSystemCode::clear_value() {
  value_ = 0;
}
inline ::google::fhir::stu3::proto::ContactPointSystemCode_Value ContactPointSystemCode::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ContactPointSystemCode.value)
  return static_cast< ::google::fhir::stu3::proto::ContactPointSystemCode_Value >(value_);
}
inline void ContactPointSystemCode::set_value(::google::fhir::stu3::proto::ContactPointSystemCode_Value value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.ContactPointSystemCode.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool ContactPointSystemCode::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void ContactPointSystemCode::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& ContactPointSystemCode::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ContactPointSystemCode::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ContactPointSystemCode.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ContactPointSystemCode::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ContactPointSystemCode.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ContactPointSystemCode::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ContactPointSystemCode.id)
  return id_;
}
inline void ContactPointSystemCode::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ContactPointSystemCode.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int ContactPointSystemCode::extension_size() const {
  return extension_.size();
}
inline void ContactPointSystemCode::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* ContactPointSystemCode::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ContactPointSystemCode.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
ContactPointSystemCode::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.ContactPointSystemCode.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& ContactPointSystemCode::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ContactPointSystemCode.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* ContactPointSystemCode::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.ContactPointSystemCode.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
ContactPointSystemCode::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.ContactPointSystemCode.extension)
  return extension_;
}

// -------------------------------------------------------------------

// ContactPointUseCode

// .google.fhir.stu3.proto.ContactPointUseCode.Value value = 1;
inline void ContactPointUseCode::clear_value() {
  value_ = 0;
}
inline ::google::fhir::stu3::proto::ContactPointUseCode_Value ContactPointUseCode::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ContactPointUseCode.value)
  return static_cast< ::google::fhir::stu3::proto::ContactPointUseCode_Value >(value_);
}
inline void ContactPointUseCode::set_value(::google::fhir::stu3::proto::ContactPointUseCode_Value value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.ContactPointUseCode.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool ContactPointUseCode::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void ContactPointUseCode::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& ContactPointUseCode::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& ContactPointUseCode::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ContactPointUseCode.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* ContactPointUseCode::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.ContactPointUseCode.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* ContactPointUseCode::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ContactPointUseCode.id)
  return id_;
}
inline void ContactPointUseCode::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.ContactPointUseCode.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int ContactPointUseCode::extension_size() const {
  return extension_.size();
}
inline void ContactPointUseCode::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* ContactPointUseCode::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.ContactPointUseCode.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
ContactPointUseCode::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.ContactPointUseCode.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& ContactPointUseCode::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.ContactPointUseCode.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* ContactPointUseCode::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.ContactPointUseCode.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
ContactPointUseCode::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.ContactPointUseCode.extension)
  return extension_;
}

// -------------------------------------------------------------------

// DaysOfWeekCode

// .google.fhir.stu3.proto.DaysOfWeekCode.Value value = 1;
inline void DaysOfWeekCode::clear_value() {
  value_ = 0;
}
inline ::google::fhir::stu3::proto::DaysOfWeekCode_Value DaysOfWeekCode::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DaysOfWeekCode.value)
  return static_cast< ::google::fhir::stu3::proto::DaysOfWeekCode_Value >(value_);
}
inline void DaysOfWeekCode::set_value(::google::fhir::stu3::proto::DaysOfWeekCode_Value value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.DaysOfWeekCode.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool DaysOfWeekCode::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void DaysOfWeekCode::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& DaysOfWeekCode::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& DaysOfWeekCode::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DaysOfWeekCode.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* DaysOfWeekCode::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.DaysOfWeekCode.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* DaysOfWeekCode::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DaysOfWeekCode.id)
  return id_;
}
inline void DaysOfWeekCode::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.DaysOfWeekCode.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int DaysOfWeekCode::extension_size() const {
  return extension_.size();
}
inline void DaysOfWeekCode::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* DaysOfWeekCode::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.DaysOfWeekCode.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
DaysOfWeekCode::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.DaysOfWeekCode.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& DaysOfWeekCode::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.DaysOfWeekCode.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* DaysOfWeekCode::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.DaysOfWeekCode.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
DaysOfWeekCode::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.DaysOfWeekCode.extension)
  return extension_;
}

// -------------------------------------------------------------------

// EventTimingCode

// .google.fhir.stu3.proto.EventTimingCode.Value value = 1;
inline void EventTimingCode::clear_value() {
  value_ = 0;
}
inline ::google::fhir::stu3::proto::EventTimingCode_Value EventTimingCode::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.EventTimingCode.value)
  return static_cast< ::google::fhir::stu3::proto::EventTimingCode_Value >(value_);
}
inline void EventTimingCode::set_value(::google::fhir::stu3::proto::EventTimingCode_Value value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.EventTimingCode.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool EventTimingCode::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void EventTimingCode::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& EventTimingCode::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& EventTimingCode::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.EventTimingCode.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* EventTimingCode::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.EventTimingCode.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* EventTimingCode::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.EventTimingCode.id)
  return id_;
}
inline void EventTimingCode::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.EventTimingCode.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int EventTimingCode::extension_size() const {
  return extension_.size();
}
inline void EventTimingCode::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* EventTimingCode::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.EventTimingCode.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
EventTimingCode::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.EventTimingCode.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& EventTimingCode::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.EventTimingCode.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* EventTimingCode::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.EventTimingCode.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
EventTimingCode::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.EventTimingCode.extension)
  return extension_;
}

// -------------------------------------------------------------------

// IdentifierUseCode

// .google.fhir.stu3.proto.IdentifierUseCode.Value value = 1;
inline void IdentifierUseCode::clear_value() {
  value_ = 0;
}
inline ::google::fhir::stu3::proto::IdentifierUseCode_Value IdentifierUseCode::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.IdentifierUseCode.value)
  return static_cast< ::google::fhir::stu3::proto::IdentifierUseCode_Value >(value_);
}
inline void IdentifierUseCode::set_value(::google::fhir::stu3::proto::IdentifierUseCode_Value value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.IdentifierUseCode.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool IdentifierUseCode::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void IdentifierUseCode::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& IdentifierUseCode::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& IdentifierUseCode::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.IdentifierUseCode.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* IdentifierUseCode::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.IdentifierUseCode.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* IdentifierUseCode::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.IdentifierUseCode.id)
  return id_;
}
inline void IdentifierUseCode::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.IdentifierUseCode.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int IdentifierUseCode::extension_size() const {
  return extension_.size();
}
inline void IdentifierUseCode::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* IdentifierUseCode::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.IdentifierUseCode.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
IdentifierUseCode::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.IdentifierUseCode.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& IdentifierUseCode::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.IdentifierUseCode.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* IdentifierUseCode::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.IdentifierUseCode.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
IdentifierUseCode::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.IdentifierUseCode.extension)
  return extension_;
}

// -------------------------------------------------------------------

// AllLanguageCode

// string value = 1;
inline void AllLanguageCode::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AllLanguageCode::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllLanguageCode.value)
  return value_.GetNoArena();
}
inline void AllLanguageCode::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.AllLanguageCode.value)
}
#if LANG_CXX11
inline void AllLanguageCode::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.stu3.proto.AllLanguageCode.value)
}
#endif
inline void AllLanguageCode::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.stu3.proto.AllLanguageCode.value)
}
inline void AllLanguageCode::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.stu3.proto.AllLanguageCode.value)
}
inline ::std::string* AllLanguageCode::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllLanguageCode.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AllLanguageCode::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllLanguageCode.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllLanguageCode::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllLanguageCode.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool AllLanguageCode::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void AllLanguageCode::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& AllLanguageCode::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& AllLanguageCode::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllLanguageCode.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* AllLanguageCode::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.AllLanguageCode.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* AllLanguageCode::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllLanguageCode.id)
  return id_;
}
inline void AllLanguageCode::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.AllLanguageCode.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int AllLanguageCode::extension_size() const {
  return extension_.size();
}
inline void AllLanguageCode::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* AllLanguageCode::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.AllLanguageCode.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
AllLanguageCode::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.AllLanguageCode.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& AllLanguageCode::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.AllLanguageCode.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* AllLanguageCode::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.AllLanguageCode.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
AllLanguageCode::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.AllLanguageCode.extension)
  return extension_;
}

// -------------------------------------------------------------------

// LanguageCode

// string value = 1;
inline void LanguageCode::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LanguageCode::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.LanguageCode.value)
  return value_.GetNoArena();
}
inline void LanguageCode::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.LanguageCode.value)
}
#if LANG_CXX11
inline void LanguageCode::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.stu3.proto.LanguageCode.value)
}
#endif
inline void LanguageCode::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.stu3.proto.LanguageCode.value)
}
inline void LanguageCode::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.stu3.proto.LanguageCode.value)
}
inline ::std::string* LanguageCode::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.LanguageCode.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LanguageCode::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.LanguageCode.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LanguageCode::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.LanguageCode.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool LanguageCode::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void LanguageCode::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& LanguageCode::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& LanguageCode::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.LanguageCode.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* LanguageCode::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.LanguageCode.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* LanguageCode::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.LanguageCode.id)
  return id_;
}
inline void LanguageCode::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.LanguageCode.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int LanguageCode::extension_size() const {
  return extension_.size();
}
inline void LanguageCode::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* LanguageCode::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.LanguageCode.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
LanguageCode::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.LanguageCode.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& LanguageCode::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.LanguageCode.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* LanguageCode::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.LanguageCode.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
LanguageCode::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.LanguageCode.extension)
  return extension_;
}

// -------------------------------------------------------------------

// MimeTypeCode

// string value = 1;
inline void MimeTypeCode::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MimeTypeCode::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MimeTypeCode.value)
  return value_.GetNoArena();
}
inline void MimeTypeCode::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.MimeTypeCode.value)
}
#if LANG_CXX11
inline void MimeTypeCode::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.fhir.stu3.proto.MimeTypeCode.value)
}
#endif
inline void MimeTypeCode::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.fhir.stu3.proto.MimeTypeCode.value)
}
inline void MimeTypeCode::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.fhir.stu3.proto.MimeTypeCode.value)
}
inline ::std::string* MimeTypeCode::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MimeTypeCode.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MimeTypeCode::release_value() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MimeTypeCode.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MimeTypeCode::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MimeTypeCode.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool MimeTypeCode::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void MimeTypeCode::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& MimeTypeCode::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& MimeTypeCode::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MimeTypeCode.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* MimeTypeCode::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.MimeTypeCode.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* MimeTypeCode::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MimeTypeCode.id)
  return id_;
}
inline void MimeTypeCode::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.MimeTypeCode.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int MimeTypeCode::extension_size() const {
  return extension_.size();
}
inline void MimeTypeCode::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* MimeTypeCode::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.MimeTypeCode.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
MimeTypeCode::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.MimeTypeCode.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& MimeTypeCode::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.MimeTypeCode.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* MimeTypeCode::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.MimeTypeCode.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
MimeTypeCode::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.MimeTypeCode.extension)
  return extension_;
}

// -------------------------------------------------------------------

// NameUseCode

// .google.fhir.stu3.proto.NameUseCode.Value value = 1;
inline void NameUseCode::clear_value() {
  value_ = 0;
}
inline ::google::fhir::stu3::proto::NameUseCode_Value NameUseCode::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.NameUseCode.value)
  return static_cast< ::google::fhir::stu3::proto::NameUseCode_Value >(value_);
}
inline void NameUseCode::set_value(::google::fhir::stu3::proto::NameUseCode_Value value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.NameUseCode.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool NameUseCode::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void NameUseCode::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& NameUseCode::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& NameUseCode::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.NameUseCode.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* NameUseCode::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.NameUseCode.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* NameUseCode::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.NameUseCode.id)
  return id_;
}
inline void NameUseCode::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.NameUseCode.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int NameUseCode::extension_size() const {
  return extension_.size();
}
inline void NameUseCode::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* NameUseCode::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.NameUseCode.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
NameUseCode::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.NameUseCode.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& NameUseCode::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.NameUseCode.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* NameUseCode::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.NameUseCode.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
NameUseCode::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.NameUseCode.extension)
  return extension_;
}

// -------------------------------------------------------------------

// QuantityComparatorCode

// .google.fhir.stu3.proto.QuantityComparatorCode.Value value = 1;
inline void QuantityComparatorCode::clear_value() {
  value_ = 0;
}
inline ::google::fhir::stu3::proto::QuantityComparatorCode_Value QuantityComparatorCode::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuantityComparatorCode.value)
  return static_cast< ::google::fhir::stu3::proto::QuantityComparatorCode_Value >(value_);
}
inline void QuantityComparatorCode::set_value(::google::fhir::stu3::proto::QuantityComparatorCode_Value value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.QuantityComparatorCode.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool QuantityComparatorCode::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void QuantityComparatorCode::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& QuantityComparatorCode::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& QuantityComparatorCode::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuantityComparatorCode.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* QuantityComparatorCode::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.QuantityComparatorCode.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* QuantityComparatorCode::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuantityComparatorCode.id)
  return id_;
}
inline void QuantityComparatorCode::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.QuantityComparatorCode.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int QuantityComparatorCode::extension_size() const {
  return extension_.size();
}
inline void QuantityComparatorCode::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* QuantityComparatorCode::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.QuantityComparatorCode.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
QuantityComparatorCode::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.QuantityComparatorCode.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& QuantityComparatorCode::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.QuantityComparatorCode.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* QuantityComparatorCode::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.QuantityComparatorCode.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
QuantityComparatorCode::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.QuantityComparatorCode.extension)
  return extension_;
}

// -------------------------------------------------------------------

// UnitsOfTimeCode

// .google.fhir.stu3.proto.UnitsOfTimeCode.Value value = 1;
inline void UnitsOfTimeCode::clear_value() {
  value_ = 0;
}
inline ::google::fhir::stu3::proto::UnitsOfTimeCode_Value UnitsOfTimeCode::value() const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.UnitsOfTimeCode.value)
  return static_cast< ::google::fhir::stu3::proto::UnitsOfTimeCode_Value >(value_);
}
inline void UnitsOfTimeCode::set_value(::google::fhir::stu3::proto::UnitsOfTimeCode_Value value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:google.fhir.stu3.proto.UnitsOfTimeCode.value)
}

// .google.fhir.stu3.proto.String id = 2;
inline bool UnitsOfTimeCode::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void UnitsOfTimeCode::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
}
inline const ::google::fhir::stu3::proto::String& UnitsOfTimeCode::_internal_id() const {
  return *id_;
}
inline const ::google::fhir::stu3::proto::String& UnitsOfTimeCode::id() const {
  const ::google::fhir::stu3::proto::String* p = id_;
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.UnitsOfTimeCode.id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::fhir::stu3::proto::String*>(
      &::google::fhir::stu3::proto::_String_default_instance_);
}
inline ::google::fhir::stu3::proto::String* UnitsOfTimeCode::release_id() {
  // @@protoc_insertion_point(field_release:google.fhir.stu3.proto.UnitsOfTimeCode.id)
  
  ::google::fhir::stu3::proto::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::google::fhir::stu3::proto::String* UnitsOfTimeCode::mutable_id() {
  
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::google::fhir::stu3::proto::String>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.UnitsOfTimeCode.id)
  return id_;
}
inline void UnitsOfTimeCode::set_allocated_id(::google::fhir::stu3::proto::String* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete id_;
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:google.fhir.stu3.proto.UnitsOfTimeCode.id)
}

// repeated .google.fhir.stu3.proto.Extension extension = 3;
inline int UnitsOfTimeCode::extension_size() const {
  return extension_.size();
}
inline void UnitsOfTimeCode::clear_extension() {
  extension_.Clear();
}
inline ::google::fhir::stu3::proto::Extension* UnitsOfTimeCode::mutable_extension(int index) {
  // @@protoc_insertion_point(field_mutable:google.fhir.stu3.proto.UnitsOfTimeCode.extension)
  return extension_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >*
UnitsOfTimeCode::mutable_extension() {
  // @@protoc_insertion_point(field_mutable_list:google.fhir.stu3.proto.UnitsOfTimeCode.extension)
  return &extension_;
}
inline const ::google::fhir::stu3::proto::Extension& UnitsOfTimeCode::extension(int index) const {
  // @@protoc_insertion_point(field_get:google.fhir.stu3.proto.UnitsOfTimeCode.extension)
  return extension_.Get(index);
}
inline ::google::fhir::stu3::proto::Extension* UnitsOfTimeCode::add_extension() {
  // @@protoc_insertion_point(field_add:google.fhir.stu3.proto.UnitsOfTimeCode.extension)
  return extension_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::fhir::stu3::proto::Extension >&
UnitsOfTimeCode::extension() const {
  // @@protoc_insertion_point(field_list:google.fhir.stu3.proto.UnitsOfTimeCode.extension)
  return extension_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace stu3
}  // namespace fhir
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::fhir::stu3::proto::Date_Precision> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::fhir::stu3::proto::Date_Precision>() {
  return ::google::fhir::stu3::proto::Date_Precision_descriptor();
}
template <> struct is_proto_enum< ::google::fhir::stu3::proto::DateTime_Precision> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::fhir::stu3::proto::DateTime_Precision>() {
  return ::google::fhir::stu3::proto::DateTime_Precision_descriptor();
}
template <> struct is_proto_enum< ::google::fhir::stu3::proto::Instant_Precision> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::fhir::stu3::proto::Instant_Precision>() {
  return ::google::fhir::stu3::proto::Instant_Precision_descriptor();
}
template <> struct is_proto_enum< ::google::fhir::stu3::proto::Time_Precision> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::fhir::stu3::proto::Time_Precision>() {
  return ::google::fhir::stu3::proto::Time_Precision_descriptor();
}
template <> struct is_proto_enum< ::google::fhir::stu3::proto::AddressTypeCode_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::fhir::stu3::proto::AddressTypeCode_Value>() {
  return ::google::fhir::stu3::proto::AddressTypeCode_Value_descriptor();
}
template <> struct is_proto_enum< ::google::fhir::stu3::proto::AddressUseCode_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::fhir::stu3::proto::AddressUseCode_Value>() {
  return ::google::fhir::stu3::proto::AddressUseCode_Value_descriptor();
}
template <> struct is_proto_enum< ::google::fhir::stu3::proto::ContactPointSystemCode_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::fhir::stu3::proto::ContactPointSystemCode_Value>() {
  return ::google::fhir::stu3::proto::ContactPointSystemCode_Value_descriptor();
}
template <> struct is_proto_enum< ::google::fhir::stu3::proto::ContactPointUseCode_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::fhir::stu3::proto::ContactPointUseCode_Value>() {
  return ::google::fhir::stu3::proto::ContactPointUseCode_Value_descriptor();
}
template <> struct is_proto_enum< ::google::fhir::stu3::proto::DaysOfWeekCode_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::fhir::stu3::proto::DaysOfWeekCode_Value>() {
  return ::google::fhir::stu3::proto::DaysOfWeekCode_Value_descriptor();
}
template <> struct is_proto_enum< ::google::fhir::stu3::proto::EventTimingCode_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::fhir::stu3::proto::EventTimingCode_Value>() {
  return ::google::fhir::stu3::proto::EventTimingCode_Value_descriptor();
}
template <> struct is_proto_enum< ::google::fhir::stu3::proto::IdentifierUseCode_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::fhir::stu3::proto::IdentifierUseCode_Value>() {
  return ::google::fhir::stu3::proto::IdentifierUseCode_Value_descriptor();
}
template <> struct is_proto_enum< ::google::fhir::stu3::proto::NameUseCode_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::fhir::stu3::proto::NameUseCode_Value>() {
  return ::google::fhir::stu3::proto::NameUseCode_Value_descriptor();
}
template <> struct is_proto_enum< ::google::fhir::stu3::proto::QuantityComparatorCode_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::fhir::stu3::proto::QuantityComparatorCode_Value>() {
  return ::google::fhir::stu3::proto::QuantityComparatorCode_Value_descriptor();
}
template <> struct is_proto_enum< ::google::fhir::stu3::proto::UnitsOfTimeCode_Value> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::fhir::stu3::proto::UnitsOfTimeCode_Value>() {
  return ::google::fhir::stu3::proto::UnitsOfTimeCode_Value_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2fstu3_2fdatatypes_2eproto

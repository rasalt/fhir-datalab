{"resourceType":"DataElement","id":"ElementDefinition","meta":{"lastUpdated":"2017-04-19T07:44:43.294+10:00"},"url":"http://hl7.org/fhir/DataElement/ElementDefinition","status":"draft","experimental":true,"stringency":"fully-specified","element":[{"id":"ElementDefinition","path":"ElementDefinition","short":"Definition of an element in a resource or extension","definition":"Captures constraints on each element within the resource, profile, or extension.","min":0,"max":"*","condition":["ele-1"],"constraint":[{"key":"ele-1","severity":"error","human":"All FHIR elements must have a @value or children","expression":"hasValue() | (children().count() > id.count())","xpath":"@value|f:*|h:div","source":"Element"},{"key":"eld-2","severity":"error","human":"Min <= Max","expression":"min.empty() or max.empty() or (max = '*') or (min <= max.toInteger())","xpath":"not(exists(f:min)) or not(exists(f:max)) or (not(f:max/@value) and not(f:min/@value)) or (f:max/@value = '*') or (number(f:max/@value) >= f:min/@value)"},{"key":"eld-5","severity":"error","human":"if the element definition has a contentReference, it cannot have type, defaultValue, fixed, pattern, example, minValue, maxValue, maxLength, or binding","expression":"contentReference.empty() or (type.empty() and defaultValue.empty() and fixed.empty() and pattern.empty() and example.empty() and minValue.empty() and maxValue.empty() and maxLength.empty() and binding.empty())","xpath":"not(exists(f:contentReference) and (exists(f:type) or exists(f:*[starts-with(local-name(.), 'value')]) or exists(f:*[starts-with(local-name(.), 'defaultValue')])  or exists(f:*[starts-with(local-name(.), 'fixed')]) or exists(f:*[starts-with(local-name(.), 'pattern')]) or exists(f:*[starts-with(local-name(.), 'example')]) or exists(f:*[starts-with(local-name(.), 'f:minValue')]) or exists(f:*[starts-with(local-name(.), 'f:maxValue')]) or exists(f:maxLength) or exists(f:binding)))"},{"key":"eld-7","severity":"error","human":"Pattern may only be specified if there is one type","expression":"pattern.empty() or (type.count() <= 1)","xpath":"not(exists(f:*[starts-with(local-name(.), 'pattern')])) or (count(f:type)<=1)"},{"key":"eld-6","severity":"error","human":"Fixed value may only be specified if there is one type","expression":"fixed.empty() or (type.count()  <= 1)","xpath":"not(exists(f:*[starts-with(local-name(.), 'fixed')])) or (count(f:type)<=1)"},{"key":"eld-11","severity":"error","human":"Binding can only be present for coded elements, string, and uri","expression":"binding.empty() or type.code.empty() or type.select((code = 'code') or (code = 'Coding') or (code='CodeableConcept') or (code = 'Quantity') or (code = 'Extension') or (code = 'string') or (code = 'uri')).exists()","xpath":"not(exists(f:binding)) or (count(f:type/f:code) = 0) or  f:type/f:code/@value=('code','Coding','CodeableConcept','Quantity','Extension', 'string', 'uri')"},{"key":"eld-8","severity":"error","human":"Pattern and value are mutually exclusive","expression":"pattern.empty() or fixed.empty()","xpath":"not(exists(f:*[starts-with(local-name(.), 'pattern')])) or not(exists(f:*[starts-with(local-name(.), 'fixed')]))"},{"key":"eld-14","severity":"error","human":"Constraints must be unique by key","expression":"constraint.select(key).isDistinct()","xpath":"count(f:constraint) = count(distinct-values(f:constraint/f:key/@value))"},{"key":"eld-13","severity":"error","human":"Types must be unique by the combination of code and profile","expression":"type.select(code&profile&targetProfile).isDistinct()","xpath":"not(exists(for $type in f:type return $type/preceding-sibling::f:type[f:code/@value=$type/f:code/@value and f:profile/@value = $type/f:profile/@value]))"},{"key":"eld-16","severity":"error","human":"sliceName must be composed of proper tokens separated by \"/\"","expression":"sliceName.empty() or sliceName.matches('^[a-zA-Z0-9\\\\/\\\\-\\\\_]+$')","xpath":"not(exists(f:sliceName/@value)) or matches(f:sliceName/@value, '^[a-zA-Z0-9\\\\/\\\\-\\\\_]+$')"},{"key":"eld-15","severity":"error","human":"default value and meaningWhenMissing are mutually exclusive","expression":"defaultValue.empty() or meaningWhenMissing.empty()","xpath":"not(exists(f:*[starts-with(local-name(.), 'fixed')])) or not(exists(f:meaningWhenMissing))"}],"mapping":[{"identity":"rim","map":"n/a"},{"identity":"dex","map":"RetrieveMetadata response"},{"identity":"v2","map":"OM1"},{"identity":"rim","map":"Observation[classCode=OBS, moodCode=DEFN]"},{"identity":"iso11179","map":"Data_Element"}]}]}
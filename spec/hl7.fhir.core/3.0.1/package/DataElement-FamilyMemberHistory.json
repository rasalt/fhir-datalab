{"resourceType":"DataElement","id":"FamilyMemberHistory","meta":{"lastUpdated":"2017-04-19T07:44:43.294+10:00"},"url":"http://hl7.org/fhir/DataElement/FamilyMemberHistory","status":"draft","experimental":true,"stringency":"fully-specified","element":[{"id":"FamilyMemberHistory","path":"FamilyMemberHistory","short":"Information about patient's relatives, relevant for patient","definition":"Significant health events and conditions for a person related to the patient relevant in the context of care for the patient.","min":0,"max":"*","constraint":[{"key":"dom-2","severity":"error","human":"If the resource is contained in another resource, it SHALL NOT contain nested Resources","expression":"contained.contained.empty()","xpath":"not(parent::f:contained and f:contained)","source":"DomainResource"},{"key":"dom-1","severity":"error","human":"If the resource is contained in another resource, it SHALL NOT contain any narrative","expression":"contained.text.empty()","xpath":"not(parent::f:contained and f:text)","source":"DomainResource"},{"key":"dom-4","severity":"error","human":"If a resource is contained in another resource, it SHALL NOT have a meta.versionId or a meta.lastUpdated","expression":"contained.meta.versionId.empty() and contained.meta.lastUpdated.empty()","xpath":"not(exists(f:contained/*/f:meta/f:versionId)) and not(exists(f:contained/*/f:meta/f:lastUpdated))","source":"DomainResource"},{"key":"dom-3","severity":"error","human":"If the resource is contained in another resource, it SHALL be referred to from elsewhere in the resource","expression":"contained.where(('#'+id in %resource.descendants().reference).not()).empty()","xpath":"not(exists(for $id in f:contained/*/@id return $id[not(ancestor::f:contained/parent::*/descendant::f:reference/@value=concat('#', $id))]))","source":"DomainResource"},{"key":"fhs-2","severity":"error","human":"Can only have estimatedAge if age[x] is present","expression":"age.exists() or estimatedAge.empty()","xpath":"exists(*[starts-with(local-name(.), 'age')]) or not(exists(f:estimatedAge))"},{"key":"fhs-3","severity":"error","human":"Not Done Reason can only be specified if NotDone is \"true\"","expression":"notDone or notDoneReason.exists().not()","xpath":"f:notDone/@value=true() or not(exists(f:notDoneReason))"},{"key":"fhs-1","severity":"error","human":"Can have age[x] or born[x], but not both","expression":"age.empty() or born.empty()","xpath":"not (*[starts-with(local-name(.), 'age')] and *[starts-with(local-name(.), 'birth')])"}],"mapping":[{"identity":"rim","map":"Entity. Role, or Act"},{"identity":"v2","map":"Not in scope for v2"},{"identity":"rim","map":"Observation[classCode=OBS, moodCode=EVN]"},{"identity":"w5","map":"clinical.general"}]}]}